<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox2.Text" xml:space="preserve">
    <value>        [DispId(148)]
        Application Application { get; }
        [DispId(118)]
        int Count { get; }

        [DispId(150)]
        dynamic Parent { get; }

        // Summary:
        //     Defines a new name. Returns a Microsoft.Office.Interop.Excel.Name object.
        //
        // Parameters:
        //   RefersTo:
        //     Optional Object. Required unless one of the other RefersTo arguments is specified.
        //     Describes what the name refers to (using A1-style notation). Note Nothing
        //     is returned if the reference does not exist.
        //
        //   Visible:
        //     Optional Object. True to define the name normally. False to define the name
        //     as a hidden name (that is, it doesn't appear in either the Define Name, Paste
        //     Name, or Goto dialog box). The default value is True.
        //
        //   ShortcutKey:
        //     Optional Object. The macro shortcut key. Must be a single letter, such as
        //     "z" or "Z". Applies only for command macros.
        //
        //   Category:
        //     Optional Object. The category of the macro or function if MacroType is 1
        //     or 2. The category is used in the Function Wizard. Existing categories can
        //     be referred to either by number (starting at 1) or by name (in the language
        //     of the macro). Microsoft Excel creates a new category if the specified category
        //     doesn't already exist.
        //
        //   Name:
        //     Optional Object. Required if NameLocal isn't specified. The text to use as
        //     the name. Names cannot include spaces and cannot look like cell references.
        //
        //   MacroType:
        //     Optional Object. The macro type, as shown in the following table.ValueMeaning1User-defined
        //     function (Function procedure)2Macro (also known as Sub procedure)3 or omittedNone
        //     (that is, the name doesn't refer to a user-defined function or macro)
        //
        //   RefersToR1C1Local:
        //     Optional Object. Required unless one of the other RefersTo arguments is specified.
        //     Describes what the name refers to (in the language of the user, using R1C1-style
        //     notation).
        //
        //   RefersToLocal:
        //     Optional Object. Required unless one of the other RefersTo arguments is specified.
        //     Describes what the name refers to (in the language of the user, using A1-style
        //     notation).
        //
        //   NameLocal:
        //     Optional Object. Required if Name isn't specified. The text to use as the
        //     name (in the language of the user). Names cannot include spaces and cannot
        //     look like cell references.
        //
        //   CategoryLocal:
        //     Optional Object. Required if Category isn't specified. Text identifying the
        //     category of a custom function in the language of the user.
        //
        //   RefersToR1C1:
        //     Optional Object. Required unless one of the other RefersTo arguments is specified.
        //     Describes what the name refers to (using R1C1-style notation).
        [DispId(181)]
        Name Add(object Name = Type.Missing, object RefersTo = Type.Missing, object Visible = Type.Missing, object MacroType = Type.Missing, object ShortcutKey = Type.Missing, object Category = Type.Missing, object NameLocal = Type.Missing, object RefersToLocal = Type.Missing, object CategoryLocal = Type.Missing, object RefersToR1C1 = Type.Missing, object RefersToR1C1Local = Type.Missing);

        //
        // Summary:
        //     Returns a single Microsoft.Office.Interop.Excel.Name object from a Microsoft.Office.Interop.Excel.Names
        //     collection.
        //
        // Parameters:
        //   RefersTo:
        //     Optional Object. What the name refers to. You use this argument to identify
        //     a name by what it refers to.
        //
        //   IndexLocal:
        //     Optional Object. The name of the defined name in the language of the user.
        //     No names will be translated if you use this argument.
        //
        //   Index:
        //     Optional Object. The name or number of the defined name to be returned.
        [DispId(170)]
        Name Item(object Index = Type.Missing, object IndexLocal = Type.Missing, object RefersTo = Type.Missing);
</value>
  </data>
  <metadata name="Column1.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column2.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column3.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column4.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column5.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column6.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column7.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column8.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column9.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <metadata name="Column10.UserAddedColumn" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>