[options]
enabled=0
caption=
export=1
version=90000
errHndl=3
email=
updtLast=43124
updtPeriod=0
proxySrv=
proxyPort=
searchURL=http://www.google.com/search?q=%MSG%&lr=lang_%LANG%
menuData=
noPerfWarn=0
hotAssist=220
hotRefer=270
hotStruct=27B
hotBird=17B
hotExplorer=257
hotDDL=00
hotTable=01
hotExport=345
hotExec=378
hotExecOn=678
hotSynCheck=278
hotSpell=376
hotFormat=27A
hotFormatCust=37A
hotDiff=343
hotBrackets=342
hotBracketsSel=00
hotComment=2BD
hotComment2=2BF
hotUncomment=2DC
hotBmAdd=412
hotBmJump=211
hotShowDep=344
hotSelStmt=648
hotExeSelStmt=474
hotSearchWeb=7B
hotExecHist=47B
hotSearchCode=00
hotRecentDoc=230
hotRefreshCache=377
hotCloseAll=352
hotTarget=374
aiMaxItems=5
aiMaxDist=2
aiMaxKeys=5
aiMinKeys=2
aiSplit=1
aiSmartMax=20
aiMinLength=3
aiIgnoreLst=ctxsysdbsnmpguestifssysinformation_schemamastermdsysmodelmsdbmtssysmysqlnullidolapsysordpluginsordsyspg_catalogpgagentqsysqsys2rmansybsecuritysybsystemdbsybsystemprocssyssyssyscatsysfunsysibmsysibmadmsysmansysopsysprocsysstatsystemsystoolstempdbwksysdbonull
spell_lang=0904
fltDbType=2
tblfont.name=417269616C
tblfont.size=8
tblfont.color=0
tblfont.style=0

[targets]
enabled=1
caption=
export=1
count=28

[targets.1]
enabled=0
caption=DB Tools for Oracle
export=1
exeName=db_tools.exe
exeTitle=
clsName=LEdit32
dcType=1
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=3
assist=Oracle
rules=PL/SQL Default Style
snips=PL/SQL Snippets
rfRules=PL/SQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=351
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.2]
enabled=0
caption=Delphi
export=1
exeName=bds.exe,delphi32.exe,bcb.exe
exeTitle=
clsName=TsaUnicodeEdit
dcType=0
integr=2
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=5
assist=SQL Server
rules=T-SQL Default Style
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.3]
enabled=0
caption=Eclipse
export=1
exeName=eclipse.exe
exeTitle=
clsName=SWT_Window%
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=7
assist=DB2 UDB
rules=DB2 SQL Default Style
snips=DB2 SQL Snippets
rfRules=DB2 UDB Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.4]
enabled=1
caption=IBM Data Studio
export=1
exeName=datastudio.exe,javaw.exe
exeTitle=% - IBM Data Studio
clsName=SWT_Window%
dcType=0
integr=2
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=7
assist=DB2 UDB
rules=DB2 SQL Default Style
snips=DB2 SQL Snippets
rfRules=DB2 UDB Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000C800C8000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.5]
enabled=1
caption=MS Enterprise Manager
export=1
exeName=mmc.exe
exeTitle=SQL Server Enterprise Manager%
clsName=DimensionEdit,Edit,RichEdit20W
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=1
tabSize=4
handleExc=1
sqlRef=5
assist=SQL Server
rules=T-SQL Custom Style 1
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.6]
enabled=1
caption=MS Management Studio
export=1
exeName=SqlWb.exe,ssmsee.exe,ssms.exe
exeTitle=%Microsoft SQL Server%
clsName=VsTextEditPane
dcType=2
integr=2
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=1
tabSize=4
handleExc=1
sqlRef=5
assist=SQL Server
rules=T-SQL Custom Style 1
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=350
hotTable=344
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=92220
statist.sa=1278466
statist.min=8384
panHeight=0000000000000000C800C8000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=yyyy-MM-ddHH:mm:ssCHR(%)||YNN1000NR:\YY
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.7]
enabled=1
caption=MS Query Analyzer
export=1
exeName=isqlw.exe
exeTitle=
clsName=DimensionEdit
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=1
tabSize=4
handleExc=1
sqlRef=5
assist=SQL Server
rules=T-SQL Custom Style 1
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.8]
enabled=1
caption=MS Visual Studio
export=1
exeName=devenv.exe,v?express.exe,v??express.exe
exeTitle=
clsName=VsTextEditPane,RichEdit20W
dcType=2
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=1
tabSize=4
handleExc=1
sqlRef=9
assist=SQL Server
rules=T-SQL Custom Style 1
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=25
statist.sa=0
statist.min=3
panHeight=1201D600D600D600C800C8000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.9]
enabled=0
caption=MySQL Query Browser
export=1
exeName=MySQLQueryBrowser.exe
exeTitle=
clsName=TSQLEditor,TScriptEditor
dcType=3
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=6
assist=MySQL 5
rules=MySQL Default Style
snips=MySQL Snippets
rfRules=MySQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.10]
enabled=1
caption=MySQL Workbench
export=1
exeName=MySQLWorkbench.exe
exeTitle=
clsName=WindowsForms%.Scintilla.app.%
dcType=3
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=6
assist=MySQL 5
rules=MySQL Default Style
snips=MySQL Snippets
rfRules=MySQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=351
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=1201D600D600D600C800C8000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=7
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.11]
enabled=0
caption=Notepad
export=1
exeName=notepad.exe
exeTitle=
clsName=Edit
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=0
assist=Sybase ASE
rules=T-SQL Default Style
snips=T-SQL Snippets
rfRules=Sybase ASE Refactoring 
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=3401D600D600D600C80029010000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=2
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.12]
enabled=0
caption=Notepad++
export=1
exeName=notepad++.exe
exeTitle=
clsName=Scintilla
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=0
assist=Sybase ASE
rules=T-SQL Default Style
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=1201D600D600D600B100C8000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.13]
enabled=0
caption=PL/SQL Developer
export=1
exeName=plsqldev.exe
exeTitle=
clsName=TSyntaxMemo
dcType=1
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=3
assist=Oracle
rules=PL/SQL Default Style
snips=PL/SQL Snippets
rfRules=PL/SQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.14]
enabled=0
caption=pgAdmin III
export=1
exeName=pgAdmin3.exe
exeTitle=
clsName=wxWindowClassNR
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=0
assist=PostgreSQL
rules=PostgreSQL Default Style
snips=PostgreSQL Snippets
rfRules=PostgreSQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.15]
enabled=0
caption=Toad for MySQL
export=1
exeName=Toad.exe
exeTitle=Toad for MySQL%
clsName=WindowsForms%.Window.%
dcType=2
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=6
assist=MySQL 5
rules=MySQL Default Style
snips=MySQL Snippets
rfRules=MySQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.16]
enabled=0
caption=Toad for Oracle
export=1
exeName=Toad.exe
exeTitle=Toad%
clsName=TAdvToadSyntaxMemo,TToadSyntaxMemo
dcType=1
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=3
assist=Oracle
rules=PL/SQL Default Style
snips=PL/SQL Snippets
rfRules=PL/SQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.17]
enabled=0
caption=Toad for DB2
export=1
exeName=Toad.exe
exeTitle=Toad for DB2%
clsName=WindowsForms%.Window.%
dcType=2
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=7
assist=DB2 UDB
rules=DB2 SQL Default Style
snips=DB2 SQL Snippets
rfRules=DB2 UDB Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.18]
enabled=0
caption=Toad for SQL Server
export=1
exeName=Toad.exe
exeTitle=Toad for SQL Server%
clsName=WindowsForms%.Window.%
dcType=2
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=5
assist=SQL Server
rules=T-SQL Default Style
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.19]
enabled=0
caption=MS Access
export=1
exeName=msaccess.exe
exeTitle=
clsName=OKttbx
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=4
assist=MS Access
rules=T-SQL Default Style
snips=T-SQL Snippets
rfRules=
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.20]
enabled=0
caption=PowerBuilder
export=1
exeName=pb??.exe,pb???.exe
exeTitle=
clsName=wedit
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=9
assist=Sybase ASA
rules=T-SQL Default Style
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.21]
enabled=0
caption=SQL Plus W
export=1
exeName=sqlplusw.exe
exeTitle=
clsName=SqlplusWClass
dcType=1
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=3
assist=Oracle
rules=PL/SQL Default Style
snips=PL/SQL Snippets
rfRules=PL/SQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.22]
enabled=1
caption=UltraEdit
export=1
exeName=uedit32.exe
exeTitle=
clsName=EditControl
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=7
assist=DB2 UDB
rules=DB2 SQL Default Style
snips=DB2 SQL Snippets
rfRules=DB2 UDB Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=13
statist.sa=0
statist.min=6
panHeight=0000000000000000C800C8000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.23]
enabled=1
caption=SQL Assistant Code Editor
export=1
exeName=sqleditor.exe,sqleditor64.exe
exeTitle=SQL Editor%
clsName=TsaSyntaxMemo*
dcType=0
integr=2
integrTop=4
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=0
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=18
assist=PostgreSQL
rules=PostgreSQL Default Style
snips=PostgreSQL Snippets
rfRules=PostgreSQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=74
hotExecOn=00
hotSynCheck=174
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=474
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=85015701D600D600250109020000
pinOrder=05
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=0
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=1
menuIconPos=0
autoCloseRes=0

[targets.24]
enabled=1
caption=SQL Assistant Code Editor (Standard)
export=1
exeName=sqleditor_std.exe
exeTitle=
clsName=TsaUnicodeEdit
dcType=0
integr=2
integrTop=4
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=0
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=25
assist=SQLite
rules=SQLite Default Style
snips=SQLite Snippets
rfRules=SQLite Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=74
hotExecOn=00
hotSynCheck=174
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=05
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=2
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=1
menuIconPos=0
autoCloseRes=0

[targets.25]
enabled=1
caption=Oracle JDeveloper
export=1
exeName=sqleditor.exe
exeTitle=
clsName=TsaUnicodeEdit
dcType=1
integr=2
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=3
assist=Oracle
rules=PL/SQL Default Style
snips=PL/SQL Snippets
rfRules=PL/SQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=17
statist.sa=154
statist.min=1
panHeight=1201D600D600D600C800C8000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.26]
enabled=1
caption=Oracle SQL Developer
export=1
exeName=sqleditor.exe
exeTitle=
clsName=TsaUnicodeEdit
dcType=1
integr=2
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=3
assist=Oracle
rules=PL/SQL Default Style
snips=PL/SQL Snippets
rfRules=PL/SQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=17
statist.sa=154
statist.min=1
panHeight=1201D600D600D600C800C8000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.27]
enabled=1
caption=SQL Server Report Builder
export=1
exeName=MSReportBuilder.exe
exeTitle=
clsName=WindowsForms%.EDIT.app%
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=0
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=9
assist=SQL Server
rules=T-SQL Default Style
snips=T-SQL Snippets
rfRules=SQL Server Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=0
commMeth=0
execKey=0
storeStates=0
maxHistTime=0
docMngAct=0
pmtRestore=0
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=0
docMngOpen=0
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[targets.28]
enabled=0
caption=MySQL HoneyMonitor
export=1
exeName=HoneyMonitor%
exeTitle=
clsName=ATL:%
dcType=0
integr=0
integrTop=0
hotTrack=1
jumpBrack=2
hiliBrack=FFFF
hiliNames=DDFFDD
hiliInsVal=FFE0E0
selKey=0
timeout=60
ctxHint=5
synBar=1
autoSel=1
smartUndo=1
smartHome=1
varHint=1
tabReplace=0
tabSize=4
handleExc=1
sqlRef=6
assist=MySQL 5
rules=MySQL Default Style
snips=MySQL Snippets
rfRules=MySQL Refactoring
autoConn=
scsPrj=
hotAssist=00
hotRefer=00
hotStruct=00
hotBird=00
hotExplorer=00
hotDDL=00
hotTable=00
hotExport=00
hotExec=00
hotExecOn=00
hotSynCheck=00
hotSpell=00
hotFormat=00
hotFormatCust=00
hotDiff=00
hotBrackets=00
hotBracketsSel=00
hotComment=00
hotComment2=00
hotUncomment=00
hotBmAdd=00
hotBmJump=00
hotShowDep=00
hotSelStmt=00
hotExeSelStmt=00
hotSearchWeb=00
hotExecHist=00
hotSearchCode=00
hotRecentDoc=00
hotRefreshCache=00
hotCloseAll=00
hotTarget=00
statist.active=1
statist.user=0
statist.sa=0
statist.min=0
panHeight=0000000000000000000000000000
pinOrder=00
bmFlags=FFFFFFFF
exportFmt=
tmpAuto=0
snipChar=0
fileOpen=1
commMeth=0
execKey=0
storeStates=15
maxHistTime=180
docMngAct=1
pmtRestore=2
docFileMask=
keepUnsaved=1
restoreLast=1
docMngSave=1
docMngOpen=1
docSavePos=1
docSaveBM=1
docSaveTools=1
indAssist=0
menuIconPos=0
autoCloseRes=0

[assists]
enabled=0
caption=
export=1
count=14

[assists.1]
enabled=0
caption=Oracle
export=1
dbType=0
addDelim=0
addAlias=1
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]abs(n NUMBER)NUMBERacos(n NUMBER)NUMBERadd_months(date DATE,count INTEGER)DATEappendchildxml(instance XMLType,XPath_string VARCHAR2,value_expr XMLType,[namespace_string] VARCHAR2)XMLTypeasciistr(str VARCHAR2)VARCHAR2ascii(char VARCHAR2)NUMBERasin(n NUMBER)NUMBERatan(n NUMBER)NUMBERatan2(n1 NUMBER,n2 NUMBER)NUMBERavg([DISTINCT|ALL] expr NUMBER)NUMBERbfilename('directory' VARCHAR2,'filename' VARCHAR2)BFILEbin_to_num(expr NUMBER)NUMBERbitand(expr1 NUMBER,expr2 NUMBER)NUMBERcardinality(nested_table)NUMBERcast(expr AS any-type )any-typeceil(n NUMBER)NUMBERchartorowid(str VARCHAR2)ROWIDchr(n [USING NCHAR_CS] NUMBER)CHARcluster_id(model)NUMBERcluster_probability(model,[cluster_id] NUMBER)NUMBERcluster_set(model,[topN] INTEGER,[cutoff] INTEGER)VARRAYcoalesce(expr1 any-type,[exprN] any-type)NUMBERcollect(column)nested_tablecompose(str VARCHAR2)NVARCHAR2concat(str1 VARCHAR2,str2 VARCHAR2)VARCHAR2convert(str VARCHAR2,dest_char_set VARCHAR2,[source_char_set] VARCHAR2)VARCHAR2corr(expr1 NUMBER,expr2 NUMBER)NUMBERcorr_k(expr1 NUMBER,expr2 NUMBER,[COEFFICIENT])NUMBERcorr_s(expr1 NUMBER,expr2 NUMBER,[COEFFICIENT])NUMBERcos(n NUMBER)NUMBERcosh(n NUMBER)NUMBERcount({*|[DISTINCT|ALL] expr any-type} )NUMBERcovar_pop(expr1 NUMBER,expr2 NUMBER)NUMBERcovar_samp(expr1 NUMBER,expr2 NUMBER)NUMBERcume_dist([expr1] any-type,[exprN] any-type)NUMBERcurrent_date()DATEcurrent_timestamp([precision] NUMBER)TIMESTAMPcv([dimension_column] any-type)any-typedbtimezone()VARCHAR2decode(expr any-type,search any-type,result any-type,[default] any-type)any-typedecompose(string [CANONICAL|COMPATIBILITY] VARCHAR2)NVARCHAR2deletexml(instance XMLType,XPath_string VARCHAR2,[namespace_string] VARCHAR2)XMLTypedense_rank([expr] NUMBER)NUMBERdepth(correlation NUMBER)NUMBERderef(expr REF)OBJECTdump(expr VARCHAR2,[return_fmt] NUMBER,[start_position] NUMBER,[length] NUMBER)VARCHAR2empty_blob()BLOBempty_clob()CLOBequals_path(column,path VARCHAR2,[correlation] INTEGER)NUMBERexistsnode(instance XMLType,XPath_string VARCHAR2,[namespace_string] VARCHAR2)NUMBERexp(n NUMBER)NUMBERextract(YEAR FROM expr DATETIME)VARCHAR2extract(MONTH FROM expr DATETIME)VARCHAR2extract(DAY FROM expr DATETIME)VARCHAR2extract(HOUR FROM expr DATETIME)VARCHAR2extract(MINUTE FROM expr DATETIME)VARCHAR2extract(SECOND FROM expr DATETIME)VARCHAR2extract(TIMEZONE_HOUR FROM expr DATETIME)VARCHAR2extract(TIMEZONE_MINUTE FROM expr DATETIME)VARCHAR2extract(TIMEZONE_REGION FROM expr DATETIME)VARCHAR2extract(TIMEZONE_ABBR FROM expr DATETIME)VARCHAR2extract(instance XMLType,XPath_string VARCHAR2,[namespace_string] VARCHAR2)XMLTypeextractvalue(instance XMLType,XPath_string VARCHAR2,[namespace_string] VARCHAR2)VARCHAR2feature_id(model)NUMBERfeature_set(model,[topN] NUMBER,[cutoff] NUMBER)VARRAYfeature_value(model,[feature_id] NUMBER)NUMBERfirst_value(expr [IGNORE NULLS] any-type)any-typefloor(n NUMBER)NUMBERfrom_tz(value TIMESTAMP,time_zone_value VARCHAR2)VARCHAR2greatest(expr1 any-type,[exprN] any-type)any-typegroup_id()NUMBERgrouping(expr any-type)NUMBERgrouping_id(expr1 any-type,[exprN] any-type)NUMBERhextoraw(str VARCHAR2)RAWinitcap(str VARCHAR2)VARCHAR2insertchildxml(instance XMLType,XPath_string VARCHAR2,child_expr VARCHAR2,value_expr XMLType,[namespace_string] VARCHAR2)XMLTypeinsertxmlbefore(instance XMLType,XPath_string VARCHAR2,value_expr XMLType,[namespace_string] VARCHAR2)XMLTypeinstr(string VARCHAR2,substring VARCHAR2,[position] INTEGER,[occurrence] INTEGER)INTEGERinstrb(string VARCHAR2,substring VARCHAR2,[position] INTEGER,[occurrence] INTEGER)INTEGERinstrc(string VARCHAR2,substring VARCHAR2,[position] INTEGER,[occurrence] INTEGER)INTEGERinstr2(string VARCHAR2,substring VARCHAR2,[position] INTEGER,[occurrence] INTEGER)INTEGERinstr4(string VARCHAR2,substring VARCHAR2,[position] INTEGER,[occurrence] INTEGER)INTEGERiteration_number()NUMBERlag(value_expr any-type,[offset] NUMBER,[default] any-type)any-typelast_day(date_expr DATE)DATElast_value(expr [IGNORE NULLS] any-type)any-typelead(value_expr any-type,[offset] NUMBER,[default] any-type)any-typeleast(expr1 any-type,[exprN] any-type)any-typelength(str VARCHAR2)NUMBERlengthb(str VARCHAR2)NUMBERlengthc(str VARCHAR2)NUMBERlength2(str VARCHAR2)NUMBERlength4(str VARCHAR2)NUMBERln(n NUMBER)NUMBERlnnvl(condition BOOLEAN)BOOLEANlocaltimestamp([precision] NUMBER)TIMESTAMPlog(n1 NUMBER,n2 NUMBER)NUMBERlower(str VARCHAR2)VARCHAR2lpad(expr1 VARCHAR2,n NUMBER,[expr2] VARCHAR2)VARCHAR2ltrim(str VARCHAR2,[set] VARCHAR2)VARCHAR2make_ref(table_or_view,key1 NUMBER,[keyN] NUMBER)REFmax([DISTINCT|ALL] expr any-type)any-typemedian(expr any-type)any-typemin([DISTINCT|ALL] expr any-type)any-typemod(n1 NUMBER,n2 NUMBER)NUMBERmonths_between(date1 DATE,date2 DATE)NUMBERnanvl(n1 NUMBER,n2 NUMBER)NUMBERnchr(chr_code NUMBER)NVARCHAR2new_time(expr DATE,timezone1 VARCHAR2,timezone2 VARCHAR2)DATEnext_day(expr DATE,weekday VARCHAR2)DATEnls_charset_decl_len(byte_count NUMBER,'charset_id' VARCHAR2)NUMBERnls_charset_id(str VARCHAR2)NUMBERnls_charset_name(charset_id NUMBER)VARCHAR2nls_initcap(str VARCHAR2,['nlsparam'] VARCHAR2)VARCHAR2nls_lower(str VARCHAR2,['nlsparam'] VARCHAR2)VARCHAR2nlssort(str VARCHAR2,['nlsparam'] VARCHAR2)RAWnls_upper(str VARCHAR2,['nlsparam'] VARCHAR2)VARCHAR2ntile(expr any-type)any-typenullif(expr1 any-type,expr2 any-type)any-typenumtodsinterval(n NUMBER,'interval_unit' VARCHAR2)INTERVAL DAY TO SECONDnumtodsinterval(n NUMBER,'interval_unit' VARCHAR2)INTERVAL YEAR TO MONTHnvl(expr1 any-type,expr2 any-type)any-typenvl2(expr1 any-type,expr2 any-type,expr3 any-type)any-typeora_hash(expr any-type,[max_bucket] NUMBER,[seed_value] NUMBER)NUMBERpath(correlation INTEGER)VARCHAR2percent_rank([expr1] any-type,[exprN] any-type)NUMBERpercentile_cont(expr NUMBER)NUMBERpercentile_disc(expr NUMBER)NUMBERpower(n1 NUMBER,n2 NUMBER)NUMBERpowermultiset(expr nested_table)nested_tablepowermultiset_by_cardinality(expr nested_table,cardinality INTEGER)nested_tableprediction(model [COST MODEL] model)NUMBERprediction_cost(model,[class] COST MODEL NUMBER)NUMBERprediction_details(model)NUMBERprediction_probability(model,[class] NUMBER)NUMBERprediction_set(model,[bestN] INTEGER,[cutoff] INTEGER)VARRAYpresentnnv(cell_reference any-type,expr1 any-type,expr2 any-type)any-typepresentv(cell_reference any-type,expr1 any-type,expr2 any-type)any-typeprevious(cell_reference any-type)any-typerank([expr1] any-type,[exprN] any-type)NUMBERratio_to_report(expr any-type)any-typerawtohex(str RAW)VARCHAR2rawtonhex(str RAW)NVARCHAR2ref(correlation_variable)REFreftohex(expr REF)VARCHAR2regexp_instr(source_char VARCHAR2,pattern VARCHAR2,[position] INTEGER,[occurrence] INTEGER,[return_option] VARCHAR2,[match_parameter] CHAR)VARCHAR2regexp_replace(source_char VARCHAR2,pattern VARCHAR2,[replace_string] VARCHAR2,[position] INTEGER,[occurrence] INTEGER,[match_parameter] CHAR)VARCHAR2regexp_substr(source_char VARCHAR2,pattern VARCHAR2,[position] INTEGER,[occurrence] INTEGER,[match_parameter] CHAR)VARCHAR2regr_slope(expr1 NUMBER,expr2 NUMBER)NUMBERregr_intercept(expr1 NUMBER,expr2 NUMBER)NUMBERregr_count(expr1 NUMBER,expr2 NUMBER)NUMBERregr_r2(expr1 NUMBER,expr2 NUMBER)NUMBERregr_avgx(expr1 NUMBER,expr2 NUMBER)NUMBERregr_avgy(expr1 NUMBER,expr2 NUMBER)NUMBERregr_sxx(expr1 NUMBER,expr2 NUMBER)NUMBERregr_syy(expr1 NUMBER,expr2 NUMBER)NUMBERregr_sxy(expr1 NUMBER,expr2 NUMBER)NUMBERremainder(n1 NUMBER,n2 NUMBER)NUMBERreplace(str VARCHAR2,search_string VARCHAR2,[replacement_string] VARCHAR2)VARCHAR2round(n NUMBER,[places] INTEGER)NUMBERround(d DATE,[fmt] VARCHAR2)DATErow_number()NUMBERrowidtochar(expr ROWID)VARCHAR2rowidtoNCHAR(expr ROWID)NVARCHAR2rpad(expr1 VARCHAR2,n NUMBER,[expr2] VARCHAR2)VARCHAR2rtrim(str VARCHAR2,[set] VARCHAR2)VARCHAR2scn_to_timestamp(scn NUMBER)TIMESTAMPsessiontimezone()VARCHAR2set(nested_table)nested_tablesign(n NUMBER)NUMBERsin(n NUMBER)NUMBERsinh(n NUMBER)NUMBERsoundex(str VARCHAR2)VARCHAR2sqrt(n NUMBER)NUMBERstats_binomial_test(expr1 any-type,expr2 any-type,p NUMBER,[TWO_SIDED_PROB|EXACT_PROB])any-typestats_crosstab(expr1 any-type,expr2 any-type)any-typestats_f_test(expr1 any-type,expr2 any-type)any-typestats_ks_test(expr1 any-type,expr2 any-type,[STATISTIC|SIG])any-typestats_mode(expr any-type)any-typestats_mw_test(expr1 any-type,expr2 any-type,[STATISTIC|U_STATISTIC])any-typestats_one_way_anova(expr1 any-type,expr2 any-type)any-typestats_t_test_indep(expr1 any-type,expr2 any-type)any-typestats_t_test_indepu(expr1 any-type,expr2 any-type)any-typestats_t_test_one(expr1 any-type,expr2 any-type)any-typestats_t_test_paired(expr1 any-type,expr2 any-type)any-typestats_wsr_test(expr1 any-type,expr2 any-type)any-typestddev([DISTINCT|ALL] expr NUMBER)NUMBERstddev_pop(expr NUMBER)NUMBERstddev_samp(expr NUMBER)NUMBERsubstr(str VARCHAR2,position INTEGER,[substring_length] INTEGER)VARCHAR2substrb(str VARCHAR2,position INTEGER,[substring_length] INTEGER)VARCHAR2substrc(str VARCHAR2,position INTEGER,[substring_length] INTEGER)VARCHAR2substr2(str VARCHAR2,position INTEGER,[substring_length] INTEGER)VARCHAR2substr4(str VARCHAR2,position INTEGER,[substring_length] INTEGER)VARCHAR2sum([DISTINCT|ALL] expr NUMBER)NUMBERsys_connect_by_path(column VARCHAR2,str VARCHAR2)VARCHAR2sys_context('namespace' VARCHAR2,'parameter' VARCHAR2,[length] NUMBER)VARCHAR2sys_dburigen(column,['text()'])VARCHAR2sys_extract_utc(datetime_with_timezone TIMESTAMP)TIMESTAMPsys_guid()RAWsys_typeid(object_type_value)NUMBERsys_xmlagg(expr XMLType,[fmt] XMLFormat)XMLTypesys_xmlgen(expr XMLType,[fmt] XMLFormat)XMLTypesysdate()DATEsystimestamp()TIMESTAMPtan(n NUMBER)NUMBERtanh(n NUMBER)NUMBERtimestamp_to_scn(expr TIMESTAMP)NUMBERto_binary_double(expr NUMBER,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)BINARY_DOUBLEto_binary_float(expr NUMBER,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)BINARY_FLOATto_char(NCHAR NCHAR)VARCHAR2to_char(clob CLOB)VARCHAR2to_char(nclob nclob)VARCHAR2to_char(expr DATE,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)VARCHAR2to_char(expr NUMBER,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)VARCHAR2to_clob(expr VARCHAR2)CLOBto_date(expr VARCHAR2,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)DATEto_dsinterval(str VARCHAR2,['nlsparam'] VARCHAR2)INTERVAL DAY TO SECONDto_lob(column long)LOBto_multi_byte(str VARCHAR2)NVARCHAR2to_nchar(NCHAR NCHAR)NVARCHAR2to_nchar(clob CLOB)NVARCHAR2to_nchar(nclob nclob)NVARCHAR2to_nchar(expr DATE,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)NVARCHAR2to_nchar(expr NUMBER,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)NVARCHAR2to_nclob(expr VARCHAR2)nclobto_number(expr VARCHAR2,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)NUMBERto_single_byte(str NVARCHAR2)VARCHAR2to_timestamp(expr VARCHAR2,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)TIMESTAMPto_timestamp_tz(expr VARCHAR2,[fmt] VARCHAR2,['nlsparam'] VARCHAR2)TIMESTAMP WITH TIME ZONEto_yminterval(str VARCHAR2)INTERVAL YEAR TO MONTHtranslate(expr VARCHAR2,from_string VARCHAR2,to_string VARCHAR2)VARCHAR2translate(char USING {CHAR_CS|NCHAR_CS} VARCHAR2)VARCHAR2treat(expr AS [REF] type any-type)any-typetrim(trim_source VARCHAR2)VARCHAR2trim(LEADING [trim_character] FROM trim_source VARCHAR2)VARCHAR2trim(TRAILING [trim_character] FROM trim_source VARCHAR2)VARCHAR2trim(BOTH [trim_character] FROM trim_source VARCHAR2)VARCHAR2trunc(n1 NUMBER,[n2] NUMBER)NUMBERtrunc(d DATE,[fmt] VARCHAR2)DATEtz_offset('time_zone_name' VARCHAR2)VARCHAR2tz_offset('{ + | - } hh:mi' VARCHAR2)VARCHAR2tz_offset(SESSIONTIMEZONE)VARCHAR2tz_offset(DBTMEZONE)VARCHAR2uid()INTEGERunder_path(column,path VARCHAR2,[correlation] INTEGER)NUMBERunistr(str VARCHAR2)NVARCHAR2updatexml(instance XMLType,XPath_string VARCHAR2,value_expr XMLType,[namespace_string] VARCHAR2)XMLTypeupper(str VARCHAR2)VARCHAR2user()VARCHAR2userenv('parameter_name' VARCHAR2)VARCHAR2value(correlation_variable any-type)OBJECTvar_pop(expr any-type)any-typevar_samp(expr any-type)any-typevariance([DISTINCT|ALL] expr NUMBER)NUMBERvsize(expr any-type)NUMBERwidth_bucket(expr NUMBER,min_value NUMBER,max_value NUMBER,num_buckets NUMBER)NUMBERxmlagg(instance XMLType)XMLTypexmlcdata(expr VARCHAR2)VARCHAR2xmlcolattval(expr VARCHAR2)VARCHAR2xmlcomment(expr VARCHAR2)VARCHAR2xmlconcat(instance1 XMLType,[instanceN] XMLType)XMLTypexmlelement([NAME] identifier VARCHAR2,[XML_attributes_clause],[expr] VARCHAR2)XMLTypexmlforest(expr1 VARCHAR2,[exprN] VARCHAR2)VARCHAR2xmlparse(expr VARCHAR2)VARCHAR2xmlpi([NAME] identifier VARCHAR2,[expr] VARCHAR2)VARCHAR2xmlquery(XQuery_string VARCHAR2)VARCHAR2xmlroot(expr VARCHAR2,VERSION value_expr VARCHAR2,[STANDALONE {YES|NO|NO VALUE}] )VARCHAR2xmlsequence(instance XMLType)XMLTypexmlserialize({DOCUMENT|CONTENT} expr [AS any-type] VARCHAR2)VARCHAR2xmltable(XQuery_string VARCHAR2)TABLExmltransform(instance1 XMLType,instance2 XMLType)XMLType
batchDelim=/
intelSql=1
kwShowAfter=2
qtDatabases=
qtSchemas=Schemas (Oracle)
qtObjects=Objects (Oracle)
qtColumns=Columns (Oracle) + Keys
qtArguments=Arguments (Oracle)
qtPackage=Packages (Oracle)
qtJoins=Joins (Oracle)
qtDDL=DDL Code (Oracle)
qtSynonym=Synonyms (Oracle)
qtContext=Context (Oracle)
qtObjType=Object Types (Oracle)
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000000000000000000000000000000010000000000000000000001000000
objOrder=1A1905180A031E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
useDBMS_OUTPUT=1
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.2]
enabled=1
caption=SQL Server
export=1
dbType=1
addDelim=108
addAlias=0
addSchema=3
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]    -- Aggregate Functions  avg([ALL|DISTINCT] expression NUMERIC)NUMERIC;Average of the values in a group.  checksum(*|expression)INTEGER;Checksum value computed over a row of a table, or over a list of expressions.  checksum_agg([ALL|DISTINCT] expression INTEGER)INTEGER;Checksum of the values in a group.  count(*|[ALL|DISTINCT]expression)INTEGER;Number of items in a group.  count_big(*|[ALL|DISTINCT]expression)BIGINT;Number of items in a group.  grouping(column)INTEGER;Returns value of 1 when the row is added by either the CUBE or ROLLUP operator, or 0 when the row is not the result of CUBE or ROLLUP.  max([ALL|DISTINCT]expression)expression_type;Maximum value in the expression.  min([ALL|DISTINCT]expression)expression_type;Minimum value in the expression.  sum([ALL|DISTINCT] expression NUMERIC)NUMERIC;Sum of all the values, or only the DISTINCT values, in the expression.  stdev([ALL|DISTINCT] expression NUMERIC)FLOAT;Statistical standard deviation of all values in the specified expression.  stdevp([ALL|DISTINCT] expression NUMERIC)FLOAT;Statistical standard deviation for the population for all values in the specified expression.  var([ALL|DISTINCT] expression NUMERIC)FLOAT;Statistical variance of all values in the specified expression.  varp([ALL|DISTINCT] expression NUMERIC)FLOAT;Statistical variance for the population for all values in the specified expression.    -- Cryptographic Functions  asymkey_id('Asym_Key_Name' VARCHAR)INTEGER;ID of an asymmetric key.  cert_id('cert_name' VARCHAR)INTEGER;ID of a certificate.  certproperty(Cert_ID INTEGER,'PropertyName' VARCHAR)SQL_VARIANT;Value of a specified certificate property.  decryptbykey(ciphertext VARBINARY,[add_authenticator] INTEGER,[authenticator] SYSNAME)VARBINARY;Decrypts data by using a symmetric key.  decryptbypassphrase(passphrase VARCHAR,ciphertext VARCHAR,[add_authenticator] INTEGER,[authenticator] SYSNAME)VARBINARY;Decrypts data that was encrypted with a passphrase.  decryptbykeyautocert(cert_ID INTEGER,cert_password VARCHAR,ciphertext VARBINARY,[add_authenticator] INTEGER,[authenticator] SYSNAME)VARBINARY;Decrypts by using a symmetric key that is automatically decrypted with a certificate.  decryptbyasymkey(Asym_Key_ID INTEGER,ciphertext VARCHAR,['Asym_Key_Password'] VARCHAR)VARBINARY;Decrypts data with an asymmetric key.  decryptbycert(certificate_ID INTEGER,ciphertext VARCHAR,[cert_password] NVARCHAR)VARBINARY;Decrypts data with the private key of a certificate.  encryptbyasymkey(Asym_Key_ID INTEGER,plaintext VARCHAR)VARBINARY;Encrypts data with an asymmetric key.  encryptbycert(certificate_ID INTEGER,cleartext VARCHAR)VARBINARY;Encrypts data with the public key of a certificate.  encryptbykey(key_GUID VARBINARY,cleartext VARCHAR,[add_authenticator] INTEGER,[authenticator] SYSNAME)VARBINARY;Encrypts data by using a symmetric key.  encryptbypassphrase(passphrase VARCHAR,cleartext VARCHAR,[add_authenticator] INTEGER,[authenticator] SYSNAME)VARBINARY;Encrypt data with a passphrase.  key_id('Key_Name' VARCHAR)INTEGER;ID of a symmetric key in the current database.  key_guid('Key_Name' VARCHAR)VARBINARY;GUID of a symmetric key in the database.  signbyasymkey(Asym_Key_ID INTEGER,@plaintext VARCHAR,['password'] NVARCHAR(128))VARBINARY;Signs plaintext with an asymmetric key.  signbycert(certificate_ID INTEGER,@cleartext VARCHAR,['password'] NVARCHAR(128))VARBINARY;Signs text with a certificate and returns the signature.  verifysignedbyasymkey(Asym_Key_ID INTEGER,clear_text VARCHAR,signature VARBINARY)INTEGER;Tests whether digitally signed data has been changed since it was signed.  verifysignedbycert(Cert_ID INTEGER,signed_data VARCHAR,signature VARBINARY)INTEGER;Tests whether digitally signed data has been changed since it was signed.    -- Date and Time Functions  dateadd(datepart code,number NUMERIC,date DATETIME)DATETIME;Returns a new datetime value based on adding an interval to the specified date.  datediff(datepart code,startdate DATETIME,enddate DATETIME)INTEGER;Number of date and time boundaries crossed between two specified dates.  datename(datepart code,date DATETIME)NVARCHAR;Character character-type representing the specified date-part of the specified date.  datepart(datepart code,date DATETIME)INTEGER;Integer that represents the specified date-part of the specified date.  day(date DATETIME)INTEGER;Integer representing the day datepart of the specified date.  getdate()DATETIME;Current system DATE and time in the SQL Server standard internal format for datetime values.  getutcdate()DATETIME;Datetime value that represents the current UTC time .  month(date DATETIME)INTEGER;Integer that represents the month part of a specified date.  year(date DATETIME)INTEGER;Integer that represents the year part of a specified date.    -- Mathematical Functions  abs(expression NUMERIC)NUMERIC;Absolute (positive) value of the specified numeric expression.  acos(expression FLOAT)FLOAT;Angle, in radians, whose cosine is the specified float expression.  asin(expression FLOAT)FLOAT;Angle, in radians, whose sine is the specified float expression.  atan(expression FLOAT)FLOAT;Angle, in radians, whose tangent is a specified float expression.  atn2(expression1 FLOAT,expression2 FLOAT)FLOAT;Angle, in radians, between the positive x-axis and the ray from the origin to the point (y, x), where x and y are the values of the two specified float expressions.  ceiling(expression NUMERIC)NUMERIC;Smallest integer greater than, or equal to, the specified numeric expression.  cos(expression FLOAT)FLOAT;Trigonometric cosine of the specified angle, in radians, in the specified expression.  cot(expression FLOAT)FLOAT;Trigonometric cotangent of the specified angle, in radians, in the specified float expression.  degrees(expression NUMERIC)NUMERIC;Corresponding angle in degrees for an angle specified in radians.  exp(expression FLOAT)FLOAT;Exponential value of the specified float expression.  floor(expression NUMERIC)NUMERIC;Largest integer less than or equal to the specified numeric expression.  log(expression FLOAT)FLOAT;Natural logarithm of the specified float expression.  log10(expression FLOAT)FLOAT;Base-10 logarithm of the specified float expression.  pi()FLOAT;Returns the constant value of PI.  power(expression FLOAT,y NUMERIC)FLOAT;Value of the specified expression to the specified power.  radians(expression NUMERIC)NUMERIC;Radians when a numeric expression, in degrees, is entered.  rand([seed] INTEGER)FLOAT;Random float value from 0 through 1.  round(expression NUMERIC,length INTEGER,[function] INTEGER)NUMERIC;Numeric value, rounded to the specified length or precision.  sign(expression NUMERIC)NUMERIC;Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.  sin(expression FLOAT)FLOAT;Trigonometric sine of the specified angle, in radians, and in an approximate numeric, float, expression.  sqrt(expression FLOAT)FLOAT;Square root of the specified float value.  square(expression FLOAT)FLOAT;Square of the specified float value.  tan(expression FLOAT)FLOAT;Tangent of the input expression.    -- Metadata Functions  col_length(table_name NVARCHAR,column NVARCHAR)SMALLINT;Returns the defined length, in bytes, of a column.  col_name(table_id INTEGER,column_id INTEGER)SYSNAME;Name of a column from a specified corresponding table identification number and column identification number.  columnproperty(object_id INTEGER,column_name NVARCHAR(128),property VARCHAR(128))INTEGER;Information about a column or procedure parameter.  databaseproperty(database_name NVARCHAR(128),property VARCHAR(128))INTEGER;Named database property value for the specified database and property name.  db_id([database_name] SYSNAME)INTEGER;Database identification (ID) number.  db_name([database_id] INTEGER)NVARCHAR(128);Returns the database name.  file_id(file_name SYSNAME)SMALLINT;File identification (ID) number for the given logical file name in the current database.  file_idex(file_name SYSNAME)INTEGER;File identification (ID) number for the specified logical file name of the data, log, or full-text file in the current database.  file_name(file_id INTEGER)NVARCHAR(128);Logical file name for the given file identification (ID) number.  filegroup_id(filegroup_name SYSNAME)INTEGER;Filegroup identification (ID) number for a specified filegroup name.  filegroup_name(filegroup_id SMALLINT)NVARCHAR(128);Filegroup name for the specified filegroup identification (ID) number.  filegroupproperty(filegroup_name SYSNAME,property VARCHAR(128))INTEGER;Returns the specified filegroup property value when supplied with a filegroup and property name.  fileproperty(file_name NCHAR(128),property VARCHAR(128))INTEGER;Returns the specified file name property value when a file name and property name are specified.  fulltextcatalogproperty(catalog_name SYSNAME,property VARCHAR(128))INTEGER;Information about full-text catalog properties.  fulltextserviceproperty(property VARCHAR(128))INTEGER;Information about full-text service-level properties.  index_col(table_or_view_name SYSNAME,index_id INTEGER,key_id INTEGER)NVARCHAR(128);Returns the indexed column name. Returns NULL for XML indexes.  indexkey_property(object_ID INTEGER,index_ID INTEGER,key_ID INTEGER,property VARCHAR(128))INTEGER;Information about the index key.  indexproperty(object_ID INTEGER,index_or_statistics_name NVARCHAR(128),property VARCHAR(128))INTEGER;Named index or statistics property value of a specified table identification number, index or statistics name, and property name.  object_id(object_name NVARCHAR,[object_type] NVARCHAR)INTEGER;Database object identification number of a schema-scoped object.  object_name(object_id INTEGER)SYSNAME;Database object name for schema-scoped objects.  objectproperty(id INTEGER,property VARCHAR(128))INTEGER;Information about schema-scoped objects in the current database.  objectpropertyex(id INTEGER,property VARCHAR(128))SQL_VARIANT;Information about schema-scoped objects in the current database.  sql_variant_property(expression SQL_VARIANT,property VARCHAR(128))SQL_VARIANT;Returns base data type and other information about a SQL_VARIANT value.  type_id(type_name NVARCHAR)INTEGER;ID for a specified data type name.  type_name(type_id INTEGER)SYSNAME;Unqualified type name of a specified type ID.  typeproperty(type SYSNAME,property VARCHAR(128))INTEGER;Information about a data type.    -- Ranking Functions  rank()BIGINT;Returns the rank of each row within the partition of a result set. The rank of a row is one plus the number of ranks that come before the row in question.  dense_rank()BIGINT;Rank of rows within the partition of a result set, without any gaps in the ranking.  ntile(expression BIGINT)BIGINT;Distributes the rows in an ordered partition into a specified number of groups. The groups are numbered, starting at one. For each row, NTILE returns the number of the group to which the row belongs.  row_number()BIGINT;Sequential number of a row within a partition of a result set, starting at 1 for the first row in each partition.    -- Replication Functions  publishingservername()NVARCHAR;Name of the originating Publisher for a published database participating in a database mirroring session.    -- Rowset Functions  containstable(table_name SYSNAME,{column_name|(column_list)|*} expression,'<contains_search_condition>' VARCHAR,[LANGUAGE language_term] VARCHAR,[top_n_by_rank] INTEGER)ROWSET;Returns a table of zero, one, or more rows for those columns containing character-based data types for precise or fuzzy (less precise) matches to single words and phrases.  freetexttable(table_name SYSNAME,{column_name|(column_list)|*},'freetext_string' VARCHAR,[LANGUAGE language_term] VARCHAR,[top_n_by_rank] INTEGER)ROWSET;Returns a table of zero, one, or more rows for those columns containing character-based data types for values that match the meaning, but not the exact wording, of the text in the specified freetext_string.  opendatasource(provider_name VARCHAR,init_string VARCHAR)ROWSET;Provides ad hoc connection information as part of a four-part object name without using a linked server name.  openquery(linked_server_name SYSNAME, query_text VARCHAR)ROWSET;Executes the specified pass-through query on the specified linked server.  openrowset('provider_name' VARCHAR,'provider_string' VARCHAR,'query' VARCHAR)ROWSET;Includes all connection information that is required to access remote data from an OLE DB data source.  openrowset(BULK 'data_file' VARCHAR,FORMATFILE = 'format_file_path' VARCHAR)ROWSET.  openxml(idoc INTEGER,rowpattern NVARCHAR,[flags] byte)ROWSET;Provides a rowset view over an XML document.    -- Security Functions  current_user()SYSNAME;Returns the name of the current user.  has_perms_by_name(securable SYSNAME,securable_class NVARCHAR(60),permission SYSNAME,[sub-securable] SYSNAME,[sub-securable_class] NVARCHAR(60))INTEGER;Evaluates the effective permission of the current user on a securable.  is_member(group_or_role SYSNAME)INTEGER;Indicates whether the current user is a member of the specified MS Windows group or MS SQL Server database role.  is_srvrolemember('role' SYSNAME,['login'] SYSNAME)INTEGER;Indicates whether a SQL Server login is a member of the specified fixed server role.  permissions([objectid] INTEGER,['column'] SYSNAME)INTEGER;Returns a value containing a bitmap that indicates the statement, object, or column permissions of the current user.  schema_id([schema_name] SYSNAME)INTEGER;Schema ID associated with a schema name.  schema_name([schema_id] INTEGER)SYSNAME;Schema name associated with a schema ID.  session_user()NCHAR;User name of the current context in the current database.  setuser(['username' [WITH NORESET]] SYSNAME);Allows a member of the sysadmin fixed server role or db_owner fixed database role to impersonate another user.  suser_id(['login'] NCHAR)INTEGER;Login identification number of the user.  suser_sid(['login'] SYSNAME)VARBINARY(85);Security identification number (SID) for the specified login name.  suser_sname([server_user_sid] VARBINARY(85))NVARCHAR(256);Login name associated with a security identification number (SID).  system_user()NCHAR;Allows a system-supplied value for the current login to be inserted into a table when no default value is specified.  suser_name([server_user_id] INTEGER)NCHAR;Login identification name of the user.  user_id(['user'] NCHAR)INTEGER;Identification number for a database user.  user_name([id] INTEGER)NVARCHAR(256);Database user name from a specified identification number.    -- String Functions  ascii(expression VARCHAR)INTEGER;ASCII code value of the leftmost character of a character expression.  char(expression INTEGER)CHAR(1);Converts an int ASCII code to a character.  charindex(expression1 VARCHAR,expression2 VARCHAR,[start_location] BIGINT)INTEGER;Starting position of the specified expression in a character character-type.  difference(expression1 VARCHAR,expression2 VARCHAR)INTEGER;Integer value that indicates the difference between the SOUNDEX values of two character expressions.  left(expression VARCHAR,length BIGINT)VARCHAR;Left part of a character character-type with the specified number of characters.  len(expression VARCHAR)INTEGER;Number of characters of the specified character-type expression, excluding trailing blanks.  lower(expression VARCHAR)VARCHAR;Character expression after converting uppercase character data to lowercase.  ltrim(expression VARCHAR)VARCHAR;Character expression after it removes leading blanks.  nchar(expression INTEGER)NCHAR(1);Unicode character with the specified integer code, as defined by the Unicode standard.  patindex('%pattern%' VARCHAR,expression VARCHAR)INTEGER;Starting position of the first occurrence of a pattern in a specified expression, or zeros if the pattern is not found, on all valid text and character data types.  quotename('character_string' VARCHAR,['quote_character'] VARCHAR)NVARCHAR(258);Unicode character-type with the delimiters added to make the input character-type a valid SQL Server delimited identifier.  replace(string VARCHAR,substring VARCHAR,replacement VARCHAR)VARCHAR;Replaces all occurrences of a specified character-type value with another character-type value.  replicate(expression VARCHAR,count BIGINT)VARCHAR;Repeats a character-type value a specified number of times.  reverse(expression VARCHAR)VARCHAR;Reverse of a character expression.  right(expression VARCHAR,length BIGINT)VARCHAR;Right part of a character character-type with the specified number of characters.  rtrim(expression VARCHAR)VARCHAR;Character character-type after truncating all trailing blanks.  soundex(expression VARCHAR)VARCHAR;Four-character (SOUNDEX) code to evaluate the similarity of two character-types.  space(length INTEGER)CHAR;Returns a character-type of repeated spaces.  str(expression FLOAT,[length] INTEGER,[decimal] INTEGER)CHAR;Returns character data converted from numeric data.  stuff(dest VARCHAR,start BIGINT,length BIGINT,source VARCHAR)VARCHAR;Deletes a specified length of characters and inserts another set of characters at a specified starting point.  substring(expression VARCHAR,start INTEGER,length INTEGER)VARCHAR;Returns part of a character, binary, text, or image expression.  textptr(column)VARBINARY;Text-pointer value that corresponds to a text, ntext, or image column in varbinary format.  textvalid('table.column' VARCHAR,text_ptr TEXTPTR)INTEGER;A text, ntext, or image function that checks whether a specific text pointer is valid.  unicode(expression NVARCHAR)INTEGER;Integer value, as defined by the Unicode standard, for the first character of the input expression.  upper(expression VARCHAR)VARCHAR;Character expression with lowercase character data converted to uppercase.    -- System Functions  app_name()NVARCHAR(128);Application name for the current session if set by the application.  cast(expression AS data_type)data_type;Explicitly converts an expression of one data type to another.  convert(data_type,expression,[style])data_type;Explicitly converts an expression of one data type to another.  coalesce(expressions)expression;First nonnull expression among its arguments.  collationproperty(collation_name NVARCHAR(128),property_name VARCHAR(128))SQL_VARIANT;Returns the property of a specified collation.  columns_updated()VARBINARY;Returns a VARBINARY bit pattern that indicates the columns in a table or view that were inserted or updated.  current_timestamp()DATETIME;Current DATE and time.  datalength(expression)INTEGER;Number of bytes used to represent any expression.  error_line()INTEGER;Line number at which an error occurred that caused the CATCH block of a TRY匔ATCH construct to be run.  error_message()NVARCHAR(4000);Message text of the error that caused the CATCH block of a TRY匔ATCH construct to be run.  error_number()INTEGER;Error number of the error that caused the CATCH block of a TRY匔ATCH construct to be run.  error_procedure()NVARCHAR(126);Name of the stored procedure or trigger where an error occurred that caused the CATCH block of a TRY匔ATCH construct to be run.  error_severity()INTEGER;Severity of the error that caused the CATCH block of a TRY匔ATCH construct to be run.  error_state()INTEGER;State number of the error that caused the CATCH block of a TRY匔ATCH construct to be run.  formatmessage(msg_number INTEGER,[param_values])NVARCHAR;Constructs a message from an existing message in sys.messages.  getansinull(['database'] SYSNAME)INTEGER;Default nullability for the database for this session.  host_id()CHAR(10);Workstation identification number.  host_name()SYSNAME;Returns the workstation name.  ident_current('table_name' SYSNAME)NUMERIC(38,0);Last identity value generated for a specified table or view in any session and any scope.  ident_incr('table_or_view' SYSNAME)NUMERIC;Increment value (returned as NUMERIC (@@MAXPRECISION,0)) specified during the creation of an identity column in a table or view that has an identity column.  ident_seed('table_or_view' SYSNAME)NUMERIC;Returns the seed value (returned as NUMERIC(@@MAXPRECISION,0)) that was specified when an identity column in a table or a view that has an identity column was created.  identity(data_type code,[seed] INTEGER,[increment] INTEGER)data_type;Is used only in a SELECT statement with an INTO table clause to insert an identity column into a new table.  isdate(expression VARCHAR(4000))INTEGER;Determines whether an input expression is a valid date.  isnull(check_expression any-type,replacement_value any-type)any-type;Replaces NULL with the specified replacement value.  isnumeric(expression  char-type)INTEGER;Determines whether an expression is a valid numeric type.  newid()UNIQUEIDENTIFIER;Creates a unique value of type UNIQUEIDENTIFIER.  nullif(expression1 any-type,expression2 any-type) any-type;Returns a null value if the two specified expressions are equal.  parsename('object_name' SYSNAME,object_piece INTEGER)NVARCHAR;Returns the specified part of an object name.  original_login()SYSNAME;Name of the login that connected to the instance of SQL Server.  rowcount_big()BIGINT;Number of rows affected by the last statement executed.  scope_identity()NUMERIC;Last identity value inserted into an identity column in the same scope.  serverproperty(property_name VARCHAR)SQL_VARIANT;Property information about the server instance.  sessionproperty(property_name VARCHAR)SQL_VARIANT;Returns the SET options settings of a session.  stats_date(table_id INTEGER,index_id INTEGER)DATETIME;Returns the date that the statistics for the specified index were last updated.  update(column)BOOLEAN;Returns a Boolean value that indicates whether an INSERT or UPDATE attempt was made on a specified column of a table or view.  xact_state()SMALLINT;Is a scalar function that reports the user transaction state of a current running request.      [@@]  @@CONNECTIONS;integer;Number of attempted connections, either successful or unsuccessful since SQL Server was last started.  @@CPU_BUSY;integer;Time that SQL Server has spent working since it was last started.  @@CURSOR_ROWS;integer;Number of qualifying rows currently in the last cursor opened on the connection.  @@DATEFIRST;tinyint;Current value, for the session, of SET DATEFIRST.  @@DBTS;varbinary;Value of the current timestamp data type for the current database.  @@ERROR;integer;Error number for the last T-SQL statement executed.  @@FETCH_STATUS;integer;Status of the last cursor FETCH statement issued against any cursor currently opened by the connection.  @@identity;numeric(38,0);Last-inserted identity value.  @@IDLE;integer;Time that SQL Server has been idle since it was last started.  @@IO_BUSY;integer;Time that SQL Server has spent performing input and output operations since SQL Server was last started.  @@LANGID;smallint;Local language ID of the language that is currently being used.  @@LANGUAGE;nvarchar;Name of the language currently being used.  @@LOCK_TIMEOUT;integer;Current lock time-out setting in milliseconds for the current session.  @@MAX_CONNECTIONS;integer;Maximum number of simultaneous user connections allowed on an instance of SQL Server.  @@MAX_PRECISION;tinyint;Precision level used by decimal and numeric data types as currently set in the server.  @@nestlevel;integer;nesting level of the current stored procedure execution (initially 0) on the local server.  @@OPTIONS;integer;Information about the current SET options.  @@PACKET_ERRORS;integer;Number of network packet errors that have occurred on SQL Server connections since SQL Server was last started.  @@PACK_RECEIVED;integer;Number of input packets read from the network by SQL Server since it was last started.  @@PACK_SENT;integer;Number of output packets written to the network by SQL Server since it was last started.  @@PROCID;integer;Object ID of the current T-SQL module.  @@remserver;nvarchar(128);Name of the remote SQL Server database server as it appears in the login record.  @@ROWCOUNT;integer;Number of rows affected by the last statement.  @@SERVERNAME;nvarchar;Name of the local server that is running SQL Server.  @@SERVICENAME;nvarchar;Name of the registry key under which SQL Server is running.  @@SPID;smallint;Session ID of the current user process.  @@TEXTSIZE;integer;Current value of the TEXTSIZE option of the SET statement.  @@TIMETICKS;integer;Number of microseconds per tick.  @@TOTAL_ERRORS;integer;Number of disk write errors encountered by SQL Server since SQL Server last started.  @@TOTAL_READ;integer;Number of disk reads, not cache reads, by SQL Server since SQL Server was last started.  @@TOTAL_WRITE;integer;Number of disk writes by SQL Server since SQL Server was last started.  @@TRANCOUNT;integer;Number of active transactions for the current connection.  @@VERSION;nvarchar;Version, processor architecture, build DATE, and OS for the current installation of SQL Server.      [set]  ANSI_DEFAULTS;{ON|OFF}  ANSI_NULLS;{ON|OFF}  ANSI_NULL_DFLT_OFF;{ON|OFF}  ANSI_NULL_DFLT_ON;{ON|OFF}  ANSI_PADDING;{ON|OFF}  ANSI_WARNINGS;{ON|OFF}  ARITHABORT;{ON|OFF}  ARITHIGNORE;{ON|OFF}  CONCAT_NULL_YIELDS_NULL;{ON|OFF}  CONTEXT_INFO;{binary_str|@binary_var}  CURSOR_CLOSE_ON_COMMIT;{ON|OFF}  DATEFIRST;{number|@number_var}  DATEFORMAT;{format|@format_var}  DEADLOCK_PRIORITY;{LOW|NORMAL|HIGH|num_priority|@deadlock_var|@deadlock_intvar}  FIPS_FLAGGER;level  FMTONLY;{ON|OFF}  FORCEPLAN;{ON|OFF}  IDENTITY_INSERT;[db_name.[schema_name].]table{ON|OFF}  IMPLICIT_TRANSACTIONS;{ON|OFF}  LANGUAGE;{[N]language|@language_var}  LOCK_TIMEOUT;timeout_period  NOCOUNT;{ON|OFF}  NOEXEC;{ON|OFF}  NUMERIC_ROUNDABORT;{ON|OFF}  OFFSETS keyword_list;{ON|OFF}  PARSEONLY;{ON|OFF}  QUERY_GOVERNOR_COST_LIMIT;value  QUOTED_IDENTIFIER;{ON|OFF}  REMOTE_PROC_TRANSACTIONS;{ON|OFF}  ROWCOUNT;{number|@number_var}  SHOWPLAN_ALL;{ON|OFF}  SHOWPLAN_TEXT;{ON|OFF}  SHOWPLAN_XML;{ON|OFF}  STATISTICS IO;{ON|OFF}  STATISTICS PROFILE;{ON|OFF}  STATISTICS TIME;{ON|OFF}  STATISTICS XML;{ON|OFF}  TEXTSIZE;{number}  TRANSACTION ISOLATION LEVEL;{READ UNCOMMITTED|READ COMMITTED|REPEATABLE READ|SNAPSHOT|SERIALIZABLE}  XACT_ABORT;{ON|OFF}  
batchDelim=GO
intelSql=1
kwShowAfter=2
qtDatabases=Databases (MSSQL)
qtSchemas=Schemas (MSSQL)
qtObjects=Objects (MSSQL)
qtColumns=Columns (MSSQL) + Keys
qtArguments=Arguments (MSSQL)
qtPackage=
qtJoins=Joins (MSSQL)
qtDDL=DDL Code (MSSQL)
qtSynonym=Synonyms (MSSQL)
qtContext=Context (MSSQL)
qtObjType=
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000000000000000000000000000000000000000000000000000000000000
objOrder=1A1905180A03021E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.3]
enabled=0
caption=MySQL 5
export=1
dbType=2
addDelim=0
addAlias=1
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]-- Numeric Functionsabs(x DOUBLE)DOUBLEacos(x DOUBLE)DOUBLEasin(x DOUBLE)DOUBLEatan(x DOUBLE)DOUBLEatan(y DOUBLE,x DOUBLE)DOUBLEatan2(y DOUBLE,x DOUBLE)DOUBLEceil(x DOUBLE)INTEGERceiling(x DOUBLE)INTEGERcos(x DOUBLE)DOUBLEcot(x DOUBLE)DOUBLEcrc32(expr VARCHAR)INTEGERdegrees(x DOUBLE)DOUBLEexp(x DOUBLE)DOUBLEfloor(x DOUBLE)DOUBLEformat(x DOUBLE,d INTEGER)VARCHARln(x DOUBLE)DOUBLElog(x DOUBLE)DOUBLElog(b INTEGER,x DOUBLE)DOUBLElog2(x DOUBLE)DOUBLElog10(x DOUBLE)DOUBLEmod(n DOUBLE,m DOUBLE)DOUBLEpi()DOUBLEpow(x DOUBLE,y DOUBLE)DOUBLEpower(x DOUBLE,y DOUBLE)DOUBLEradians(x DOUBLE)DOUBLErand([n] INTEGER)DOUBLEround(x DOUBLE,[d] INTEGER)DOUBLEsign(x DOUBLE)INTEGERsin(x DOUBLE)DOUBLEsqrt(x DOUBLE)DOUBLEtan(x DOUBLE)DOUBLEtruncate(x DOUBLE,d INTEGER)DOUBLE-- String Functionsascii(str VARCHAR)INTEGERbin(n BIGINT)VARCHARbit_length(str VARCHAR)INTEGERchar(expr1 INTEGER,[exprn] INTEGER)VARCHARchar_length(str VARCHAR)INTEGERcharacter_length(str VARCHAR)INTEGERconcat(str1 VARCHAR,str2 VARCHAR,[strn] VARCHAR)VARCHARconcat_ws(separator CHAR,str1 VARCHAR,str2 VARCHAR,[strn] VARCHAR)VARCHARconv(n INTEGER,from_base INTEGER,to_base INTEGER)VARCHARelt(n INTEGER,str1 VARCHAR,[strn] VARCHAR)VARCHARexport_set(bits INTEGER,on CHAR,off CHAR,[separator] CHAR,[number_of_bits] INTEGER)VARCHARfield(str VARCHAR,str1 VARCHAR,[strn] VARCHAR)INTEGERfind_in_set(str VARCHAR,strlist VARCHAR)INTEGERhex(n BIGINT)VARCHARhex(s VARCHAR)VARCHARinsert(str VARCHAR,pos INTEGER,len INTEGER,newstr VARCHAR)VARCHARinstr(str VARCHAR,substr VARCHAR)INTEGERlcase(str VARCHAR)VARCHARleft(str VARCHAR,len INTEGER)VARCHARlength(str VARCHAR)INTEGERload_file(file_name VARCHAR)VARCHARlocate(substr VARCHAR,str VARCHAR,[pos] INTEGER)INTEGERlower(str VARCHAR)VARCHARlpad(str VARCHAR,len INTEGER,padstr VARCHAR)VARCHARltrim(str VARCHAR)VARCHARmake_set(bits INTEGER,str1 VARCHAR,[strn] VARCHAR)VARCHARmid(str VARCHAR,pos INTEGER,len INTEGER)VARCHARoct(n BIGINT)VARCHARoctet_length(str VARCHAR)VARCHARord(str VARCHAR)INTEGERposition(substr VARCHAR,in_str VARCHAR)INTEGERquote(str VARCHAR)VARCHARrepeat(str VARCHAR,count INTEGER)VARCHARreplace(str VARCHAR,from_str VARCHAR,to_str VARCHAR)VARCHARreverse(str VARCHAR)VARCHARright(str VARCHAR,len INTEGER)VARCHARrpad(str VARCHAR,len INTEGER,padstr VARCHAR)VARCHARrtrim(str VARCHAR)VARCHARsoundex(str VARCHAR)VARCHARspace(n INTEGER)VARCHARstrcmp(expr1 VARCHAR,expr2 VARCHAR)INTEGERsubstr(str VARCHAR,pos INTEGER,len INTEGER)VARCHARsubstring(str VARCHAR,pos INTEGER,len INTEGER)VARCHARsubstring_index(str VARCHAR,delim CHAR,count INTEGER)VARCHARtrim(str VARCHAR)VARCHARtrim([BOTH [remstr] FROM] str VARCHAR)VARCHARtrim([LEADING [remstr] FROM] str VARCHAR)VARCHARtrim([TRAILING [remstr] FROM] str VARCHAR)VARCHARucase(str VARCHAR)VARCHARunhex(str VARCHAR)VARCHARupper(str VARCHAR)VARCHAR-- Date and Time Functionsadddate(date DATETIME,INTERVAL expr unit)DATETIMEadddate(expr DATE,days INTEGER)DATEaddtime(expr1 DATETIME,expr2 TIME)DATETIMEconvert_tz(dt DATETIME,from_tz VARCHAR,to_tz VARCHAR)DATETIMEcurdate()DATEcurrent_date()DATEcurtime()TIMEcurrent_time()TIMEdate(expr DATETIME)DATEdatediff(expr1 DATETIME,expr2 DATETIME)INTEGERdate_add(date DATETIME,INTERVAL expr unit)DATETIMEdate_sub(date DATETIME,INTERVAL expr unit)DATETIMEdate_format(date DATETIME,format VARCHAR)VARCHARday(expr DATE)INTEGERdayname(expr DATE)VARCHARdayofmonth(expr DATE)INTEGERdayofweek(expr DATE)INTEGERdayofyear(expr DATE)INTEGERextract(unit from DATE DATETIME)INTEGERfrom_days(n INTEGER)DATEfrom_unixtime(unix_timestamp INTEGER,[format] VARCHAR)DATETIMEget_format([DATE|TIME|DATETIME],['EUR'|'USA'|'JIS'|'ISO'|'INTERNAL'])VARCHARhour(expr TIME)INTEGERlast_day(expr DATE)DATElocaltime()DATETIMElocaltimestamp()DATETIMEmakedate(year INTEGER,dayofyear INTEGER)DATEmaketime(hour INTEGER,minute INTEGER,second INTEGER)TIMEmicrosecond(expr TIME)INTEGERminute(expr TIME)INTEGERmonth(expr DATE)INTEGERmonthname(expr DATE)VARCHARnow()DATETIMEperiod_add(p INTEGER,n INTEGER)INTEGERperiod_diff(p1 INTEGER,p2 INTEGER)INTEGERquarter(expr DATE)INTEGERsecond(expr TIME)INTEGERsec_to_time(seconds INTEGER)TIMEstr_to_date(str VARCHAR,format VARCHAR)DATETIMEsubdate(expr DATE,INTERVAL expr unit)DATEsubdate(expr DATE,days INTEGER)DATEsubtime(expr1 DATETIME,expr2 TIME)DATETIMEsysdate()DATETIMEtime(expr TIME)VARCHARtimediff(expr1 TIME,expr2 TIME)TIMEtimestamp(expr1 DATETIME,[expr2] TIME)DATETIMEtimestampadd(unit,INTERVAL INTEGER,expr DATETIME)DATETIMEtimestampdiff(unit,expr1 DATETIME,expr2 DATETIME)INTEGERtime_format(expr TIME,format VARCHAR)VARCHARtime_to_sec(expr TIME)INTEGERto_days(expr DATE)INTEGERunix_timestamp([expr] DATE)INTEGERutc_date()DATEutc_time()TIMEutc_timestamp()DATETIMEweek(expr DATE,[mode] INTEGER)INTEGERweekday(expr DATE)INTEGERweekofyear(expr DATE)INTEGERyear(expr DATE)INTEGERyearweek(expr DATE,[mode] INTEGER)INTEGER-- Aggregate Functionsavg([DISTINCT] expr DOUBLE)DOUBLEbit_and(expr BIGINT)BIGINTbit_or(expr BIGINT)BIGINTbit_xor(expr BIGINT)BIGINTcount([DISTINCT] expr any-type)BIGINTgroup_concat([DISTINCT] expr VARCHAR)VARCHARmin([DISTINCT] expr any-type)any-typemax([DISTINCT] expr any-type)any-typestd(expr DOUBLE)DOUBLEstddev(expr DOUBLE)DOUBLEstddev_pop(expr DOUBLE)DOUBLEstddev_samp(expr DOUBLE)DOUBLEsum([DISTINCT] expr DOUBLE)DOUBLEvar_pop(expr DOUBLE)DOUBLEvar_samp(expr DOUBLE)DOUBLEvariance(expr DOUBLE)DOUBLE-- Other Functionsif(expr1 boolean,expr2 any-type,expr3 any-type)any-typeifnull(expr1 any-type,expr2 any-type)any-typenullif(expr1 any-type,expr2 any-type)any-typeconvert(expr any-type,type any-type)any-typeextractvalue(xml_frag VARCHAR,xpath_expr VARCHAR)cdataupdatexml(xml_target VARCHAR,xpath_expr VARCHAR,new_xml VARCHAR)VARCHARaes_encrypt(str VARCHAR,key_str VARCHAR)VARCHARaes_decrypt(crypt_str VARCHAR,key_str VARCHAR)VARCHARcompress(str VARCHAR)VARCHARdecode(crypt_str VARCHAR,pass_str VARCHAR)VARCHARencode(str VARCHAR,pass_str VARCHAR)VARCHARdes_decrypt(crypt_str VARCHAR,[key_str] VARCHAR)VARCHARdes_encrypt(str VARCHAR,[{key_num|key_str}] VARCHAR)VARCHARencrypt(str VARCHAR,[salt] VARCHAR)VARCHARmd5(str VARCHAR)VARCHARold_password(str VARCHAR)VARCHARpassword(str VARCHAR)VARCHARsha1(str VARCHAR)VARCHARsha(str VARCHAR)VARCHARuncompress(str VARCHAR)VARCHARuncompressed_length(str VARCHAR)INTEGERbenchmark(count INTEGER,expr any-type)INTEGERcharset(str VARCHAR)VARCHARcoercibility(str VARCHAR)INTEGERcollation(str VARCHAR)VARCHARconnection_id()INTEGERcurrent_user()VARCHARdatabase()VARCHARfound_rows()INTEGERlast_insert_id([expr] INTEGER)INTEGERrow_count()INTEGERschema()VARCHARsession_user()VARCHARsystem_user()VARCHARuser()VARCHARversion()VARCHARdefault(col_name any-type)any-typeget_lock(str VARCHAR,timeout INTEGER)INTEGERinet_aton(expr VARCHAR)INTEGERinet_ntoa(expr INTEGER)VARCHARis_free_lock(str VARCHAR)INTEGERmaster_pos_wait(log_name VARCHAR,log_pos INTEGER,[timeout] INTEGER)INTEGERname_const(name VARCHAR,value any-type)any-typerelease_lock(str VARCHAR)INTEGERsleep(duration INTEGER)INTEGERuuid()VARCHARvalues(col_name any-type)any-type
batchDelim=$$$
intelSql=1
kwShowAfter=2
qtDatabases=
qtSchemas=Schemas (MySQL)
qtObjects=Objects (MySQL)
qtColumns=Columns (MySQL) + Keys
qtArguments=Arguments (MySQL)
qtPackage=
qtJoins=Joins (MySQL)
qtDDL=DDL Code (MySQL)
qtSynonym=
qtContext=Context (MySQL)
qtObjType=
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000000000000000000000000000000000000000000000000000000000000
objOrder=1A1905180A031E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.4]
enabled=0
caption=DB2 UDB
export=1
dbType=3
addDelim=0
addAlias=1
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]abs(expr DOUBLE)DOUBLEabsval(expr DOUBLE)DOUBLEacos(expr DOUBLE)DOUBLEascii(expr VARCHAR)INTEGERasin(expr DOUBLE)DOUBLEatan(expr DOUBLE)DOUBLEatan2(expr DOUBLE)DOUBLEatanh(expr DOUBLE)DOUBLEavg([DISTINCT|ALL] expr NUMERIC)NUMERICbigint(expr NUMERIC)BIGINTbigint(expr VARCHAR)BIGINTbigint(expr DATETIME)BIGINTblob(expr character-type,[length] INTEGER)BLOBceil(expr DOUBLE)DOUBLEceiling(expr DOUBLE)DOUBLEchar(expr character-type,[length] INTEGER)CHARchar(expr DATETIME,[ISO|USA|EUR|JIS|LOCAL])CHARchar(expr NUMERIC,[decimal_char] CHAR)CHARcharacter_length(expr character-type)INTEGERchr(expr INTEGER)CHAR(1)clob(expr character-type,[length] INTEGER)CLOBcoalesce(expr_list any-type)any-typeconcat(expr1 character-type,expr2 character-type)character-typecorr(expr1 NUMERIC,expr2 NUMERIC)DOUBLEcorrelation(expr1 NUMERIC,expr2 NUMERIC)DOUBLEcos(expr DOUBLE)DOUBLEcosh(expr DOUBLE)DOUBLEcot(expr DOUBLE)DOUBLEcount([DISTINCT|ALL] expr any-type)INTEGERcount_big([DISTINCT|ALL] expr any-type)DECIMAL(31,0)covar(expr1 NUMERIC,expr2 NUMERIC)DOUBLEcovariance(expr1 NUMERIC,expr2 NUMERIC)DOUBLEdatapartitionnum(expr any-type)INTEGERdate(expr DATETIME)DATEdate(expr VARCHAR)DATEdate(expr DOUBLE)DATEday(expr DATETIME)INTEGERday(expr VARCHAR)INTEGERday(expr DECIMAL)INTEGERdayname(expr VARCHAR(26))VARCHAR(100)dayname(expr DATETIME)VARCHAR(100)dayofweek(expr VARCHAR(26))INTEGERdayofweek(expr DATETIME)INTEGERdayofweek_iso(expr VARCHAR(26))INTEGERdayofweek_iso(expr DATETIME)INTEGERdayofyear(expr VARCHAR(26))INTEGERdayofyear(expr DATETIME)INTEGERdays(expr VARCHAR)INTEGERdays(expr DATETIME)INTEGERdbclob(expr GRAPHIC-type,[length] INTEGER)dbclobdbpartitionnum(expr any-type)INTEGERdec(expr NUMERIC,[precision] INTEGER,[scale] INTEGER)DECIMALdec(expr DATETIME,[precision] INTEGER,[scale] INTEGER)DECIMALdec(expr VARCHAR,[precision] INTEGER,[scale] INTEGER,[decimal] CHAR)DECIMALdecimal(expr NUMERIC,[precision] INTEGER,[scale] INTEGER)DECIMALdecimal(expr DATETIME,[precision] INTEGER,[scale] INTEGER)DECIMALdecimal(expr VARCHAR,[precision] INTEGER,[scale] INTEGER,[decimal] CHAR)DECIMALdecrypt_bin(expr VARCHAR FOR BIT DATA,[password] VARCHAR)VARCHAR FOR BIT DATAdecrypt_char(expr VARCHAR FOR BIT DATA,[password] VARCHAR)VARCHARdegrees(expr DOUBLE)DOUBLEderef(expr any-structured-type)any-structured-typedifference(expr1 VARCHAR(4000),expr2 VARCHAR(4000))INTEGERdigits(expr DECIMAL)VARCHARdouble(expr NUMERIC)DOUBLEdouble(expr VARCHAR)DOUBLEdouble_precision(expr NUMERIC)DOUBLEdouble_precision(expr VARCHAR)DOUBLEencrypt(expr VARCHAR,[password] VARCHAR,[hint] VARCHAR)VARCHAR FOR BIT DATAevent_mon_state(expr VARCHAR)INTEGERexp(expr DOUBLE)DOUBLEfloat(expr NUMERIC)DOUBLEfloat(expr VARCHAR)DOUBLEfloor(expr DOUBLE)DOUBLEgenerate_unique()CHAR(13) FOR BIT DATAgethint(encrypted_data VARCHAR FOR BIT DATA)VARCHAR(32)graphic(expr GRAPHIC,[length] INTEGER)GRAPHICgraphic(expr character-type)GRAPHICgraphic(expr DATETIME,[ISO|USA|EUR|JIS|LOCAL])GRAPHICgrouping(expr any-type)SMALLINThashedvalue(expr any-type)INTEGERhex(expr any-type)VARCHARhour(expr DATETIME)INTEGERhour(expr VARCHAR)INTEGERhour(expr DECIMAL)INTEGERidentity_val_local()DECIMAL(31,0)insert(expr1 VARCHAR,expr2 INTEGER,expr3 INTEGER,expr4 VARCHAR)VARCHARint(expr NUMERIC)INTEGERint(expr DATETIME)INTEGERint(expr VARCHAR)INTEGERinteger(expr NUMERIC)INTEGERinteger(expr DATETIME)INTEGERinteger(expr VARCHAR)INTEGERjulian_day(expr VARCHAR(26))INTEGERjulian_day(expr DATETIME)INTEGERlcase(expr VARCHAR)VARCHARleft(expr VARCHAR,length INTEGER)VARCHARlength(expr any-type,[CODEUNITS16|CODEUNITS32|OCTETS])INTEGERln(expr DOUBLE)DOUBLElocate(search character-type,source character-type,[start] intger,[CODEUNITS16|CODEUNITS32|OCTETS])INTEGERlog(expr DOUBLE)DOUBLElog10(expr DOUBLE)DOUBLElong_varchar(expr character-type)LONG VARCHARlong_vargraphic(expr GRAPHIC)LONG VARGRAPHIClower(expr VARCHAR)VARCHARltrim(expr VARCHAR)VARCHARmax([DISTINCT|ALL] expr any-type)any-typemicrosecond(expr TIMESTAMP)INTEGERmicrosecond(expr VARCHAR)INTEGERmicrosecond(expr DECIMAL)INTEGERmidnight_seconds(expr VARCHAR(26))INTEGERmidnight_seconds(expr DATETIME)INTEGERmin([DISTINCT|ALL] expr any-type)any-typeminute(expr DATETIME)INTEGERminute(expr VARCHAR)INTEGERminute(expr DECIMAL)INTEGERmod(expr1 INTEGER,expr2 INTEGER)INTEGERmonth(expr DATETIME)INTEGERmonth(expr VARCHAR)INTEGERmonth(expr DECIMAL)INTEGERmonthname(expr VARCHAR(26))VARCHAR(100)monthname(expr DATETIME)VARCHAR(100)multiply_alt(expr1 DECIMAL,expr2 DECIMAL)DECIMALnullif(expr1 any-type,expr2 any-type)any-typeoctet_length(expr character-type)INTEGERposition(search character-type,source character-type,[CODEUNITS16|CODEUNITS32|OCTETS])INTEGERposstr(source character-type,search character-type)INTEGERpower(expr1 DOUBLE,expr2 DOUBLE)DOUBLEquarter(expr VARCHAR(26))INTEGERquarter(expr DATETIME)INTEGERradians(expr DOUBLE)DOUBLEraise_error(sqlstate VARCHAR,diagnostic VARCHAR)any-typerand([expr] INTEGER)DOUBLEreal(expr NUMERIC)REALrec2xml(constant DECIMAL,format VARCHAR,row-tag VARCHAR,column-name any-type)VARCHARregr_avgx(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_avgy(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_count(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_intercept(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_icpt(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_r2(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_slope(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_sxx(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_sxy(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_syy(expr1 NUMERIC,expr2 NUMERIC)DOUBLErepeat(expr VARCHAR,count INTEGER)VARCHARreplace(expr1 VARCHAR,expr2 VARCHAR,expr3 VARCHAR)VARCHARright(expr VARCHAR,length INTEGER)VARCHARround(expr1 DOUBLE,expr2 DOUBLE)DOUBLErtrim(expr VARCHAR)VARCHARseclabel(security-policy VARCHAR,security-label VARCHAR)DB2SECURITYLABELseclabel_by_name(security-policy VARCHAR,security-label VARCHAR)DB2SECURITYLABELseclabel_to_char(security-policy VARCHAR,security-label DB2SECURITYLABEL)VARCHARsecond(expr DATETIME)INTEGERsecond(expr VARCHAR)INTEGERsecond(expr DECIMAL)INTEGERsign(expr DOUBLE)DOUBLEsin(expr DOUBLE)DOUBLEsinh(expr DOUBLE)DOUBLEsmallint(expr NUMERIC)SMALLINTsmallint(expr VARCHAR)SMALLINTsoundex(expr VARCHAR(4000))CHAR(4)space(expr INTEGER)VARCHAR(4000)sqrt(expr DOUBLE)DOUBLEstddev(expr DOUBLE)DOUBLEstrip(expr VARCHAR,[BOTH|B|LEADING|L|TRAILING|T] strip-char CHAR)VARCHARsubstr(expr VARCHAR,start INTEGER,[length] INTEGER)VARCHARsubstring(expr VARCHAR,start INTEGER,[length] INTEGER,[CODEUNITS16|CODEUNITS32|OCTETS])VARCHARsum([DISTINCT|ALL] expr NUMERIC)NUMERICtable_name(objectname VARCHAR,[objectschema] VARCHAR)VARCHAR(128)table_schema(objectname VARCHAR,[objectschema] VARCHAR)VARCHAR(128)tan(expr DOUBLE)DOUBLEtanh(expr DOUBLE)DOUBLEtime(expr DATETIME)TIMEtime(expr VARCHAR)TIMEtimestamp(expr1 DATE,[expr2] TIME)TIMESTAMPtimestamp_format(expr VARCHAR,format VARCHAR)TIMESTAMPtimestamp_iso(expr DATETIME)TIMESTAMPtimestamp_iso(expr VARCHAR(26))TIMESTAMPtimestampdiff(expr1 INTEGER,expr2 CHAR(22))INTEGERto_char(expr TIMESTAMP,format VARCHAR)VARCHARto_date(expr VARCHAR,format VARCHAR)TIMESTAMPtranslate(expr VARCHAR,[to-string-expr] VARCHAR,[from-string-expr] VARCHAR,[pad-char] VARCHAR)VARCHARtrim(expr VARCHAR)VARCHARtrunc(expr1 DOUBLE,expr2 INTEGER)DOUBLEtruncate(expr1 DOUBLE,expr2 INTEGER)DOUBLEtype_id(expr any-structured-type)INTEGERtype_name(expr any-structured-type)VARCHAR(18)type_schema(expr any-structured-type)VARCHAR(128)ucase(expr VARCHAR)VARCHARupper(expr VARCHAR)VARCHARvalue(expr_list any-type)any-typevarchar(expr VARCHAR,[length] INTEGER)VARCHARvarchar(expr GRAPHIC,[length] INTEGER)VARCHARvarchar(expr DATETIME)VARCHARvarchar_format(expr TIMESTAMP,format VARCHAR)VARCHARvargraphic(expr GRAPHIC,[length] INTEGER)VARGRAPHICvargraphic(expr DATETIME)VARGRAPHICvar([DISTINCT|ALL] expr DOUBLE)DOUBLEvariance([DISTINCT|ALL] expr DOUBLE)DOUBLEweek(expr VARCHAR(26))INTEGERweek(expr DATETIME)INTEGERweek_iso(expr VARCHAR(26))INTEGERweek_iso(expr DATETIME)INTEGERyear(expr DATETIME)INTEGERyear(expr VARCHAR)INTEGERyear(expr DECIMAL)INTEGERxmlagg(expr XML)XMLxmlattributes(expr any-sql-expression)XMLxmlcomment(expr character-type)XMLxmlconcat(expr_list XML)XMLxmldocument(expr XML)XMLxmlelement(NAME element-name XML,[declaration] xmlnamespaces,[function]xmlattributes,[element-content] any-sql-expression,[OPTION])XMLxmlforest([declaration] xmlnamespaces,[element-content] any-sql-expression,[OPTION])XMLxmlnamespaces(namespace-uri character-type)XMLxmlparse(document_expr character-type,[STRIP WHITESPACE|PRESERVE WHITESPACE] )XMLxmlpi(name pi-name character-type,[expr] character-type)XMLxmlquery(expr character-type PASSING [BY REF] xquery-arguments any-sql-expression-list)XMLxmlserialize(expr character-type)XMLxmltable([declaration] xmlnamespaces,row-xquery-expression character-type)tablexmltext(expr character-type)XMLxmlvalidate(expr XML)XMLxmlxsrobjectid(expr XML)BIGINT
batchDelim=$$$
intelSql=1
kwShowAfter=2
qtDatabases=
qtSchemas=Schemas (DB2 UDB)
qtObjects=Objects (DB2 UDB)
qtColumns=Columns (DB2 UDB) + Keys
qtArguments=Arguments (DB2 UDB)
qtPackage=
qtJoins=Joins (DB2 UDB)
qtDDL=DDL Code (DB2 UDB)
qtSynonym=Synonyms (DB2 UDB)
qtContext=Context (DB2 UDB)
qtObjType=Object Types (DB2)
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000000000000000000000000000000000000000000000000000000000000
objOrder=1A1905180A031E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.5]
enabled=0
caption=DB2 for iSeries
export=1
dbType=3
addDelim=0
addAlias=1
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]abs(expr DOUBLE)DOUBLEabsval(expr DOUBLE)DOUBLEacos(expr DOUBLE)DOUBLEascii(expr VARCHAR)INTEGERasin(expr DOUBLE)DOUBLEatan(expr DOUBLE)DOUBLEatan2(expr DOUBLE)DOUBLEatanh(expr DOUBLE)DOUBLEavg([DISTINCT|ALL] expr NUMERIC)NUMERICbigint(expr NUMERIC)BIGINTbigint(expr VARCHAR)BIGINTbigint(expr DATETIME)BIGINTblob(expr character-type,[length] INTEGER)BLOBceil(expr DOUBLE)DOUBLEceiling(expr DOUBLE)DOUBLEchar(expr character-type,[length] INTEGER)CHARchar(expr DATETIME,[ISO|USA|EUR|JIS|LOCAL])CHARchar(expr NUMERIC,[decimal_char] CHAR)CHARcharacter_length(expr character-type)INTEGERchr(expr INTEGER)CHAR(1)clob(expr character-type,[length] INTEGER)CLOBcoalesce(expr_list any-type)any-typeconcat(expr1 character-type,expr2 character-type)character-typecorr(expr1 NUMERIC,expr2 NUMERIC)DOUBLEcorrelation(expr1 NUMERIC,expr2 NUMERIC)DOUBLEcos(expr DOUBLE)DOUBLEcosh(expr DOUBLE)DOUBLEcot(expr DOUBLE)DOUBLEcount([DISTINCT|ALL] expr any-type)INTEGERcount_big([DISTINCT|ALL] expr any-type)DECIMAL(31,0)covar(expr1 NUMERIC,expr2 NUMERIC)DOUBLEcovariance(expr1 NUMERIC,expr2 NUMERIC)DOUBLEdatapartitionnum(expr any-type)INTEGERdate(expr DATETIME)DATEdate(expr VARCHAR)DATEdate(expr DOUBLE)DATEday(expr DATETIME)INTEGERday(expr VARCHAR)INTEGERday(expr DECIMAL)INTEGERdayname(expr VARCHAR(26))VARCHAR(100)dayname(expr DATETIME)VARCHAR(100)dayofweek(expr VARCHAR(26))INTEGERdayofweek(expr DATETIME)INTEGERdayofweek_iso(expr VARCHAR(26))INTEGERdayofweek_iso(expr DATETIME)INTEGERdayofyear(expr VARCHAR(26))INTEGERdayofyear(expr DATETIME)INTEGERdays(expr VARCHAR)INTEGERdays(expr DATETIME)INTEGERdbclob(expr GRAPHIC-type,[length] INTEGER)dbclobdbpartitionnum(expr any-type)INTEGERdec(expr NUMERIC,[precision] INTEGER,[scale] INTEGER)DECIMALdec(expr DATETIME,[precision] INTEGER,[scale] INTEGER)DECIMALdec(expr VARCHAR,[precision] INTEGER,[scale] INTEGER,[decimal] CHAR)DECIMALdecimal(expr NUMERIC,[precision] INTEGER,[scale] INTEGER)DECIMALdecimal(expr DATETIME,[precision] INTEGER,[scale] INTEGER)DECIMALdecimal(expr VARCHAR,[precision] INTEGER,[scale] INTEGER,[decimal] CHAR)DECIMALdecrypt_bin(expr VARCHAR FOR BIT DATA,[password] VARCHAR)VARCHAR FOR BIT DATAdecrypt_char(expr VARCHAR FOR BIT DATA,[password] VARCHAR)VARCHARdegrees(expr DOUBLE)DOUBLEderef(expr any-structured-type)any-structured-typedifference(expr1 VARCHAR(4000),expr2 VARCHAR(4000))INTEGERdigits(expr DECIMAL)VARCHARdouble(expr NUMERIC)DOUBLEdouble(expr VARCHAR)DOUBLEdouble_precision(expr NUMERIC)DOUBLEdouble_precision(expr VARCHAR)DOUBLEencrypt(expr VARCHAR,[password] VARCHAR,[hint] VARCHAR)VARCHAR FOR BIT DATAevent_mon_state(expr VARCHAR)INTEGERexp(expr DOUBLE)DOUBLEfloat(expr NUMERIC)DOUBLEfloat(expr VARCHAR)DOUBLEfloor(expr DOUBLE)DOUBLEgenerate_unique()CHAR(13) FOR BIT DATAgethint(encrypted_data VARCHAR FOR BIT DATA)VARCHAR(32)graphic(expr GRAPHIC,[length] INTEGER)GRAPHICgraphic(expr character-type)GRAPHICgraphic(expr DATETIME,[ISO|USA|EUR|JIS|LOCAL])GRAPHICgrouping(expr any-type)SMALLINThashedvalue(expr any-type)INTEGERhex(expr any-type)VARCHARhour(expr DATETIME)INTEGERhour(expr VARCHAR)INTEGERhour(expr DECIMAL)INTEGERidentity_val_local()DECIMAL(31,0)insert(expr1 VARCHAR,expr2 INTEGER,expr3 INTEGER,expr4 VARCHAR)VARCHARint(expr NUMERIC)INTEGERint(expr DATETIME)INTEGERint(expr VARCHAR)INTEGERinteger(expr NUMERIC)INTEGERinteger(expr DATETIME)INTEGERinteger(expr VARCHAR)INTEGERjulian_day(expr VARCHAR(26))INTEGERjulian_day(expr DATETIME)INTEGERlcase(expr VARCHAR)VARCHARleft(expr VARCHAR,length INTEGER)VARCHARlength(expr any-type,[CODEUNITS16|CODEUNITS32|OCTETS])INTEGERln(expr DOUBLE)DOUBLElocate(search character-type,source character-type,[start] intger,[CODEUNITS16|CODEUNITS32|OCTETS])INTEGERlog(expr DOUBLE)DOUBLElog10(expr DOUBLE)DOUBLElong_varchar(expr character-type)LONG VARCHARlong_vargraphic(expr GRAPHIC)LONG VARGRAPHIClower(expr VARCHAR)VARCHARltrim(expr VARCHAR)VARCHARmax([DISTINCT|ALL] expr any-type)any-typemicrosecond(expr TIMESTAMP)INTEGERmicrosecond(expr VARCHAR)INTEGERmicrosecond(expr DECIMAL)INTEGERmidnight_seconds(expr VARCHAR(26))INTEGERmidnight_seconds(expr DATETIME)INTEGERmin([DISTINCT|ALL] expr any-type)any-typeminute(expr DATETIME)INTEGERminute(expr VARCHAR)INTEGERminute(expr DECIMAL)INTEGERmod(expr1 INTEGER,expr2 INTEGER)INTEGERmonth(expr DATETIME)INTEGERmonth(expr VARCHAR)INTEGERmonth(expr DECIMAL)INTEGERmonthname(expr VARCHAR(26))VARCHAR(100)monthname(expr DATETIME)VARCHAR(100)multiply_alt(expr1 DECIMAL,expr2 DECIMAL)DECIMALnullif(expr1 any-type,expr2 any-type)any-typeoctet_length(expr character-type)INTEGERposition(search character-type,source character-type,[CODEUNITS16|CODEUNITS32|OCTETS])INTEGERposstr(source character-type,search character-type)INTEGERpower(expr1 DOUBLE,expr2 DOUBLE)DOUBLEquarter(expr VARCHAR(26))INTEGERquarter(expr DATETIME)INTEGERradians(expr DOUBLE)DOUBLEraise_error(sqlstate VARCHAR,diagnostic VARCHAR)any-typerand([expr] INTEGER)DOUBLEreal(expr NUMERIC)REALrec2xml(constant DECIMAL,format VARCHAR,row-tag VARCHAR,column-name any-type)VARCHARregr_avgx(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_avgy(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_count(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_intercept(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_icpt(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_r2(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_slope(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_sxx(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_sxy(expr1 NUMERIC,expr2 NUMERIC)DOUBLEregr_syy(expr1 NUMERIC,expr2 NUMERIC)DOUBLErepeat(expr VARCHAR,count INTEGER)VARCHARreplace(expr1 VARCHAR,expr2 VARCHAR,expr3 VARCHAR)VARCHARright(expr VARCHAR,length INTEGER)VARCHARround(expr1 DOUBLE,expr2 DOUBLE)DOUBLErtrim(expr VARCHAR)VARCHARseclabel(security-policy VARCHAR,security-label VARCHAR)DB2SECURITYLABELseclabel_by_name(security-policy VARCHAR,security-label VARCHAR)DB2SECURITYLABELseclabel_to_char(security-policy VARCHAR,security-label DB2SECURITYLABEL)VARCHARsecond(expr DATETIME)INTEGERsecond(expr VARCHAR)INTEGERsecond(expr DECIMAL)INTEGERsign(expr DOUBLE)DOUBLEsin(expr DOUBLE)DOUBLEsinh(expr DOUBLE)DOUBLEsmallint(expr NUMERIC)SMALLINTsmallint(expr VARCHAR)SMALLINTsoundex(expr VARCHAR(4000))CHAR(4)space(expr INTEGER)VARCHAR(4000)sqrt(expr DOUBLE)DOUBLEstddev(expr DOUBLE)DOUBLEstrip(expr VARCHAR,[BOTH|B|LEADING|L|TRAILING|T] strip-char CHAR)VARCHARsubstr(expr VARCHAR,start INTEGER,[length] INTEGER)VARCHARsubstring(expr VARCHAR,start INTEGER,[length] INTEGER,[CODEUNITS16|CODEUNITS32|OCTETS])VARCHARsum([DISTINCT|ALL] expr NUMERIC)NUMERICtable_name(objectname VARCHAR,[objectschema] VARCHAR)VARCHAR(128)table_schema(objectname VARCHAR,[objectschema] VARCHAR)VARCHAR(128)tan(expr DOUBLE)DOUBLEtanh(expr DOUBLE)DOUBLEtime(expr DATETIME)TIMEtime(expr VARCHAR)TIMEtimestamp(expr1 DATE,[expr2] TIME)TIMESTAMPtimestamp_format(expr VARCHAR,format VARCHAR)TIMESTAMPtimestamp_iso(expr DATETIME)TIMESTAMPtimestamp_iso(expr VARCHAR(26))TIMESTAMPtimestampdiff(expr1 INTEGER,expr2 CHAR(22))INTEGERto_char(expr TIMESTAMP,format VARCHAR)VARCHARto_date(expr VARCHAR,format VARCHAR)TIMESTAMPtranslate(expr VARCHAR,[to-string-expr] VARCHAR,[from-string-expr] VARCHAR,[pad-char] VARCHAR)VARCHARtrim(expr VARCHAR)VARCHARtrunc(expr1 DOUBLE,expr2 INTEGER)DOUBLEtruncate(expr1 DOUBLE,expr2 INTEGER)DOUBLEtype_id(expr any-structured-type)INTEGERtype_name(expr any-structured-type)VARCHAR(18)type_schema(expr any-structured-type)VARCHAR(128)ucase(expr VARCHAR)VARCHARupper(expr VARCHAR)VARCHARvalue(expr_list any-type)any-typevarchar(expr VARCHAR,[length] INTEGER)VARCHARvarchar(expr GRAPHIC,[length] INTEGER)VARCHARvarchar(expr DATETIME)VARCHARvarchar_format(expr TIMESTAMP,format VARCHAR)VARCHARvargraphic(expr GRAPHIC,[length] INTEGER)VARGRAPHICvargraphic(expr DATETIME)VARGRAPHICvar([DISTINCT|ALL] expr DOUBLE)DOUBLEvariance([DISTINCT|ALL] expr DOUBLE)DOUBLEweek(expr VARCHAR(26))INTEGERweek(expr DATETIME)INTEGERweek_iso(expr VARCHAR(26))INTEGERweek_iso(expr DATETIME)INTEGERyear(expr DATETIME)INTEGERyear(expr VARCHAR)INTEGERyear(expr DECIMAL)INTEGERxmlagg(expr XML)XMLxmlattributes(expr any-sql-expression)XMLxmlcomment(expr character-type)XMLxmlconcat(expr_list XML)XMLxmldocument(expr XML)XMLxmlelement(NAME element-name XML,[declaration] xmlnamespaces,[function]xmlattributes,[element-content] any-sql-expression,[OPTION])XMLxmlforest([declaration] xmlnamespaces,[element-content] any-sql-expression,[OPTION])XMLxmlnamespaces(namespace-uri character-type)XMLxmlparse(document_expr character-type,[STRIP WHITESPACE|PRESERVE WHITESPACE] )XMLxmlpi(name pi-name character-type,[expr] character-type)XMLxmlquery(expr character-type PASSING [BY REF] xquery-arguments any-sql-expression-list)XMLxmlserialize(expr character-type)XMLxmltable([declaration] xmlnamespaces,row-xquery-expression character-type)tablexmltext(expr character-type)XMLxmlvalidate(expr XML)XMLxmlxsrobjectid(expr XML)BIGINT
batchDelim=$$$
intelSql=1
kwShowAfter=2
qtDatabases=
qtSchemas=Schemas (DB2 iSeries)
qtObjects=Objects (DB2 iSeries)
qtColumns=Columns (DB2 UDB) + Keys
qtArguments=Arguments (DB2 iSeries)
qtPackage=
qtJoins=Joins (DB2 iSeries)
qtDDL=DDL Code (DB2 iSeries)
qtSynonym=
qtContext=Context (DB2 iSeries)
qtObjType=
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000000000000000000000000000000000000000000000000000000000000
objOrder=1A1905180A031E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.6]
enabled=0
caption=PostgreSQL
export=1
dbType=7
addDelim=0
addAlias=1
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]-- Mathematical Functionsabs(x NUMERIC)NUMERICcbrt(dp DOUBLE)DOUBLEceil(x NUMERIC)NUMERICceiling(x NUMERIC)NUMERICdegrees(dp DOUBLE)DOUBLEexp(x NUMERIC)NUMERICfloor(x NUMERIC)NUMERICln(x NUMERIC)NUMERIClog(x NUMERIC)NUMERIClog(b NUMERIC, x NUMERIC)NUMERICmod(y NUMERIC, x NUMERIC)NUMERICpi()DOUBLEpower(a NUMERIC, b NUMERIC)NUMERICradians(dp DOUBLE)DOUBLErandom()DOUBLEround(x NUMERIC, [s] INTEGER)NUMERICsetseed(dp DOUBLE)VOIDsign(x NUMERIC)NUMERICsqrt(x NUMERIC)NUMERICtrunc(x NUMERIC,[s] INTEGER)NUMERICtrunc(parm MACADDR)MACADDRwidth_bucket(op NUMERIC, b1 NUMERIC, b2 NUMERIC, count INTEGER)INTEGERacos(x DOUBLE)DOUBLEasin(x DOUBLE)DOUBLEatan(x DOUBLE)DOUBLEatan2(y DOUBLE, x DOUBLE)DOUBLEcos(x DOUBLE)DOUBLEcot(x DOUBLE)DOUBLEsin(x DOUBLE)DOUBLEtan(x DOUBLE)DOUBLE-- String Functionsbit_length(string TEXT)INTEGERchar_length(string TEXT)INTEGERcharacter_length(string TEXT)INTEGERlower(string TEXT)TEXToctet_length(string TEXT)INTEGERoverlay(string PLACING character-type FROM INTEGER [FOR INTEGER])TEXTposition(substring character-type)INTEGERsubstring(string [FROM INTEGER] [for INTEGER])TEXTsubstring(string FROM pattern [FOR ESCAPE])TEXTtrim([LEADING | TRAILING | BOTH] [characters] FROM character-type)TEXTupper(string TEXT)TEXTascii(string TEXT)INTEGERbtrim(string TEXT, [characters] TEXT)TEXTbtrim(string BYTEA, bytes BYTEA)BYTEAchr(expr INTEGER)TEXTconvert(string BYTEA, src_encoding NAME, dest_encoding NAME)BYTEAconvert_from(string BYTEA, src_encoding NAME)TEXTconvert_to(string TEXT, dest_encoding NAME)BYTEAdecode(string TEXT, type TEXT)BYTEAencode(string BYTEA, type TEXT)TEXTinitcap(string TEXT)TEXTlength(string TEXT)INTEGERlength(string BYTEA, encoding NAME)INTEGERlength(parm OBJECT)DOUBLElength(vector TSVECTOR)INTEGERlpad(string TEXT, length INTEGER, [fill] TEXT)TEXTltrim(string TEXT, [characters] TEXT)TEXTmd5(string TEXT)TEXTpg_client_encoding()NAMEquote_ident(string TEXT)TEXTquote_literal(string TEXT)TEXTquote_literal(value anyelement)TEXTregexp_matches(string TEXT, pattern TEXT, [flags] TEXT)SETOF TEXT[]regexp_replace(string TEXT, pattern TEXT, replacement TEXT, [flags] TEXT)TEXTregexp_split_to_array(string TEXT, pattern TEXT, [flags] TEXT)TEXT[]regexp_split_to_table(string TEXT, pattern TEXT, [flags] TEXT)SETOF TEXTrepeat(string TEXT, number INTEGER)TEXTreplace(string TEXT, from TEXT, to TEXT)TEXTrpad(string TEXT, length INTEGER, [fill] TEXT)TEXTrtrim(string TEXT, [characters] TEXT)TEXTsplit_part(string TEXT, delimiter TEXT, field INTEGER)TEXTstrpos(string TEXT, substring TEXT)INTEGERsubstr(string TEXT, from INTEGER, [count] INTEGER)TEXTto_ascii(string TEXT, [encoding] TEXT)TEXTto_hex(x number)TEXTtranslate(string TEXT, from TEXT, to TEXT)TEXT-- Binary String Functionsget_bit(string TEXT, offset INTEGER)INTEGERget_byte(string TEXT, offset INTEGER)INTEGERoctet_length(string TEXT)INTEGERset_bit(string TEXT, offset INTEGER, newvalue INTEGER)BYTEAset_byte(string TEXT, offset INTEGER, newvalue INTEGER)BYTEAmd5(string TEXT)TEXT-- Formatting Functionsto_char(expr TIMESTAMP,pattern TEXT)TEXTto_char(expr INTEGERerval,pattern TEXT)TEXTto_char(expr INTEGER,pattern TEXT)TEXTto_char(expr DOUBLE,pattern TEXT)TEXTto_char(expr NUMERIC,pattern TEXT)TEXTto_date(expr TEXT,pattern TEXT)DATEto_number(expr TEXT,pattern TEXT)NUMERICto_timestamp(expr TEXT,pattern TEXT)TIMESTAMP with time zoneto_timestamp(expr DOUBLE)TIMESTAMP with time zone-- Date/Time Functionsage(expr TIMESTAMP,[expr2] TIMESTAMP)INTEGERervalclock_timestamp()TIMESTAMP with time zonecurrent_date()DATEcurrent_time()TIME with time zonecurrent_timestamp()TIMESTAMP with time zonedate_part(part TEXT,expr TIMESTAMP)DOUBLEdate_part(part TEXT,expr INTEGERerval)DOUBLEdate_trunc(part TEXT,expr TIMESTAMP)TIMESTAMPextract(field from TIMESTAMP)DOUBLEextract(field from INTEGERerval)DOUBLEisfinite(expr TIMESTAMP)BOOLEANisfinite(expr INTEGERerval)BOOLEANjustify_days(expr INTEGERerval)INTEGERervaljustify_hours(expr INTEGERerval)INTEGERervaljustify_interval(expr INTEGERerval)INTEGERervallocaltime()timelocaltimestamp()TIMESTAMPnow()TIMESTAMP with time zonestatement_timestamp()TIMESTAMP with time zonetimeofday()TEXTtransaction_timestamp()TIMESTAMP with time zone-- Enum Support Functionsenum_first(expr ANYENUM)ANYENUMenum_last(expr ANYENUM)ANYENUMenum_range(expr ANYENUM,[expr] ANYENUM)ANYENUM-- Geometric Functionsarea(parm OBJECT)DOUBLEcenter(parm OBJECT)POINTdiameter(parm CIRCLE)DOUBLEheight(parm BOX)DOUBLEisclosed(parm PATH)BOOLEANisopen(parm PATH)BOOLEANnpoints(parm PATH)INTEGERnpoints(parm POLYGON)INTEGERpclose(parm PATH)PATHpopen(parm PATH)PATHradius(parm CIRCLE)DOUBLEwidth(parm BOX)DOUBLEbox(parm CIRCLE)BOXbox(parm1 POINT,parm2 POINT)BOXbox(parm POLYGON)BOXcircle(parm BOX)CIRCLEcircle(center POINT,radius DOUBLE)CIRCLEcircle(parm POLYGON)CIRCLElseg(parm BOX)LSEGlseg(parm1 POINT,parm2 POINT)LSEGpath(parm POLYGON)POINTpoint(x DOUBLE, y DOUBLE)POINTpoint(parm BOX)POINTpoint(parm CIRCLE)POINTpoint(parm LSEG)POINTpoint(parm POLYGON)POINTpolygon(parm BOX)POLYGONpolygon(parm CIRCLE)POLYGONpolygon(npts INTEGER,parm CIRCLE)POLYGONpolygon(parm PATH)POLYGON-- Network Address Functionsabbrev(parm INET)TEXTabbrev(parm CIDR)TEXTbroadcast(parm INET)INETfamily(parm INET)INTEGERhost(parm INET)TEXThostmask(parm INET)INETmasklen(parm INET)INTEGERnetmask(parm INET)INETnetwork(parm INET)CIDRset_masklen(parm INET,len INTEGER)INETset_masklen(parm CIDR,len INTEGER)CIDRtext(parm INET)TEXT-- Text Search Functionsto_tsvector([config] REGCONFIG, document TEXT)TSVECTORsetweight(vector TSVECTOR,ch CHAR)TSVECTORstrip(vector TSVECTOR)TSVECTORto_tsquery([config] REGCONFIG,query TEXT)TSQUERYplainto_tsquery([config] REGCONFIG, query TEXT)TSQUERYnumnode(query TSQUERY)INTEGERquerytree(query TSQUERY)TEXTts_rank([weights] FLOAT4[], vector TSVECTOR, query TSQUERY,[normalization] INTEGER)FLOAT4ts_rank_cd([weights] FLOAT4[], vector TSVECTOR, query TSQUERY, [normalization] INTEGER)FLOAT4ts_headline([config] REGCONFIG, document TEXT, query TSQUERY, [options] TEXT)TEXTts_rewrite(query TSQUERY, target TSQUERY, substitute TSQUERY)TSQUERYts_rewrite(query TSQUERY, select TEXT)TSQUERYget_current_ts_config()REGCONFIGtsvector_update_trigger()TRIGGERtsvector_update_trigger_column()TRIGGERts_debug([config] REGCONFIG, document TEXT, alias OUT TEXT, description OUT TEXT, token OUT TEXT, dictionaries OUT regdictionary[], dictionary OUT regdictionary, lexemes OUT TEXT[])SETOF RECORDts_lexize(dict regdictionary, token TEXT)TEXT[]ts_parse(parser_name TEXT, document TEXT, tokid OUT INTEGER, token OUT TEXT)SETOF RECORDts_parse(parser_oid OID, document TEXT, tokid OUT INTEGER, token OUT TEXT)SETOF RECORDts_token_type(parser_name TEXT, tokid OUT INTEGER, alias OUT TEXT, description OUT TEXT)SETOF RECORDts_token_type(parser_oid OID, tokid OUT INTEGER, alias OUT TEXT, description OUT TEXT)SETOF RECORDts_stat(sqlquery TEXT, [weights] TEXT, word OUT TEXT, ndoc OUT INTEGER, nentry OUT INTEGER)SETOF RECORD-- XML Functionsxmlcomment(comment TEXT)XMLxmlconcat(expr XML)XMLxmlelement(name NAME, [xmlattributes(value)], content TEXT)XMLxmlforest(content TEXT)XMLxmlpi(name TARGET, content TEXT)XMLxmlroot(expr XML, version TEXT|no value, [standalone] YES|NO|NO VALUE)XMLxpath(xpath TEXT, expr XML, [nsarray] array)XMLtable_to_xml(tbl regclass, nulls BOOLEAN, tableforest BOOLEAN, targetns TEXT)XMLquery_to_xml(query TEXT, nulls BOOLEAN, tableforest BOOLEAN, targetns TEXT)XMLcursor_to_xml(cursor refcursor, count INTEGER, nulls BOOLEAN, tableforest BOOLEAN, targetns TEXT)XML-- Sequence Functionscurrval(regclass TEXT)BIGINTlastval()BIGINTnextval(regclass TEXT)BIGINTsetval(regclass TEXT,val BIGINT,[is_called] BOOLEAN)BIGINT-- Array Functionsarray_append(array ANYARRAY, anyelement INTEGER)ANYARRAYarray_cat(array1 ANYARRAY,array2 ANYARRAY)ANYARRAYarray_dims(array ANYARRAY)TEXTarray_lower(array ANYARRAY,dimension INTEGER)INTEGERarray_prepend(anyelement INTEGER,array ANYARRAY)ANYARRAYarray_to_string(array ANYARRAY,pattern TEXT)TEXTarray_upper(array ANYARRAY,dimension INTEGER)INTEGERstring_to_array(expr TEXT,delimiter TEXT)TEXT[]-- Aggregate Functionsavg(expr NUMERIC)NUMERICbit_and(expr NUMERIC)NUMERICbit_or(expr NUMERIC)NUMERICbool_and(expr NUMERIC)BOOLEANbool_or(expr NUMERIC)BOOLEANcount(expr any-type)BIGINTevery(expr NUMERIC)BOOLEANmax(expr any-type)any-typemin(expr any-type)any-typesum(expr NUMERIC)NUMERICcorr(y DOUBLE,x DOUBLE)DOUBLEcovar_pop(y DOUBLE,x DOUBLE)DOUBLEcovar_samp(y DOUBLE,x DOUBLE)DOUBLEregr_avgx(y DOUBLE,x DOUBLE)DOUBLEregr_avgy(y DOUBLE,x DOUBLE)DOUBLEregr_count(y DOUBLE,x DOUBLE)BIGINTregr_intercept(y DOUBLE,x DOUBLE)DOUBLEregr_r2(y DOUBLE,x DOUBLE)DOUBLEregr_slope(y DOUBLE,x DOUBLE)DOUBLEregr_sxx(y DOUBLE,x DOUBLE)DOUBLEregr_sxy(y DOUBLE,x DOUBLE)DOUBLEregr_syy(y DOUBLE,x DOUBLE)DOUBLEstddev(expr NUMERIC)NUMERICstddev_pop(expr NUMERIC)NUMERICstddev_samp(expr NUMERIC)NUMERICvariance(expr NUMERIC)NUMERICvar_pop(expr NUMERIC)NUMERICvar_samp(expr NUMERIC)NUMERIC-- Set Returning Functionsgenerate_series(start INTEGER, stop INTEGER, [step] INTEGER)INTEGER-- Session Information Functionscurrent_database()NAMEcurrent_schema()NAMEcurrent_schemas(expr BOOLEAN)NAME[]current_user()NAMEinet_client_addr()INETinet_client_port()INTEGERinet_server_addr()INETinet_server_port()INTEGERpg_my_temp_schema()OIDpg_is_other_temp_schema(expr OID)BOOLEANpg_postmaster_start_time()TIMESTAMP with time zonesession_user()NAMEuser()NAMEversion()TEXT-- Access Privilege Inquiry Functionshas_database_privilege([user] NAME, database NAME, privilege NAME)BOOLEANhas_function_privilege([user] NAME, function NAME, privilege NAME)BOOLEANhas_language_privilege([user] NAME, language NAME, privilege NAME)BOOLEANhas_schema_privilege([user] NAME, schema NAME, privilege NAME)BOOLEANhas_table_privilege([user] NAME, table NAME, privilege NAME)BOOLEANhas_tablespace_privilege([user] NAME, tablespace NAME, privilege NAME)BOOLEANpg_has_role([user] NAME, role NAME, privilege NAME)BOOLEAN-- Schema Visibility Inquiry Functionspg_conversion_is_visible(conversion OID)BOOLEANpg_function_is_visible(function OID)BOOLEANpg_operator_is_visible(operator OID)BOOLEANpg_opclass_is_visible(opclass OID)BOOLEANpg_table_is_visible(table OID)BOOLEANpg_ts_config_is_visible(config OID)BOOLEANpg_ts_dict_is_visible(dict OID)BOOLEANpg_ts_parser_is_visible(parser OID)BOOLEANpg_ts_template_is_visible(template OID)BOOLEANpg_type_is_visible(type OID)BOOLEAN-- System Catalog Information Functionsformat_type(type_oid OID, type_mod TYPEMOD )TEXTpg_get_constraintdef(constraint_oid OID, [pretty] BOOLEAN)TEXTpg_get_expr(expr_text TEXT, relation_oid OID, [pretty] BOOLEAN)TEXTpg_get_indexdef(index OID, column_no INTEGER, [pretty] BOOLEAN)TEXTpg_get_ruledef(rule_oid OID, [pretty] BOOLEAN)TEXTpg_get_serial_sequence(table_name NAME, column_name NAME)TEXTpg_get_triggerdef(trigger_oid OID)TEXTpg_get_userbyid(roleid INTEGER)NAMEpg_get_viewdef(view_name NAME, [pretty] BOOLEAN)TEXTpg_get_viewdef(view_oid OID, [pretty] BOOLEAN)TEXTpg_tablespace_databases(tablespace_oid OID)SETOF OID-- Comment Information Functionscol_description(table_oid OID, column_no INTEGER)TEXTobj_description(object_oid OID, [catalog] NAME)TEXTshobj_description(object_oid OID, catalog NAME)TEXT-- Transaction IDs and snapshotstxid_current()BIGINTtxid_current_snapshot()TXID_SNAPSHOTTXID_SNAPSHOT_xmin(snapshot TXID_SNAPSHOT)BIGINTTXID_SNAPSHOT_xmax(snapshot TXID_SNAPSHOT)BIGINTTXID_SNAPSHOT_xip(snapshot TXID_SNAPSHOT)SETOF BIGINTtxid_visible_in_snapshot(txid BIGINT, snapshot TXID_SNAPSHOT)BOOLEANxmin()TXIDxmax()TXIDxip_list()TXID-- Configuration Settings Functionscurrent_setting(setting NAME)TEXTset_config(setting NAME, new_value TEXT, is_local BOOLEAN)TEXT-- Server Signalling Functionspg_cancel_backend(pid INTEGER)BOOLEANpg_reload_conf()BOOLEANpg_rotate_logfile()BOOLEAN-- Backup Control Functionspg_start_backup(label TEXT)TEXTpg_stop_backup()TEXTpg_switch_xlog()TEXTpg_current_xlog_location()TEXTpg_current_xlog_insert_location()TEXTpg_xlogfile_name_offset(location TEXT)TEXTpg_xlogfile_name(location TEXT)TEXT-- Database Object Size Functionspg_column_size(expr any)INTEGERpg_database_size(database OID)BIGINTpg_database_size(database NAME)BIGINTpg_relation_size(table_or_index OID)BIGINTpg_relation_size(table_or_index TEXT)BIGINTpg_size_pretty(size BIGINT)TEXTpg_tablespace_size(tablespace OID)BIGINTpg_tablespace_size(tablespace NAME)BIGINTpg_total_relation_size(expr OID)BIGINTpg_total_relation_size(expr TEXT)BIGINT--Generic File Access Functionspg_ls_dir(dirname TEXT)SETOF TEXTpg_read_file(filename TEXT, offset BIGINT, length BIGINT)TEXTpg_stat_file(filename TEXT)RECORD-- Advisory Lock Functionspg_advisory_lock(key BIGINT)VOIDpg_advisory_lock(key1 INTEGER, key2 INTEGER)VOIDpg_advisory_lock_shared(key BIGINT)VOIDpg_advisory_lock_shared(key1 INTEGER, key2 INTEGER)VOIDpg_try_advisory_lock(key BIGINT)BOOLEANpg_try_advisory_lock(key1 INTEGER, key2 INTEGER)BOOLEANpg_try_advisory_lock_shared(key BIGINT)BOOLEANpg_try_advisory_lock_shared(key1 INTEGER, key2 INTEGER)BOOLEANpg_advisory_unlock(key BIGINT)BOOLEANpg_advisory_unlock(key1 INTEGER, key2 INTEGER)BOOLEANpg_advisory_unlock_shared(key BIGINT)BOOLEANpg_advisory_unlock_shared(key1 INTEGER, key2 INTEGER)BOOLEANpg_advisory_unlock_all()VOID
batchDelim=
intelSql=1
kwShowAfter=2
qtDatabases=Databases (PostgreSQL)
qtSchemas=Schemas (PostgreSQL)
qtObjects=Objects (PostgreSQL)
qtColumns=Columns (PostgreSQL) + Keys
qtArguments=Arguments (PostgreSQL)
qtPackage=
qtJoins=Joins (PostgreSQL)
qtDDL=DDL Code (PostgreSQL)
qtSynonym=
qtContext=Context (PostgreSQL)
qtObjType=
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000000000000000000000000000000000000000000000000000000000000
objOrder=1A1905180A03021E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.7]
enabled=0
caption=Sybase ASE
export=1
dbType=4
addDelim=0
addAlias=1
addSchema=3
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]abs(numeric_expression DATATYPE)DATATYPE;Absolute value of an expression.acos(cosine DATATYPE)DATATYPE;Angle (in radians) whose cosine is specified.ascii(char_expr NVARCHAR)NVARCHAR;ASCII code for the first character in an expression.asin(sine DATATYPE)DATATYPE;Angle (in radians) whose sine is specified.atan(tangent DATATYPE)DATATYPE;Angle (in radians) whose tangent is specified.atn2(sine DATATYPE, cosine DATATYPE)DATATYPE;Angle (in radians) whose sine and cosine are specified.avg([all|distinct] expr DATATYPE)DATATYPE;Numeric average of all (distinct) values.ceiling(value INTEGER)INTEGER;Smallest integer greater than or equal to the specified value.char(expr INTEGER)char;Character equivalent of an integer.charindex(char_expr1 DATATYPE, char_expr2 DATATYPE)INTEGER;Starting position of an char_expr1 inside char_expr2.char_length(char_expr DATATYPE)INTEGER;Number of characters in an expression.col_length(object_name SYSNAME, column_name SYSNAME)INTEGER;Defined length of a column.col_name(object_id INTEGER, column_id INTEGER,[database_id] INTEGER);Name of the column whose table and column IDs are specified.compare(char_expr1 DATATYPE, char_expr2 DATATYPE,[collation_name|collation_ID]);Compare two character strings based on alternate collation rules.convert(DATATYPE [(length)|(precision[,scale])][null|notnull], expression, [style])DATATYPE;Returns the specified value, converted to another DATATYPE or a different datetime display format.cos(angle DATATYPE)DATATYPE;Cosine of the specified angle.cot(angle DATATYPE)DATATYPE;Cotangent of the specified angle.count([all|distinct] expression DATATYPE)INTEGER;Number of (distinct) non-null values or the number of selected rows.curunreservedpgs(dbid INTEGER, lstart INTEGER, unreservedpgs INTEGER)INTEGER;Number of free pages in the specified disk piece.data_pgs([dbid] INTEGER, object_id INTEGER, {data_oam_pg_id|index_oam_pg_id} INTEGER)INTEGER;Number of pages used by the specified table or index.datalength(expression DATATYPE)INTEGER;Actual length, in bytes, of the specified column or string.dateadd(date_part code, INTEGER, date DATETIME) DATETIME;Date produced by adding a given number of years, quarters, hours, or other date parts to the specified date.datediff(datepart code, date1 DATETIME, date2 DATETIME)INTEGER;Difference between two dates.datename(datepart code, date DATETIME)VARCHAR;Name of the specified part of a datetime value.datepart(date_part code, date DATETIME)INTEGER;Value of the specified part of a datetime value.db_id(database_name VARCHAR)INTEGER;ID number of the specified database.db_name([database_id] INTEGER)VARCHAR;Name of the database whose ID number is specified.degrees(a NUMERIC)INTEGER;Size, in degrees, of an angle with the specified number of radians.difference(char_expr1 DATATYPE, char_expr2 DATATYPE)INTEGER;Difference between two soundex values.exp(approx NUMERIC)double;Value that results from raising the constant to the specified power.floor(a NUMERIC)INTEGER;Largest integer that is less than or equal to the specified value.get_appcontext("context_name" DATATYPE, "attribute_name" DATATYPE)DATATYPE;Value of the attribute in a specified context.getdate()DATETIME;Current system date and time.hextoint(hexadecimal_string VARCHAR)INTEGER;Platform-independent integer equivalent of a hexadecimal string.host_id()INTEGER;Host process ID or the client process.host_name()VARCHAR;Current host computer name of the client process.index_col(object_name VARCHAR, index_id smallint, key_#, [user_id])VARCHAR;Name of the indexed column in the specified table or view.index_colorder(object_name VARCHAR, index_id smallint, key_#, [user_id])VARCHAR;Column order.inttohex(expression INTEGER)BINARY;Platform-independent hexadecimal equivalent of the specified integer.isnull(expression1 DATATYPE, expression2 DATATYPE)DATATYPE;Substitutes the value specified in expression2 when expression1 evaluates to NULL.is_sec_service_on(security_service_nm)BIT;Returns 1 if the security service is active and 0 if it is not.lct_admin();Manages the last-chance threshold. Returns the current value of the last-chance threshold. Aborts transactions in a transaction log that has reached its last-chance threshold.license_enabled("ase_server"|"ase_ha"|"ase_dtm"|"ase_java"|"ase_asm")BIT;Returns 1 if a feature�?license is enabled, 0 if the license is not enabled, or null if you specify an invalid license name.list_appcontext(["context_name"]);Lists all the attributes of all the contexts in the current session.lockscheme(object_name)SYSNAME;Locking scheme of the specified object as a string.log(approx_numeric INTEGER)double;Natural logarithm of the specified number.log10(approx_numeric INTEGER)double;Base 10 logarithm of the specified number.lower(char_expr DATATYPE)DATATYPE;Lowercase equivalent of the specified expression.ltrim(char_expr DATATYPE)DATATYPE;Returns the specified expression, trimmed of leading blanks.max(expression DATATYPE)DATATYPE;Highest value in an expression.min(expression DATATYPE)DATATYPE;Lowest value in a column.mut_excl_roles(role1 NVARCHAR, role2 NVARCHAR [MEMBERSHIP|ACTIVATION]);Information about the mutual exclusivity between two roles.object_id(object_name NVARCHAR)INTEGER;Object ID of the specified object.object_name(object_id INTEGER, [database_id] INTEGER)SYSNAME;Name of the object whose object ID is specified.pagesize(object_name NVARCHAR, [index_name])INTEGER;Page size, in bytes, for the specified object.pagesize(object_id INTEGER, [db_id] INTEGER, [index_id] INTEGER)INTEGER.patindex("%pattern%", char_expr any-char-type, [using {bytes|characters|chars}])INTEGER;Starting position of the first occurrence of a specified pattern.pi()double;Returns the constant value 3.1415926535897936.power(value NUMERIC, power NUMERIC)NUMERIC;Returns the value that results from raising the specified number to a given power.proc_role("role_name" SYSNAME)INTEGER;Information about whether the user has been granted the specified role.ptn_data_pgs(object_id INTEGER, partition_id INTEGER)INTEGER;Number of data pages used by a partition.radians(angle INTEGER)INTEGER;Size, in radians, of an angle with the specified number of degrees.rand([integer])real;Random value between 0 and 1, which is generated using the specified seed value.replicate(char_expr, integer_expr)VARCHAR;String consisting of the specified expression repeated a given number of times.reserved_pgs(object_id INTEGER, {doampg|ioampg})INTEGER;Number of pages allocated to the specified table or index, and reports pages used for internal structures.reverse(expression DATATYPE)DATATYPE;Returns the specified string with characters listed in reverse order.right(expr DATATYPE, length INTEGER)DATATYPE;The rightmost part of the expression with the specified number of characters.rm_appcontext("context_name" VARCHAR, "attribute_name" VARCHAR)INTEGER;Removes a specific application context, or all application contexts.role_contain("role1" VARCHAR, "role2" VARCHAR)BIT;Returns 1 if role2 contains role1.role_id("role_name" VARCHAR)INTEGER;System role ID of the role whose name you specify.role_name(role_id INTEGER)VARCHAR;Name of a role whose system role ID you specify.round(number, decimal_places)number;Returns the value of the specified number, rounded to a given number of decimal places.rowcnt(sysindexes.doampg)number;Estimate of the number of rows in the specified table.rtrim(char_expr DATATYPE)DATATYPE;Returns the specified expression, trimmed of trailing blanks.set_appcontext("context_name" VARCHAR, "attribute_name" VARCHAR, "attribute_value" VARCHAR)INTEGER;Sets an application context name, attribute name, and attribute value for a user session, defined by the attributes of a specified application.show_role();Shows the login�?currently active system-defined roles.show_sec_services();Lists the security services that are active for the session.sign(a NUMERIC);integer;Returns the sign (+1 for positive, 0, or -1 for negative) of the specified value.sin(approx_numeric INTEGER)real;Sine of the specified angle (in radians).sortkey(char_expression, [collation_name|collation_ID]);Generates values that can be used to order results based on collation behavior.soundex(char_expr)char(4);Returns a 4-character code representing the way an expression sounds.space(length INTEGER)VARCHAR;Returns a string consisting of the specified number of single-byte spaces.sqrt(approx_numeric DATATYPE)double;Square root of the specified number.str(approx_numeric DATATYPE, [length] INTEGER, [decimal] INTEGER)VARCHAR;Character equivalent of the specified number.stuff(char_expr1 DATATYPE, start INTEGER, length INTEGER, char_expr2 DATATYPE);Returns the string formed by deleting a specified number of characters from one string and replacing them with another string.substring(char_expr DATATYPE, start INTEGER, length INTEGER)DATATYPE;Returns the string formed by extracting the specified number of characters from another string.sum([all|distinct] expression DATATYPE)DATATYPE;Total of the values.suser_id([server_user_name])INTEGER;Server user�?ID number from the syslogins table.suser_name([server_user_id] INTEGER)VARCHAR;Name of the current server user or the user whose server ID is specified.syb_quit();Terminates the connection.syb_sendmsg(ip_address, port_number, message);UNIX only: sends a message to a User Datagram Protocol (UDP) port.tan(angle INTEGER)real;Tangent of the specified angle (in radians).textptr(column_name)varbinary;Pointer to the first page of a text or image column.textvalid("table_name.column_name", textpointer)BIT;Returns 1 if the pointer to the specified text column is valid, 0 if it is not.to_unichar(expr INTEGER)unichar;Unichar expression having the value of the integer expression.tsequal(browsed_row TIMESTAMP, stored_row TIMESTAMP);Compares timestamp values to prevent update on a row that has been modified since it was selected for browsing.uhighsurr(uchar_expr, start)BIT;Returns 1 if the Unicode value at position start is the high half of a surrogate pair (which should appear first in the pair). Returns 0 otherwise.ulowsurr(uchar_expr, start)BIT;Returns 1 if the Unicode value at position start is the low half of a surrogate pair (which should appear second in the pair). Returns 0 otherwise.upper(char_expr DATATYPE)DATATYPE;Uppercase equivalent of the specified string.uscalar(uchar_expr DATATYPE)INTEGER;Returns the Unicode scalar value for the first Unicode character in an expression.used_pgs(object_id INTEGER, doampg INTEGER, ioampg INTEGER)INTEGER;Number of pages used by a table or index. For an all-pages-locked table with a clustered index, it returns the sum of the table and index pages.user()VARCHAR;Name of the current user.user_id([user_name] VARCHAR)INTEGER;ID number of the specified user or of the current user in the database.user_name([user_id] INTEGER)VARCHAR;Name within the database of the specified user or of the current user.valid_name(character_expression VARCHAR)BIT;Returns 0 if the specified string is not a valid identifier or a number other than 0 if the string is a valid identifier.valid_user(server_user_id INTEGER)BIT;Returns 1 if the specified ID is a valid user or alias in at least one database on this Adaptive Server.[@@]@@boottime;datetime;Date and time Adaptive Server was last booted.@@char_convert;bit;Returns 0 if character set conversion is not in effect. Returns 1 if character set conversion is in effect.@@cis_rpc_handling;bit;Returns 0 if cis rpc handling is off. Returns 1 if cis rpc handling is on.@@cis_version;varchar;Date and version of Component Integration Services.@@client_csexpansion;integer;Expansion factor used when converting from the server character set to the client character set.@@client_csid;integer;Returns -1 if the client character set has never been initialized. Returns the client character set ID from syscharsets for the connection if the client character set has been initialized.@@client_csname;varchar;Returns NULL if client character set has never been initialized. Returns the name of the character set for the connection if the client character set has been initialized.@@cmpstate;integer;Current mode of Adaptive Server in a high availability environment.@@connections;integer;Number of user logins attempted.@@cpu_busy;integer;Number of seconds, in CPU time, that Adaptive Server's CPU was performing Adaptive Server work.@@curloid;integer;Current session's lock owner ID.@@dbts;timestamp;Timestamp of the current database.@@error;integer;Error number most recently generated by the system.@@errorlog;varchar;Full path to the directory in which the Adaptive Server errorlog is kept, relative to $SYBASE directory (%SYBASE% on NT).@@failedoverconn;integer;Returns a value greater than 0 if the connection to the primary companion has failed over and is executing on the secondary companion server. Used only in a high availability environment, and is session-specific.@@guestuserid;integer;ID of the guest user.@@hacmpservername;varchar;Name of the companion server in a high availability setup.@@haconnection;integer;Returns a value greater than 0 if the connection has the failover property enabled. This is a session-specific property.@@heapmemsize;integer;Size of the heap memory pool, in bytes.@@identity;integer;Most recently generated IDENTITY column value.@@idle;integer;Number of seconds, in CPU time, that Adaptive Server has been idle.@@invaliduserid;integer;Returns a value of -1 for an invalid user ID.@@io_busy;integer;Number of seconds in CPU time that Adaptive Server has spent doing input and output operations.@@isolation;integer;Session-specific isolation level (0, 1, or 3) of the current T-SQL program.@@kernel_addr;binary;Starting address of the first shared memory region that contains the kernel region. The result is in the form of 0xaddress pointer value.@@kernel_size;integer;Size of the kernel region that is part of the first shared memory region.@@langid;integer;Server-wide language ID of the language in use, as specified in syslanguages.langid.@@language;varchar;Name of the language in use, as specified in syslanguages.name.@@maxcharlen;integer;Maximum length, in bytes, of a character in Adaptive Server's default character set.@@max_connections;integer;Maximum number of simultaneous connections that can be made with Adaptive Server in the current computer environment.@@maxgroupid;integer;Highest group user ID. The highest value is 1048576.@@maxpagesize;integer;Server's logical page size.@@maxspid;integer;Maximum valid value for the spid.@@maxsuid;integer;Highest server user ID. The default value is 2147483647.@@maxuserid;integer;Highest user ID. The highest value is 2147483647.@@mempool_addr;binary;Global memory pool table address. The result is in the form 0xaddress pointer value. This variable is for internal use.@@mingroupid;integer;Lowest group user ID. The lowest value is 16384.@@min_poolsize;integer;Minimum size of a named cache pool, in kilobytes. It is calculated based on the DEFAULT_POOL_SIZE, which is 256, and the current value of max database page size.@@minspid;integer;Returns 1, which is the lowest value for spid.@@minsuid;integer;Minimum server user ID. The lowest value is -32768.@@minuserid;integer;Lowest user ID. The lowest value is -32768.@@ncharsize;integer;Maximum length, in bytes, of a character set in the current server default character set.@@nestlevel;integer;Current nesting level.@@nodeid;integer;Current installation's node ID. Adaptive Server generates a nodeid the first time the master device is first used@@options;binary;Hexadecimal representation of the session's set options.@@packet_errors;integer;Number of errors detected by Adaptive Server while reading and writing packets.@@pack_received;integer;Number of input packets read by Adaptive Server.@@pack_sent;integer;Number of output packets written by Adaptive Server.@@pagesize;integer;Server's virtual page size.@@parallel_degree;integer;Current maximum parallel degree setting.@@probesuid;integer;Returns a value of 2 for the probe user ID.@@procid;integer;Stored procedure ID of the currently executing procedure.@@rowcount;integer;Number of rows affected by the last query. @@rowcount is set to 0 by any command that does not return rows, such as an if, update, or delete statement. With cursors, @@rowcount represents the cumulative number of rows returned from the cursor result set to the client, up to the last fetch request.@@scan_parallel_degree;integer;Current maximum parallel degree setting for nonclustered index scans.@@servername;varchar;Name of Adaptive Server.@@shmem_flags;integer;Shared memory region properties. This variable is for internal use.@@spid;integer;Server process ID of the current process.@@sqlstatus;integer;Status information (warning exceptions) resulting from the execution of a fetch statement.@@stringsize;integer;Amount of character data returned from a toString() method. The default is 50. Max values may be up to 2GB. A value of zero specifies the default value.@@textcolid;integer;Column ID of the column referenced by @@textptr.@@textdbid;integer;Database ID of a database containing an object with the column referenced by @@textptr.@@textobjid;integer;Object ID of an object containing the column referenced by @@textptr.@@textptr;binary;Text pointer of the last text or image column inserted or updated by a process (Not the same as the textptr function).@@textptr_parameters;bit;Returns 0 if the current status of the textptr_parameters configuration parameter is off. Returns 1 if the current status of the textptr_parameters if on.@@textsize;integer;Limit on the number of bytes of text or image data a select returns. Default limit is 32K bytes for isql. The default depends on the client software. Can be changed for a session with set textsize.@@textts;timestamp;Returns the text timestamp of the column referenced by @@textptr.@@thresh_hysteresis;integer;Decrease in free space required to activate a threshold. This amount, also known as the hysteresis value, is measured in 2K database pages. It determines how closely thresholds can be placed on a database segment.@@timeticks;integer;Number of microseconds per tick. The amount of time per tick is machine-dependent.@@total_errors;integer;Number of errors detected by Adaptive Server while reading and writing.@@total_read;integer;Number of disk reads by Adaptive Server.@@total_write;integer;Number of disk writes by Adaptive Server.@@tranchained;bit;Returns 0 if the current transaction mode of the T-SQL program is unchained. Returns 1 if the current transaction mode of the T-SQL program is chained.@@trancount;integer;Nesting level of transactions in the current user session.@@transactional_rpc;bit;Returns 0 if RPCs to remote servers are transactional. Returns 1 if RPCs to remote servers are not transactional.@@transtate;integer;Current state of a transaction after a statement executes in the current user session.@@unicharsize;integer;Returns 2, the size of a character in unichar.@@version;varchar;Date, version string, and so on of the current release of Adaptive Server.@@version_as_integer;integer;Version of the current release of Adaptive Server as an integer.
batchDelim=GO
intelSql=1
kwShowAfter=2
qtDatabases=Databases (ASE)
qtSchemas=Schemas (ASE)
qtObjects=Objects (ASE)
qtColumns=Columns (ASE) + Keys
qtArguments=Arguments (ASE)
qtPackage=
qtJoins=Joins (ASE)
qtDDL=DDL Code (ASE)
qtSynonym=
qtContext=Context (ASE)
qtObjType=
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000002000000000000000000000000000000000000000000000000000000
objOrder=1A1905180A03021E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.8]
enabled=0
caption=Sybase ASA
export=1
dbType=5
addDelim=0
addAlias=1
addSchema=3
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]abs(numeric_expression DATATYPE)DATATYPE;Absolute value of an expression.acos(cosine DATATYPE)DATATYPE;Angle (in radians) whose cosine is specified.ascii(char_expr NVARCHAR)NVARCHAR;ASCII code for the first character in an expression.asin(sine DATATYPE)DATATYPE;Angle (in radians) whose sine is specified.atan(tangent DATATYPE)DATATYPE;Angle (in radians) whose tangent is specified.atn2(sine DATATYPE, cosine DATATYPE)DATATYPE;Angle (in radians) whose sine and cosine are specified.avg([all|distinct] expr DATATYPE)DATATYPE;Numeric average of all (distinct) values.ceiling(value INTEGER)INTEGER;Smallest integer greater than or equal to the specified value.char(expr INTEGER)char;Character equivalent of an integer.charindex(char_expr1 DATATYPE, char_expr2 DATATYPE)INTEGER;Starting position of an char_expr1 inside char_expr2.char_length(char_expr DATATYPE)INTEGER;Number of characters in an expression.col_length(object_name SYSNAME, column_name SYSNAME)INTEGER;Defined length of a column.col_name(object_id INTEGER, column_id INTEGER,[database_id] INTEGER);Name of the column whose table and column IDs are specified.compare(char_expr1 DATATYPE, char_expr2 DATATYPE,[collation_name|collation_ID]);Compare two character strings based on alternate collation rules.convert(DATATYPE [(length)|(precision[,scale])][null|notnull], expression, [style])DATATYPE;Returns the specified value, converted to another DATATYPE or a different datetime display format.cos(angle DATATYPE)DATATYPE;Cosine of the specified angle.cot(angle DATATYPE)DATATYPE;Cotangent of the specified angle.count([all|distinct] expression DATATYPE)INTEGER;Number of (distinct) non-null values or the number of selected rows.curunreservedpgs(dbid INTEGER, lstart INTEGER, unreservedpgs INTEGER)INTEGER;Number of free pages in the specified disk piece.data_pgs([dbid] INTEGER, object_id INTEGER, {data_oam_pg_id|index_oam_pg_id} INTEGER)INTEGER;Number of pages used by the specified table or index.datalength(expression DATATYPE)INTEGER;Actual length, in bytes, of the specified column or string.dateadd(date_part code, INTEGER, date DATETIME) DATETIME;Date produced by adding a given number of years, quarters, hours, or other date parts to the specified date.datediff(datepart code, date1 DATETIME, date2 DATETIME)INTEGER;Difference between two dates.datename(datepart code, date DATETIME)VARCHAR;Name of the specified part of a datetime value.datepart(date_part code, date DATETIME)INTEGER;Value of the specified part of a datetime value.db_id(database_name VARCHAR)INTEGER;ID number of the specified database.db_name([database_id] INTEGER)VARCHAR;Name of the database whose ID number is specified.degrees(a NUMERIC)INTEGER;Size, in degrees, of an angle with the specified number of radians.difference(char_expr1 DATATYPE, char_expr2 DATATYPE)INTEGER;Difference between two soundex values.exp(approx NUMERIC)double;Value that results from raising the constant to the specified power.floor(a NUMERIC)INTEGER;Largest integer that is less than or equal to the specified value.get_appcontext("context_name" DATATYPE, "attribute_name" DATATYPE)DATATYPE;Value of the attribute in a specified context.getdate()DATETIME;Current system date and time.hextoint(hexadecimal_string VARCHAR)INTEGER;Platform-independent integer equivalent of a hexadecimal string.host_id()INTEGER;Host process ID or the client process.host_name()VARCHAR;Current host computer name of the client process.index_col(object_name VARCHAR, index_id smallint, key_#, [user_id])VARCHAR;Name of the indexed column in the specified table or view.index_colorder(object_name VARCHAR, index_id smallint, key_#, [user_id])VARCHAR;Column order.inttohex(expression INTEGER)BINARY;Platform-independent hexadecimal equivalent of the specified integer.isnull(expression1 DATATYPE, expression2 DATATYPE)DATATYPE;Substitutes the value specified in expression2 when expression1 evaluates to NULL.is_sec_service_on(security_service_nm)BIT;Returns 1 if the security service is active and 0 if it is not.lct_admin();Manages the last-chance threshold. Returns the current value of the last-chance threshold. Aborts transactions in a transaction log that has reached its last-chance threshold.license_enabled("ase_server"|"ase_ha"|"ase_dtm"|"ase_java"|"ase_asm")BIT;Returns 1 if a feature's license is enabled, 0 if the license is not enabled, or null if you specify an invalid license name.list_appcontext(["context_name"]);Lists all the attributes of all the contexts in the current session.lockscheme(object_name)SYSNAME;Locking scheme of the specified object as a string.log(approx_numeric INTEGER)double;Natural logarithm of the specified number.log10(approx_numeric INTEGER)double;Base 10 logarithm of the specified number.lower(char_expr DATATYPE)DATATYPE;Lowercase equivalent of the specified expression.ltrim(char_expr DATATYPE)DATATYPE;Returns the specified expression, trimmed of leading blanks.max(expression DATATYPE)DATATYPE;Highest value in an expression.min(expression DATATYPE)DATATYPE;Lowest value in a column.mut_excl_roles(role1 NVARCHAR, role2 NVARCHAR [MEMBERSHIP|ACTIVATION]);Information about the mutual exclusivity between two roles.object_id(object_name NVARCHAR)INTEGER;Object ID of the specified object.object_name(object_id INTEGER, [database_id] INTEGER)SYSNAME;Name of the object whose object ID is specified.pagesize(object_name NVARCHAR, [index_name])INTEGER;Page size, in bytes, for the specified object.pagesize(object_id INTEGER, [db_id] INTEGER, [index_id] INTEGER)INTEGER.patindex("%pattern%", char_expr any-char-type, [using {bytes|characters|chars}])INTEGER;Starting position of the first occurrence of a specified pattern.pi()double;Returns the constant value 3.1415926535897936.power(value NUMERIC, power NUMERIC)NUMERIC;Returns the value that results from raising the specified number to a given power.proc_role("role_name" SYSNAME)INTEGER;Information about whether the user has been granted the specified role.ptn_data_pgs(object_id INTEGER, partition_id INTEGER)INTEGER;Number of data pages used by a partition.radians(angle INTEGER)INTEGER;Size, in radians, of an angle with the specified number of degrees.rand([integer])real;Random value between 0 and 1, which is generated using the specified seed value.replicate(char_expr, integer_expr)VARCHAR;String consisting of the specified expression repeated a given number of times.reserved_pgs(object_id INTEGER, {doampg|ioampg})INTEGER;Number of pages allocated to the specified table or index, and reports pages used for internal structures.reverse(expression DATATYPE)DATATYPE;Returns the specified string with characters listed in reverse order.right(expr DATATYPE, length INTEGER)DATATYPE;The rightmost part of the expression with the specified number of characters.rm_appcontext("context_name" VARCHAR, "attribute_name" VARCHAR)INTEGER;Removes a specific application context, or all application contexts.role_contain("role1" VARCHAR, "role2" VARCHAR)BIT;Returns 1 if role2 contains role1.role_id("role_name" VARCHAR)INTEGER;System role ID of the role whose name you specify.role_name(role_id INTEGER)VARCHAR;Name of a role whose system role ID you specify.round(number, decimal_places)number;Returns the value of the specified number, rounded to a given number of decimal places.rowcnt(sysindexes.doampg)number;Estimate of the number of rows in the specified table.rtrim(char_expr DATATYPE)DATATYPE;Returns the specified expression, trimmed of trailing blanks.set_appcontext("context_name" VARCHAR, "attribute_name" VARCHAR, "attribute_value" VARCHAR)INTEGER;Sets an application context name, attribute name, and attribute value for a user session, defined by the attributes of a specified application.show_role();Shows the login's currently active system-defined roles.show_sec_services();Lists the security services that are active for the session.sign(a NUMERIC);integer;Returns the sign (+1 for positive, 0, or -1 for negative) of the specified value.sin(approx_numeric INTEGER)real;Sine of the specified angle (in radians).sortkey(char_expression, [collation_name|collation_ID]);Generates values that can be used to order results based on collation behavior.soundex(char_expr)char(4);Returns a 4-character code representing the way an expression sounds.space(length INTEGER)VARCHAR;Returns a string consisting of the specified number of single-byte spaces.sqrt(approx_numeric DATATYPE)double;Square root of the specified number.str(approx_numeric DATATYPE, [length] INTEGER, [decimal] INTEGER)VARCHAR;Character equivalent of the specified number.stuff(char_expr1 DATATYPE, start INTEGER, length INTEGER, char_expr2 DATATYPE);Returns the string formed by deleting a specified number of characters from one string and replacing them with another string.substring(char_expr DATATYPE, start INTEGER, length INTEGER)DATATYPE;Returns the string formed by extracting the specified number of characters from another string.sum([all|distinct] expression DATATYPE)DATATYPE;Total of the values.suser_id([server_user_name])INTEGER;Server user's ID number from the syslogins table.suser_name([server_user_id] INTEGER)VARCHAR;Name of the current server user or the user whose server ID is specified.syb_quit();Terminates the connection.syb_sendmsg(ip_address, port_number, message);UNIX only: sends a message to a User Datagram Protocol (UDP) port.tan(angle INTEGER)real;Tangent of the specified angle (in radians).textptr(column_name)varbinary;Pointer to the first page of a text or image column.textvalid("table_name.column_name", textpointer)BIT;Returns 1 if the pointer to the specified text column is valid, 0 if it is not.to_unichar(expr INTEGER)unichar;Unichar expression having the value of the integer expression.tsequal(browsed_row TIMESTAMP, stored_row TIMESTAMP);Compares timestamp values to prevent update on a row that has been modified since it was selected for browsing.uhighsurr(uchar_expr, start)BIT;Returns 1 if the Unicode value at position start is the high half of a surrogate pair (which should appear first in the pair). Returns 0 otherwise.ulowsurr(uchar_expr, start)BIT;Returns 1 if the Unicode value at position start is the low half of a surrogate pair (which should appear second in the pair). Returns 0 otherwise.upper(char_expr DATATYPE)DATATYPE;Uppercase equivalent of the specified string.uscalar(uchar_expr DATATYPE)INTEGER;Returns the Unicode scalar value for the first Unicode character in an expression.used_pgs(object_id INTEGER, doampg INTEGER, ioampg INTEGER)INTEGER;Number of pages used by a table or index. For an all-pages-locked table with a clustered index, it returns the sum of the table and index pages.user()VARCHAR;Name of the current user.user_id([user_name] VARCHAR)INTEGER;ID number of the specified user or of the current user in the database.user_name([user_id] INTEGER)VARCHAR;Name within the database of the specified user or of the current user.valid_name(character_expression VARCHAR)BIT;Returns 0 if the specified string is not a valid identifier or a number other than 0 if the string is a valid identifier.valid_user(server_user_id INTEGER)BIT;Returns 1 if the specified ID is a valid user or alias in at least one database on this Adaptive Server.[@@]@@char_convert;bit;0 (Provided for compatibility with T-SQL).@@client_csid;integer;-1 (Provided for compatibility with T-SQL).@@client_csname;varchar;NULL (Provided for compatibility with T-SQL).@@connections;integer;The number of logins since the server was last started.@@cpu_busy;bit;0 (Provided for compatibility with T-SQL).@@dbts;timestamp;A value of type TIMESTAMP representing the last generated value used for all columns defined with DEFAULT TIMESTAMP.@@error;integer;Contains error status (succeeded or failed) of the most recently executed statement. It contains 0 if the previous transaction succeeded; otherwise, it contains the last error number generated by the system.@@fetch_status;integer;Contains status information resulting from the last fetch statement.@@identity;integer;Last value inserted into any IDENTITY or DEFAULT AUTOINCREMENT column by an INSERT or SELECT INTO statement.@@idle;integer;0 (Provided for compatibility with T-SQL).@@io_busy;bit;0 (Provided for compatibility with T-SQL).@@isolation;integer;Current isolation level of the connection. @@isolation takes the value of the active level.@@langid;integer;Unique language ID for the language in use by the current connection.@@language;varchar;Name of the language in use by the connection.@@max_connections;integer;For the personal server, the maximum number of simultaneous connections that can be made to the server, which is 10. For the network server, the maximum number of active clients (not database connections, as each client can support multiple connections).@@maxcharlen;integer;Maximum length, in bytes, of a character in the CHAR character set.@@ncharsize;integer;Maximum length, in bytes, of a character in the NCHAR character set.@@nestlevel;integer;-1 (Provided for compatibility with T-SQL).@@pack_received;integer;0 (Provided for compatibility with T-SQL).@@pack_sent;integer;0 (Provided for compatibility with T-SQL).@@packet_errors;integer;0 (Provided for compatibility with T-SQL).@@procid;integer;Stored procedure ID of the currently executing procedure.@@rowcount;integer;Number of rows affected by the last statement. The value of @@rowcount should be checked immediately after the statement.@@servername;varchar;Name of the current database server.@@spid;integer;The connection handle for the current connection. This is the same value as that displayed by the sa_conn_info procedure.@@sqlstatus;integer;Contains status information (0, 1 or 2) resulting from the last fetch statement.@@textsize;integer;Current value of the SET TEXTSIZE option, which specifies the maximum length, in bytes, of text or image data to be returned with a select statement. The default setting is 32765, which is the largest bytestring that can be returned using READTEXT. The value can be set using the SET statement.@@thresh_hysteresis;integer;0 (Provided for compatibility with T-SQL).@@timeticks;integer;0 (Provided for compatibility with T-SQL).@@total_errors;integer;0 (Provided for compatibility with T-SQL).@@total_read;integer;0 (Provided for compatibility with T-SQL).@@total_write;integer;0 (Provided for compatibility with T-SQL).@@tranchained;bit;Current transaction mode; 0 for unchained or 1 for chained.@@trancount;integer;Nesting level of transactions. Each BEGIN TRANSACTION in a batch increments the transaction count.@@transtate;integer;-1 (Provided for compatibility with T-SQL).@@version;integer;Version number of the current version of SQL Anywhere.batchDelim=GO
batchDelim=
intelSql=1
kwShowAfter=2
qtDatabases=Databases (ASA)
qtSchemas=Schemas (ASA)
qtObjects=Objects (ASA)
qtColumns=Columns (ASA)
qtArguments=Arguments (ASA)
qtPackage=
qtJoins=Joins (ASA)
qtDDL=DDL Code (ASE)
qtSynonym=
qtContext=Context (ASA)
qtObjType=
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000002000000000000000000000000000000000000000000000000000000
objOrder=1A1905180A03021E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.9]
enabled=0
caption=MS Access
export=1
dbType=6
addDelim=0
addAlias=1
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=
batchDelim=
intelSql=1
kwShowAfter=2
qtDatabases=
qtSchemas=
qtObjects=Objects (Access)
qtColumns=Columns (Access)
qtArguments=
qtPackage=
qtJoins=Joins (Access)
qtDDL=
qtSynonym=
qtContext=
qtObjType=
qtRecCount=
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000000000000000000000000000000000000000000000000000000000000
objOrder=1A1905180A1E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,TFN_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=65535
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.10]
enabled=1
caption=Amazon Redshift
export=1
dbType=8
addDelim=0
addAlias=2
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]-- Mathematical Functionsabs(x NUMERIC)NUMERICcbrt(dp DOUBLE)DOUBLEceil(x NUMERIC)NUMERICceiling(x NUMERIC)NUMERICdegrees(dp DOUBLE)DOUBLEexp(x NUMERIC)NUMERICfloor(x NUMERIC)NUMERICln(x NUMERIC)NUMERIClog(x NUMERIC)NUMERIClog(b NUMERIC, x NUMERIC)NUMERICmod(y NUMERIC, x NUMERIC)NUMERICpi()DOUBLEpower(a NUMERIC, b NUMERIC)NUMERICradians(dp DOUBLE)DOUBLErandom()DOUBLEround(x NUMERIC, [s] INTEGER)NUMERICsign(x NUMERIC)NUMERICsqrt(x NUMERIC)NUMERICtrunc(x NUMERIC,[s] INTEGER)NUMERICtrunc(parm MACADDR)MACADDRacos(x DOUBLE)DOUBLEasin(x DOUBLE)DOUBLEatan(x DOUBLE)DOUBLEatan2(y DOUBLE, x DOUBLE)DOUBLEcos(x DOUBLE)DOUBLEcot(x DOUBLE)DOUBLEsin(x DOUBLE)DOUBLEtan(x DOUBLE)DOUBLE-- String Functionschar_length(string TEXT)INTEGERcharacter_length(string TEXT)INTEGERlower(string TEXT)TEXToctet_length(string TEXT)INTEGERposition(substring character-type)INTEGERsubstring(string [FROM INTEGER] [for INTEGER])TEXTsubstring(string FROM pattern [FOR ESCAPE])TEXTtrim([LEADING | TRAILING | BOTH] [characters] FROM character-type)TEXTupper(string TEXT)TEXTascii(string TEXT)INTEGERbtrim(string TEXT, [characters] TEXT)TEXTbtrim(string BYTEA, bytes BYTEA)BYTEAchr(expr INTEGER)TEXTdecode(string TEXT, type TEXT)BYTEAinitcap(string TEXT)TEXTlength(string TEXT)INTEGERlength(string BYTEA, encoding NAME)INTEGERlength(parm OBJECT)DOUBLElength(vector TSVECTOR)INTEGERlpad(string TEXT, length INTEGER, [fill] TEXT)TEXTltrim(string TEXT, [characters] TEXT)TEXTmd5(string TEXT)TEXTpg_client_encoding()NAMEquote_ident(string TEXT)TEXTquote_literal(string TEXT)TEXTquote_literal(value anyelement)TEXTregexp_replace(string TEXT, pattern TEXT, replacement TEXT, [flags] TEXT)TEXTrepeat(string TEXT, number INTEGER)TEXTreplace(string TEXT, from TEXT, to TEXT)TEXTrpad(string TEXT, length INTEGER, [fill] TEXT)TEXTrtrim(string TEXT, [characters] TEXT)TEXTsplit_part(string TEXT, delimiter TEXT, field INTEGER)TEXTstrpos(string TEXT, substring TEXT)INTEGERsubstring(string TEXT, from INTEGER, [count] INTEGER)TEXTto_ascii(string TEXT, [encoding] TEXT)TEXTto_hex(x number)TEXTtranslate(string TEXT, from TEXT, to TEXT)TEXT-- Binary String Functionsget_bit(string TEXT, offset INTEGER)INTEGERget_byte(string TEXT, offset INTEGER)INTEGERoctet_length(string TEXT)INTEGERset_bit(string TEXT, offset INTEGER, newvalue INTEGER)BYTEAset_byte(string TEXT, offset INTEGER, newvalue INTEGER)BYTEAmd5(string TEXT)TEXT-- Formatting Functionsto_char(expr TIMESTAMP,pattern TEXT)TEXTto_char(expr INTEGERerval,pattern TEXT)TEXTto_char(expr INTEGER,pattern TEXT)TEXTto_char(expr DOUBLE,pattern TEXT)TEXTto_char(expr NUMERIC,pattern TEXT)TEXTto_date(expr TEXT,pattern TEXT)DATEto_number(expr TEXT,pattern TEXT)NUMERIC-- Date/Time Functionsage(expr TIMESTAMP,[expr2] TIMESTAMP)INTEGERervalcurrent_date()DATEcurrent_time()TIME with time zonecurrent_timestamp()TIMESTAMP with time zonedate_part(part TEXT,expr TIMESTAMP)DOUBLEdate_part(part TEXT,expr INTEGERerval)DOUBLEdate_trunc(part TEXT,expr TIMESTAMP)TIMESTAMPextract(field from TIMESTAMP)DOUBLEextract(field from INTEGERerval)DOUBLEisfinite(expr TIMESTAMP)BOOLEANisfinite(expr INTEGERerval)BOOLEANlocaltime()timelocaltimestamp()TIMESTAMPnow()TIMESTAMP WITH TIME ZONEstatement_timestamp()TIMESTAMP WITH TIME ZONEtimeofday()TEXT-- Aggregate Functionsavg(expr NUMERIC)NUMERICbit_and(expr NUMERIC)NUMERICbit_or(expr NUMERIC)NUMERICbool_and(expr NUMERIC)BOOLEANbool_or(expr NUMERIC)BOOLEANcount(expr any-type)BIGINTmax(expr any-type)any-typemin(expr any-type)any-typesum(expr NUMERIC)NUMERICstddev(expr NUMERIC)NUMERICstddev_pop(expr NUMERIC)NUMERICstddev_samp(expr NUMERIC)NUMERICvariance(expr NUMERIC)NUMERICvar_pop(expr NUMERIC)NUMERICvar_samp(expr NUMERIC)NUMERIC-- Session Information Functionscurrent_database()NAMEcurrent_schema()NAMEcurrent_schemas(expr BOOLEAN)NAME[]current_user()NAMEpg_my_temp_schema()OIDpg_is_other_temp_schema(expr OID)BOOLEANpg_postmaster_start_time()TIMESTAMP with time zonesession_user()NAMEuser()NAMEversion()TEXT-- Schema Visibility Inquiry Functionspg_conversion_is_visible(conversion OID)BOOLEANpg_function_is_visible(function OID)BOOLEANpg_operator_is_visible(operator OID)BOOLEANpg_opclass_is_visible(opclass OID)BOOLEANpg_table_is_visible(table OID)BOOLEANpg_ts_config_is_visible(config OID)BOOLEANpg_ts_dict_is_visible(dict OID)BOOLEANpg_ts_parser_is_visible(parser OID)BOOLEANpg_ts_template_is_visible(template OID)BOOLEANpg_type_is_visible(type OID)BOOLEAN-- Configuration Settings Functionscurrent_setting(setting NAME)TEXTset_config(setting NAME, new_value TEXT, is_local BOOLEAN)TEXT-- Server Signalling Functionspg_cancel_backend(pid INTEGER)BOOLEANpg_reload_conf()BOOLEANpg_rotate_logfile()BOOLEAN-- Window Functionsrow_number()BIGINT;Sequential number of a row within a partition of a result set, starting at 1 for the first row in each partition.rank()BIGINT;Returns the rank of each row within the partition of a result set. The rank of a row is one plus the number of ranks that come before the row in question.dense_rank()BIGINT;Rank of rows within the partition of a result set, without any gaps in the ranking.percent_rank()DOUBLE PRECISION;Relative rank of the current row: (rank - 1) / (total rows - 1)cume_dist()DOUBLE PRECISION;Relative rank of the current row: (number of rows preceding or peer with current row) / (total rows)ntile(expression BIGINT)BIGINT;Distributes the rows in an ordered partition into a specified number of groups. The groups are numbered, starting at one. For each row, NTILE returns the number of the group to which the row belongs.lag(value ANYELEMENT,[offset] INTEGER,[default] ANYELEMENT)ANYELEMENT;Returns value evaluated at the row that is offset rows before the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to nulllead(value ANYELEMENT,[offset] INTEGER,[default] ANYELEMENT)ANYELEMENT;Returns value evaluated at the row that is offset rows after the current row within the partition; if there is no such row, instead return default (which must be of the same type as value). Both offset and default are evaluated with respect to the current row. If omitted, offset defaults to 1 and default to nullfirst_value(value ANY)ANY;Returns value evaluated at the row that is the first row of the window framelast_value(value ANY)ANY;Returns value evaluated at the row that is the last row of the window framenth_value(value ANY, nth INTEGER)ANY;Returns value evaluated at the row that is the nth row of the window frame (counting from 1); null if no such row[analytic functions]avg(|) OVER()avg(|) OVER(PARTITION BY)bit_and(|) OVER()bit_and(|) OVER(PARTITION BY)bit_or(|) OVER()bit_or(|) OVER(PARTITION BY)bool_and(|) OVER()bool_and(|) OVER(PARTITION BY)bool_or(|) OVER()bool_or(|) OVER(PARTITION BY)count(*) OVER()count(*) OVER(PARTITION BY |)count(|) OVER(PARTITION BY)cume_dist(|) WITHIN GROUP (ORDER BY)cume_dist() WITHIN GROUP (ORDER BY |)dense_rank(|) WITHIN GROUP (ORDER BY)dense_rank() WITHIN GROUP (ORDER BY |)first_value() OVER (ORDER BY |)first_value() OVER (PARTITION BY | ORDER BY RANGE CURRENT ROW UNBOUNDED FOLLOWING)first_value() OVER (PARTITION BY | ORDER BY)first_value(|) OVER ()lag(|) OVER ()lag(|) OVER (ORDER BY)lag(|) OVER (PARTITION BY ORDER BY)last_value() OVER (ORDER BY |)last_value() OVER (PARTITION BY | ORDER BY RANGE CURRENT ROW UNBOUNDED FOLLOWING)last_value() OVER (PARTITION BY | ORDER BY)last_value(|) OVER (ORDER BY)lead() OVER (ORDER BY |)lead() OVER (PARTITION BY | ORDER BY)lead(|) OVER ()max(|) OVER()max(|) OVER(PARTITION BY)min(|) OVER()min(|) OVER(PARTITION BY)mode() WITHIN GROUP (ORDER BY |) ntile() OVER (ORDER BY |)ntile() OVER (PARTITION BY | ORDER BY)ntile(|) OVER (ORDER BY)nth_value() OVER (ORDER BY |)nth_value() OVER (PARTITION BY | ORDER BY)nth_value(|) OVER (ORDER BY)percent_rank(|) WITHIN GROUP (ORDER BY)percent_rank() WITHIN GROUP (ORDER BY |)percentile_cont(|) WITHIN GROUP (ORDER BY) percentile_cont(0.5) WITHIN GROUP (ORDER BY |) OVER (PARTITION BY) percentile_disc(|) WITHIN GROUP (ORDER BY) percentile_disc(0.5) WITHIN GROUP (ORDER BY |) rank() OVER (ORDER BY |)rank() OVER (PARTITION BY | ORDER BY)ratio_to_report(|) OVER ()ratio_to_report(|) OVER (PARTITION BY)row_number() OVER (ORDER BY |)row_number() OVER (PARTITION BY | ORDER BY)stddev(|) OVER()stddev(|) OVER(ORDER BY)stddev(|) OVER(PARTITION BY ORDER BY)stddev_pop(|) OVER()stddev_pop(|) OVER(ORDER BY)stddev_pop(|) OVER(PARTITION BY ORDER BY)stddev_samp(|) OVER()stddev_samp(|) OVER(ORDER BY)stddev_samp(|) OVER(PARTITION BY ORDER BY)sum(|) OVER()sum(|) OVER(PARTITION BY)variance(|) OVER()variance(|) OVER(ORDER BY)variance(|) OVER(PARTITION BY ORDER BY)var_pop(|) OVER()var_pop(|) OVER(ORDER BY)var_pop(|) OVER(PARTITION BY ORDER BY)var_samp(|) OVER()var_samp(|) OVER(ORDER BY)var_samp(|) OVER(PARTITION BY ORDER BY)
batchDelim=
intelSql=1
kwShowAfter=2
qtDatabases=Databases (Amazon Redshift)
qtSchemas=Schemas (Amazon Redshift)
qtObjects=Objects (Amazon Redshift)
qtColumns=Columns (Amazon Redshift) + Keys
qtArguments=
qtPackage=
qtJoins=Joins (Amazon Redshift)
qtDDL=DDL Code (Amazon Redshift)
qtSynonym=
qtContext=Context (Amazon Redshift)
qtObjType=
qtRecCount=Record Count (Amazon Redshift)
qtObjInfo=Object Info (Amazon Redshift)
qtTblObjects=Table Objects (Amazon Redshift)
qtSessionID=Current Session (Amazon Redshift)
objFiltr=0002000000000000000000000000000000000000000000000000000000000002
objOrder=1A1905180A03021E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,PG_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=-
paFlags=7
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=selct=SELECTseelect=SELECTslect=SELECTgrop=GROUPgrup=GROUPgroupe=GROUPform=FROMwere=WHEREwher=WHEREordre=ORDER
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.11]
enabled=1
caption=SQLite
export=1
dbType=9
addDelim=0
addAlias=2
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]abs(X NUMERIC)NUMERIC;Absolute value of the numeric argument X.changes()INTEGER;Number of database rows that were changed or inserted or deleted by the most recently completed INSERT, DELETE, or UPDATE statement.char(X1 INTEGER,X2 INTEGER,... INTEGER)TEXT;String composed of characters having the unicode code point values of integers X1 through XN, respectively.coalesce(X ANY,Y ANY,... ANY)ANY;Copy of its first non-NULL argument.glob(X TEXT,Y TEXT)BOOLEAN;Equivalent to the expression "Y GLOB X".ifnull(X ANY,Y ANY)ANY;Copy of its first non-NULL argument.instr(X TEXT,Y TEXT)INTEGER;Finds the first occurrence of string Y within string X.hex(X BLOB)TEXT;Interprets its argument as a BLOB and returns a string which is the upper-case hexadecimal rendering of the content of that blob.last_insert_rowid()ROWID;Returns the ROWID of the last row insert.length(X TEXT)INTEGER;Number of characters (not bytes) in X prior to the first NUL character.like(X TEXT,Y TEXT,Z CHARACTER)BOOLEAN;Implements the "Y LIKE X [ESCAPE Z]" expression.likelihood(X ANY,Y REAL)ANYload_extension(X TEXT,Y TEXT)NULL;Loads SQLite extensions out of the shared library file named X using the entry point Y.lower(X TEXT)TEXT;Copy of string X with all ASCII characters converted to lower case.ltrim(X TEXT,Y TEXT)TEXT;String formed by removing any and all characters that appear in Y from the left side of X. If the Y argument is omitted, ltrim(X) removes spaces from the left side of X.max(X ANY,Y ANY,... ANY)ANY;Argument with the maximum valuemin(X ANY,Y ANY,... ANY)ANY;Argument with the minimum value. nullif(X ANY,Y ANY)ANY;Returns its first argument if the arguments are different and NULL if the arguments are the same.printf(FORMAT TEXT,... ANY)TEXT;SQL function works like the sqlite3_mprintf() C-language function.quote(X TEXT)TEXT;Text of an SQL literal which is the value of its argument suitable for inclusion into an SQL statement.random()INTEGER;Pseudo-random integer between -9223372036854775808 and +9223372036854775807.randomblob(N INTEGER)BLOB;N-byte blob containing pseudo-random bytes.replace(X TEXT,Y TEXT,Z TEXT)TEXT;String formed by substituting string Z for every occurrence of string Y in string X.round(X REAL,Y INTEGER)REAL;Floating-point value X rounded to Y digits to the right of the decimal point.rtrim(X TEXT,Y TEXT)TEXT;String formed by removing any and all characters that appear in Y from the right side of X.soundex(X TEXT)TEXT;String that is the soundex encoding of the string X.sqlite_compileoption_get(N INTEGER);Wrapper around the sqlite3_compileoption_get() C/C++ function.sqlite_compileoption_used(X);Wrapper around the sqlite3_compileoption_used() C/C++ function.sqlite_source_id()TEXT;String that identifies the specific version of the source code that was used to build the SQLite library.sqlite_version()TEXT;Version string for the SQLite library that is running.substr(X TEXT,Y INTEGER,Z INTEGER)TEXT;Substring of input string X that begins with the Y-th character and which is Z characters long.total_changes()INTEGER;Number of row changes caused by INSERT, UPDATE or DELETE statements since the current database connection was opened.trim(X TEXT,Y TEXT)TEXT;String formed by removing any and all characters that appear in Y from both ends of X.typeof(X)TEXT;String that indicates the datatype of the expression X: "null", "integer", "real", "text", or "blob".unlikely(X ANY)ANYunicode(X TEXT)INTEGER;Numeric unicode code point corresponding to the first character of the string X.upper(X TEXT)TEXT;Copy of input string X in which all lower-case ASCII characters are converted to their upper-case equivalent.zeroblob(N INTEGER)BLOB;BLOB consisting of N bytes of 0x00.-- Aggregate Functionsavg(X NUMERIC)NUMERIC;Average of the values in a group.count(X ANY)INTEGER;Number of items in a group.group_concat(X TEXT,Y TEXT)TEXT;Concatenation of all non-NULL values of X separated by Y.sum(X NUMERIC)NUMERIC;Sum of all the values.total(X NUMERIC)REAL;Sum of all the values.-- Date and Time Functionsdate(timestring TEXT,modifier TEXT,modifier TEXT,... TEXT)TEXT;Date as YYYY-MM-DD format.time(timestring TEXT,modifier TEXT,modifier TEXT,... TEXT)TEXT;Time as HH:MM:SS. datetime(timestring TEXT,modifier TEXT,modifier TEXT,... TEXT)TEXT;Date and time as YYYY-MM-DD HH:MM:SS.julianday(timestring TEXT,modifier TEXT,modifier TEXT,... TEXT)TEXT;Julian day.strftime(format TEXT,timestring TEXT,modifier TEXT,modifier TEXT,... TEXT)TEXT;Date formatted according to the format string.
batchDelim=
intelSql=1
kwShowAfter=2
qtDatabases=
qtSchemas=
qtObjects=Objects (SQLite)
qtColumns=
qtArguments=
qtPackage=
qtJoins=
qtDDL=DDL Code (SQLite)
qtSynonym=
qtContext=Context (SQLite)
qtObjType=
qtRecCount=Record Count (SQLite)
qtObjInfo=
qtTblObjects=
qtSessionID=
objFiltr=0000000000000000000000000000000000000000000000000000000000000002
objOrder=1A1905180A031E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=0
paThreshold=0
paThresholdIN=0
paThresholdJoin=0
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=selct=SELECTseelect=SELECTslect=SELECTgrop=GROUPgrup=GROUPgroupe=GROUPform=FROMwere=WHEREwher=WHEREordre=ORDER
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=0
dbeShowSystem=3
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=0
dbeShowCmt=3
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.12]
enabled=1
caption=Greenplum
export=1
dbType=12
addDelim=0
addAlias=2
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]-- Mathematical Functionsabs(x NUMERIC)NUMERICcbrt(dp DOUBLE)DOUBLEceil(x NUMERIC)NUMERICceiling(x NUMERIC)NUMERICdegrees(dp DOUBLE)DOUBLEexp(x NUMERIC)NUMERICfloor(x NUMERIC)NUMERICln(x NUMERIC)NUMERIClog(x NUMERIC)NUMERIClog(b NUMERIC, x NUMERIC)NUMERICmod(y NUMERIC, x NUMERIC)NUMERICpi()DOUBLEpower(a NUMERIC, b NUMERIC)NUMERICradians(dp DOUBLE)DOUBLErandom()DOUBLEround(x NUMERIC, [s] INTEGER)NUMERICsetseed(dp DOUBLE)VOIDsign(x NUMERIC)NUMERICsqrt(x NUMERIC)NUMERICtrunc(x NUMERIC,[s] INTEGER)NUMERICtrunc(parm MACADDR)MACADDRwidth_bucket(op NUMERIC, b1 NUMERIC, b2 NUMERIC, count INTEGER)INTEGERacos(x DOUBLE)DOUBLEasin(x DOUBLE)DOUBLEatan(x DOUBLE)DOUBLEatan2(y DOUBLE, x DOUBLE)DOUBLEcos(x DOUBLE)DOUBLEcot(x DOUBLE)DOUBLEsin(x DOUBLE)DOUBLEtan(x DOUBLE)DOUBLE-- String Functionsbit_length(string TEXT)INTEGERchar_length(string TEXT)INTEGERcharacter_length(string TEXT)INTEGERlower(string TEXT)TEXToctet_length(string TEXT)INTEGERoverlay(string PLACING character-type FROM INTEGER [FOR INTEGER])TEXTposition(substring character-type)INTEGERsubstring(string [FROM INTEGER] [for INTEGER])TEXTsubstring(string FROM pattern [FOR ESCAPE])TEXTtrim([LEADING | TRAILING | BOTH] [characters] FROM character-type)TEXTupper(string TEXT)TEXTascii(string TEXT)INTEGERbtrim(string TEXT, [characters] TEXT)TEXTbtrim(string BYTEA, bytes BYTEA)BYTEAchr(expr INTEGER)TEXTconvert(string BYTEA, src_encoding NAME, dest_encoding NAME)BYTEAconvert_from(string BYTEA, src_encoding NAME)TEXTconvert_to(string TEXT, dest_encoding NAME)BYTEAdecode(string TEXT, type TEXT)BYTEAencode(string BYTEA, type TEXT)TEXTinitcap(string TEXT)TEXTlength(string TEXT)INTEGERlength(string BYTEA, encoding NAME)INTEGERlength(parm OBJECT)DOUBLElength(vector TSVECTOR)INTEGERlpad(string TEXT, length INTEGER, [fill] TEXT)TEXTltrim(string TEXT, [characters] TEXT)TEXTmd5(string TEXT)TEXTpg_client_encoding()NAMEquote_ident(string TEXT)TEXTquote_literal(string TEXT)TEXTquote_literal(value anyelement)TEXTregexp_matches(string TEXT, pattern TEXT, [flags] TEXT)SETOF TEXT[]regexp_replace(string TEXT, pattern TEXT, replacement TEXT, [flags] TEXT)TEXTregexp_split_to_array(string TEXT, pattern TEXT, [flags] TEXT)TEXT[]regexp_split_to_table(string TEXT, pattern TEXT, [flags] TEXT)SETOF TEXTrepeat(string TEXT, number INTEGER)TEXTreplace(string TEXT, from TEXT, to TEXT)TEXTrpad(string TEXT, length INTEGER, [fill] TEXT)TEXTrtrim(string TEXT, [characters] TEXT)TEXTsplit_part(string TEXT, delimiter TEXT, field INTEGER)TEXTstrpos(string TEXT, substring TEXT)INTEGERsubstr(string TEXT, from INTEGER, [count] INTEGER)TEXTto_ascii(string TEXT, [encoding] TEXT)TEXTto_hex(x number)TEXTtranslate(string TEXT, from TEXT, to TEXT)TEXT-- Binary String Functionsget_bit(string TEXT, offset INTEGER)INTEGERget_byte(string TEXT, offset INTEGER)INTEGERoctet_length(string TEXT)INTEGERset_bit(string TEXT, offset INTEGER, newvalue INTEGER)BYTEAset_byte(string TEXT, offset INTEGER, newvalue INTEGER)BYTEAmd5(string TEXT)TEXT-- Formatting Functionsto_char(expr TIMESTAMP,pattern TEXT)TEXTto_char(expr INTEGERerval,pattern TEXT)TEXTto_char(expr INTEGER,pattern TEXT)TEXTto_char(expr DOUBLE,pattern TEXT)TEXTto_char(expr NUMERIC,pattern TEXT)TEXTto_date(expr TEXT,pattern TEXT)DATEto_number(expr TEXT,pattern TEXT)NUMERICto_timestamp(expr TEXT,pattern TEXT)TIMESTAMP with time zoneto_timestamp(expr DOUBLE)TIMESTAMP with time zone-- Date/Time Functionsage(expr TIMESTAMP,[expr2] TIMESTAMP)INTEGERervalclock_timestamp()TIMESTAMP with time zonecurrent_date()DATEcurrent_time()TIME with time zonecurrent_timestamp()TIMESTAMP with time zonedate_part(part TEXT,expr TIMESTAMP)DOUBLEdate_part(part TEXT,expr INTEGERerval)DOUBLEdate_trunc(part TEXT,expr TIMESTAMP)TIMESTAMPextract(field from TIMESTAMP)DOUBLEextract(field from INTEGERerval)DOUBLEisfinite(expr TIMESTAMP)BOOLEANisfinite(expr INTEGERerval)BOOLEANjustify_days(expr INTEGERerval)INTEGERervaljustify_hours(expr INTEGERerval)INTEGERervaljustify_interval(expr INTEGERerval)INTEGERervallocaltime()timelocaltimestamp()TIMESTAMPnow()TIMESTAMP with time zonestatement_timestamp()TIMESTAMP with time zonetimeofday()TEXTtransaction_timestamp()TIMESTAMP with time zone-- Enum Support Functionsenum_first(expr ANYENUM)ANYENUMenum_last(expr ANYENUM)ANYENUMenum_range(expr ANYENUM,[expr] ANYENUM)ANYENUM-- Geometric Functionsarea(parm OBJECT)DOUBLEcenter(parm OBJECT)POINTdiameter(parm CIRCLE)DOUBLEheight(parm BOX)DOUBLEisclosed(parm PATH)BOOLEANisopen(parm PATH)BOOLEANnpoints(parm PATH)INTEGERnpoints(parm POLYGON)INTEGERpclose(parm PATH)PATHpopen(parm PATH)PATHradius(parm CIRCLE)DOUBLEwidth(parm BOX)DOUBLEbox(parm CIRCLE)BOXbox(parm1 POINT,parm2 POINT)BOXbox(parm POLYGON)BOXcircle(parm BOX)CIRCLEcircle(center POINT,radius DOUBLE)CIRCLEcircle(parm POLYGON)CIRCLElseg(parm BOX)LSEGlseg(parm1 POINT,parm2 POINT)LSEGpath(parm POLYGON)POINTpoint(x DOUBLE, y DOUBLE)POINTpoint(parm BOX)POINTpoint(parm CIRCLE)POINTpoint(parm LSEG)POINTpoint(parm POLYGON)POINTpolygon(parm BOX)POLYGONpolygon(parm CIRCLE)POLYGONpolygon(npts INTEGER,parm CIRCLE)POLYGONpolygon(parm PATH)POLYGON-- Network Address Functionsabbrev(parm INET)TEXTabbrev(parm CIDR)TEXTbroadcast(parm INET)INETfamily(parm INET)INTEGERhost(parm INET)TEXThostmask(parm INET)INETmasklen(parm INET)INTEGERnetmask(parm INET)INETnetwork(parm INET)CIDRset_masklen(parm INET,len INTEGER)INETset_masklen(parm CIDR,len INTEGER)CIDRtext(parm INET)TEXT-- Text Search Functionsto_tsvector([config] REGCONFIG, document TEXT)TSVECTORsetweight(vector TSVECTOR,ch CHAR)TSVECTORstrip(vector TSVECTOR)TSVECTORto_tsquery([config] REGCONFIG,query TEXT)TSQUERYplainto_tsquery([config] REGCONFIG, query TEXT)TSQUERYnumnode(query TSQUERY)INTEGERquerytree(query TSQUERY)TEXTts_rank([weights] FLOAT4[], vector TSVECTOR, query TSQUERY,[normalization] INTEGER)FLOAT4ts_rank_cd([weights] FLOAT4[], vector TSVECTOR, query TSQUERY, [normalization] INTEGER)FLOAT4ts_headline([config] REGCONFIG, document TEXT, query TSQUERY, [options] TEXT)TEXTts_rewrite(query TSQUERY, target TSQUERY, substitute TSQUERY)TSQUERYts_rewrite(query TSQUERY, select TEXT)TSQUERYget_current_ts_config()REGCONFIGtsvector_update_trigger()TRIGGERtsvector_update_trigger_column()TRIGGERts_debug([config] REGCONFIG, document TEXT, alias OUT TEXT, description OUT TEXT, token OUT TEXT, dictionaries OUT regdictionary[], dictionary OUT regdictionary, lexemes OUT TEXT[])SETOF RECORDts_lexize(dict regdictionary, token TEXT)TEXT[]ts_parse(parser_name TEXT, document TEXT, tokid OUT INTEGER, token OUT TEXT)SETOF RECORDts_parse(parser_oid OID, document TEXT, tokid OUT INTEGER, token OUT TEXT)SETOF RECORDts_token_type(parser_name TEXT, tokid OUT INTEGER, alias OUT TEXT, description OUT TEXT)SETOF RECORDts_token_type(parser_oid OID, tokid OUT INTEGER, alias OUT TEXT, description OUT TEXT)SETOF RECORDts_stat(sqlquery TEXT, [weights] TEXT, word OUT TEXT, ndoc OUT INTEGER, nentry OUT INTEGER)SETOF RECORD-- XML Functionsxmlcomment(comment TEXT)XMLxmlconcat(expr XML)XMLxmlelement(name NAME, [xmlattributes(value)], content TEXT)XMLxmlforest(content TEXT)XMLxmlpi(name TARGET, content TEXT)XMLxmlroot(expr XML, version TEXT|no value, [standalone] YES|NO|NO VALUE)XMLxpath(xpath TEXT, expr XML, [nsarray] array)XMLtable_to_xml(tbl regclass, nulls BOOLEAN, tableforest BOOLEAN, targetns TEXT)XMLquery_to_xml(query TEXT, nulls BOOLEAN, tableforest BOOLEAN, targetns TEXT)XMLcursor_to_xml(cursor refcursor, count INTEGER, nulls BOOLEAN, tableforest BOOLEAN, targetns TEXT)XML-- Sequence Functionscurrval(regclass TEXT)BIGINTlastval()BIGINTnextval(regclass TEXT)BIGINTsetval(regclass TEXT,val BIGINT,[is_called] BOOLEAN)BIGINT-- Array Functionsarray_append(array ANYARRAY, anyelement INTEGER)ANYARRAYarray_cat(array1 ANYARRAY,array2 ANYARRAY)ANYARRAYarray_dims(array ANYARRAY)TEXTarray_lower(array ANYARRAY,dimension INTEGER)INTEGERarray_prepend(anyelement INTEGER,array ANYARRAY)ANYARRAYarray_to_string(array ANYARRAY,pattern TEXT)TEXTarray_upper(array ANYARRAY,dimension INTEGER)INTEGERstring_to_array(expr TEXT,delimiter TEXT)TEXT[]-- Aggregate Functionsavg(expr NUMERIC)NUMERICbit_and(expr NUMERIC)NUMERICbit_or(expr NUMERIC)NUMERICbool_and(expr NUMERIC)BOOLEANbool_or(expr NUMERIC)BOOLEANcount(expr any-type)BIGINTevery(expr NUMERIC)BOOLEANmax(expr any-type)any-typemin(expr any-type)any-typesum(expr NUMERIC)NUMERICcorr(y DOUBLE,x DOUBLE)DOUBLEcovar_pop(y DOUBLE,x DOUBLE)DOUBLEcovar_samp(y DOUBLE,x DOUBLE)DOUBLEregr_avgx(y DOUBLE,x DOUBLE)DOUBLEregr_avgy(y DOUBLE,x DOUBLE)DOUBLEregr_count(y DOUBLE,x DOUBLE)BIGINTregr_intercept(y DOUBLE,x DOUBLE)DOUBLEregr_r2(y DOUBLE,x DOUBLE)DOUBLEregr_slope(y DOUBLE,x DOUBLE)DOUBLEregr_sxx(y DOUBLE,x DOUBLE)DOUBLEregr_sxy(y DOUBLE,x DOUBLE)DOUBLEregr_syy(y DOUBLE,x DOUBLE)DOUBLEstddev(expr NUMERIC)NUMERICstddev_pop(expr NUMERIC)NUMERICstddev_samp(expr NUMERIC)NUMERICvariance(expr NUMERIC)NUMERICvar_pop(expr NUMERIC)NUMERICvar_samp(expr NUMERIC)NUMERIC-- Set Returning Functionsgenerate_series(start INTEGER, stop INTEGER, [step] INTEGER)INTEGER-- Session Information Functionscurrent_database()NAMEcurrent_schema()NAMEcurrent_schemas(expr BOOLEAN)NAME[]current_user()NAMEinet_client_addr()INETinet_client_port()INTEGERinet_server_addr()INETinet_server_port()INTEGERpg_my_temp_schema()OIDpg_is_other_temp_schema(expr OID)BOOLEANpg_postmaster_start_time()TIMESTAMP with time zonesession_user()NAMEuser()NAMEversion()TEXT-- Access Privilege Inquiry Functionshas_database_privilege([user] NAME, database NAME, privilege NAME)BOOLEANhas_function_privilege([user] NAME, function NAME, privilege NAME)BOOLEANhas_language_privilege([user] NAME, language NAME, privilege NAME)BOOLEANhas_schema_privilege([user] NAME, schema NAME, privilege NAME)BOOLEANhas_table_privilege([user] NAME, table NAME, privilege NAME)BOOLEANhas_tablespace_privilege([user] NAME, tablespace NAME, privilege NAME)BOOLEANpg_has_role([user] NAME, role NAME, privilege NAME)BOOLEAN-- Schema Visibility Inquiry Functionspg_conversion_is_visible(conversion OID)BOOLEANpg_function_is_visible(function OID)BOOLEANpg_operator_is_visible(operator OID)BOOLEANpg_opclass_is_visible(opclass OID)BOOLEANpg_table_is_visible(table OID)BOOLEANpg_ts_config_is_visible(config OID)BOOLEANpg_ts_dict_is_visible(dict OID)BOOLEANpg_ts_parser_is_visible(parser OID)BOOLEANpg_ts_template_is_visible(template OID)BOOLEANpg_type_is_visible(type OID)BOOLEAN-- System Catalog Information Functionsformat_type(type_oid OID, type_mod TYPEMOD )TEXTpg_get_constraintdef(constraint_oid OID, [pretty] BOOLEAN)TEXTpg_get_expr(expr_text TEXT, relation_oid OID, [pretty] BOOLEAN)TEXTpg_get_indexdef(index OID, column_no INTEGER, [pretty] BOOLEAN)TEXTpg_get_ruledef(rule_oid OID, [pretty] BOOLEAN)TEXTpg_get_serial_sequence(table_name NAME, column_name NAME)TEXTpg_get_triggerdef(trigger_oid OID)TEXTpg_get_userbyid(roleid INTEGER)NAMEpg_get_viewdef(view_name NAME, [pretty] BOOLEAN)TEXTpg_get_viewdef(view_oid OID, [pretty] BOOLEAN)TEXTpg_tablespace_databases(tablespace_oid OID)SETOF OID-- Comment Information Functionscol_description(table_oid OID, column_no INTEGER)TEXTobj_description(object_oid OID, [catalog] NAME)TEXTshobj_description(object_oid OID, catalog NAME)TEXT-- Transaction IDs and snapshotstxid_current()BIGINTtxid_current_snapshot()TXID_SNAPSHOTTXID_SNAPSHOT_xmin(snapshot TXID_SNAPSHOT)BIGINTTXID_SNAPSHOT_xmax(snapshot TXID_SNAPSHOT)BIGINTTXID_SNAPSHOT_xip(snapshot TXID_SNAPSHOT)SETOF BIGINTtxid_visible_in_snapshot(txid BIGINT, snapshot TXID_SNAPSHOT)BOOLEANxmin()TXIDxmax()TXIDxip_list()TXID-- Configuration Settings Functionscurrent_setting(setting NAME)TEXTset_config(setting NAME, new_value TEXT, is_local BOOLEAN)TEXT-- Server Signalling Functionspg_cancel_backend(pid INTEGER)BOOLEANpg_reload_conf()BOOLEANpg_rotate_logfile()BOOLEAN-- Backup Control Functionspg_start_backup(label TEXT)TEXTpg_stop_backup()TEXTpg_switch_xlog()TEXTpg_current_xlog_location()TEXTpg_current_xlog_insert_location()TEXTpg_xlogfile_name_offset(location TEXT)TEXTpg_xlogfile_name(location TEXT)TEXT-- Database Object Size Functionspg_column_size(expr any)INTEGERpg_database_size(database OID)BIGINTpg_database_size(database NAME)BIGINTpg_relation_size(table_or_index OID)BIGINTpg_relation_size(table_or_index TEXT)BIGINTpg_size_pretty(size BIGINT)TEXTpg_tablespace_size(tablespace OID)BIGINTpg_tablespace_size(tablespace NAME)BIGINTpg_total_relation_size(expr OID)BIGINTpg_total_relation_size(expr TEXT)BIGINT--Generic File Access Functionspg_ls_dir(dirname TEXT)SETOF TEXTpg_read_file(filename TEXT, offset BIGINT, length BIGINT)TEXTpg_stat_file(filename TEXT)RECORD-- Advisory Lock Functionspg_advisory_lock(key BIGINT)VOIDpg_advisory_lock(key1 INTEGER, key2 INTEGER)VOIDpg_advisory_lock_shared(key BIGINT)VOIDpg_advisory_lock_shared(key1 INTEGER, key2 INTEGER)VOIDpg_try_advisory_lock(key BIGINT)BOOLEANpg_try_advisory_lock(key1 INTEGER, key2 INTEGER)BOOLEANpg_try_advisory_lock_shared(key BIGINT)BOOLEANpg_try_advisory_lock_shared(key1 INTEGER, key2 INTEGER)BOOLEANpg_advisory_unlock(key BIGINT)BOOLEANpg_advisory_unlock(key1 INTEGER, key2 INTEGER)BOOLEANpg_advisory_unlock_shared(key BIGINT)BOOLEANpg_advisory_unlock_shared(key1 INTEGER, key2 INTEGER)BOOLEANpg_advisory_unlock_all()VOID[analytic functions]avg(|) OVER()avg(|) OVER(PARTITION BY)array_agg(|) OVER()array_agg(|) OVER(PARTITION BY)bit_and(|) OVER()bit_and(|) OVER(PARTITION BY)bit_or(|) OVER()bit_or(|) OVER(PARTITION BY)bool_and(|) OVER()bool_and(|) OVER(PARTITION BY)bool_or(|) OVER()bool_or(|) OVER(PARTITION BY)corr(|) OVER()corr(|) OVER(PARTITION BY)covar_pop(|) OVER()covar_pop(|) OVER(PARTITION BY)covar_samp(|) OVER()covar_samp(|) OVER(PARTITION BY)count(*) OVER()count(*) OVER(PARTITION BY |)count(|) OVER(PARTITION BY)cume_dist(|) WITHIN GROUP (ORDER BY)cume_dist() WITHIN GROUP (ORDER BY |)dense_rank(|) WITHIN GROUP (ORDER BY)dense_rank() WITHIN GROUP (ORDER BY |)every(|) OVER()every(|) OVER(PARTITION BY)first_value() OVER (ORDER BY |)first_value() OVER (PARTITION BY | ORDER BY RANGE CURRENT ROW UNBOUNDED FOLLOWING)first_value() OVER (PARTITION BY | ORDER BY)first_value(|) OVER ()json_agg(|) OVER()json_agg(|) OVER(PARTITION BY)jsonb_agg(|) OVER()jsonb_agg(|) OVER(PARTITION BY)json_object_agg(|) OVER()json_object_agg(|) OVER(PARTITION BY)lag(|) OVER ()lag(|) OVER (ORDER BY)lag(|) OVER (PARTITION BY ORDER BY)last_value() OVER (ORDER BY |)last_value() OVER (PARTITION BY | ORDER BY RANGE CURRENT ROW UNBOUNDED FOLLOWING)last_value() OVER (PARTITION BY | ORDER BY)last_value(|) OVER (ORDER BY)lead() OVER (ORDER BY |)lead() OVER (PARTITION BY | ORDER BY)lead(|) OVER ()max(|) OVER()max(|) OVER(PARTITION BY)min(|) OVER()min(|) OVER(PARTITION BY)mode() WITHIN GROUP (ORDER BY |) ntile() OVER (ORDER BY |)ntile() OVER (PARTITION BY | ORDER BY)ntile(|) OVER (ORDER BY)nth_value() OVER (ORDER BY |)nth_value() OVER (PARTITION BY | ORDER BY)nth_value(|) OVER (ORDER BY)percent_rank(|) WITHIN GROUP (ORDER BY)percent_rank() WITHIN GROUP (ORDER BY |)percentile_cont(|) WITHIN GROUP (ORDER BY) percentile_cont(0.5) WITHIN GROUP (ORDER BY |) OVER (PARTITION BY) percentile_disc(|) WITHIN GROUP (ORDER BY) percentile_disc(0.5) WITHIN GROUP (ORDER BY |) rank() OVER (ORDER BY |)rank() OVER (PARTITION BY | ORDER BY)regr_avgx(|) OVER (ORDER BY)regr_avgx(|) OVER (PARTITION BY ORDER BY)regr_avgy(|) OVER (ORDER BY)regr_avgy(|) OVER (PARTITION BY ORDER BY)regr_count(|) OVER (ORDER BY)regr_count(|) OVER (PARTITION BY ORDER BY)regr_intercept(|) OVER (ORDER BY)regr_intercept(|) OVER (PARTITION BY ORDER BY)regr_r2(|) OVER (ORDER BY)regr_r2(|) OVER (PARTITION BY ORDER BY)regr_slope(|) OVER (ORDER BY)regr_slope(|) OVER (PARTITION BY ORDER BY)regr_sxx(|) OVER (ORDER BY)regr_sxx(|) OVER (PARTITION BY ORDER BY)regr_sxy(|) OVER (ORDER BY)regr_sxy(|) OVER (PARTITION BY ORDER BY)regr_syy(|) OVER (ORDER BY)regr_syy(|) OVER (PARTITION BY ORDER BY)row_number() OVER (ORDER BY |)row_number() OVER (PARTITION BY | ORDER BY)stddev(|) OVER()stddev(|) OVER(ORDER BY)stddev(|) OVER(PARTITION BY ORDER BY)stddev_pop(|) OVER()stddev_pop(|) OVER(ORDER BY)stddev_pop(|) OVER(PARTITION BY ORDER BY)stddev_samp(|) OVER()stddev_samp(|) OVER(ORDER BY)stddev_samp(|) OVER(PARTITION BY ORDER BY)sum(|) OVER()sum(|) OVER(PARTITION BY)variance(|) OVER()variance(|) OVER(ORDER BY)variance(|) OVER(PARTITION BY ORDER BY)var_pop(|) OVER()var_pop(|) OVER(ORDER BY)var_pop(|) OVER(PARTITION BY ORDER BY)var_samp(|) OVER()var_samp(|) OVER(ORDER BY)var_samp(|) OVER(PARTITION BY ORDER BY)
batchDelim=
intelSql=1
kwShowAfter=2
qtDatabases=Databases (Greenplum)
qtSchemas=Schemas (Greenplum)
qtObjects=Objects (Greenplum)
qtColumns=Columns (Greenplum) + Keys
qtArguments=Arguments (Greenplum)
qtPackage=
qtJoins=Joins (Greenplum)
qtDDL=DDL Code (Greenplum)
qtSynonym=
qtContext=Context (Greenplum)
qtObjType=
qtRecCount=Record Count (Greenplum)
qtObjInfo=Object Info (Greenplum)
qtTblObjects=Table Objects (Greenplum)
qtSessionID=Current Session (Greenplum)
objFiltr=0002000000000000000000000000000000000000000000000000000000000002
objOrder=1A1905180A03021E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,PG__,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=
paFlags=7
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=selct=SELECTseelect=SELECTslect=SELECTgrop=GROUPgrup=GROUPgroupe=GROUPform=FROMwere=WHEREwher=WHEREordre=ORDER
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=0
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.13]
enabled=1
caption=Netezza
export=1
dbType=10
addDelim=0
addAlias=2
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]avg(expression NUMERIC)NUMERIC;Returns the average of the expression count(expression ANYTYPE)ANYTYPE;Returns the number of rows in the querycurrent_catalog()VARCHAR;Returns the current catalog name (database name)current_date()DATE;Returns the current datecurrent_path()VARCHAR;Returns the current PATH value current_schema()VARCHAR;Returns the current schema name (user name) current_time()TIME;Returns the current local timecurrent_timestamp()TIMEDSTAMP;Returns the current date and timecurrent_tx_path()VARCHAR;Returns the current path value after changing the path within a transaction or stored procedurecurrent_tx_schema()VARCHAR;Returns the name of the current schema inside a transaction block or procedure body. current_user()VARCHAR;Returns the current user namedate_part(text VARCHAR,timestamp_or_interval TIMESTAMP)INTEGER;Extracts subfield from date/time value or extracts subfield from interval valuedate_trunc(text VARCHAR, timestamp TIMESTAMP)TIMESTAMP;Truncates the date to a specified precisiondense_rank()NUMERIC;Calculates the rank of a row in an ordered group of rowsextract(identifier FROM timestamp)INTEGER;Extracts the subfield from date/time value or the subfield from interval valuefirst_value(expression ANYTYPE)ANYTYPE;Returns the first value in an ordered set of valueslag(expression);Provides access to more than one row of a table at the same time without a self-join at a given offset before that positionlast_value(expression ANYTYPE)ANYTYPE;Returns the last value in an ordered set of valueslead(expression);Provides access to more than one row of a table at the same time without a self-join at a given offset beyond that positionlower(string VARCHAR)VARCHAR;Converts a string to lowercasemax(expression ANYTYPE)ANYTYPE;Returns the maximum value of the expressionmin(expression ANYTYPE)ANYTYPE;Returns the minimum value of the expressionnow()TIMESTAMP;Returns the current date and time (equivalent to current_timestamp)position(substring in string)INTEGER;Locates the specified substringrank()NUMERIC;Calculates the rank of a value in a group of valuesrow_number()INTEGER;Assigns a unique number to each row to which it is appliedstddev(expression NUMERIC)NUMERIC;Returns the standard deviation of the expression, which is the square root of the variancestddev_pop(expression NUMERIC)NUMERIC;Returns the population standard deviation, this is the same as the square root of the var_pop functionstddev_samp(expression NUMERIC)NUMERIC;Returns the sample standard deviation, this is the same as the square root of the var_samp functionsubstring(string [from integer] [for integer])VARCHAR;Extracts a substring from a stringsum(expression ANYTYPE)ANYTYPE;Returns the sum of the expressiontimeofday()TIMESTAMP;Returns high-precision date and timetimestamp(date,[time])TIMESTAMP;Combines date and time into a timestampto_char(expression)VARCHAR;Converts expression into stringto_date(text, text)DATE;Converts a string to a dateto_number(text, text)NUMBER;Converts a string to a numericto_timestamp(text, text)TIMESTAMP;Converts a string to a timestamptrim([leading | trailing | both] FROM string)VARCHAR;Removes the longest string that contains only the characters (a space by default) from the beginning/end/both ends of the stringupper(string VARCHAR)VARCHAR;Converts a string to uppercasevariance(expression NUMERIC)NUMERIC;Returns the variance of the expressionvar_pop(expression NUMERIC)NUMERIC;Returns the population variancevar_samp(expression NUMERIC)NUMERIC;Returns the sample variance  [analytic functions]avg(|) OVER()avg(|) OVER(PARTITION BY)count(*) OVER()count(*) OVER(PARTITION BY |)count(|) OVER(PARTITION BY)dense_rank() OVER()dense_rank() OVER(PARTITION BY)first_value(|) OVER ()first_value() OVER (ORDER BY |)first_value() OVER (PARTITION BY | ORDER BY RANGE CURRENT ROW UNBOUNDED FOLLOWING)first_value() OVER (PARTITION BY | ORDER BY)lag(|) OVER ()lag(|) OVER (ORDER BY)lag(|) OVER (PARTITION BY ORDER BY)last_value() OVER (ORDER BY |)last_value() OVER (PARTITION BY | ORDER BY RANGE CURRENT ROW UNBOUNDED FOLLOWING)last_value() OVER (PARTITION BY | ORDER BY)last_value(|) OVER (ORDER BY)lead() OVER (ORDER BY |)lead() OVER (PARTITION BY | ORDER BY)lead(|) OVER ()max(|) OVER()max(|) OVER(PARTITION BY)min(|) OVER()min(|) OVER(PARTITION BY)rank() OVER (ORDER BY |)rank() OVER (PARTITION BY | ORDER BY)row_number() OVER (ORDER BY |)row_number() OVER (PARTITION BY | ORDER BY)stddev(|) OVER()stddev(|) OVER(ORDER BY)stddev(|) OVER(PARTITION BY ORDER BY)stddev_pop(|) OVER()stddev_pop(|) OVER(ORDER BY)stddev_pop(|) OVER(PARTITION BY ORDER BY)stddev_samp(|) OVER()stddev_samp(|) OVER(ORDER BY)stddev_samp(|) OVER(PARTITION BY ORDER BY)sum(|) OVER()sum(|) OVER(PARTITION BY)variance(|) OVER()variance(|) OVER(ORDER BY)variance(|) OVER(PARTITION BY ORDER BY)var_pop(|) OVER()var_pop(|) OVER(ORDER BY)var_pop(|) OVER(PARTITION BY ORDER BY)var_samp(|) OVER()var_samp(|) OVER(ORDER BY)var_samp(|) OVER(PARTITION BY ORDER BY)
batchDelim=
intelSql=1
kwShowAfter=2
qtDatabases=Databases (Netezza)
qtSchemas=Schemas (Netezza)
qtObjects=Objects (Netezza)
qtColumns=Columns (Netezza) + Keys
qtArguments=Arguments (Netezza)
qtPackage=
qtJoins=Joins (Netezza)
qtDDL=DDL Code (Netezza)
qtSynonym=Synonyms (Netezza)
qtContext=Context (Netezza)
qtObjType=
qtRecCount=Record Count (Netezza)
qtObjInfo=Object Info (Netezza)
qtTblObjects=Table Objects (Netezza)
qtSessionID=Current Session (Netezza)
objFiltr=0002000000000000000000000000000000000000000000000000000000000002
objOrder=1A1905180A03021E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,PG_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=-
paFlags=0
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=selct=SELECTseelect=SELECTslect=SELECTgrop=GROUPgrup=GROUPgroupe=GROUPform=FROMwere=WHEREwher=WHEREordre=ORDER
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=1
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[assists.14]
enabled=1
caption=Teradata
export=1
dbType=11
addDelim=0
addAlias=2
addSchema=0
autoExp=1
autoComm=3
ignoreComm=1
custom=[built-in functions]-- Mathematical FunctionsABS(x NUMERIC)NUMERIC;Absolute value of an argumentCASE_N(expr, expr, ...)INTEGER;Evaluates conditions and returns the position of the first TRUE conditionEXP(x NUMERIC)NUMERIC;Raises e (the base of natural logarithms) to the power of the argumentLN(x NUMERIC)NUMERIC;Natural logarithm of the argumentLOG(x NUMERIC)NUMERIC;The base 10 logarithm of an argumentNULLIFZERO(arg);Converts data from zero to nullRANDOM(lower_bound INTEGER, upper_bound INTEGER)INTEGER;Random integer numberRANGE_N(expr)INTEGER;Evaluates an expression and maps the result into one of a list of specified rangesSQRT(x NUMERIC)NUMERIC;Square root of an argumentWIDTH_BUCKET(value_expression, lower_bound, upper_bound, partition_count)INTEGER;Number of the partition to which value_expression is assignedZEROIFNULL(arg)INTEGER;Converts data from null to 0-- Trigonometric and Hyperbolic FunctionsACOS(x DOUBLE)DOUBLEACOSH(x DOUBLE)DOUBLEASIN(x DOUBLE)DOUBLEASINH(x DOUBLE)DOUBLEATAN(x DOUBLE)DOUBLEATAN2(y DOUBLE, x DOUBLE)DOUBLEATANH(x DOUBLE)DOUBLECOS(x DOUBLE)DOUBLECOSH(x DOUBLE)DOUBLEDEGREES(dp DOUBLE)DOUBLERADIANS(dp DOUBLE)DOUBLESIN(x DOUBLE)DOUBLESINH(x DOUBLE)DOUBLETAN(x DOUBLE)DOUBLETANH(x DOUBLE)DOUBLE-- String FunctionsCHAR2HEXINT(character_string_expression)VARCHAR;Hexadecimal representation for a character stringINDEX(string_expression_1,string_expression_2)INTEGER;Position in string_expression_1 where string_expression_2 startsLOWER(character_string_expression)VARCHAR;Converts string to lower casePOSITION(string_expression_1 IN string_expression_2)INTEGER;Position in string_expression_2 where string_expression_1 startsSOUNDEX(string_expression)VARCHAR;Character string that represents the Soundex code for string_expressionSTRING_CS(string_expression)INTEGER;Heuristically derived integer value that you can use to help determine which KANJI1-compatible client character set was used to encode string_expressionSUBSTR(string FROM INTEGER [for INTEGER])VARCHAR;Substring from a named string based on positionSUBSTRING(string FROM INTEGER [for INTEGER])VARCHAR;Substring from a named string based on positionTRANSLATE(character_string_expression USING source_repertoire_name [encoding] TO target_repertoire_name [suffix] [WITH ERROR]);Converts a character string or character string expression from one server character set to another server character setTRANSLATE_CHK(character_string_expression USING source_repertoire_name [encoding] TO target_repertoire_name [suffix]);Determines if a TRANSLATE conversion can be performed without producing errorsTRIM([{LEADING|TRAILING|BOTH} [characters] FROM] [character_set] string_expr)VARCHAR;Trims the specified pad characters or bytes, and returns the trimmed string_expressionUPPER(character_string_expression)VARCHAR;Converts string to upper caseVARGRAPHIC(character_string_expression)VARGRAPHIC;VARGRAPHIC representation of the character data in character_string_expression-- Attribute FunctionsBYTE(byte_expr)INTEGER;Number of bytes contained in the specified byte stringBYTES(byte_expr)INTEGER;Number of bytes contained in the specified byte stringCHAR_LENGTH(string_expr)INTEGER;Length of a string either in logical characters or in bytesCHARACTER_LENGTH(string_expr)INTEGER;Length of a string either in logical characters or in bytesCHAR(string_expr)INTEGER;Number of logical characters or bytes contained in the specified operand stringCHARS(string_expr)INTEGER;Number of logical characters or bytes contained in the specified operand stringCHARACTERS(string_expr)INTEGER;Number of logical characters or bytes contained in the specified operand stringDEFAULT(column_name);Current default value for the specified or derived columnFORMAT(column_name);Declared format for the named expressionOCTET_LENGTH(string_expr[,charset_name])INTEGER;Length of string_expression in octetsTITLE(expr);Title of an expression as it would appear in the headingTYPE(expr);Data type defined for an expression-- Date/Time FunctionsADD_MONTHS(date_expression,integer_expression);Adds an integer number of months to a DATE or TIMESTAMP expressionCURRENT_DATE()DATE;Current system dateCURRENT_TIME()TIME WITH TIME ZONE;Current system time and current session Time Zone displacementCURRENT_TIMESTAMP()TIMESTAMP WITH TIME ZONE;Current system timestamp and current session Time Zone displacementDATE()DATE;Current dateEXTRACT(part FROM value)INTEGER;Extracts a single field from any DateTime or Interval valueTIME()TIME;Current time based on a 24-hour day-- Session Information FunctionsACCOUNT()VARCHAR;Account string for the current userDATABASE()VARCHAR;Name of the default database for the current userPROFILE()VARCHAR;Current profile for the session or NULL if noneROLE()VARCHAR;Current role for the sessionSESSION()VARCHAR;Number of the session for the current userUSER()VARCHAR;User name of the current user-- Aggregate FunctionsAVG(expr NUMERIC)NUMERIC;Average of the values in a group.CORR(value_expression_1, value_expression_2)REAL;Returns the Pearson product moment correlation coefficient of its argumentsCOUNT(expr any-type)BIGINT;Returns a column value that is the total number of qualified rows in a groupCOVAR_POP(value_expression_1, value_expression_2)REAL;Returns the population covariance of its arguments for all non-null data point pairsCOVAR_SAMP(value_expression_1, value_expression_2)REAL;Returns the sample covariance of its arguments for all non-null data point pairsGROUPING(expression)INTEGER;Returns a value that indicates whether a specified column in the result row was excluded from the grouping set of a GROUP BY clauseKURTOSIS(value_expression)REAL;Returns the kurtosis of the distribution of value_expressionMAX(expr any-type)any-type;Returns a column value that is the maximum value for value_expression for a groupMAXIMUM(expr any-type)any-type;Returns a column value that is the maximum value for value_expression for a groupMIN(expr any-type)any-type;Returns a column value that is the minimum value for value_expression for a groupMINIMUM(expr any-type)any-type;Returns a column value that is the minimum value for value_expression for a groupREGR_AVGX(y DOUBLE,x DOUBLE)DOUBLE;Mean of the independent_variable_expression for all non-null data pairsREGR_AVGY(y DOUBLE,x DOUBLE)DOUBLE;Mean of the dependent_variable_expression for all non-null data pairsREGR_COUNT(y DOUBLE,x DOUBLE)BIGINT;Count of all non-null data pairs of the y and x variable argumentsREGR_INTERCEPT(y DOUBLE,x DOUBLE)DOUBLE;Intercept of the univariate linear regression line through all non-null data pairsREGR_R2(y DOUBLE,x DOUBLE)DOUBLE;Coefficient of determination for all non-null data pairsREGR_SLOPE(y DOUBLE,x DOUBLE)DOUBLE;Slope of the univariate linear regression line through all non-null data pairsREGR_SXX(y DOUBLE,x DOUBLE)DOUBLE;Sum of the squares of the x for all non-null data pairsREGR_SXY(y DOUBLE,x DOUBLE)DOUBLE;Sum of the products of x and y for all non-null data pairsREGR_SYY(y DOUBLE,x DOUBLE)DOUBLE;Sum of the squares of the y for all non-null data pairsSKEW(value_expression)REAL;Skewness of the distribution of value_expressionSTDDEV_POP(value_expression)REAL;Population standard deviation for the non-null data points in value_expressionSTDDEV_SAMP(value_expression)REAL;Sample standard deviation for the non-null data points in value_expressionSUM(expr NUMERIC)NUMERIC;Arithmetic sum for a specified expression for a groupVAR_POP(expr NUMERIC)NUMERIC;Population variance for the data points in value_expressionVAR_SAMP(expr NUMERIC)NUMERIC;Sample variance for the data points in value_expression-- Ordered Analytical FunctionsCSUM(value_expression, sort_expression);Cumulative sum of a value expression for each row in a partitionMAVG(value_expression, width, sort_expression);Computes the moving average of a value expressionMDIFF(value_expression, width, sort_expression);Returns the moving difference between the specified value expression for the current row and the preceding width rowsMLINREG(value_expression, width, sort_expression);Predicted value for an expression based on a least squares moving linear regression of the previous width-1 column valuesMSUM(value_expression, width, sort_expression);Computes the moving sum specified by a value expression for the current row and the preceding n-1 rowsPERCENT_RANK();Returns the relative rankQUANTILE(value_expression, sort_expression);Computes the quantile scores for the values in a groupRANK(sort_expression)INTEGER;Returns the rank (1 �?n) of all the rows in the group by the value of sort_expression listRANK();Returns an ordered ranking of rows based on the value_expression in the ORDER BY clauseROW_NUMBER();Returns the sequential row number, where the first row is number one, of the row within its window partition-- Hash-Related FunctionsHASHAMP([expr])HASHBAKAMP([expr])HASHBUCKET([expr])HASHROW([expr])[analytic functions]avg(|) OVER()avg(|) OVER(PARTITION BY)corr(|) OVER()corr(|) OVER(PARTITION BY)covar_pop(|) OVER()covar_pop(|) OVER(PARTITION BY)covar_samp(|) OVER()covar_samp(|) OVER(PARTITION BY)count(*) OVER()count(*) OVER(PARTITION BY |)count(|) OVER(PARTITION BY)max(|) OVER()max(|) OVER(PARTITION BY)min(|) OVER()min(|) OVER(PARTITION BY)percent_rank() OVER(PARTITION BY | ORDER BY)percent_rank() OVER(PARTITION BY |)percent_rank() OVER(RANGE |)percent_rank(|) OVER(ORDER BY)rank() OVER (ORDER BY |)rank() OVER (PARTITION BY | ORDER BY)regr_avgx(|) OVER (ORDER BY)regr_avgx(|) OVER (PARTITION BY ORDER BY)regr_avgy(|) OVER (ORDER BY)regr_avgy(|) OVER (PARTITION BY ORDER BY)regr_count(|) OVER (ORDER BY)regr_count(|) OVER (PARTITION BY ORDER BY)regr_intercept(|) OVER (ORDER BY)regr_intercept(|) OVER (PARTITION BY ORDER BY)regr_r2(|) OVER (ORDER BY)regr_r2(|) OVER (PARTITION BY ORDER BY)regr_slope(|) OVER (ORDER BY)regr_slope(|) OVER (PARTITION BY ORDER BY)regr_sxx(|) OVER (ORDER BY)regr_sxx(|) OVER (PARTITION BY ORDER BY)regr_sxy(|) OVER (ORDER BY)regr_sxy(|) OVER (PARTITION BY ORDER BY)regr_syy(|) OVER (ORDER BY)regr_syy(|) OVER (PARTITION BY ORDER BY)row_number() OVER (ORDER BY |)row_number() OVER (PARTITION BY | ORDER BY)stddev_pop(|) OVER()stddev_pop(|) OVER(ORDER BY)stddev_pop(|) OVER(PARTITION BY ORDER BY)stddev_samp(|) OVER()stddev_samp(|) OVER(ORDER BY)stddev_samp(|) OVER(PARTITION BY ORDER BY)sum(|) OVER()sum(|) OVER(PARTITION BY)var_pop(|) OVER()var_pop(|) OVER(ORDER BY)var_pop(|) OVER(PARTITION BY ORDER BY)var_samp(|) OVER()var_samp(|) OVER(ORDER BY)var_samp(|) OVER(PARTITION BY ORDER BY)
batchDelim=;
intelSql=1
kwShowAfter=2
qtDatabases=
qtSchemas=Schemas (Teradata)
qtObjects=Objects (Teradata)
qtColumns=Columns (Teradata) + Keys
qtArguments=Arguments (Teradata)
qtPackage=
qtJoins=Joins (Teradata)
qtDDL=DDL Code (Teradata)
qtSynonym=
qtContext=Context (Teradata)
qtObjType=
qtRecCount=Record Count (Teradata)
qtObjInfo=Object Info (Teradata)
qtTblObjects=Table Objects (Teradata)
qtSessionID=Current Session (Teradata)
objFiltr=0000000000000000000000000000000000000000000000000000000000000002
objOrder=1A1905180A031E
historySize=32
historyCtx=3
historyDock=1
historySort=0
ignoreNamePref=TBL_,PG_,V_
sugColsAfter=
joinExpCnt=4
ddlUtility=-
paFlags=7
paThreshold=1000
paThresholdIN=1000
paThresholdJoin=500000
ctxOrder=0
cmtFields=1
intelSnip=1
addNoLock=
autoCorrKw=1
autoCorrNm=2
autoCorrQn=1
autoCorrLst=selct=SELECTseelect=SELECTslect=SELECTgrop=GROUPgrup=GROUPgroupe=GROUPform=FROMwere=WHEREwher=WHEREordre=ORDER
spell_real=0
fltStyle=0
fltHlt=255
compareLimit=1000000
dbeShowSystem=1
dbeShowHints=1
dbeShowFolders=1
dbeSyncSCS=0
dbeShowTypes=1
dbeShowFiles=1
dbeShowCmt=1
aiKind=1
autoUpdCache=1
dbeFltStyle=1
synCheck=3
sqlHistCount=8

[queries]
enabled=0
caption=
export=1
count=197

[queries.1]
enabled=1
caption=Objects (Oracle)
export=1
dbType=0
queryType=3
queryText=select	object_name, substr(object_type,1,2)from	all_objectswhere	owner = :SCHEMA_NAMEand object_type in (	'TABLE','VIEW',	'PROCEDURE','FUNCTION','PACKAGE','TYPE',	'MATERIALIZED VIEW','MATERIALIZED VIEW LOG',	'SEQUENCE'	)and object_name not like 'bin$%'union allselect	synonym_name, 	decode(owner,'PUBLIC','SP','SN')from	all_synonymswhere	owner in (:SCHEMA_NAME,decode(user,:SCHEMA_NAME,'PUBLIC',''))and instr(synonym_name,'/') = 0
minVer=0

[queries.2]
enabled=1
caption=Columns (Oracle)
export=1
dbType=0
queryType=4
queryText=select	column_name,	data_type	|| decode(data_type,		'NUMBER', decode(nvl(data_precision,0),0,'','('||data_precision||decode(nvl(data_scale,0),0,'',','||data_scale)||')'),		decode(decode(data_type,		'CHAR','(','NCHAR','(','VARCHAR','(','NVARCHAR','(','VARCHAR2','(','NVARCHAR2','(',		'LOB', '(','BLOB','(','CLOB','(','NCLOB','(','RAW','(',''), 		'(', decode(nvl(data_length,0),0,'','('||nvl(char_col_decl_length,data_length)||')'), '')	),	nvl(nullable,'Y')from	all_tab_columnswhere	owner = :SCHEMA_NAMEand table_name = :OBJECT_NAMEorder by	column_id
minVer=0

[queries.3]
enabled=1
caption=Arguments (Oracle)
export=1
dbType=0
queryType=5
queryText=select    nvl(argument_name, 'RETURN'),    decode(data_type,    'PL/SQL RECORD', type_owner||'.'||type_name||'.'||type_subname,     'OBJECT', type_owner||'.'||type_name,    data_type ||        decode(data_type,        'NUMBER', decode(nvl(data_precision,0),0,'','('||data_precision||decode(nvl(data_scale,0),0,'',','||data_scale)||')'),        decode(decode(data_type,        'CHAR','(','NCHAR','(','VARCHAR','(','NVARCHAR','(','VARCHAR2','(','NVARCHAR2','(',        'LOB', '(','BLOB','(','CLOB','(',''),         '(', decode(nvl(data_length,0),0,'','('||data_length||')'), '')	        )    ),    decode(position,0,'R',    decode(in_out, 'IN','I', 'OUT','O', 'IN/OUT','U', 'X')    )    || to_char(nvl(overload,0),'FM09')    || to_char(data_level,'FM0')from    all_arguments where    owner = :SCHEMA_NAME and     object_name = :OBJECT_NAME and     case when exists (select 1 from all_objects                         where owner = :SCHEMA_NAME                            and object_name = :OBJECT_NAME                            and object_type in ('PACKAGE', 'TYPE')                        )        then case when nvl(package_name,'_') = nvl(:PACKAGE_NAME,'_') then 1 else 0 end        else 1    end = 1order by    overload,    sequence
minVer=0

[queries.4]
enabled=1
caption=Packages (Oracle)
export=1
dbType=0
queryType=6
queryText=select	object_name,	decode(position,0,'FU','PR')from	all_argumentswhere	owner = :SCHEMA_NAMEand package_name = :OBJECT_NAMEand sequence <= 1and nvl(overload,0) <= 1
minVer=0

[queries.5]
enabled=1
caption=Schemas (Oracle)
export=1
dbType=0
queryType=2
queryText=select	username, 'SC'from	all_usersunion allselect	granted_role, 'SR'from	user_role_privs
minVer=0

[queries.6]
enabled=1
caption=Joins (Oracle)
export=1
dbType=0
queryType=7
queryText=select	c2.table_name,	c2.column_name,	c1.column_name,	c2.owner,	t.rdirfrom	all_cons_columns c1,	all_cons_columns c2,(select	b.owner owner1,	b.constraint_name constr1,	a.owner owner2,	a.constraint_name constr2,	'F' rdirfrom	all_constraints a, all_constraints bwhere	b.owner = :SCHEMA_NAMEand b.table_name = :OBJECT_NAMEand b.constraint_type = 'R'and a.owner = b.r_ownerand a.constraint_name = b.r_constraint_nameunion allselect	b.owner,	b.constraint_name,	a.owner,	a.constraint_name,	'P' rdirfrom	all_constraints a, all_constraints bwhere	b.owner = :SCHEMA_NAMEand b.table_name = :OBJECT_NAMEand a.constraint_type = 'R'and a.r_owner = b.ownerand a.r_constraint_name = b.constraint_name) twhere	c1.owner = t.owner1and c1.constraint_name = t.constr1and c2.owner = t.owner2and c2.constraint_name = t.constr2and c1.position = c2.positionorder by c2.table_name
minVer=0

[queries.7]
enabled=1
caption=Schemas (MSSQL)
export=1
dbType=1
queryType=2
queryText=if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'	select		name collate Latin1_General_CI_AS, 'SC', schema_id	from		/*db.*/sys.schemas	where		schema_id < 16384	union all	select		name collate Latin1_General_CI_AS, 'SR', principal_id	from		/*db.*/sys.database_principals	where		type in ('A','R')	union all	select		name collate Latin1_General_CI_AS,		case when type = 'R' then 'SR' else 'SL' end,		principal_id	from		/*db.*/sys.server_principals	where		type in ('S','U','G','R')else	select		name collate Latin1_General_CI_AS, 		case when issqlrole + isapprole > 0 then 'SR' else 'SC' end, 		cast(uid as int)	from		/*db.*/dbo.sysusers	where		issqluser = 1 or isntname  = 1	or	issqlrole = 1 or isapprole = 1		union all	select name collate Latin1_General_CI_AS, 'SL', 0 	from master.dbo.syslogins
minVer=0

[queries.8]
enabled=1
caption=Objects (MSSQL)
export=1
dbType=1
queryType=3
queryText=if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'  select      name, type, object_id  from      /*db.*/sys.all_objects  where      type in ('U','S','V','P','X','RF','FN','TF','IF','SN','PC','FT','FS')     and (           schema_id = :SCHEMA_ID           or (               1 = :SCHEMA_ID                and user_name() = 'dbo'                and schema_id = 4                and name in ('sysobjects','sysindexes','syscolumns','systypes','syscomments','sysfiles1','syspermissions','sysusers','sysproperties','sysdepends','sysreferences','sysfulltextcatalogs','sysindexkeys','sysforeignkeys','sysmembers','sysprotects','sysfulltextnotify','sysfiles','sysfilegroups')              )         )     and not (name = 'dtproperties')     and not (name like 'dt%' and type = 'P')else  select     name, xtype, id  from    /*db.*/dbo.sysobjects  where     xtype in ('U','S','V','P','X','RF','FN','TF','IF')     and uid = :SCHEMA_ID      and not (name = 'dtproperties')     and not (name like 'dt%' and xtype = 'P')
minVer=0

[queries.9]
enabled=1
caption=Columns (MSSQL)
export=1
dbType=1
queryType=4
queryText=if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'  select    c.name,    t.name    + case     when t.name in ('varchar', 'char', 'binary', 'varbinary')       then '(' + case c.max_length when -1 then 'max' else convert(varchar, c.max_length) end + ')'    when t.name in ('nvarchar', 'nchar')       then '(' + case c.max_length when -1 then 'max' else convert(varchar, c.max_length / 2) end + ')'     when t.name in ('decimal', 'numeric')      then '(' + convert(varchar, c.[precision]) + ',' + convert(varchar, c.scale) + ')'    else ''    end,    case /* Y,N,A */	when c.is_identity = 1 or c.is_computed = 1 or t.name='timestamp' then 'A'	when c.is_nullable = 1 then 'Y' else 'N' 	end  from    /*db.*/sys.all_columns c    join /*db.*/sys.types t       on c.user_type_id = t.user_type_id  where    c.object_id = :OBJECT_ID  order by     c.column_idelse  select    c.name,    t.name    + case     when t.name in ('varchar', 'char', 'binary', 'varbinary')       then '(' + case c.length when -1 then 'max' else convert(varchar, c.length) end + ')'    when t.name in ('nvarchar', 'nchar')       then '(' + case c.length when -1 then 'max' else convert(varchar, c.length / 2) end + ')'     when t.name in ('decimal', 'numeric')      then '(' + convert(varchar, c.prec) + ',' + convert(varchar, c.scale) + ')'    else ''    end,    case /* Y,N,A */	when c.autoval is not null or t.name='timestamp' then 'A'	when c.isnullable = 1 then 'Y' else 'N' 	end  from    /*db.*/dbo.syscolumns c    join /*db.*/dbo.systypes t       on c.xtype = t.xtype       and c.xusertype = t.xusertype  where    c.id = :OBJECT_ID  and c.number = 0  order by     c.colid
minVer=0

[queries.10]
enabled=1
caption=Arguments (MSSQL)
export=1
dbType=1
queryType=5
queryText=select	c.name,	t.name + 	case	when t.name in ('varchar', 'char', 'binary', 'varbinary') 		then '(' + case c.length when -1 then 'max' else convert(varchar, c.length) end + ')'	when t.name in ('nvarchar', 'nchar') 		then '(' + case c.length when -1 then 'max' else convert(varchar, c.length / 2) end + ')'	when t.name in ('decimal', 'numeric')		then '(' + convert(varchar, c.prec) + ',' + convert(varchar, c.scale) + ')'	else ''	end,		case	when c.name = '' then 'R'	when c.isoutparam = 1 then 'O'	else 'I'	endfrom	/*db.*/dbo.syscolumns c	join /*db.*/dbo.systypes t 		on c.xtype = t.xtype 		and c.xusertype = t.xusertypewhere	c.id = :OBJECT_IDand (c.name like '@%' or c.name = '')order by 	c.colid
minVer=0

[queries.11]
enabled=1
caption=Joins (MSSQL)
export=1
dbType=1
queryType=7
queryText=if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'select	(select name from /*db.*/dbo.sysobjects where id = f1.fkeyid),	(select name from /*db.*/dbo.syscolumns where id = f1.fkeyid and colid = f1.fkey),	(select name from /*db.*/dbo.syscolumns where id = f1.rkeyid and colid = f1.rkey),		(select s.name from /*db.*/sys.all_objects o, /*db.*/sys.schemas s where s.schema_id = o.schema_id and o.object_id = f1.fkeyid),	'P'from	/*db.*/dbo.sysforeignkeys f1where	rkeyid = :OBJECT_IDunion allselect	(select name from /*db.*/dbo.sysobjects where id = f2.rkeyid),		(select name from /*db.*/dbo.syscolumns where id = f2.rkeyid and colid = f2.rkey),	(select name from /*db.*/dbo.syscolumns where id = f2.fkeyid and colid = f2.fkey),	(select s.name from /*db.*/sys.all_objects o, /*db.*/sys.schemas s where s.schema_id = o.schema_id and o.object_id = f2.rkeyid),	'F'from 	/*db.*/dbo.sysforeignkeys f2where	fkeyid = :OBJECT_IDorder by 1else  select	(select name from /*db.*/dbo.sysobjects where id = f1.fkeyid),	(select name from /*db.*/dbo.syscolumns where id = f1.fkeyid and colid = f1.fkey),	(select name from /*db.*/dbo.syscolumns where id = f1.rkeyid and colid = f1.rkey),	(select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where u.uid = o.uid and o.id = f1.fkeyid),	'P'  from	/*db.*/dbo.sysforeignkeys f1  where	rkeyid = :OBJECT_ID  union all  select	(select name from /*db.*/dbo.sysobjects where id = f2.rkeyid),		(select name from /*db.*/dbo.syscolumns where id = f2.rkeyid and colid = f2.rkey),	(select name from /*db.*/dbo.syscolumns where id = f2.fkeyid and colid = f2.fkey),	(select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where u.uid = o.uid and o.id = f2.rkeyid),	'F'  from 	/*db.*/dbo.sysforeignkeys f2  where	fkeyid = :OBJECT_ID  order by 1
minVer=0

[queries.12]
enabled=1
caption=Databases (MSSQL)
export=1
dbType=1
queryType=1
queryText=select name, 'DB' from master.dbo.sysdatabases where status & 33760 = 0
minVer=0

[queries.13]
enabled=1
caption=Schemas (MySQL)
export=1
dbType=2
queryType=2
queryText=select	SCHEMA_NAME, 'SC'from	information_schema.SCHEMATAunion allselect	concat('''',user,'''@''',host,''''),'SL'from	mysql.user
minVer=0

[queries.14]
enabled=1
caption=Objects (MySQL)
export=1
dbType=2
queryType=3
queryText=select	TABLE_NAME,	case TABLE_TYPE		when 'BASE TABLE' then 'TA'		when 'TEMPORARY' then 'TA'		when 'SYSTEM VIEW' then 'VI'	else TABLE_TYPE 	endfrom	information_schema.TABLESwhere	TABLE_SCHEMA = :SCHEMA_NAMEunion allselect	ROUTINE_NAME, ROUTINE_TYPEfrom	information_schema.ROUTINESwhere	ROUTINE_SCHEMA = :SCHEMA_NAME
minVer=0

[queries.15]
enabled=1
caption=Columns (MySQL)
export=1
dbType=2
queryType=4
queryText=SELECT	COLUMN_NAME, COLUMN_TYPE,	CONCAT(		CASE WHEN EXTRA = 'auto_increment' THEN 'A'		ELSE SUBSTR(IS_NULLABLE,1,1)/*N,Y*/		END,		CASE /*P,F,U*/    	WHEN COLUMN_KEY = 'PRI' THEN 'P'		WHEN COLUMN_KEY = 'UNI' THEN 'U'		ELSE ' '		END,		IF(COLUMN_KEY = 'MUL','I','') 	)FROM	information_schema.COLUMNSWHERE	TABLE_SCHEMA = :SCHEMA_NAMEAND TABLE_NAME = :OBJECT_NAMEORDER BY	ORDINAL_POSITION
minVer=0

[queries.16]
enabled=1
caption=Joins (MySQL)
export=1
dbType=2
queryType=7
queryText=select	REFERENCED_TABLE_NAME,	REFERENCED_COLUMN_NAME,	COLUMN_NAME,	REFERENCED_TABLE_SCHEMA,	'F'from	information_schema.KEY_COLUMN_USAGEwhere	TABLE_SCHEMA = :SCHEMA_NAMEand TABLE_NAME = :OBJECT_NAMEand POSITION_IN_UNIQUE_CONSTRAINT is not nullunion allselect	TABLE_NAME,	COLUMN_NAME,	REFERENCED_COLUMN_NAME,	TABLE_SCHEMA,	'P'from	information_schema.KEY_COLUMN_USAGEwhere 	REFERENCED_TABLE_SCHEMA = :SCHEMA_NAMEand REFERENCED_TABLE_NAME = :OBJECT_NAMEand POSITION_IN_UNIQUE_CONSTRAINT is not nullorder by 1
minVer=0

[queries.17]
enabled=1
caption=Schemas (DB2 UDB)
export=1
dbType=3
queryType=2
queryText=select	RTRIM(schemaname), 'SC'from	syscat.schemataunion allselect 	RTRIM(t.grantee), 'SL'from	(	select grantee	  from syscat.dbauth	 group by grantee	) torder by 1
minVer=0

[queries.18]
enabled=1
caption=Arguments (DB2 UDB)
export=1
dbType=3
queryType=5
queryText=select	case 	when parmname is null then ''	else parmname	end	,	CASE WHEN typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 			'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')		THEN RTRIM(typename) || '(' || RTRIM(CHAR(LENGTH)) || ')'		ELSE typename 	END	, 	case 	when rowtype = 'R' and ordinal > 0 then 'Y' 	when specificname <> routinename then rowtype CONCAT RIGHT(specificname,2)	else rowtype	endfrom	syscat.routineparmswhere 	routineschema = :SCHEMA_NAMEand routinename = :OBJECT_NAMEorder by 	specificname, 	case	when rowtype = 'R' and ordinal > 0 then ordinal+100	else ordinal	end
minVer=0

[queries.19]
enabled=1
caption=Columns (DB2 UDB)
export=1
dbType=3
queryType=4
queryText=select	colname, 	CASE WHEN typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 			'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')		THEN RTRIM(typename) || '(' || RTRIM(CHAR(LENGTH)) || ')'		ELSE typename 	END,	case when identity = 'Y' then 'A' else nulls endfrom	syscat.columnswhere	tabschema = :SCHEMA_NAME and tabname = :OBJECT_NAMEorder by	colno
minVer=0

[queries.20]
enabled=1
caption=Joins (DB2 UDB)
export=1
dbType=3
queryType=7
queryText=select    c2.tabname,     c2.colname,     c1.colname,    rtrim(c2.tabschema),    t.rdirfrom     syscat.keycoluse c1,    syscat.keycoluse c2,(select    constname cn, tabschema ts, tabname tn,    refkeyname rcn, reftabschema rts, reftabname rtn,    'F' rdirfrom    syscat.referenceswhere    tabschema = :SCHEMA_NAMEand tabname = :OBJECT_NAMEunion allselect    refkeyname cn, reftabschema ts, reftabname tn,    constname rcn, tabschema rts, tabname rtn,    'P' rdirfrom    syscat.referenceswhere    reftabschema = :SCHEMA_NAMEand reftabname = :OBJECT_NAME) twhere     t.cn = c1.constnameand t.ts = c1.tabschemaand t.tn = c1.tabnameand t.rcn = c2.constnameand t.rts = c2.tabschemaand t.rtn = c2.tabnameand c1.colseq = c2.colseqorder by 1
minVer=0

[queries.21]
enabled=1
caption=DDL Code (MSSQL)
export=1
dbType=1
queryType=8
queryText=select	textfrom	/*db.*/dbo.syscommentswhere	id = :OBJECT_IDorder by	colid
minVer=0

[queries.22]
enabled=1
caption=DDL Code (Oracle)
export=1
dbType=0
queryType=8
queryText=SELECT DBMS_METADATA.get_ddl(object_type, object_name, owner) AS txtFROM all_objectsWHERE object_name = :OBJECT_NAME     AND owner in (:SCHEMA_NAME, 'PUBLIC')    AND object_type NOT LIKE '% BODY'
minVer=589824

[queries.23]
enabled=1
caption=DDL Code (MySQL)
export=1
dbType=2
queryType=8
queryText=select	concat(		'CREATE OR REPLACE DEFINER=''',REPLACE(definer, '@', '''@'''),''' SQL SECURITY ',SECURITY_TYPE,		'\nVIEW `',TABLE_NAME,'` AS\n',VIEW_DEFINITION	)from	information_schema.VIEWSwhere	TABLE_SCHEMA = :SCHEMA_NAMEand TABLE_NAME = :OBJECT_NAMEunion allselect	concat(		'CREATE DEFINER=''',REPLACE(definer, '@', '''@'''), ''' ',		'\n', 'TRIGGER ', '`', TRIGGER_SCHEMA, '`','.', '`', TRIGGER_NAME, '` ', ACTION_TIMING, ' ', EVENT_MANIPULATION , 		'\n', 'ON ', '`', TRIGGER_SCHEMA, '`.`', EVENT_OBJECT_TABLE, '`', ' FOR EACH ROW ', ACTION_STATEMENT	)from	information_schema.TRIGGERSwhere	TRIGGER_SCHEMA = :SCHEMA_NAMEand TRIGGER_NAME = :OBJECT_NAMEunion allselect	cast(concat(		'CREATE DEFINER=''',REPLACE(definer, '@', '''@'''),''' ',type,' `',db,'`.`',name,'` (',param_list,')',		if(returns <> '', concat('\n\tRETURNS ',returns), ''),		'\n\t',REPLACE(sql_data_access, '_', ' '),  		if(is_deterministic = 'YES','\n\tDETERMINISTIC',''),		'\n\tSQL SECURITY ', security_type,		if(comment <> '', concat('\n\tCOMMENT \'',COMMENT,'\''), ''),		'\n',body,'\n\n'	) as char)from	mysql.procwhere	db = :SCHEMA_NAMEand name = :OBJECT_NAMEunion allselect	cast(concat(		'CREATE ',		case when type = 'aggregate' then 'AGGREGATE ' else '' end,		'FUNCTION ', name, ' RETURNS ',		case ret when 0 then 'STRING' when 1 then 'REAL' else 'INTEGER' end,		' SONAME "', dl, '"'	) as char)from	mysql.funcwhere	name = :OBJECT_NAME
minVer=327680

[queries.24]
enabled=1
caption=DDL Code (DB2 UDB)
export=1
dbType=3
queryType=8
queryText=WITHattr(id, text) AS (select    ordinal, '  ' || attr_name || ' ' || attr_typename ||    CASE    WHEN attr_typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',            'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN        '(' || LENGTH || ')'    WHEN attr_typename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN        '(' || LENGTH || ', ' || SCALE || ')'    ELSE        ''    endfrom    syscat.attributeswhere  	typeschema = :SCHEMA_NAMEand typename = :OBJECT_NAME),attr_recurcive(id, text) AS (    SELECT id, text FROM attr WHERE id = 0    UNION ALL    SELECT t1.id, t0.text || ',' || CHR(10) || t1.text    FROM attr_recurcive t0, attr t1    WHERE t0.id + 1 = t1.id),cols(id, text) AS (select    ordinal, '  ' || fieldname || ' ' || fieldtypename ||    CASE    WHEN fieldtypename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',            'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN        '(' || LENGTH || ')'    WHEN fieldtypename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN        '(' || LENGTH || ', ' || SCALE || ')'    ELSE        ''    endfrom    syscat.rowfieldswhere  	typeschema = :SCHEMA_NAMEand typename = :OBJECT_NAME),cols_recurcive(id, text) AS (    SELECT id, text FROM cols WHERE id = 0    UNION ALL    SELECT t1.id, t0.text || ',' || CHR(10) || t1.text    FROM cols_recurcive t0, cols t1    WHERE t0.id + 1 = t1.id)select	case external_action	when 'E' then value(text,'/* Code of this external procedure/function is not available */') 	else text 	endfrom	syscat.routineswhere	routineschema = :SCHEMA_NAMEand specificname = :OBJECT_NAMEunion allselect	textfrom	syscat.viewswhere	viewschema = :SCHEMA_NAMEand viewname = :OBJECT_NAMEunion allselect	textfrom	syscat.triggerswhere	trigschema = :SCHEMA_NAMEand trigname = :OBJECT_NAMEunion allSELECT	'CREATE SYNONYM "' || TABSCHEMA || '"."' || TABNAME || '" FOR "' || BASE_TABSCHEMA || '"."' || BASE_TABNAME || '"'FROM	SYSCAT.TABLESWHERE	TABSCHEMA = :SCHEMA_NAMEAND TABNAME = :OBJECT_NAMEAND TYPE = 'A'union allSELECT 'CREATE SEQUENCE "' || SEQSCHEMA || '"."' || SEQNAME || '"' || CHR(10) ||	'  START WITH '   || "START" || CHR(10) ||	'  INCREMENT BY ' || "INCREMENT" || CHR(10) ||	'  MINVALUE '     || "MINVALUE" || CHR(10) ||	'  MAXVALUE '     || "MAXVALUE" || CHR(10) ||	'  CACHE '        || "CACHE" || CHR(10) ||	'  ' || CASE WHEN CYCLE = 'Y' THEN 'CYCLE' ELSE 'NO CYCLE' ENDFROM syscat.SEQUENCESWHERE SEQNAME = :OBJECT_NAME AND SEQSCHEMA = :SCHEMA_NAMEAND DEFINERTYPE = 'U'union allSELECT 'CREATE TYPE "' || TYPENAME || '" AS ' ||    CASE    WHEN METATYPE IN ('T', 'A', 'L') THEN        SOURCENAME ||        CASE        WHEN SOURCENAME IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',                'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN            '(' || LENGTH || ')'        WHEN SOURCENAME IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN            CASE WHEN "LENGTH" <> 5 OR SCALE <> 0 THEN            '(' || LENGTH || CASE WHEN SCALE <> 0 THEN ', ' || SCALE ELSE '' END || ')'            ELSE ''            END        ELSE            ''        END    ELSE ''    END ||    CASE METATYPE    WHEN 'T' THEN ' WITH COMPARISONS'    WHEN 'L' THEN ' ARRAY[' || ARRAYINDEXTYPENAME ||        CASE        WHEN ARRAYINDEXTYPENAME IN ('VARCHAR', 'CHARACTER VARYING', 'CHAR VARYING') THEN            '(' || RTRIM(ARRAYINDEXTYPELENGTH) || ')'        ELSE ''        END        || ']'    WHEN 'A' THEN ' ARRAY[' || CASE WHEN ARRAY_LENGTH <> 2147483647 THEN RTRIM(ARRAY_LENGTH) ELSE '' END  || ']'    WHEN 'C' THEN COALESCE(SOURCENAME || ' ', '') || 'CURSOR'    WHEN 'F' THEN ' ROW (' || CHR(10) || (SELECT text FROM cols_recurcive WHERE id = (SELECT MAX(id) FROM cols)) || CHR(10) || ')'    WHEN 'R' THEN ' (' || CHR(10) || (SELECT text FROM attr_recurcive WHERE id = (SELECT MAX(id) FROM attr)) || CHR(10) || ') MODE DB2SQL'    ELSE ''    ENDFROM SYSCAT.DATATYPESWHERE METATYPE <> 'S'and	typeschema = :SCHEMA_NAMEand	typename = :OBJECT_NAME
minVer=589829

[queries.25]
enabled=1
caption=Arguments (MySQL)
export=1
dbType=2
queryType=5
queryText=select	concat(		if(returns <> '', concat('RET ',returns,','), ''),		param_list	)from	mysql.procwhere	db = :SCHEMA_NAMEand name = :OBJECT_NAME
minVer=0

[queries.26]
enabled=1
caption=Context (DB2 UDB)
export=1
dbType=3
queryType=10
queryText=SELECT	CURRENT SERVER,	RTRIM(USER), 	'noDB',	RTRIM(CURRENT SCHEMA)FROM	SYSIBM.SYSDUMMY1
minVer=0

[queries.27]
enabled=1
caption=Context (MSSQL)
export=1
dbType=1
queryType=10
queryText=if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'   EXEC ('select    SERVERPROPERTY(''ServerName''),    SYSTEM_USER,    DB_NAME(),    SCHEMA_NAME()')else    EXEC ('select    SERVERPROPERTY(''ServerName''),    SYSTEM_USER,    DB_NAME(),    USER_NAME()')
minVer=0

[queries.28]
enabled=1
caption=Context (MySQL)
export=1
dbType=2
queryType=10
queryText=select	'noSrv',	CURRENT_USER(),	'noDB',	DATABASE()
minVer=0

[queries.29]
enabled=1
caption=Context (Oracle)
export=1
dbType=0
queryType=10
queryText=SELECT	SYS_CONTEXT('USERENV','DB_NAME'),	SYS_CONTEXT('USERENV','SESSION_USER'),	'noDB',	SYS_CONTEXT('USERENV','CURRENT_SCHEMA')FROM	DUAL
minVer=0

[queries.30]
enabled=1
caption=Synonyms (Oracle)
export=1
dbType=0
queryType=9
queryText=select	object_name, substr(object_type,1,2), ownerfrom	all_objectswhere	(owner, object_name) in (		select			table_owner, table_name		from			all_synonyms		where			owner = :SCHEMA_NAME 		and synonym_name = :OBJECT_NAME    )and rownum <= 1
minVer=0

[queries.31]
enabled=1
caption=Context (ASE)
export=1
dbType=4
queryType=10
queryText=select	isNull(@@ServerName, 'noSrv'),	SUSER_NAME(),	DB_NAME(),	USER_NAME()
minVer=0

[queries.32]
enabled=1
caption=Databases (ASA)
export=1
dbType=5
queryType=1
queryText=select * from (	select db_name(0) as db_name, 'DB' obj_type	union all	select db_name(1), 'DB'	union all	select db_name(2), 'DB'	union all	select db_name(3), 'DB'	union all	select db_name(4), 'DB'	union all	select db_name(5), 'DB'	union all	select db_name(6), 'DB'	union all	select db_name(7), 'DB') as dwhere d.db_name is not null
minVer=0

[queries.33]
enabled=1
caption=Objects (ASE)
export=1
dbType=4
queryType=3
queryText=select	name, type, idfrom	/*db.*/dbo.sysobjectswhere	type in ('U','S','V','P','X','RF','FN','TF','IF','PC','FT','FS')and uid = :SCHEMA_ID
minVer=0

[queries.34]
enabled=1
caption=Schemas (ASE)
export=1
dbType=4
queryType=2
queryText=select name, 'SC', uidfrom /*db.*/dbo.sysuserswhere suid > 0union allselect name, 'SL', 0 from master.dbo.syslogins
minVer=0

[queries.35]
enabled=1
caption=Joins (ASA)
export=1
dbType=5
queryType=7
queryText=SELECT ft.table_name,   ftc.column_name,   pkc.column_name,   ft.creator,   'P'FROM SYS.SYSTABLE AS pt   JOIN SYS.SYSFOREIGNKEY AS fk        ON pt.table_id = fk.primary_table_id   JOIN SYS.SYSTABLE AS ft        ON ft.table_id = fk.foreign_table_id   JOIN SYS.SYSFKCOL AS fkc        ON fk.foreign_table_id = fkc.foreign_table_id  		AND fk.foreign_key_id = fkc.foreign_key_id   JOIN SYS.SYSCOLUMN AS pkc        ON pt.table_id = pkc.table_id     	AND fkc.primary_column_id = pkc.column_id   JOIN SYS.SYSCOLUMN AS ftc        ON ft.table_id = ftc.table_id     	AND fkc.foreign_column_id = ftc.column_id   JOIN dbo.sysobjects AS o		ON o.name = pt.table_name		AND o.uid = pt.creatorWHERE o.id = :OBJECT_IDUNION ALLSELECT pt.table_name,   pkc.column_name,   ftc.column_name,   pt.creator,   'F'FROM /*db.*/SYS.SYSTABLE AS pt   JOIN /*db.*/SYS.SYSFOREIGNKEY AS fk        ON pt.table_id = fk.primary_table_id   JOIN /*db.*/SYS.SYSTABLE AS ft        ON ft.table_id = fk.foreign_table_id   JOIN /*db.*/SYS.SYSFKCOL AS fkc        ON fk.foreign_table_id = fkc.foreign_table_id  		AND fk.foreign_key_id = fkc.foreign_key_id   JOIN /*db.*/SYS.SYSCOLUMN AS pkc        ON pt.table_id = pkc.table_id     	AND fkc.primary_column_id = pkc.column_id   JOIN /*db.*/SYS.SYSCOLUMN AS ftc        ON ft.table_id = ftc.table_id     	AND fkc.foreign_column_id = ftc.column_id   JOIN /*db.*/dbo.sysobjects AS o		ON o.name = ft.table_name		AND o.uid = ft.creatorWHERE o.id = :OBJECT_IDORDER BY 1, 2
minVer=0

[queries.36]
enabled=1
caption=Columns (ASE)
export=1
dbType=4
queryType=4
queryText=select    c.name,    t.name +    case     when t.name in ('varchar', 'char', 'binary', 'varbinary')        then '(' + case c.length when -1 then 'max' else convert(varchar, c.length) end + ')'	when t.name in ('nvarchar', 'nchar') 		then '(' + case c.length when -1 then 'max' else convert(varchar, c.length / 2) end + ')'	when t.name in ('decimal', 'numeric')        then '(' + convert(varchar, c.prec) + ',' + convert(varchar, c.scale) + ')'    else ''    end,    case 	when c.status & 128 <> 0 or t.name='timestamp' then 'A' 	when c.status & 8 <> 0 then 'Y' 	else 'N' 	endfrom    /*db.*/dbo.syscolumns c    join /*db.*/dbo.systypes t         on t.type = c.type         and t.usertype = (                            select min(t2.usertype)                            from /*db.*/dbo.systypes t2                            where t2.type = c.type                        )where    c.id = :OBJECT_ID    and c.number = 0order by     c.colid
minVer=0

[queries.37]
enabled=1
caption=Arguments (ASA)
export=1
dbType=5
queryType=5
queryText=SELECT CASE WHEN pp.parm_type = 4 THEN ''			ELSE (case when left(pp.parm_name, 1) = '@' then '' else '@' end + pp.parm_name)		END,       d.domain_name + 		CASE			WHEN d.domain_name IN ('varchar', 'char', 'binary', 'varbinary') 				THEN '(' + convert(varchar, pp.width) + ')'			WHEN d.domain_name IN ('nchar', 'nvarchar') 				THEN '(' + convert(varchar, pp.width / 2) + ')'			WHEN d.domain_name IN ('decimal', 'numeric')				THEN '(' + convert(varchar, pp.width) + ',' + convert(varchar, pp.scale) + ')'			ELSE ''       END,       CASE WHEN pp.parm_type = 4 THEN 'R'			WHEN pp.parm_mode_out = 'Y' THEN 'O'			ELSE 'I'       END FROM /*db.*/dbo.sysobjects o	JOIN /*db.*/SYS.SYSPROCEDURE p 		ON p.proc_name = o.name		AND p.creator = o.uid	JOIN /*db.*/SYS.SYSPROCPARM pp 		ON pp.proc_id = p.proc_id		AND pp.parm_type IN (0, 4)	JOIN /*db.*/SYS.SYSDOMAIN d 		ON d.domain_id = pp.domain_idWHERE o.id = :OBJECT_IDORDER BY pp.parm_type DESC, pp.parm_id ASC
minVer=0

[queries.38]
enabled=1
caption=DDL Code (ASE)
export=1
dbType=4
queryType=8
queryText=select	textfrom	/*db.*/dbo.syscommentswhere	id = :OBJECT_IDorder by	colid
minVer=0

[queries.39]
enabled=1
caption=Databases (ASE)
export=1
dbType=4
queryType=1
queryText=select name, 'DB'from master.dbo.sysdatabaseswhere status & 352 = 0
minVer=0

[queries.40]
enabled=1
caption=Arguments (ASE)
export=1
dbType=4
queryType=5
queryText=select	c.name,	t.name + 	case	when t.name in ('varchar', 'char', 'binary', 'varbinary') 		then '(' + case c.length when -1 then 'max' else convert(varchar, c.length) end + ')' 	when t.name in ('nvarchar', 'nchar') 		then '(' + case c.length when -1 then 'max' else convert(varchar, c.length / 2) end + ')'	when t.name in ('decimal', 'numeric')		then '(' + convert(varchar, c.prec) + ',' + convert(varchar, c.scale) + ')'	else ''	end,		case	when c.name = '' then 'R'	when c.status2 = 2 then 'O'	else 'I'	endfrom	/*db.*/dbo.syscolumns c	join /*db.*/dbo.systypes t 		on c.type = t.type 		and c.usertype = t.usertypewhere	c.id = :OBJECT_IDand (c.name like '@%' or c.name = '')order by 	c.colid
minVer=0

[queries.41]
enabled=1
caption=Joins (ASE)
export=1
dbType=4
queryType=7
queryText=select    (select name from /*db.*/dbo.sysobjects where id = r.tableid),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey1),    (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey1),     (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.tableid),    'P'from    /*db.*/dbo.sysreferences rwhere    reftabid = :OBJECT_IDand fokey1 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.tableid),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey2),    (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey2),     (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.tableid),    'P'from    /*db.*/dbo.sysreferences rwhere    reftabid = :OBJECT_IDand fokey2 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.tableid),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey3),    (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey3),     (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.tableid),    'P'from    /*db.*/dbo.sysreferences rwhere    reftabid = :OBJECT_IDand fokey3 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.tableid),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey4),    (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey4),     (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.tableid),    'P'from    /*db.*/dbo.sysreferences rwhere    reftabid = :OBJECT_IDand fokey4 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.tableid),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey5),    (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey5),     (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.tableid),    'P'from    /*db.*/dbo.sysreferences rwhere    reftabid = :OBJECT_IDand fokey5 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.tableid),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey6),    (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey6),     (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.tableid),    'P'from    /*db.*/dbo.sysreferences rwhere    reftabid = :OBJECT_IDand fokey6 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.tableid),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey7),    (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey7),     (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.tableid),    'P'from    /*db.*/dbo.sysreferences rwhere    reftabid = :OBJECT_IDand fokey7 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.tableid),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey8),    (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey8),     (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.tableid),    'P'from    /*db.*/dbo.sysreferences rwhere    reftabid = :OBJECT_IDand fokey8 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.reftabid),     (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey1),    (select name from /*db.*/dbo.syscolumns c2 where id = r.tableid and colid = r.fokey1),    (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.reftabid),    'F'from     /*db.*/dbo.sysreferences rwhere    tableid = :OBJECT_IDand fokey1 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.reftabid),     (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey2),    (select name from /*db.*/dbo.syscolumns c2 where id = r.tableid and colid = r.fokey2),    (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.reftabid),    'F'from     /*db.*/dbo.sysreferences rwhere    tableid = :OBJECT_IDand fokey2 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.reftabid),     (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey3),    (select name from /*db.*/dbo.syscolumns c2 where id = r.tableid and colid = r.fokey3),    (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.reftabid),    'F'from     /*db.*/dbo.sysreferences rwhere    tableid = :OBJECT_IDand fokey3 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.reftabid),     (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey4),    (select name from /*db.*/dbo.syscolumns c2 where id = r.tableid and colid = r.fokey4),    (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.reftabid),    'F'from     /*db.*/dbo.sysreferences rwhere    tableid = :OBJECT_IDand fokey4 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.reftabid),     (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey5),    (select name from /*db.*/dbo.syscolumns c2 where id = r.tableid and colid = r.fokey5),    (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.reftabid),    'F'from     /*db.*/dbo.sysreferences rwhere    tableid = :OBJECT_IDand fokey5 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.reftabid),     (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey6),    (select name from /*db.*/dbo.syscolumns c2 where id = r.tableid and colid = r.fokey6),    (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.reftabid),    'F'from     /*db.*/dbo.sysreferences rwhere    tableid = :OBJECT_IDand fokey6 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.reftabid),     (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey7),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey7),    (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.reftabid),    'F'from     /*db.*/dbo.sysreferences rwhere    tableid = :OBJECT_IDand fokey7 > 0union allselect    (select name from /*db.*/dbo.sysobjects where id = r.reftabid),     (select name from /*db.*/dbo.syscolumns where id = r.reftabid and colid = r.refkey8),    (select name from /*db.*/dbo.syscolumns where id = r.tableid and colid = r.fokey8),    (select u.name from /*db.*/dbo.sysusers u, /*db.*/dbo.sysobjects o where o.uid = u.uid and o.id = r.reftabid),    'F'from     /*db.*/dbo.sysreferences rwhere    tableid = :OBJECT_IDand fokey8 > 0order by 1
minVer=0

[queries.42]
enabled=1
caption=Schemas (ASA)
export=1
dbType=5
queryType=2
queryText=select name, 'SC', uidfrom /*db.*/dbo.sysusersunion allselect name, 'SL', 0 from /*db.*/dbo.syslogins
minVer=0

[queries.43]
enabled=1
caption=Context (ASA)
export=1
dbType=5
queryType=10
queryText=select	@@ServerName,	SUSER_NAME(),	DB_NAME(),	USER_NAME()
minVer=0

[queries.44]
enabled=1
caption=Objects (ASA)
export=1
dbType=5
queryType=3
queryText=select 	o.name, 	case o.type when 'P' then		case when exists (select 1 						 from /*db.*/sys.SYSPROCEDURE p 							join /*db.*/sys.SYSPROCPARM pp 							on pp.proc_id = p.proc_id							and pp.parm_type = 4						 where p.proc_name = o.name							and p.creator = o.uid						  )			then 'FN'			else 'P'		end		else o.type	end type,	o.idfrom	/*db.*/dbo.sysobjects owhere	o.type in ('U','S','V','P','X','RF','FN','TF','IF')	and o.uid = :SCHEMA_ID	and convert(int, left(@@version, charindex('.', @@version) -1)) >= 8union allselect 	name, 	type,	idfrom	/*db.*/dbo.sysobjectswhere	type in ('U','S','V','P')	and convert(int, left(@@version, charindex('.', @@version) -1)) < 8	and uid = :SCHEMA_ID
minVer=0

[queries.45]
enabled=1
caption=Objects (Access)
export=1
dbType=6
queryType=3
queryText=#USE CATALOG API; -- use ODBC SQLTables function/*select name, iif(type = 5, 'VI','TA')from MSysObjectswhere type in (1,5,6)*/
minVer=0

[queries.46]
enabled=1
caption=Joins (Access)
export=1
dbType=6
queryType=7
queryText=select	szReferencedObject,	szReferencedColumn,	szColumn,	'',	'F'from	MSysRelationshipswhere	szObject = :OBJECT_NAMEunion allselect	szObject,	szColumn,	szReferencedColumn,	'',	'P'from	MSysRelationshipswhere	szReferencedObject = :OBJECT_NAMEorder by 1
minVer=0

[queries.47]
enabled=1
caption=Columns (Access)
export=1
dbType=6
queryType=4
queryText=#USE CATALOG API; -- use ODBC SQLColumns function
minVer=0

[queries.48]
enabled=1
caption=Synonyms (MSSQL)
export=1
dbType=1
queryType=9
queryText=if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'SELECT 	obj_name, obj_type, obj_id,	CASE WHEN DB_ID(obj_dbname) IS NOT NULL THEN obj_dbname 	ELSE REPLACE(REPLACE('/*db.*/','[',''),'].','') 	END	FROM	(	SELECT 		base_object_name obj_name,		OBJECTPROPERTYEX(object_id,'BaseType') obj_type,		object_id(base_object_name) obj_id,		REPLACE(			REPLACE(				CASE 				WHEN CHARINDEX('.',base_object_name) > 0 THEN SUBSTRING(base_object_name, 1, CHARINDEX('.',base_object_name)-1) 				ELSE REPLACE('/*db.*/','].','') 				END, 				'[',''			),			']',''		) obj_dbname	FROM /*db.*/sys.synonyms	WHERE object_id = :OBJECT_ID	) selse	select '','',0,''
minVer=0

[queries.49]
enabled=1
caption=Package Source (Oracle)
export=1
dbType=0
queryType=0
queryText=/* for internal use; do not rename this query. */select	textfrom	all_sourcewhere	owner = :SCHEMA_NAMEand name = :OBJECT_NAMEand type = 'PACKAGE'order by	line
minVer=0

[queries.50]
enabled=1
caption=Object Types (Oracle)
export=1
dbType=0
queryType=11
queryText=select * from(select	attr_name ||chr(0)|| attr_type_name || decode(nvl(length,0), 0,'', '('||length||')'),	'AT'from	all_type_attrswhere 	owner = :SCHEMA_NAMEand type_name = :OBJECT_NAMEorder by	attr_no)union allselect	method_name,	decode(results, 0,'PR','FU')from	all_type_methodswhere 	owner = :SCHEMA_NAMEand type_name = :OBJECT_NAME
minVer=0

[queries.51]
enabled=1
caption=Object Type Args (Oracle)
export=1
dbType=0
queryType=0
queryText=/* do not rename this query. */select	param_name,	decode(param_type_owner,'','',param_type_owner||'.') || param_type_name,	io_mode || to_char(nvl(method_no,0),'FM09') || '0'from(select	param_name,	param_type_owner,	param_type_name,	decode(param_mode, 'IN','I', 'OUT','O', 'IN OUT','U', 'X') io_mode,	method_no,	param_nofrom	all_method_paramswhere	owner = :SCHEMA_NAMEand type_name = :PACKAGE_NAMEand method_name = :OBJECT_NAMEunion allselect	'',	result_type_owner, result_type_name, 'R', method_no, 0from	all_method_resultswhere	owner = :SCHEMA_NAMEand type_name = :PACKAGE_NAMEand method_name = :OBJECT_NAME)order by	method_no, param_no
minVer=0

[queries.52]
enabled=1
caption=Arguments (DB2 iSeries)
export=1
dbType=3
queryType=5
queryText=SELECT	CASE WHEN PARAMETER_NAME IS NULL THEN '' ELSE PARAMETER_NAME END,	CASE WHEN DATA_TYPE IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 			'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')		THEN RTRIM(DATA_TYPE) || '(' || RTRIM(CHAR(CHARACTER_MAXIMUM_LENGTH)) || ')' 		WHEN DATA_TYPE = 'DECIMAL'		THEN 'DECIMAL(' || RTRIM(CHAR(NUMERIC_PRECISION)) || ','			|| RTRIM(CHAR(NUMERIC_SCALE)) || ')'		ELSE DATA_TYPE	END,     CASE WHEN PARAMETER_MODE = 'IN' THEN 'I' WHEN PARAMETER_MODE = 'OUT' THEN 'O' ELSE 'Y' END FROM	QSYS2.SYSPARAMSWHERE	SPECIFIC_SCHEMA = :SCHEMA_NAMEAND SPECIFIC_NAME = :OBJECT_NAMEORDER BY	SPECIFIC_NAME, ORDINAL_POSITION
minVer=0

[queries.53]
enabled=1
caption=Columns (DB2 iSeries)
export=1
dbType=3
queryType=4
queryText=SELECT 	COLUMN_NAME,	CASE WHEN DATA_TYPE IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 			'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')		THEN RTRIM(DATA_TYPE) || '(' || RTRIM(CHAR(LENGTH)) || ')'		WHEN DATA_TYPE = 'DECIMAL'		THEN 'DECIMAL(' || RTRIM(CHAR(NUMERIC_PRECISION)) || ','			|| RTRIM(CHAR(NUMERIC_SCALE)) || ')'		ELSE DATA_TYPE	END,	CASE WHEN IS_IDENTITY = 'YES' THEN 'A'	ELSE POSSTR(IS_NULLABLE, 'Y')	ENDFROM	QSYS2.SYSCOLUMNSWHERE	TABLE_SCHEMA = :SCHEMA_NAME AND TABLE_NAME = :OBJECT_NAMEORDER BY	ORDINAL_POSITION
minVer=0

[queries.54]
enabled=1
caption=Context (DB2 iSeries)
export=1
dbType=3
queryType=10
queryText=SELECT	CURRENT SERVER,	RTRIM(USER), 	'noDB',	RTRIM(CURRENT SCHEMA)FROM	SYSIBM.SYSDUMMY1
minVer=0

[queries.55]
enabled=1
caption=DDL Code (DB2 iSeries)
export=1
dbType=3
queryType=8
queryText=SELECT	CASE WHEN EXTERNAL_LANGUAGE != 'SQL' 		THEN '/* Code of this external procedure is not available in the database */'		ELSE '/* Procedure body */' || CHR(10) || CHR(10) || ROUTINE_DEFINITION    ENDFROM	QSYS2.SYSPROCSWHERE	SPECIFIC_SCHEMA = :SCHEMA_NAMEAND SPECIFIC_NAME = :OBJECT_NAMEUNION ALLSELECT	'/* View body */' || CHR(10) || CHR(10) || VIEW_DEFINITIONFROM	QSYS2.SYSVIEWSWHERE	TABLE_SCHEMA = :SCHEMA_NAMEAND TABLE_NAME = :OBJECT_NAME
minVer=0

[queries.56]
enabled=1
caption=Joins (DB2 iSeries)
export=1
dbType=3
queryType=7
queryText=SELECT	C2.TABLE_NAME, 	C2.COLUMN_NAME, 	C1.COLUMN_NAME,	C2.TABLE_SCHEMA,	T.RDIRFROM 	QSYS2.SYSCSTCOL C1,	QSYS2.SYSCSTCOL C2,(SELECT	R.CONSTRAINT_NAME CN, R.CONSTRAINT_SCHEMA TS, C.TABLE_NAME TN,	R.UNIQUE_CONSTRAINT_NAME RCN, R.UNIQUE_CONSTRAINT_SCHEMA RTS, UC.TABLE_NAME RTN,	'F' RDIRFROM	QSYS2.SYSREFCST R, QSYS2.SYSCST C, QSYS2.SYSCST UCWHERE	C.TABLE_SCHEMA = :SCHEMA_NAMEAND C.TABLE_NAME = :OBJECT_NAMEAND C.CONSTRAINT_TYPE = 'FOREIGN KEY'AND R.CONSTRAINT_SCHEMA = C.CONSTRAINT_SCHEMAAND R.CONSTRAINT_NAME = C.CONSTRAINT_NAMEAND UC.CONSTRAINT_SCHEMA = R.UNIQUE_CONSTRAINT_SCHEMAAND UC.CONSTRAINT_NAME = R.UNIQUE_CONSTRAINT_NAMEUNION ALLSELECT	R.UNIQUE_CONSTRAINT_NAME CN, R.UNIQUE_CONSTRAINT_SCHEMA TS, UC.TABLE_NAME TN,	R.CONSTRAINT_NAME RCN, R.CONSTRAINT_SCHEMA RTS, C.TABLE_NAME RTN,	'P' RDIRFROM	QSYS2.SYSREFCST R, QSYS2.SYSCST C, QSYS2.SYSCST UCWHERE	UC.TABLE_SCHEMA = :SCHEMA_NAMEAND UC.TABLE_NAME = :OBJECT_NAMEAND R.CONSTRAINT_SCHEMA = C.CONSTRAINT_SCHEMAAND R.CONSTRAINT_NAME = C.CONSTRAINT_NAMEAND UC.CONSTRAINT_SCHEMA = R.UNIQUE_CONSTRAINT_SCHEMAAND UC.CONSTRAINT_NAME = R.UNIQUE_CONSTRAINT_NAMEAND UC.CONSTRAINT_TYPE IN ('PRIMARY KEY', 'UNIQUE')) TWHERE 	T.CN = C1.CONSTRAINT_NAMEAND T.TS = C1.CONSTRAINT_SCHEMAAND T.TN = C1.TABLE_NAMEAND T.RCN = C2.CONSTRAINT_NAMEAND T.RTS = C2.CONSTRAINT_SCHEMAAND T.RTN = C2.TABLE_NAMEAND C1.COLUMN_NAME = C2.COLUMN_NAMEORDER BY 1
minVer=0

[queries.57]
enabled=1
caption=Objects (DB2 iSeries)
export=1
dbType=3
queryType=3
queryText=SELECT TABLE_NAME, 'TA'FROM QSYS2.SYSTABLESWHERE TABLE_SCHEMA = :SCHEMA_NAMEAND TABLE_TYPE IN ('T', 'P')UNION ALLSELECT TABLE_NAME, 'VI'FROM QSYS2.SYSVIEWSWHERE TABLE_SCHEMA = :SCHEMA_NAMEUNION ALLSELECT SPECIFIC_NAME, 'PR'FROM QSYS2.SYSPROCSWHERE SPECIFIC_SCHEMA = :SCHEMA_NAME
minVer=0

[queries.58]
enabled=1
caption=Schemas (DB2 iSeries)
export=1
dbType=3
queryType=2
queryText=SELECT DISTINCT rtrim(TABLE_SCHEMA), 'SC'FROM QSYS2.SYSTABLESORDER BY 1
minVer=0

[queries.59]
enabled=1
caption=Arguments (PostgreSQL)
export=1
dbType=7
queryType=5
queryText=select 	parameter_name, 	data_type, 	parameter_mode || substr(specific_name, length(specific_name)-1)from(	select '' as parameter_name,		 replace(data_type, '"', '') as data_type,		 'R' as parameter_mode,		 0 as ordinal_position,         specific_name	from information_schema.routines	where routine_schema = :SCHEMA_NAME          and routine_name = :OBJECT_NAME	union all	select coalesce(p.parameter_name, 'unnamed parameter ' || p.ordinal_position) as parameter_name,		 replace(p.data_type, '"', ''),		 case when p.parameter_mode = 'OUT' then 'O'              when p.parameter_mode = 'INOUT' then 'U'              else 'I'          end,		 p.ordinal_position,         r.specific_name	from information_schema.parameters p	   join information_schema.routines r	      on p.specific_catalog = r.specific_catalog	      and p.specific_schema = r.specific_schema	      and p.specific_name = r.specific_name	where r.routine_schema = :SCHEMA_NAME          and r.routine_name = :OBJECT_NAME) aorder by specific_name, ordinal_position
minVer=0

[queries.60]
enabled=1
caption=Columns (PostgreSQL)
export=1
dbType=7
queryType=4
queryText=SELECT	column_name, 	REPLACE(CASE WHEN character_maximum_length is not null THEN data_type || '(' || character_maximum_length || ')'		WHEN data_type = 'numeric' THEN data_type || '(' || numeric_precision || ',' || numeric_scale || ')'  		ELSE data_type		END, '"', ''), 	CASE WHEN column_default LIKE 'nextval(%' THEN 'A' ELSE '' END	|| COALESCE(substr(is_nullable,1,1), 'Y')FROM	information_schema.columnsWHERE	table_schema = :SCHEMA_NAME    AND table_name = :OBJECT_NAMEORDER BY	ordinal_position
minVer=0

[queries.61]
enabled=1
caption=Context (PostgreSQL)
export=1
dbType=7
queryType=10
queryText=select      case when inet_server_addr() is null then 'localhost' else                 substring( cast(inet_server_addr() as varchar(24)), 1, position('/' in cast(inet_server_addr() as varchar(24))) - 1) end ||             case when inet_server_port() is null then '' else ':' || inet_server_port() end,      user,      current_database(),      current_schema()
minVer=0

[queries.62]
enabled=1
caption=Databases (PostgreSQL)
export=1
dbType=7
queryType=1
queryText=select datname, 'DB'from pg_catalog.pg_databasewhere datname not like 'template%'
minVer=0

[queries.63]
enabled=1
caption=Joins (PostgreSQL)
export=1
dbType=7
queryType=7
queryText=select	fkc.relname as fk_table,	fka.attname as fk_column,	pka.attname as pk_column,	fks.nspname,	'P'from	pg_catalog.pg_constraint as fkcon	join pg_catalog.pg_constraint as pkcon		on   fkcon.confrelid = pkcon.conrelid		and fkcon.confkey = pkcon.conkey	join pg_catalog.pg_class fkc		on   fkc.oid = fkcon.conrelid	join pg_catalog.pg_class pkc		on   pkc.oid = fkcon.confrelid	join pg_catalog.pg_namespace pks		on   pkcon.connamespace = pks.oid	join pg_catalog.pg_namespace fks		on   fkcon.connamespace = fks.oid	join pg_catalog.pg_attribute fka		on   fka.attnum = fkcon.conkey[1]		and fka.attrelid = fkc.oid	join pg_catalog.pg_attribute pka		on   pka.attnum = pkcon.conkey[1]		and pka.attrelid = pkc.oidwhere pks.nspname = :SCHEMA_NAME     and pkc.relname = :OBJECT_NAME     and fks.nspname = pks.nspnameunion allselect	pkc.relname as pk_table,	pka.attname as pk_column,	fka.attname as fk_column,	pks.nspname,	'F'from	pg_catalog.pg_constraint as fkcon	join pg_catalog.pg_constraint as pkcon		on   fkcon.confrelid = pkcon.conrelid		and fkcon.confkey = pkcon.conkey	join pg_catalog.pg_class fkc		on   fkc.oid = fkcon.conrelid	join pg_catalog.pg_class pkc		on   pkc.oid = fkcon.confrelid	join pg_catalog.pg_namespace pks		on   pkcon.connamespace = pks.oid	join pg_catalog.pg_namespace fks		on   fkcon.connamespace = fks.oid	join pg_catalog.pg_attribute fka		on   fka.attnum = fkcon.conkey[1]		and fka.attrelid = fkc.oid	join pg_catalog.pg_attribute pka		on   pka.attnum = pkcon.conkey[1]		and pka.attrelid = pkc.oidwhere fks.nspname = :SCHEMA_NAME     and fkc.relname = :OBJECT_NAME     and pks.nspname = fks.nspname
minVer=0

[queries.64]
enabled=1
caption=Schemas (PostgreSQL)
export=1
dbType=7
queryType=2
queryText=select	schema_name, 'SC'from	information_schema.schematawhere schema_name not like E'pg\_%'    or schema_name = 'pg_catalog'union select	'public', 'SC'union allselect	usename, 'SL'from	pg_catalog.pg_user
minVer=0

[queries.65]
enabled=1
caption=Synonyms (DB2 UDB)
export=1
dbType=3
queryType=9
queryText=SELECT 	BASE_TABNAME, 'TA', RTRIM(BASE_TABSCHEMA)FROM 	SYSCAT.TABLESWHERE 	TYPE = 'A'	AND (TABSCHEMA = :SCHEMA_NAME OR TABSCHEMA = 'SYSPUBLIC')	AND TABNAME = :OBJECT_NAME	UNION ALLSELECT 	BASE_SEQNAME, 'SQ', RTRIM(BASE_SEQSCHEMA)FROM 	SYSCAT.SEQUENCESWHERE 	SEQTYPE = 'A'	AND (SEQSCHEMA = :SCHEMA_NAME OR SEQSCHEMA = 'SYSPUBLIC') 	AND SEQNAME = :OBJECT_NAME
minVer=524288

[queries.66]
enabled=1
caption=Object Types (DB2 UDB)
export=1
dbType=3
queryType=11
queryText=select * from (select    attr_name || X'00' || attr_typename ||    CASE    WHEN attr_typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',            'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN        '(' || LENGTH || ')'    WHEN attr_typename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN        '(' || LENGTH || ', ' || SCALE || ')'    ELSE        ''    end,    'AT'from    syscat.attributeswhere    typeschema = :SCHEMA_NAMEand    typename = :OBJECT_NAMEorder by    ordinal)union allselect    routinename,    case when functiontype = '' then 'PR' else 'FU' endfrom    syscat.routineswhere    subject_typeschema = :SCHEMA_NAMEand    subject_typename = :OBJECT_NAMEand    origin in ('Q','E')
minVer=524288

[queries.67]
enabled=1
caption=Columns (Oracle) + Keys
export=1
dbType=0
queryType=4
queryText=select	column_name,	data_type	|| decode(data_type,		'NUMBER', decode(nvl(data_precision,0),0,'','('||data_precision||decode(nvl(data_scale,0),0,'',','||data_scale)||')'),		decode(decode(data_type,		'CHAR','(','NCHAR','(','VARCHAR','(','NVARCHAR','(','VARCHAR2','(','NVARCHAR2','(',		'LOB', '(','BLOB','(','CLOB','(','NCLOB','(','RAW','(',''), 		'(', decode(nvl(data_length,0),0,'','('||nvl(char_col_decl_length,data_length)||')'), '')	),	nvl(nullable,'Y')	|| nvl((select c.constraint_type 			from all_cons_columns cc, all_constraints c			where cc.owner = c.owner and cc.constraint_name = c.constraint_name 				and cc.owner = tc.owner and cc.table_name = tc.table_name and cc.column_name = tc.column_name				and c.constraint_type in ('P','R','U') and rownum = 1		),' ')	|| nvl((select 'I' 			from all_ind_columns ic, all_indexes i			where ic.index_owner = i.owner and ic.index_name = i.index_name 				and ic.table_owner = tc.owner and ic.table_name = tc.table_name and ic.column_name = tc.column_name				and rownum = 1		),'')from	all_tab_columns tcwhere	owner = :SCHEMA_NAMEand table_name = :OBJECT_NAMEorder by	column_id
minVer=0

[queries.68]
enabled=1
caption=Columns (PostgreSQL) + Keys
export=1
dbType=7
queryType=4
queryText=SELECT	column_name, 	REPLACE(CASE WHEN character_maximum_length is not null THEN data_type || '(' || character_maximum_length || ')'		WHEN data_type = 'numeric' THEN data_type || '(' || numeric_precision || ',' || numeric_scale || ')'  		ELSE data_type		END, '"', ''), 	CASE WHEN column_default LIKE 'nextval(%' THEN 'A' ELSE '' END	|| COALESCE(substr(is_nullable,1,1), 'Y') /* N,Y */	|| COALESCE(( /* P,F,U */			select max(substr(tc.constraint_type,1,1)) 			from information_schema.key_column_usage k, information_schema.table_constraints tc			where k.constraint_schema = tc.constraint_schema and k.constraint_name = tc.constraint_name				and k.table_schema = c.table_schema and k.table_name = c.table_name and k.column_name = c.column_name		),'')	|| COALESCE(( /* I */			select max('I')			from pg_catalog.pg_indexes i 			where i.schemaname = c.table_schema 				and i.tablename = c.table_name				and replace(replace(replace(i.indexdef, '(', ','), ')', ','), ' ', '') LIKE ('%,' || c.column_name || ',%')		),' ')FROM	information_schema.columns cWHERE	table_schema = :SCHEMA_NAME    AND table_name = :OBJECT_NAMEORDER BY	ordinal_position
minVer=0

[queries.69]
enabled=1
caption=Columns (MySQL) + Keys
export=1
dbType=2
queryType=4
queryText=SELECT	COLUMN_NAME, COLUMN_TYPE,	CONCAT(		CASE WHEN EXTRA = 'auto_increment' THEN 'A'		ELSE SUBSTR(IS_NULLABLE,1,1)/*N,Y*/		END,		CASE /*P,F,U*/    	WHEN COLUMN_KEY = 'PRI' THEN 'P'		WHEN EXISTS (			SELECT NULL FROM information_schema.KEY_COLUMN_USAGE k         	WHERE k.TABLE_SCHEMA = c.TABLE_SCHEMA AND k.TABLE_NAME = c.TABLE_NAME AND k.COLUMN_NAME = c.COLUMN_NAME         	AND k.REFERENCED_COLUMN_NAME IS NOT NULL    	) THEN 'F' 		WHEN COLUMN_KEY = 'UNI' THEN 'U'		ELSE ' '		END,		IF(COLUMN_KEY = 'MUL','I','') 	)FROM	information_schema.COLUMNS cWHERE	TABLE_SCHEMA = :SCHEMA_NAMEAND TABLE_NAME = :OBJECT_NAMEORDER BY	ORDINAL_POSITION
minVer=0

[queries.70]
enabled=1
caption=Columns (MSSQL) + Keys
export=1
dbType=1
queryType=4
queryText=if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'  select    c.name,    t.name    + case     when t.name in ('varchar', 'char', 'binary', 'varbinary')       then '(' + case c.max_length when -1 then 'max' else convert(varchar, c.max_length) end + ')'    when t.name in ('nvarchar', 'nchar')       then '(' + case c.max_length when -1 then 'max' else convert(varchar, c.max_length / 2) end + ')'     when t.name in ('decimal', 'numeric')      then '(' + convert(varchar, c.[precision]) + ',' + convert(varchar, c.scale) + ')'    else ''    end,    case /* Y,N,A */	when c.is_identity = 1 or c.is_computed = 1 or t.name='timestamp' then 'A'	when c.is_nullable = 1 then 'Y' else 'N' 	end    + CASE /* P,F,U */    WHEN EXISTS(    		SELECT NULL    		FROM /*db.*/sys.indexes i, /*db.*/sys.index_columns k     		WHERE i.[object_id] = k.[object_id] AND i.index_id = k.index_id				AND k.[object_id] = c.[object_id] AND k.column_id = c.column_id AND i.is_primary_key <> 0    	    	) THEN 'P'    WHEN EXISTS(    		SELECT NULL FROM /*db.*/sys.foreign_key_columns f     		WHERE f.parent_object_id = c.[object_id] AND f.parent_column_id = c.column_id    	) THEN 'F'    WHEN EXISTS(    		SELECT NULL    		FROM /*db.*/sys.indexes i, /*db.*/sys.index_columns k     		WHERE i.[object_id] = k.[object_id] AND i.index_id = k.index_id				AND k.[object_id] = c.[object_id] AND k.column_id = c.column_id AND i.is_unique_constraint <> 0    	    	) THEN 'U'    ELSE ' '    END    + CASE     WHEN EXISTS(    		SELECT NULL    		FROM /*db.*/sys.indexes i, /*db.*/sys.index_columns k     		WHERE i.[object_id] = k.[object_id] AND i.index_id = k.index_id				AND k.[object_id] = c.[object_id] AND k.column_id = c.column_id 				AND i.is_primary_key = 0 AND i.is_unique_constraint = 0    	) THEN 'I'    ELSE ''    END  from    /*db.*/sys.all_columns c    join /*db.*/sys.types t       on c.user_type_id = t.user_type_id  where    c.object_id = :OBJECT_ID  order by     c.column_idelse  select    c.name,    t.name    + case     when t.name in ('varchar', 'char', 'binary', 'varbinary')       then '(' + case c.length when -1 then 'max' else convert(varchar, c.length) end + ')'    when t.name in ('nvarchar', 'nchar')       then '(' + case c.length when -1 then 'max' else convert(varchar, c.length / 2) end + ')'     when t.name in ('decimal', 'numeric')      then '(' + convert(varchar, c.prec) + ',' + convert(varchar, c.scale) + ')'    else ''    end,    case /* Y,N,A */	when c.autoval is not null or t.name='timestamp'  then 'A'	when c.isnullable = 1 then 'Y' else 'N' 	end     + CASE /* P,F,U */    WHEN EXISTS(    		SELECT NULL    		FROM /*db.*/dbo.sysindexes i, /*db.*/dbo.sysindexkeys k     		WHERE i.id = k.id AND i.indid = k.indid				AND k.id = c.id AND k.colid = c.colid AND i.status & 0x800 <> 0    					AND i.indid BETWEEN 1 AND 254    	) THEN 'P'    WHEN EXISTS(    		SELECT NULL FROM /*db.*/dbo.sysforeignkeys f WHERE f.fkeyid = c.id AND f.fkey = c.colid    	) THEN 'F'    WHEN EXISTS(    		SELECT NULL    		FROM /*db.*/dbo.sysindexes i, /*db.*/dbo.sysindexkeys k     		WHERE i.id = k.id AND i.indid = k.indid				AND k.id = c.id AND k.colid = c.colid AND i.status & 0x1000 <> 0    					AND i.indid BETWEEN 1 AND 254    	) THEN 'U'    ELSE ' '    END    + CASE     WHEN EXISTS(    		SELECT NULL    		FROM /*db.*/dbo.sysindexes i, /*db.*/dbo.sysindexkeys k     		WHERE i.id = k.id AND i.indid = k.indid				AND k.id = c.id AND k.colid = c.colid AND i.status & 0x1860 = 0				AND i.indid BETWEEN 1 AND 254    	) THEN 'I'    ELSE ''    END  from    /*db.*/dbo.syscolumns c    join /*db.*/dbo.systypes t       on c.xtype = t.xtype       and c.xusertype = t.xusertype  where    c.id = :OBJECT_ID  and c.number = 0  order by     c.colid
minVer=0

[queries.71]
enabled=1
caption=Columns (DB2 UDB) + Keys
export=1
dbType=3
queryType=4
queryText=select	colname, 	CASE WHEN typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 			'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')		THEN RTRIM(typename) || '(' || RTRIM(CHAR(LENGTH)) || ')'		ELSE typename 	END,	case when identity = 'Y' then 'A' else nulls end	|| case	when keyseq is not null then 'P'	else nvl((select min(tc.type) 		from syscat.keycoluse k, syscat.tabconst tc		where k.constname = tc.constname 			and k.tabschema = c.tabschema and k.tabname = c.tabname and k.colname = c.colname			and tc.type in ('P','F','U')		),' ')	end	|| nvl((		select min('I') 		from syscat.indexcoluse ic, syscat.indexes i		where ic.indschema = i.indschema and ic.indname = i.indname 			and i.tabschema = c.tabschema and i.tabname = c.tabname and ic.colname = c.colname		),'')from	syscat.columns cwhere	tabschema = :SCHEMA_NAME and tabname = :OBJECT_NAMEorder by	colno
minVer=0

[queries.72]
enabled=1
caption=Columns (ASE) + Keys
export=1
dbType=4
queryType=4
queryText=select    c.name,    t.name +    case     when t.name in ('varchar', 'char', 'binary', 'varbinary')        then '(' + case c.length when -1 then 'max' else convert(varchar, c.length) end + ')'	when t.name in ('nvarchar', 'nchar') 		then '(' + case c.length when -1 then 'max' else convert(varchar, c.length / 2) end + ')'	when t.name in ('decimal', 'numeric')        then '(' + convert(varchar, c.prec) + ',' + convert(varchar, c.scale) + ')'    else ''    end,    case 	when c.status & 128 <> 0 or t.name='timestamp' then 'A' 	when c.status & 8 <> 0 then 'Y' 	else 'N' 	end    + case /* P,F,U */    when exists(        select null from sysreferences 		where tableid = c.id and c.colid in (fokey1,fokey2,fokey3,fokey4,fokey5,fokey6,fokey7,fokey8)    ) then 'F'    else ' '    endfrom    /*db.*/dbo.syscolumns c    join /*db.*/dbo.systypes t         on t.type = c.type         and t.usertype = (                            select min(t2.usertype)                            from /*db.*/dbo.systypes t2                            where t2.type = c.type                        )where    c.id = :OBJECT_ID    and c.number = 0order by     c.colid
minVer=0

[queries.73]
enabled=1
caption=DDL Code (ASA)
export=1
dbType=5
queryType=8
queryText=select text from        [$DB_NAME$].dbo.syscommentswhere        id = :OBJECT_IDorder by number, colid2, colid
minVer=0

[queries.74]
enabled=1
caption=Object Info (MSSQL)
export=1
dbType=1
queryType=13
queryText=-- WARNING: This query works only for objects in the current databaseIF :DB_NAME IS NOT NULL    IF :DB_NAME != DB_NAME()    BEGIN        SELECT 'WARNING: This query works only for objects in the current database'        RETURN    END if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'or @@version like '%SQL Server 2012%'or @@version like '%Denali%'    SELECT '* Table info*' + CHAR(10) +         'Object created: ' + CHAR(9) + convert(varchar, o.create_date) + CHAR(10) +         'Last modified: ' + CHAR(9) + CASE WHEN o.modify_date IS NULL THEN 'none' ELSE convert(varchar, o.modify_date) END + CHAR(10) +         CASE WHEN s.auto_created = 1             THEN 'Stats mode: ' + CHAR(9) + 'automatically updated'             ELSE 'Stats mode: ' + CHAR(9) + 'user updated'        END + CHAR(10) +         'Stats time: ' + CHAR(9) + isnull(convert(VARCHAR, STATS_DATE(o.[object_id], s.stats_id)), 'never')    FROM sys.objects o        LEFT JOIN sys.stats s            ON s.[object_id] = o.[object_id]            AND s.stats_id = 1    WHERE o.[object_id] = :OBJECT_ID                     UNION ALL    SELECT CHAR(10) + '* Table comment*' + CHAR(10) + convert(varchar(4000), [value])     FROM fn_listextendedproperty (default, 'schema', :SCHEMA_NAME, 'table', :OBJECT_NAME, default, default)    UNION ALL    SELECT CHAR(10) + '* Columns*'          UNION ALL    SELECT CHAR(10) + isnull(c.objname collate Latin1_General_CI_AS, ut.colname collate Latin1_General_CI_AS) + CHAR(9) + CASE WHEN ut.basetype IS NOT NULL THEN 'Base data-type: ' + ut.basetype collate Latin1_General_CI_AS + '; ' ELSE '' END         + convert(varchar(4000), c.[value])     FROM fn_listextendedproperty(default, 'schema', :SCHEMA_NAME, 'table', :OBJECT_NAME, 'column', default) c        FULL JOIN             (SELECT c.name AS colname,                   bt.name + case                         when bt.name in ('varchar', 'char', 'binary', 'varbinary')                           then '(' + case c.max_length when -1 then 'max' else convert(varchar, c.max_length) end + ')'                        when bt.name in ('nvarchar', 'nchar')                           then '(' + case c.max_length when -1 then 'max' else convert(varchar, c.max_length / 2) end + ')'                         when bt.name in ('decimal', 'numeric')                          then '(' + convert(varchar, c.[precision]) + ',' + convert(varchar, c.scale) + ')'                        else ''                       end                   AS basetype             FROM                 sys.all_columns c                    JOIN sys.types bt                        ON bt.user_type_id = c.system_type_id            AND bt.system_type_id = c.system_type_id             WHERE c.object_id = :OBJECT_ID            ) ut        ON ut.colname collate Latin1_General_CI_AS = c.objname collate Latin1_General_CI_AS    WHERE ut.colname IS NOT NULL         OR c.objname IS NOT NULLELSE    SELECT CHAR(10) + '* Table comment*' + CHAR(10) + convert(varchar(4000), [value])     FROM ::fn_listextendedproperty (default, 'schema', :SCHEMA_NAME, 'table', :OBJECT_NAME, default, default)    UNION ALL    SELECT CHAR(10) + '* Columns*'          UNION ALL    SELECT CHAR(10) + isnull(c.objname collate Latin1_General_CI_AS, ut.colname collate Latin1_General_CI_AS) + CHAR(9) + CASE WHEN ut.basetype IS NOT NULL THEN 'Base data-type: ' + ut.basetype collate Latin1_General_CI_AS + '; ' ELSE '' END         + convert(varchar(4000), c.[value])     FROM ::fn_listextendedproperty(default, 'schema', :SCHEMA_NAME, 'table', :OBJECT_NAME, 'column', default) c        FULL JOIN             (SELECT c.name AS colname,                   bt.name + case                         when bt.name in ('varchar', 'char', 'binary', 'varbinary')                           then '(' + case c.length when -1 then 'max' else convert(varchar, c.length) end + ')'                        when bt.name in ('nvarchar', 'nchar')                           then '(' + case c.length when -1 then 'max' else convert(varchar, c.length / 2) end + ')'                         when bt.name in ('decimal', 'numeric')                          then '(' + convert(varchar, c.prec) + ',' + convert(varchar, c.scale) + ')'                        else ''                       end                   AS basetype             FROM                 dbo.syscolumns c                    JOIN dbo.systypes bt                        ON c.xtype = bt.xtype                               AND c.xusertype = bt.xusertype                            AND c.xusertype != c.xtype              WHERE c.id = :OBJECT_ID            ) ut        ON ut.colname collate Latin1_General_CI_AS = c.objname collate Latin1_General_CI_AS    WHERE ut.colname IS NOT NULL         OR c.objname IS NOT NULL
minVer=0

[queries.75]
enabled=1
caption=Object Info (Oracle)
export=1
dbType=0
queryType=13
queryText=SELECT '*  Table info  *' || chr(10) || 		'Object created:' || chr(9) || o.created || chr(10) ||        'Last modified:' || chr(9) || o.last_ddl_time || chr(10) ||        'Last analyzed:' || chr(9) || t.last_analyzed || chr(10) ||        'Blocks allocated/free:' || chr(9) || decode(t.blocks, 0, '0 (0% free)', t.blocks || ' / ' || t.empty_blocks || ' (' || to_char(round(t.empty_blocks / t.blocks, 1)) || '% free)') || chr(10) ||        'Cached:' || chr(9) || decode(ltrim(CACHE), 'N', 'No', 'Y', 'Yes', ltrim(cache)) FROM all_tables t     JOIN all_objects o        ON o.owner = t.owner        AND o.object_name = t.table_name        AND o.subobject_name IS NULL WHERE t.owner = :SCHEMA_NAME AND t.table_name = :OBJECT_NAMEUNION ALL SELECT chr(10) || '*  Table comment  *' || chr(10) || decode(comments, '', '', chr(10) || comments) FROM all_tab_commentsWHERE owner = :SCHEMA_NAME AND table_name = :OBJECT_NAMEUNION ALLSELECT chr(10) || '*  Columns  *' FROM DUAL UNION ALL SELECT chr(10) || column_name || chr(9) || comments FROM all_col_commentsWHERE owner = :SCHEMA_NAME AND table_name = :OBJECT_NAME
minVer=0

[queries.76]
enabled=1
caption=Record Count (ASA)
export=1
dbType=5
queryType=12
queryText=SELECT isNull(max(count), 0) FROM [$DB_NAME$].sys.systable WHERE object_id = :OBJECT_ID
minVer=0

[queries.77]
enabled=1
caption=Record Count (ASE) 
export=1
dbType=4
queryType=12
queryText=IF @@version_as_integer / 1000 >= 15   EXEC ('SELECT row_count(DB_ID(''$DB_NAME$''), $OBJECT_ID$)')ELSE   SELECT COUNT(*) FROM [$DB_NAME$].[$SCHEMA_NAME$].[$OBJECT_NAME$] 
minVer=0

[queries.78]
enabled=1
caption=Record Count (DB2 UDB)
export=1
dbType=3
queryType=12
queryText=SELECT max(card)FROM syscat.tables WHERE tabschema = :SCHEMA_NAME AND tabname = :OBJECT_NAME
minVer=0

[queries.79]
enabled=1
caption=Record Count (MSSQL)
export=1
dbType=1
queryType=12
queryText=SELECT TOP 1 rows FROM [$DB_NAME$].dbo.sysindexes WHERE id = :OBJECT_ID    AND indid < 2
minVer=0

[queries.80]
enabled=1
caption=Record Count (Oracle)
export=1
dbType=0
queryType=12
queryText=SELECT max(num_rows) FROM all_tables WHERE OWNER =:SCHEMA_NAME and TABLE_NAME = :OBJECT_NAME
minVer=0

[queries.81]
enabled=1
caption=Record Count (PostgreSQL)
export=1
dbType=7
queryType=12
queryText=SELECT c.reltuples FROM pg_catalog.pg_class c    JOIN pg_catalog.pg_namespace n        ON n.oid = c.relnamespaceWHERE c.relkind = 'r'     AND n.nspname = :SCHEMA_NAME     AND c.relname = :OBJECT_NAME
minVer=0

[queries.82]
enabled=1
caption=Object Info (MySQL)
export=1
dbType=2
queryType=13
queryText=SELECT  concat('*  Table info*', char(10), 		'Engine: ', char(9), engine, char(10),        'Object created:', char(9), ifnull(date_format(CREATE_TIME, '%e-%b-%Y %r'), 'N/A'), char(10),        'Last modified:', char(9), ifnull(date_format(UPDATE_TIME, '%e-%b-%Y %r'), 'none'), char(10),        'Last checked:', char(9), ifnull(date_format(CHECK_TIME, '%e-%b-%Y %r'), 'none'), char(10),        'Table collation:', char(9), TABLE_COLLATION)FROM information_schema.tablesWHERE TABLE_SCHEMA = :SCHEMA_NAME AND TABLE_NAME = :OBJECT_NAMEUNION ALLSELECT concat(char(10), '*  Table comment*', char(10), TABLE_COMMENT)FROM information_schema.tablesWHERE TABLE_SCHEMA = :SCHEMA_NAME AND TABLE_NAME = :OBJECT_NAMEAND TABLE_COMMENT IS NOT NULLUNION ALLSELECT concat(char(10), '*  Columns*')UNION ALLSELECT concat(char(10), column_name, char(9), column_comment)FROM information_schema.columnsWHERE TABLE_SCHEMA = :SCHEMA_NAME AND TABLE_NAME = :OBJECT_NAMEAND (column_comment IS NOT NULL) AND (column_comment  <> '')
minVer=0

[queries.83]
enabled=1
caption=Record Count (MySQL)
export=1
dbType=2
queryType=12
queryText=select count(*) from `$SCHEMA_NAME$`.`$OBJECT_NAME$`
minVer=0

[queries.84]
enabled=1
caption=Object Info (ASA)
export=1
dbType=5
queryType=13
queryText=SELECT     '*  Table info*' + CHAR(10) + 	'Object created:' + CHAR(9) + isNull(convert(varchar, o.crdate), 'Unknown time') + CHAR(10) +     'Pages allocated/free:' + CHAR(9) + convert(varchar, isNull(t.table_page_count, 0)) FROM [$DB_NAME$].SYS.SYSTABLE tJOIN [$DB_NAME$].dbo.sysobjects o ON o.id = t.object_id WHERE o.id = :OBJECT_ID    UNION ALLSELECT     CHAR(10) + '*  Table comments *' + CHAR(10) + remarks FROM [$DB_NAME$].SYS.SYSTABLE WHERE object_id = :OBJECT_ID    AND remarks IS NOT NULLUNION ALLSELECT CHAR(10) + '*  Columns *'UNION ALLSELECT     CHAR(10) + c.column_name + CHAR(10) + c.remarks FROM [$DB_NAME$].SYS.SYSCOLUMN c JOIN [$DB_NAME$].SYS.SYSTABLE t ON t.table_id = c.table_idWHERE t.object_id = :OBJECT_ID    AND c.remarks IS NOT NULL
minVer=0

[queries.85]
enabled=1
caption=Object Info (ASE)
export=1
dbType=4
queryType=13
queryText=SELECT     '*  Table info *' + char(10) +     'Object created:' + char(9) + convert(varchar, o.crdate) + CHAR(10) +     'Stats time:' + char(9) + isnull(convert(VARCHAR, s.statmoddate), 'never') + char(10) +     'Pages allocated/free:' + char(9) + CASE WHEN isNull(s.pagecnt, 0) <= 0 THEN '0 (0% free)' ELSE convert(varchar, s.pagecnt) + ' / ' + convert(varchar, s.emptypgcnt) + ' (' + convert(varchar, round(s.emptypgcnt/s.pagecnt, 1)) + '%)' END FROM [$DB_NAME$].dbo.sysobjects o     LEFT JOIN [$DB_NAME$].dbo.systabstats s     ON s.id = o.id        AND s.indid = 0WHERE o.id = :OBJECT_ID    UNION ALLSELECT char(10) +'*  Table comments *' + char(10) + text FROM [$DB_NAME$].dbo.syscomments WHERE id = :OBJECT_IDUNION ALLSELECT char(10) +'*  Columns *'
minVer=0

[queries.86]
enabled=1
caption=Object Info (DB2 UDB)
export=1
dbType=3
queryType=13
queryText=SELECT '*  Table info *' || CHR(10) ||       'Object created:' || CHR(9) || t.CREATE_TIME || CHR(10) ||        'Last modified:' || CHR(9) || t.ALTER_TIME || CHR(10) ||       'Last invalidated:' || CHR(9) || t.INVALIDATE_TIME || CHR(10) ||       'Last analyzed:' || CHR(9) || CASE WHEN t.STATS_TIME IS NULL THEN 'None' ELSE '' || t.STATS_TIME END || CHR(10) ||       'Pages allocated/free' || CHR(9) || CASE WHEN t.FPAGES <= 0 THEN '0 (0% free)' ELSE TRIM(CHAR(t.FPAGES)) || ' / ' || TRIM(CHAR(t.FPAGES - t.NPAGES)) || ' (' || TRIM(CHAR(round(1 - t.NPAGES/t.FPAGES, 1))) || '%)' END || CHR(10) ||       'Tablespace (data/index/lob):' || CHR(9) || coalesce(t.TBSPACE, '-') || ' / ' || coalesce(t.INDEX_TBSPACE, '-') || ' / ' || coalesce(t.LONG_TBSPACE, '-') || CHR(10) ||        'Compressed:' || CHR(9) || CASE WHEN t.COMPRESSION = 'Y' THEN 'Yes' ELSE 'No' END || CHR(10) || 	   '*  Columns  *' FROM syscat.tables tWHERE t.TABSCHEMA = :SCHEMA_NAME    AND t.TABNAME = :OBJECT_NAMEUNION ALL SELECT CHR(10) || c.COLNAME || CHR(9) || c.REMARKS || CHR(10)FROM syscat.columns cWHERE c.TABSCHEMA = :SCHEMA_NAME    AND c.TABNAME = :OBJECT_NAME    AND c.REMARKS IS NOT NULL  UNION ALL SELECT CHR(10) || '*  Table comment *' || CHR(10) || t.REMARKS FROM syscat.tables tWHERE t.TABSCHEMA = :SCHEMA_NAME    AND t.TABNAME = :OBJECT_NAME    AND t.REMARKS IS NOT NULL
minVer=0

[queries.87]
enabled=1
caption=Object Info (PostgreSQL)
export=1
dbType=7
queryType=13
queryText=SELECT '*  Table info *' || chr(10) || 	'Pages allocated: ' || chr(9) || cl.relpages || ' (' || pg_catalog.pg_relation_size('"' || n.nspname || '"."' || cl.relname || '"') / 1024 || ' KB)' FROM pg_catalog.pg_class cl    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespaceWHERE cl.relkind = 'r'    AND n.nspname = :SCHEMA_NAME    AND cl.relname = :OBJECT_NAMEUNION ALLSELECT chr(10) || '*  Table comment *' || chr(10) || pg_catalog.obj_description(cl.oid)FROM pg_catalog.pg_class cl    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespaceWHERE cl.relkind = 'r'     AND pg_catalog.obj_description(cl.oid) IS NOT NULL    AND n.nspname = :SCHEMA_NAME    AND cl.relname = :OBJECT_NAME    UNION ALLSELECT chr(10) || '*  Columns'UNION ALLSELECT chr(10) || c.column_name || chr(9) ||  pg_catalog.col_description(cl.oid, c.ordinal_position) FROM information_schema.columns c    JOIN pg_catalog.pg_class cl        ON cl.relkind = 'r'        AND cl.relname = c.table_name    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespace        AND n.nspname = c.table_schemaWHERE pg_catalog.col_description(cl.oid, c.ordinal_position) IS NOT NULL    AND n.nspname = :SCHEMA_NAME    AND cl.relname = :OBJECT_NAME
minVer=0

[queries.88]
enabled=1
caption=Objects (DB2 UDB)
export=1
dbType=3
queryType=3
queryText=select 	tabname,	case 		when type in ('V','W') then 'VI' 		when type = 'S' then 'MA'		when type = 'A' then '^T'		else 'TA' 	end, 	create_time,	create_timefrom	syscat.tableswhere	tabschema = :SCHEMA_NAMEunion allselect	routinename,	case		when functiontype = 'T' then 'TF'		when routinetype = 'F' then 'FU' 		else 'PR' 	end, 	create_time,	alter_time from	syscat.routineswhere	routineschema = :SCHEMA_NAMEand routinetype in ('F','P')and coalesce(rtrim(language), '') != ''union allselect	seqname, 	'SQ',	create_time,	alter_time from	syscat.sequenceswhere	seqschema = :SCHEMA_NAMEunion allselect	typename,	case metatype	   when 'A' then 'AR'	   when 'T' then 'TD'	   else 'TY'	end,	create_time,	alter_timefrom	syscat.datatypeswhere	typeschema = :SCHEMA_NAME and metatype in ('R','T','A')union allselect	trigname,	'TR',	create_time,	create_timefrom	syscat.triggerswhere
minVer=524288

[queries.89]
enabled=1
caption=DDL Code (Oracle)
export=1
dbType=0
queryType=8
queryText=select    decode(line, 1,         decode(sign(4000-21-length(text)),-1,            '',            decode(rownum, 1, '', chr(10)||chr(10)||chr(10)) -- add \n before package body            || decode(instr(text,'CREATE '), 0, 'CREATE OR REPLACE ','')         ),        ''    )    || text as txtfrom    all_sourcewhere    owner in (:SCHEMA_NAME, 'PUBLIC')and name = :OBJECT_NAMEorder by    type, line
minVer=458752

[queries.90]
enabled=1
caption=Columns (ASA) + Keys
export=1
dbType=5
queryType=4
queryText=select 	col.column_name,	sst.ss_type_name +	case 	when sst.ss_type_name in ('varchar', 'char', 'binary', 'varbinary')		then '(' + case col.width when -1 then 'max' else convert(varchar, col.width) end + ')'	when sst.ss_type_name in ('nvarchar', 'nchar') 		then '(' + case col.width when -1 then 'max' else convert(varchar, col.width / 2) end + ')'	when sst.ss_type_name in ('decimal', 'numeric')		then '(' + convert(varchar, col.width) + ',' + convert(varchar, col.scale) + ')'	else ''	end,	col.nulls + 	case idx.index_category    when 1 then 'P'    when 2 then 'F'    when 3 then(if idx."unique" = 4 THEN 'I' ELSE 'U' endif)	else ' ' 	end,	col.column_idfrom [$DB_NAME$].SYS.SYSCOLUMN as col 	left JOIN [$DB_NAME$].sys.SYSIDXCOL si ON(si.table_id = col.table_id AND si.column_id = col.column_id) 	left JOIN [$DB_NAME$].sys.SYSIDX idx ON(idx.table_id = si.table_id AND idx.index_id = si.index_id), 	[$DB_NAME$].SYS.SYSTYPEMAP as map, 	[$DB_NAME$].SYS.SYSSQLSERVERTYPE as sst, 	[$DB_NAME$].SYS.SYSTAB as tWHERE	col.table_id = t.table_id	and map.sa_domain_id = col.domain_id	and map.ss_user_type = sst.ss_user_type 	AND (map.nullable = 'N' or map.nullable is null)	AND sst.ss_user_type = (                            select min(map2.ss_user_type)                            from [$DB_NAME$].SYS.SYSTYPEMAP map2                            WHERE map2.sa_domain_id = col.domain_id                        )  	AND (si.index_id is NULL or si.index_id = (SELECT min(si2.index_id) FROM [$DB_NAME$].sys.SYSIDXCOL si2 WHERE si2.table_id = col.table_id AND si2.column_id = col.column_id))	AND t.object_id = :OBJECT_IDunionSELECT 	pp.parm_name,	d.domain_name + 	CASE	WHEN d.domain_name IN ('varchar', 'char', 'nchar', 'nvarchar', 'binary', 'varbinary') 		THEN '(' + convert(varchar, pp.width) + ')' 	WHEN d.domain_name IN ('decimal', 'numeric')		THEN '(' + convert(varchar, pp.width) + ',' + convert(varchar, pp.scale) + ')'	ELSE ''	END,	'Y',	pp.parm_idFROM [$DB_NAME$].dbo.sysobjects o	JOIN [$DB_NAME$].SYS.SYSPROCEDURE p 		ON p.proc_name = o.name		AND p.creator = o.uid	JOIN [$DB_NAME$].SYS.SYSPROCPARM pp 		ON pp.proc_id = p.proc_id		AND pp.parm_type = 1	JOIN [$DB_NAME$].SYS.SYSDOMAIN d 		ON d.domain_id = pp.domain_idWHERE o.id = :OBJECT_ID	AND o.type = 'P'ORDER BY 4 
minVer=720896

[queries.91]
enabled=1
caption=Columns (ASA)
export=1
dbType=5
queryType=4
queryText=select 	col.column_name,	sst.ss_type_name +	case 	when sst.ss_type_name in ('varchar', 'char', 'binary', 'varbinary')		then '(' + case col.width when -1 then 'max' else convert(varchar, col.width) end + ')'	when sst.ss_type_name in ('nvarchar', 'nchar') 		then '(' + case col.width when -1 then 'max' else convert(varchar, col.width / 2) end + ')'	when sst.ss_type_name in ('decimal', 'numeric')		then '(' + convert(varchar, col.width) + ',' + convert(varchar, col.scale) + ')'	else ''	end,	col.nulls,	col.column_idfrom [$DB_NAME$].SYS.SYSCOLUMN as col, [$DB_NAME$].SYS.SYSTYPEMAP as map, 	[$DB_NAME$].SYS.SYSSQLSERVERTYPE as sst, [$DB_NAME$].SYS.SYSTAB as tWHERE	col.table_id = t.table_id	and map.sa_domain_id = col.domain_id	and map.ss_user_type = sst.ss_user_type 	and(map.nullable = 'N' or map.nullable is null)	AND sst.ss_user_type = (                            select min(map2.ss_user_type)                            from [$DB_NAME$].SYS.SYSTYPEMAP map2                            WHERE map2.sa_domain_id = col.domain_id                        )  	AND t.object_id = :OBJECT_IDunionSELECT 	pp.parm_name,	d.domain_name + 	CASE	WHEN d.domain_name IN ('varchar', 'char', 'nchar', 'nvarchar', 'binary', 'varbinary') 		THEN '(' + convert(varchar, pp.width) + ')' 	WHEN d.domain_name IN ('decimal', 'numeric')		THEN '(' + convert(varchar, pp.width) + ',' + convert(varchar, pp.scale) + ')'	ELSE ''	END,	'Y',	pp.parm_idFROM [$DB_NAME$].dbo.sysobjects o	JOIN [$DB_NAME$].SYS.SYSPROCEDURE p 		ON p.proc_name = o.name		AND p.creator = o.uid	JOIN [$DB_NAME$].SYS.SYSPROCPARM pp 		ON pp.proc_id = p.proc_id		AND pp.parm_type = 1	JOIN [$DB_NAME$].SYS.SYSDOMAIN d 		ON d.domain_id = pp.domain_idWHERE o.id = :OBJECT_ID	AND o.type = 'P'ORDER BY 4 
minVer=720896

[queries.92]
enabled=1
caption=Objects (MSSQL) + Typed Synonyms
export=1
dbType=1
queryType=3
queryText=if @@version like 'Microsoft SQL Server 2005%'or @@version like 'Microsoft SQL Server 2008%'or @@version like '%SQL Server 2012%'or @@version like '%Denali%'  select      name, CASE WHEN type = 'SN' THEN '^' +        CASE CAST(OBJECTPROPERTYEX(object_id,'BaseType') AS VARCHAR)        WHEN 'AF' THEN 'F'        WHEN 'FN' THEN 'F'        WHEN 'FS' THEN 'F'        WHEN 'FT' THEN 'U'        WHEN 'IF' THEN 'U'        WHEN 'IT' THEN 'T'        WHEN 'P' THEN 'P'       WHEN 'PC' THEN 'P'       WHEN 'S' THEN 'T'       WHEN 'SQ' THEN 'I'        WHEN 'TF' THEN 'U'        WHEN 'TT' THEN 'K'        WHEN 'U' THEN 'T'        WHEN 'V' THEN 'V'        WHEN 'X' THEN 'P'        ELSE ' '       END      ELSE type END,      object_id, create_date, modify_date   from      [$DB_NAME$].sys.all_objects  where      type in ('U','S','V','P','X','RF','FN','TF','IF','SN','PC','FT','FS', 'TR')     and (           schema_id = :SCHEMA_ID           or (               1 = :SCHEMA_ID                and user_name() = 'dbo'                and schema_id = 4                and name in ('sysobjects','sysindexes','syscolumns','systypes','syscomments','sysfiles1','syspermissions','sysusers','sysproperties','sysdepends','sysreferences','sysfulltextcatalogs','sysindexkeys','sysforeignkeys','sysmembers','sysprotects','sysfulltextnotify','sysfiles','sysfilegroups')              )         )     and not (name = 'dtproperties')     and not (name like 'dt%' and type = 'P')else  select     name, xtype, id, crdate, crdate  from    [$DB_NAME$].dbo.sysobjects  where     xtype in ('U','S','V','P','X','RF','FN','TF','IF')     and uid = :SCHEMA_ID      and not (name = 'dtproperties')     and not (name like 'dt%' and xtype = 'P')
minVer=0

[queries.93]
enabled=1
caption=Objects (Oracle) + Typed Synonyms
export=1
dbType=0
queryType=3
queryText=select	o.object_name,	decode(o.object_type, 'SYNONYM', decode(o.owner,'PUBLIC', '|', '^') ||  		decode(o2.object_type, 'PACKAGE', 'C', 'SEQUENCE', 'I', 'TYPE', 'K', substr(o2.object_type,1,1)), 		substr(o.object_type,1,2)) object_type,	o.created, 	o.last_ddl_timefrom	all_objects o left join all_synonyms s ON s.owner = o.owner AND s.synonym_name = o.object_nameleft join all_objects o2 ON o2.owner = s.table_owner AND o2.object_name = s.table_namewhere 	o.owner in (:SCHEMA_NAME,'PUBLIC') and o.object_type in (	'TABLE','VIEW',	'PROCEDURE','FUNCTION','PACKAGE','TYPE',	'MATERIALIZED VIEW','MATERIALIZED VIEW LOG',	'SEQUENCE', 'SYNONYM'	)and (o2.object_type is null or o2.object_type in (	'TABLE','VIEW',	'PROCEDURE','FUNCTION','PACKAGE','TYPE',	'MATERIALIZED VIEW','MATERIALIZED VIEW LOG',	'SEQUENCE', 'SYNONYM')) and o.object_name not like 'bin$%'and o.object_name not like 'BIN$%'and o.object_name not like '%/%'order by o.object_name
minVer=0

[queries.94]
enabled=1
caption=Columns (ASA)
export=1
dbType=5
queryType=0
queryText=select 	col.column_name,	sst.ss_type_name +	case 	when sst.ss_type_name in ('varchar', 'char', 'binary', 'varbinary')		then '(' + case col.width when -1 then 'max' else convert(varchar, col.width) end + ')'	when sst.ss_type_name in ('nvarchar', 'nchar') 		then '(' + case col.width when -1 then 'max' else convert(varchar, col.width / 2) end + ')'	when sst.ss_type_name in ('decimal', 'numeric')		then '(' + convert(varchar, col.width) + ',' + convert(varchar, col.scale) + ')'	else ''	end,	col.nulls,	col.column_idfrom [$DB_NAME$].SYS.SYSCOLUMN as col, [$DB_NAME$].SYS.SYSTYPEMAP as map, 	[$DB_NAME$].SYS.SYSSQLSERVERTYPE as sst, [$DB_NAME$].SYS.SYSTABLE as t,     [$DB_NAME$].dbo.sysobjects AS oWHERE    o.id = :OBJECT_ID    and o.name = t.table_name    and o.uid = t.creator	and col.table_id = t.table_id	and map.sa_domain_id = col.domain_id	and map.ss_user_type = sst.ss_user_type 	and(map.nullable = 'N' or map.nullable is null)	AND sst.ss_user_type = (                            select min(map2.ss_user_type)                            from [$DB_NAME$].SYS.SYSTYPEMAP map2                            WHERE map2.sa_domain_id = col.domain_id                        )  unionSELECT 	pp.parm_name,	d.domain_name + 	CASE	WHEN d.domain_name IN ('varchar', 'char', 'nchar', 'nvarchar', 'binary', 'varbinary') 		THEN '(' + convert(varchar, pp.width) + ')' 	WHEN d.domain_name IN ('decimal', 'numeric')		THEN '(' + convert(varchar, pp.width) + ',' + convert(varchar, pp.scale) + ')'	ELSE ''	END,	'Y',	pp.parm_idFROM [$DB_NAME$].dbo.sysobjects o	JOIN [$DB_NAME$].SYS.SYSPROCEDURE p 		ON p.proc_name = o.name		AND p.creator = o.uid	JOIN [$DB_NAME$].SYS.SYSPROCPARM pp 		ON pp.proc_id = p.proc_id		AND pp.parm_type = 1	JOIN [$DB_NAME$].SYS.SYSDOMAIN d 		ON d.domain_id = pp.domain_idWHERE o.id = :OBJECT_ID	AND o.type = 'P'ORDER BY 4 
minVer=458752

[queries.95]
enabled=1
caption=Columns (ASA) + Keys
export=1
dbType=5
queryType=0
queryText=SELECT col.column_name,	sst.ss_type_name +	case 	when sst.ss_type_name in ('varchar', 'char', 'binary', 'varbinary')		then '(' + case col.width when -1 then 'max' else convert(varchar, col.width) end + ')'	when sst.ss_type_name in ('nvarchar', 'nchar') 		then '(' + case col.width when -1 then 'max' else convert(varchar, col.width / 2) end + ')'	when sst.ss_type_name in ('decimal', 'numeric')		then '(' + convert(varchar, col.width) + ',' + convert(varchar, col.scale) + ')'	else ''	end,	col.nulls +  	case when col.pkey = 'Y' then 'P'	     when  EXISTS (SELECT *				FROM [$DB_NAME$].SYS.SYSFKCOL AS fk	                        WHERE fk.foreign_table_id = col.table_id  				  AND fk.foreign_column_id = col.column_id	                  ) then 'F'		else 			case when idx."unique" IS NULL then ' ' 		             when idx."unique" = 'Y' THEN 'I' 		             else 'U'		        end	end,	col.column_idFROM [$DB_NAME$].SYS.SYSTABLE AS t       JOIN [$DB_NAME$].dbo.sysobjects AS o            ON o.name = t.table_name                AND o.uid = t.creator       JOIN [$DB_NAME$].SYS.SYSCOLUMN AS col            ON  col.table_id = t.table_id       LEFT JOIN [$DB_NAME$].SYS.SYSTYPEMAP AS map            ON              (   map.sa_user_type = col.user_type                OR (                       map.sa_user_type IS NULL                       AND (col.user_type IS NULL OR col.user_type > 108)                   )            )            AND map.sa_domain_id = col.domain_id            AND ISNULL(map.nullable, 'N') = 'N'       LEFT JOIN [$DB_NAME$].SYS.SYSSQLSERVERTYPE AS sst            ON  sst.ss_user_type = map.ss_user_type            AND sst.ss_user_type = (                    SELECT MIN(map2.ss_user_type)                    FROM   [$DB_NAME$].SYS.SYSTYPEMAP AS map2                    WHERE  map2.sa_domain_id = col.domain_id                )       LEFT JOIN [$DB_NAME$].SYS.SYSIXCOL AS si            ON  si.table_id = col.table_id                AND si.column_id = col.column_id                AND (                      si.index_id = (                                       SELECT MIN(si2.index_id)                                       FROM   [$DB_NAME$].SYS.SYSIXCOL AS si2                                       WHERE  si2.table_id = col.table_id                                            AND si2.column_id = col.column_id                                    )                    )       LEFT JOIN [$DB_NAME$].SYS.SYSINDEX AS idx            ON  idx.table_id = si.table_id                 AND idx.index_id = si.index_idWHERE o.id = :OBJECT_IDUNION ALLSELECT 	pp.parm_name,	d.domain_name + 	CASE	WHEN d.domain_name IN ('varchar', 'char', 'nchar', 'nvarchar', 'binary', 'varbinary') 		THEN '(' + convert(varchar, pp.width) + ')' 	WHEN d.domain_name IN ('decimal', 'numeric')		THEN '(' + convert(varchar, pp.width) + ',' + convert(varchar, pp.scale) + ')'	ELSE ''	END,	'Y',	pp.parm_idFROM [$DB_NAME$].dbo.sysobjects o	JOIN [$DB_NAME$].SYS.SYSPROCEDURE p 		ON p.proc_name = o.name		AND p.creator = o.uid	JOIN [$DB_NAME$].SYS.SYSPROCPARM pp 		ON pp.proc_id = p.proc_id		AND pp.parm_type = 1	JOIN [$DB_NAME$].SYS.SYSDOMAIN d 		ON d.domain_id = pp.domain_idWHERE o.id = :OBJECT_ID	AND o.type = 'P'ORDER BY 4 
minVer=458752

[queries.96]
enabled=1
caption=DDL Code (MySQL)
export=1
dbType=2
queryType=8
queryText=select	concat(		'CREATE OR REPLACE DEFINER=''',REPLACE(definer, '@', '''@'''),''' SQL SECURITY ',SECURITY_TYPE,		'\nVIEW `',TABLE_NAME,'` AS\n',VIEW_DEFINITION	)from	information_schema.VIEWSwhere	TABLE_SCHEMA = :SCHEMA_NAMEand TABLE_NAME = :OBJECT_NAMEunion allselect	cast(concat(		'CREATE DEFINER=''',REPLACE(definer, '@', '''@'''),''' ',type,' `',db,'`.`',name,'` (',param_list,')',		if(returns <> '', concat('\n\tRETURNS ',returns), ''),		'\n\t',REPLACE(sql_data_access, '_', ' '),  		if(is_deterministic = 'YES','\n\tDETERMINISTIC',''),		'\n\tSQL SECURITY ', security_type,		if(comment <> '', concat('\n\tCOMMENT \'',COMMENT,'\''), ''),		'\n',body,'\n\n'	) as char)from	mysql.procwhere	db = :SCHEMA_NAMEand name = :OBJECT_NAMEunion allselect	cast(concat(		'CREATE ',		case when type = 'aggregate' then 'AGGREGATE ' else '' end,		'FUNCTION ', name, ' RETURNS ',		case ret when 0 then 'STRING' when 1 then 'REAL' else 'INTEGER' end,		' SONAME "', dl, '"'	) as char)from	mysql.funcwhere	name = :OBJECT_NAME
minVer=262144

[queries.97]
enabled=1
caption=Columns (Amazon Redshift) + Keys
export=1
dbType=8
queryType=4
queryText=SELECT    column_name,     REPLACE(CASE WHEN character_maximum_length is not null THEN replace(data_type, 'character varying', 'varchar') || '(' || character_maximum_length || ')'        WHEN data_type = 'numeric' AND numeric_precision is not null THEN data_type || '(' || numeric_precision || ',' || numeric_scale || ')'         ELSE data_type        END, '"', ''),     CASE WHEN column_default LIKE 'nextval(%' THEN 'A' ELSE '' END    || COALESCE(upper(substr(is_nullable,1,1)), 'Y') /* N,Y */    || COALESCE(( /* P,F,U */			  SELECT max(upper(substr(c2.contype,1,1))) 			  FROM				  pg_catalog.pg_namespace nr,				  pg_catalog.pg_class r,				  pg_catalog.pg_attribute a,				  pg_catalog.pg_namespace nc,				  pg_catalog.pg_constraint c2,				  pg_catalog.pg_user u			  WHERE				  nr.oid = r.relnamespace				  AND r.oid = a.attrelid				  AND r.oid = c2.conrelid				  AND nc.oid = c2.connamespace				  AND NOT a.attisdropped				  AND (						  c2.contype = 'p' 						  OR c2.contype = 'u' 						  OR c2.contype = 'f' 					  )				  AND r.relkind = 'r' 				  AND r.relowner = u.usesysid				  AND a.attname = c.column_name				  AND nr.nspname = c.table_schema				  AND r.relname = c.table_name				  AND c2.conkey[c.ordinal_position] = a.attnum		  ),'')	|| COALESCE(( /* I */			SELECT max('I')			FROM 			   pg_catalog.pg_table_def d			WHERE d.schemaname = c.table_schema 				  AND d.tablename = c.table_name				  AND d.column = c.column_name				  AND (d.distkey > 0  OR d.sortkey > 0)	 		  ),'')FROM    information_schema.columns cWHERE    table_schema = :SCHEMA_NAME    AND table_name = :OBJECT_NAME	  ORDER BY    ordinal_position
minVer=0

[queries.98]
enabled=1
caption=DDL Code (Amazon Redshift)
export=1
dbType=8
queryType=8
queryText=SELECT	('CREATE VIEW "' || table_schema || '"."' || table_name || '" AS ' || chr (10) 	|| view_definition)::varchar(4000)FROM	information_schema.viewsWHERE	table_schema       = :SCHEMA_NAME	AND table_name     = :OBJECT_NAMEUNION ALLSELECT	array_to_string(		ARRAY(			SELECT				CASE 				   WHEN c.ordinal_position = 1 				   THEN 'CREATE TABLE ' || table_schema || '.' || table_name || '(' || chr (10)				   ELSE ''				END ||				'    ' || CASE 				          	WHEN c.ordinal_position = 1 				          	THEN ''				          	ELSE ''				          END  || column_name || ' ' ||				REPLACE(					CASE 						WHEN character_maximum_length IS NOT NULL THEN data_type 						     || '(' || character_maximum_length || ')'						WHEN data_type = 'numeric'					AND numeric_precision IS NOT NULL THEN data_type || '(' || 					    numeric_precision || ',' || numeric_scale || ')' 					    ELSE data_type					    END,					'"',					''				) ||				CASE 					WHEN COALESCE (substr (is_nullable, 1, 1), 'Y') = 'N' THEN 					     ' NOT NULL' ELSE '' 				END  ||				CASE 					WHEN c.ordinal_position = (					     	SELECT					     		MAX (c2.ordinal_position)					     	FROM					     		information_schema.columns c2					     	WHERE					     		c2.table_schema = :SCHEMA_NAME					     		AND c2.table_name = :OBJECT_NAME					     ) THEN chr (10)  || ')'					ELSE ',' || chr(10)				END  AS query			FROM				information_schema.columns c			WHERE				table_schema = :SCHEMA_NAME				AND table_name = :OBJECT_NAME				AND NOT EXISTS (					SELECT 1 					FROM information_schema.views 					WHERE table_schema = :SCHEMA_NAME 						AND table_name     = :OBJECT_NAME					)			ORDER BY				ordinal_position		),		''	)
minVer=0

[queries.99]
enabled=1
caption=Object Info (Amazon Redshift)
export=1
dbType=8
queryType=13
queryText=SELECT '*  Table info *' || chr(10) /*|| 	'Pages allocated: ' || chr(9) || cl.relpages || ' (' || pg_catalog.pg_relation_size('"' || n.nspname || '"."' || cl.relname || '"') / 1024 || ' KB)'*/ FROM pg_catalog.pg_class cl    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespaceWHERE cl.relkind = 'r'    AND cl.oid = :OBJECT_ID::int4UNION ALLSELECT chr(10) || '*  Table comment *' || chr(10) || pg_catalog.obj_description(cl.oid)FROM pg_catalog.pg_class cl    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespaceWHERE cl.relkind = 'r'     AND pg_catalog.obj_description(cl.oid) IS NOT NULL    AND cl.oid = :OBJECT_ID::int4    UNION ALLSELECT chr(10) || '*  Columns'UNION ALLSELECT chr(10) || c.column_name || chr(9) ||  pg_catalog.col_description(cl.oid, c.ordinal_position) FROM information_schema.columns c    JOIN pg_catalog.pg_class cl        ON cl.relkind = 'r'        AND cl.relname = c.table_name    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespace        AND n.nspname = c.table_schemaWHERE pg_catalog.col_description(cl.oid, c.ordinal_position) IS NOT NULL    AND cl.oid = :OBJECT_ID::int4
minVer=0

[queries.100]
enabled=1
caption=Objects (Amazon Redshift)
export=1
dbType=8
queryType=3
queryText=SELECT relname,       CASE relkind       	WHEN 'r' THEN 'TA'       	WHEN 'v' THEN 'VI'       END,       oid,       NULL::TIMESTAMP,       NULL::TIMESTAMPFROM   pg_catalog.pg_classWHERE  relnamespace = :SCHEMA_ID::int4       AND relkind IN ('r', 'v')
minVer=0

[queries.101]
enabled=1
caption=Record Count (Amazon Redshift)
export=1
dbType=8
queryType=12
queryText=SELECT c.reltuplesFROM pg_catalog.pg_class cWHERE c.relkind = 'r'	AND c.reltuples >= 1    AND c.oid = :OBJECT_ID::int4 
minVer=0

[queries.102]
enabled=1
caption=Context (Amazon Redshift)
export=1
dbType=8
queryType=10
queryText=select      case when inet_server_addr() is null then 'localhost' else                 substring( cast(inet_server_addr() as varchar(24)), 1, position('/' in cast(inet_server_addr() as varchar(24))) - 1) end ||             case when inet_server_port() is null then '' else ':' || inet_server_port() end,      user,      current_database(),      current_schema()
minVer=0

[queries.103]
enabled=1
caption=Databases (Amazon Redshift)
export=1
dbType=8
queryType=1
queryText=select datname, 'DB'from pg_catalog.pg_databasewhere datname not like 'template%'
minVer=0

[queries.104]
enabled=1
caption=Joins (Amazon Redshift)
export=1
dbType=8
queryType=7
queryText=select	fkc.relname as table_name,	fka.attname as fk_column,	pka.attname as pk_column,	fks.nspname,	'F:' || fkcon.connamefrom	pg_catalog.pg_constraint as fkcon	join pg_catalog.pg_constraint as pkcon		on   fkcon.confrelid = pkcon.conrelid		and fkcon.confkey = pkcon.conkey	join pg_catalog.pg_class fkc		on   fkc.oid = fkcon.conrelid	join pg_catalog.pg_class pkc		on   pkc.oid = fkcon.confrelid	join pg_catalog.pg_namespace pks		on   pkcon.connamespace = pks.oid	join pg_catalog.pg_namespace fks		on   fkcon.connamespace = fks.oid	join pg_catalog.pg_attribute fka		on   fka.attnum = fkcon.conkey[1]		and fka.attrelid = fkc.oid	join pg_catalog.pg_attribute pka		on   pka.attnum = pkcon.conkey[1]		and pka.attrelid = pkc.oidwhere pkc.oid = :OBJECT_ID::int4     and fks.oid = pks.oidunion allselect	pkc.relname as table_name,	pka.attname as pk_column,	fka.attname as fk_column,	pks.nspname,	'P:' || fkcon.connamefrom	pg_catalog.pg_constraint as fkcon	join pg_catalog.pg_constraint as pkcon		on   fkcon.confrelid = pkcon.conrelid		and fkcon.confkey = pkcon.conkey	join pg_catalog.pg_class fkc		on   fkc.oid = fkcon.conrelid	join pg_catalog.pg_class pkc		on   pkc.oid = fkcon.confrelid	join pg_catalog.pg_namespace pks		on   pkcon.connamespace = pks.oid	join pg_catalog.pg_namespace fks		on   fkcon.connamespace = fks.oid	join pg_catalog.pg_attribute fka		on   fka.attnum = fkcon.conkey[1]		and fka.attrelid = fkc.oid	join pg_catalog.pg_attribute pka		on   pka.attnum = pkcon.conkey[1]		and pka.attrelid = pkc.oidwhere fkc.oid = :OBJECT_ID::int4     and pks.oid = fks.oidorder by table_name
minVer=0

[queries.105]
enabled=1
caption=Schemas (Amazon Redshift)
export=1
dbType=8
queryType=2
queryText=SELECT 	nspname, 'SC', oidFROM 	pg_catalog.pg_namespaceWHERE nspname NOT LIKE 'pg\_%'    OR nspname = 'pg_catalog'   UNION ALLSELECT	usename, 'SL', usesysidFROM	pg_catalog.pg_user
minVer=0

[queries.106]
enabled=1
caption=Object Types (MSSQL)
export=1
dbType=1
queryType=11
queryText=IF (@@version LIKE '%SQL Server 20%' AND @@version NOT LIKE '%SQL Server 2000%')or @@version like '%SQL Azure%'  select    c.name + char(0) + t.name    + case     when t.name in ('varchar', 'char', 'binary', 'varbinary')       then '(' + case c.max_length when -1 then 'max' else convert(varchar, c.max_length) end + ')'    when t.name in ('nvarchar', 'nchar')       then '(' + case c.max_length when -1 then 'max' else convert(varchar, c.max_length / 2) end + ')'     when t.name in ('decimal', 'numeric')      then '(' + convert(varchar, c.[precision]) + ',' + convert(varchar, c.scale) + ')'    else ''    end,    'AT'  from    [$DB_NAME$].sys.all_columns c WITH (NOLOCK)    join [$DB_NAME$].sys.types t WITH (NOLOCK)       on c.user_type_id = t.user_type_id  where    c.object_id = :OBJECT_ID  order by     c.column_idelse  select    c.name + char(0) + t.name    + case     when t.name in ('varchar', 'char', 'binary', 'varbinary')       then '(' + case c.length when -1 then 'max' else convert(varchar, c.length) end + ')'    when t.name in ('nvarchar', 'nchar')       then '(' + case c.length when -1 then 'max' else convert(varchar, c.length / 2) end + ')'     when t.name in ('decimal', 'numeric')      then '(' + convert(varchar, c.prec) + ',' + convert(varchar, c.scale) + ')'    else ''    end,    'AT'  from    [$DB_NAME$].dbo.syscolumns c WITH (NOLOCK)    join [$DB_NAME$].dbo.systypes t WITH (NOLOCK)       on c.xtype = t.xtype       and c.xusertype = t.xusertype  where    c.id = :OBJECT_ID  and c.number = 0  order by     c.colid
minVer=0

[queries.107]
enabled=1
caption=Object Types (DB2 UDB)
export=1
dbType=3
queryType=11
queryText=select * from (select    attr_name || X'00' || attr_typename ||    CASE    WHEN attr_typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',            'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN        '(' || LENGTH || ')'    WHEN attr_typename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN        '(' || LENGTH || ', ' || SCALE || ')'    ELSE        ''    end,	'AT'from	syscat.attributeswhere	typeschema = :SCHEMA_NAMEand	typename = :OBJECT_NAMEorder by	ordinal)union allselect	routinename,	case when functiontype = '' then 'PR' else 'FU' endfrom	syscat.routineswhere	subject_typeschema = :SCHEMA_NAMEand	subject_typename = :OBJECT_NAMEand	origin in ('Q','E')union allselect    fieldname || X'00' || fieldtypename ||    CASE    WHEN fieldtypename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',            'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN        '(' || LENGTH || ')'    WHEN fieldtypename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN        '(' || LENGTH || ', ' || SCALE || ')'    ELSE        ''    end,	'AT'from	syscat.rowfieldswhere	typeschema = :SCHEMA_NAMEand	typename = :OBJECT_NAME
minVer=589829

[queries.108]
enabled=1
caption=Objects (DB2 UDB)
export=1
dbType=3
queryType=3
queryText=select 	tabname,	case 		when type in ('V','W') then 'VI' 		when type = 'S' then 'MA'		when type = 'A' then 			case when tabschema = 'SYSPUBLIC' then '|T' else '^T' end		else 'TA' 	end, 	create_time,	alter_timefrom	syscat.tableswhere	tabschema = :SCHEMA_NAME or tabschema = 'SYSPUBLIC' and type = 'A'union allselect	routinename || X'00' || specificname,	case		when functiontype = 'T' then 'TF'		when routinetype = 'F' then 'FU' 		else 'PR' 	end, 	create_time,	alter_time from	syscat.routineswhere	routineschema = :SCHEMA_NAMEand routinetype in ('F','P')and coalesce(length(rtrim(language)), 0) > 0union allselect	seqname, 	CASE seqtype	WHEN 'A' THEN  		case when seqschema = 'SYSPUBLIC' then '|I' else '^I' end	ELSE 'SQ'	END,	create_time,	alter_time from	syscat.sequenceswhere	origin = 'U'	and (seqschema = :SCHEMA_NAME or seqschema = 'SYSPUBLIC' and seqtype = 'A')union allselect	typename || X'00' ||    CASE    WHEN METATYPE = 'C' THEN COALESCE(SOURCENAME || ' ', '') || 'CURSOR'    WHEN METATYPE IN ('T', 'L', 'A') THEN        SOURCENAME ||        CASE        WHEN SOURCENAME IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',                'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN            '(' || LENGTH || ')'        WHEN SOURCENAME IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN            '(' || LENGTH || ', ' || SCALE || ')'        ELSE            ''        END    ELSE ''    END ||    CASE METATYPE    WHEN 'L' THEN ' ARRAY[' || ARRAYINDEXTYPENAME || ']'    WHEN 'A' THEN ' ARRAY[' || ARRAY_LENGTH || ']'    ELSE ''    END,	case metatype	   when 'A'  then 'AR'	   when 'L' then 'AR'	   when 'T' then 'TD'	   when 'F' then 'TT'	   else 'TY'	end,	create_time,	alter_timefrom	syscat.datatypeswhere	typeschema = :SCHEMA_NAME and metatype <> 'S'union allselect	trigname,	'TR',	create_time,	create_timefrom	syscat.triggerswhere	trigschema = :SCHEMA_NAME
minVer=589829

[queries.109]
enabled=1
caption=DDL Code (DB2 UDB)
export=1
dbType=3
queryType=8
queryText=WITHattr(id, text) AS (select    ordinal, '  ' || attr_name || ' ' || attr_typename ||    CASE    WHEN attr_typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',            'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN        '(' || LENGTH || ')'    WHEN attr_typename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN        '(' || LENGTH || ', ' || SCALE || ')'    ELSE        ''    endfrom    syscat.attributeswhere  	typeschema = :SCHEMA_NAMEand typename = :OBJECT_NAME),attr_recurcive(id, text) AS (    SELECT id, text FROM attr WHERE id = 0    UNION ALL    SELECT t1.id, t0.text || ',' || CHR(10) || t1.text    FROM attr_recurcive t0, attr t1    WHERE t0.id + 1 = t1.id)select	case external_action	when 'E' then value(text,'/* Code of this external procedure/function is not available */') 	else text 	endfrom	syscat.routineswhere	routineschema = :SCHEMA_NAMEand specificname = :OBJECT_NAMEunion allselect	textfrom	syscat.viewswhere	viewschema = :SCHEMA_NAMEand viewname = :OBJECT_NAMEunion allselect	textfrom	syscat.triggerswhere	trigschema = :SCHEMA_NAMEand trigname = :OBJECT_NAMEunion allSELECT	'CREATE SYNONYM "' || TABSCHEMA || '"."' || TABNAME || '" FOR "' || BASE_TABSCHEMA || '"."' || BASE_TABNAME || '"'FROM	SYSCAT.TABLESWHERE	TABSCHEMA = :SCHEMA_NAMEAND TABNAME = :OBJECT_NAMEAND TYPE = 'A'union allSELECT 'CREATE SEQUENCE "' || SEQSCHEMA || '"."' || SEQNAME || '"' || CHR(10) ||	'  START WITH '   || "START" || CHR(10) ||	'  INCREMENT BY ' || "INCREMENT" || CHR(10) ||	'  MINVALUE '     || "MINVALUE" || CHR(10) ||	'  MAXVALUE '     || "MAXVALUE" || CHR(10) ||	'  CACHE '        || "CACHE" || CHR(10) ||	'  ' || CASE WHEN CYCLE = 'Y' THEN 'CYCLE' ELSE 'NO CYCLE' ENDFROM syscat.SEQUENCESWHERE SEQNAME = :OBJECT_NAME AND SEQSCHEMA = :SCHEMA_NAMEAND DEFINERTYPE = 'U'union allSELECT 'CREATE TYPE "' || TYPENAME || '" AS ' ||    CASE    WHEN METATYPE IN ('T', 'A', 'L') THEN        SOURCENAME ||        CASE        WHEN SOURCENAME IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',                'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN            '(' || LENGTH || ')'        WHEN SOURCENAME IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN            CASE WHEN "LENGTH" <> 5 OR SCALE <> 0 THEN            '(' || LENGTH || CASE WHEN SCALE <> 0 THEN ', ' || SCALE ELSE '' END || ')'            ELSE ''            END        ELSE            ''        END    ELSE ''    END ||    CASE METATYPE    WHEN 'T' THEN ' WITH COMPARISONS'    WHEN 'L' THEN ' ARRAY[' || ARRAYINDEXTYPENAME ||        CASE        WHEN ARRAYINDEXTYPENAME IN ('VARCHAR', 'CHARACTER VARYING', 'CHAR VARYING') THEN            '(' || RTRIM(ARRAYINDEXTYPELENGTH) || ')'        ELSE ''        END        || ']'    WHEN 'A' THEN ' ARRAY[' || CASE WHEN ARRAY_LENGTH <> 2147483647 THEN RTRIM(ARRAY_LENGTH) ELSE '' END  || ']'    WHEN 'C' THEN COALESCE(SOURCENAME || ' ', '') || 'CURSOR'    WHEN 'R' THEN ' (' || CHR(10) || (SELECT text FROM attr_recurcive WHERE id = (SELECT MAX(id) FROM attr)) || CHR(10) || ') MODE DB2SQL'    ELSE ''    ENDFROM SYSCAT.DATATYPESWHERE METATYPE <> 'S'and	typeschema = :SCHEMA_NAMEand	typename = :OBJECT_NAME
minVer=524288

[queries.110]
enabled=1
caption=Table Objects (MySQL)
export=1
dbType=2
queryType=14
queryText=SELECT COLUMN_NAME, 'D', COLUMN_NAME, COLUMN_DEFAULT, 1 FROM information_schema.`COLUMNS`WHERE COLUMN_DEFAULT <> ''	AND TABLE_SCHEMA = :SCHEMA_NAME AND TABLE_NAME = :OBJECT_NAMEUNION ALLSELECT 	tc.CONSTRAINT_NAME,     SUBSTRING(tc.CONSTRAINT_TYPE, 1, 1),    kcu.COLUMN_NAME,     '',    kcu.ORDINAL_POSITIONFROM information_schema.TABLE_CONSTRAINTS AS tc	JOIN information_schema.KEY_COLUMN_USAGE kcu		ON kcu.CONSTRAINT_SCHEMA = tc.CONSTRAINT_SCHEMA AND 			kcu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME  AND 			kcu.TABLE_NAME = tc.TABLE_NAMEWHERE tc.CONSTRAINT_TYPE IN ('PRIMARY KEY', 'UNIQUE') 	AND tc.TABLE_SCHEMA = :SCHEMA_NAME AND tc.TABLE_NAME = :OBJECT_NAMEUNION ALLSELECT TRIGGER_NAME, 'TR', CONCAT(ACTION_TIMING, ' ', EVENT_MANIPULATION), '', 1 FROM information_schema.`TRIGGERS`WHERE EVENT_OBJECT_SCHEMA = :SCHEMA_NAME AND EVENT_OBJECT_TABLE = :OBJECT_NAMEUNION ALLSELECT 	k.CONSTRAINT_NAME, 	'F', 	k.COLUMN_NAME, 	CONCAT(k.REFERENCED_TABLE_SCHEMA, '.', k.REFERENCED_TABLE_NAME, '.', k.REFERENCED_COLUMN_NAME),     k.ORDINAL_POSITION  FROM information_schema.KEY_COLUMN_USAGE k, information_schema.`COLUMNS` cWHERE k.TABLE_SCHEMA = c.TABLE_SCHEMA AND k.TABLE_NAME = c.TABLE_NAME AND k.COLUMN_NAME = c.COLUMN_NAME	AND k.REFERENCED_COLUMN_NAME IS NOT NULL	AND c.TABLE_SCHEMA = :SCHEMA_NAME AND c.TABLE_NAME = :OBJECT_NAMEUNION ALLSELECT 	CONCAT(INDEX_NAME, ' (', INDEX_TYPE, ', ', CASE WHEN NON_UNIQUE = 1 THEN 'Nonunique' ELSE 'Unique' END, ')'), 	'I', 	COLUMN_NAME, 	'',	SEQ_IN_INDEX  FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = :SCHEMA_NAME AND TABLE_NAME = :OBJECT_NAMEORDER BY 2, 1, 5 
minVer=0

[queries.111]
enabled=1
caption=Table Objects (PostgreSQL)
export=1
dbType=7
queryType=14
queryText=SELECT c."column_name", 'D', c."column_name", c.column_default, 0FROM information_schema.columns cWHERE c.column_default IS NOT NULLAND c.table_schema = :SCHEMA_NAME AND c."table_name" = :OBJECT_NAMEUNION ALLSELECT c."column_name", 'D', c."column_name", d.domain_default, 0FROM information_schema.columns cJOIN information_schema.domains d ON d.domain_catalog = c.domain_catalog AND d.domain_schema = c.domain_schema AND d.domain_name = c.domain_nameWHERE d.domain_default IS NOT NULLAND c.table_schema = :SCHEMA_NAME AND c."table_name" = :OBJECT_NAMEUNION ALLSELECT    tc."constraint_name",    substr (tc.constraint_type, 1, 1),    kcu."column_name",    CASE        WHEN tc.constraint_type = 'FOREIGN KEY' THEN       ( 	         	select ccu.table_schema || '.' || ccu."table_name" || '.' || ccu."column_name"        	FROM information_schema.constraint_column_usage ccu         	WHERE ccu."constraint_catalog" = tc."constraint_catalog"                AND ccu."constraint_schema" = tc."constraint_schema"                AND ccu."constraint_name" = tc."constraint_name"            LIMIT 1        )        ELSE         	cc.check_clause    END,	kcu.ordinal_position FROM    information_schema.table_constraints tc    LEFT JOIN information_schema.check_constraints cc        ON  cc."constraint_catalog" = tc."constraint_catalog"        AND cc."constraint_schema" = tc."constraint_schema"        AND cc."constraint_name" = tc."constraint_name"    LEFT JOIN information_schema.key_column_usage kcu        ON kcu."constraint_catalog" = tc."constraint_catalog"        AND kcu."constraint_schema" = tc."constraint_schema"        AND kcu."constraint_name" = tc."constraint_name"WHERE (cc.check_clause IS NULL OR NOT (cc.check_clause LIKE '%IS NOT NULL'))AND tc.table_schema = :SCHEMA_NAME AND tc."table_name" = :OBJECT_NAMEUNION ALLSELECT  i.relname, 'I',        array_to_string(ARRAY(       SELECT pg_get_indexdef(x.indexrelid, k + 1, true)       FROM generate_series(array_lower(x.indkey, 1), array_upper(x.indkey, 1)) as k       ORDER BY k       ), ', '),        pg_get_indexdef (i.oid),	   0 FROM pg_index x JOIN pg_class c ON c.oid = x.indrelid JOIN pg_class i ON i.oid = x.indexrelidJOIN pg_namespace n ON n.oid = c.relnamespace  WHERE (c.relkind = 'r'::"char") AND (i.relkind = 'i'::"char")AND n.nspname = :SCHEMA_NAME AND c.relname = :OBJECT_NAME  UNION ALLSELECT "trigger_name", 'TR', event_manipulation, '', 0 FROM information_schema.triggersWHERE event_object_schema = :SCHEMA_NAME	AND event_object_table = :OBJECT_NAMEORDER BY 2, 1, 5
minVer=0

[queries.112]
enabled=1
caption=Table Objects (DB2 UDB)
export=1
dbType=3
queryType=14
queryText=SELECT C.CONSTNAME, C."TYPE", CC.COLNAME, C.TEXT, 	CAST(0 AS SMALLINT) AS COLORDERFROM SYSCAT.CHECKS AS CLEFT JOIN SYSCAT.COLCHECKS AS CC	ON CC.CONSTNAME = C.CONSTNAME	AND CC.TABSCHEMA = C.TABSCHEMA	AND CC.TABNAME = C.TABNAMEWHERE CC.TABSCHEMA = :SCHEMA_NAMEAND CC.TABNAME = :OBJECT_NAMEUNION ALLSELECT COLNAME, 'D', COLNAME, "DEFAULT", 	COLNO AS COLORDERFROM SYSCAT."COLUMNS"WHERE "DEFAULT" IS NOT NULLAND TABSCHEMA = :SCHEMA_NAMEAND TABNAME = :OBJECT_NAMEUNION ALLSELECT TRIGNAME, 'TR', 	CASE TRIGEVENT	  WHEN 'D' THEN 'DELETE'	  WHEN 'I' THEN 'INSERT'	  WHEN 'U' THEN 'UPDATE'	END,	'', 	CAST(0 AS SMALLINT) AS COLORDERFROM SYSCAT.TRIGGERSWHERE TABSCHEMA = :SCHEMA_NAMEAND TABNAME = :OBJECT_NAMEUNION ALLSELECT k.CONSTNAME, t."TYPE", k.COLNAME, TRIM(r.REFTABSCHEMA) || '.' || TRIM(r.REFTABNAME) || '.' || TRIM(rk.COLNAME), 	k.COLSEQ AS COLORDERFROM SYSCAT.KEYCOLUSE AS kLEFT JOIN SYSCAT.TABCONST AS t	ON t.CONSTNAME = k.CONSTNAME	AND t.TABSCHEMA = k.TABSCHEMA	AND t.TABNAME = k.TABNAMELEFT JOIN SYSCAT."REFERENCES" AS r	ON r.CONSTNAME = k.CONSTNAME	AND r.TABSCHEMA = k.TABSCHEMA	AND r.TABNAME = k.TABNAMELEFT JOIN SYSCAT.KEYCOLUSE AS rk	ON rk.CONSTNAME = r.REFKEYNAME	AND rk.TABSCHEMA = r.REFTABSCHEMA	AND rk.TABNAME = r.REFTABNAME	AND rk.COLSEQ = k.COLSEQWHERE k.TABSCHEMA = :SCHEMA_NAME	AND k.TABNAME = :OBJECT_NAMEUNION ALLSELECT i.INDNAME || ' (' || i.INDEXTYPE || ', ' || CASE i.UNIQUERULE WHEN 'P' THEN 'Primary' WHEN 'U' THEN 'Unique' ELSE 'Nonunique' END || ')', 	'I', ic.COLNAME || ' ' || CASE ic.COLORDER WHEN 'A' THEN 'ASC' ELSE 'DESC' END, '', 	ic.COLSEQ AS COLORDER FROM SYSCAT."INDEXES" iJOIN SYSCAT.INDEXCOLUSE ic ON ic.INDSCHEMA = i.INDSCHEMA AND ic.INDNAME = i.INDNAMEWHERE i.TABSCHEMA = :SCHEMA_NAMEAND i.TABNAME = :OBJECT_NAMEORDER BY 2, 1, 5 
minVer=0

[queries.113]
enabled=1
caption=Table Objects (MSSQL)
export=1
dbType=1
queryType=14
queryText=IF (@@version LIKE '%SQL Server 20%' AND @@version NOT LIKE '%SQL Server 2000%')or @@version like '%SQL Azure%'    SELECT d.name, d.[type], c.name, d.definition, 0 as col_pos    FROM [$DB_NAME$].sys.default_constraints d WITH (NOLOCK)    LEFT JOIN [$DB_NAME$].sys.[columns] c WITH (NOLOCK) ON        c.[object_id] = d.parent_object_id AND d.parent_column_id = c.column_id    WHERE d.parent_object_id = :OBJECT_ID    UNION ALL    SELECT d.name, d.[type], c.name, d.definition, 0    FROM [$DB_NAME$].sys.[check_constraints] d WITH (NOLOCK)    LEFT JOIN [$DB_NAME$].sys.[columns] c WITH (NOLOCK) ON        (c.[object_id] = d.parent_object_id) AND d.parent_column_id = c.column_id    WHERE d.parent_object_id = :OBJECT_ID    UNION ALL    SELECT t.name, t.[type], te.type_desc COLLATE SQL_Latin1_General_CP1251_CI_AS, '', 0    FROM [$DB_NAME$].sys.trigger_events te WITH (NOLOCK)    LEFT JOIN [$DB_NAME$].sys.triggers t WITH (NOLOCK) ON te.[object_id] = t.[object_id]    WHERE t.parent_id = :OBJECT_ID    UNION ALL    SELECT o.name, o.[type], c.name + ' ' + CASE k.is_descending_key WHEN 0 THEN 'ASC' ELSE 'DESC' END, '', k.index_column_id    FROM [$DB_NAME$].sys.objects o WITH (NOLOCK),         [$DB_NAME$].sys.indexes i WITH (NOLOCK),        [$DB_NAME$].sys.index_columns k WITH (NOLOCK),        [$DB_NAME$].sys.[columns] c WITH (NOLOCK)    WHERE i.[object_id] = o.parent_object_id        AND i.name = o.name        AND k.[object_id] = i.[object_id]        AND k.index_id = i.index_id        AND c.[object_id] = k.[object_id]         AND c.column_id = k.column_id        AND i.[object_id] = :OBJECT_ID    UNION ALL    SELECT      fk.name, fk.[type],      c2.name,      s1.name + '.' + o1.name + '.' + c1.name,      fkc.constraint_column_id    FROM [$DB_NAME$].sys.foreign_keys AS fk WITH (NOLOCK)      JOIN [$DB_NAME$].sys.foreign_key_columns AS fkc WITH (NOLOCK) ON fkc.constraint_object_id = fk.[object_id]      JOIN [$DB_NAME$].sys.[columns] AS c1 WITH (NOLOCK) ON c1.[object_id] = fkc.referenced_object_id AND c1.column_id = fkc.referenced_column_id      JOIN [$DB_NAME$].sys.objects AS o1 WITH (NOLOCK) ON o1.[object_id] = c1.[object_id]      JOIN [$DB_NAME$].sys.schemas AS s1 WITH (NOLOCK) ON s1.[schema_id] = o1.[schema_id]      JOIN [$DB_NAME$].sys.[columns] AS c2 WITH (NOLOCK) ON c2.[object_id] = fkc.parent_object_id AND c2.column_id = fkc.parent_column_id    WHERE fkc.parent_object_id = :OBJECT_ID	     UNION ALL    SELECT i.name + ' (' + i.type_desc + ', ' +        CASE i.is_unique WHEN 0 THEN 'NONUNIQUE' ELSE 'UNIQUE' END + ')' COLLATE SQL_Latin1_General_CP1251_CI_AS,        'I',        c.name + ' ' + CASE ic.is_descending_key WHEN 0 THEN 'ASC' ELSE 'DESC' END,        '',         ic.index_column_id    FROM [$DB_NAME$].sys.indexes i WITH (NOLOCK),           [$DB_NAME$].sys.index_columns ic WITH (NOLOCK),           [$DB_NAME$].sys.[columns] c WITH (NOLOCK)    WHERE ic.[object_id] = i.[object_id]           AND ic.column_id = c.column_id           AND c.[object_id] = i.[object_id]           AND ic.index_id = i.index_id           AND i.[object_id] = :OBJECT_ID    UNION ALL    SELECT s.name, 'S', c.name, CONVERT(NVARCHAR(20), STATS_DATE(o.[object_id], s.stats_id), 20), sc.stats_column_id    FROM [$DB_NAME$].sys.stats_columns sc WITH (NOLOCK)      JOIN [$DB_NAME$].sys.[stats] s WITH (NOLOCK) ON s.stats_id = sc.stats_id AND s.[object_id] = sc.[object_id]      JOIN [$DB_NAME$].sys.all_objects o WITH (NOLOCK) ON o.[object_id] = sc.[object_id]      JOIN [$DB_NAME$].sys.all_columns c WITH (NOLOCK) ON c.[object_id] = sc.[object_id] AND c.column_id = sc.column_id     WHERE o.object_id = :OBJECT_ID    ORDER BY 2, 1, 5ELSE    SELECT o.name, o.xtype, k.name, case when o.xtype = 'TR' then '' else c.[text] end, k.colid    FROM [$DB_NAME$].dbo.sysobjects o WITH (NOLOCK)      LEFT JOIN [$DB_NAME$].dbo.syscomments c WITH (NOLOCK) ON o.id = c.id AND c.colid = 1      LEFT JOIN [$DB_NAME$].dbo.syscolumns k WITH (NOLOCK) ON k.id = o.parent_obj AND k.colid = o.info    WHERE o.xtype IN ('C', 'PK', 'UQ', 'D', 'TR')        AND (o.status & 64) = 0 AND o.parent_obj = :OBJECT_ID    UNION ALL    SELECT fk.name, fk.xtype,      (select name from [$DB_NAME$].dbo.syscolumns WITH (NOLOCK) where id = f1.rkeyid and colid = f1.rkey),      (select u.name + '.' + o.name from [$DB_NAME$].dbo.sysusers u WITH (NOLOCK), [$DB_NAME$].dbo.sysobjects o WITH (NOLOCK) where u.uid = o.uid and o.id = f1.rkeyid) + '.' +      (select name from [$DB_NAME$].dbo.syscolumns WITH (NOLOCK) where id = f1.fkeyid and colid = f1.fkey),      f1.keyno    FROM [$DB_NAME$].dbo.sysforeignkeys f1 WITH (NOLOCK)        LEFT JOIN [$DB_NAME$].dbo.sysobjects fk WITH (NOLOCK) ON f1.constid = fk.id AND fk.xtype = 'F'    WHERE fk.parent_obj = :OBJECT_ID    UNION ALL    SELECT i.name,           'I',           c.name,           '',           k.keyno    FROM [$DB_NAME$].dbo.sysindexes i WITH (NOLOCK),           [$DB_NAME$].dbo.sysindexkeys k WITH (NOLOCK),           [$DB_NAME$].dbo.syscolumns c WITH (NOLOCK)    WHERE k.id = i.id           AND c.id = i.id           AND k.indid = i.indid           AND c.colid = k.colid           AND i.id = :OBJECT_ID    ORDER BY 2, 1, 5
minVer=0

[queries.114]
enabled=1
caption=Table Objects (ASA)
export=1
dbType=5
queryType=14
queryText=SELECT c.column_name, 'D', c.column_name, [default], 0FROM [$DB_NAME$].sys.SYSTABCOL cLEFT JOIN [$DB_NAME$].sys.SYSTAB t ON t.table_id = c.table_idWHERE [default] IS NOT NULL AND t."object_id" = :OBJECT_ID UNION ALLSELECT s.constraint_name, 'C', '', c.check_defn, 0FROM [$DB_NAME$].sys.SYSCONSTRAINT sJOIN [$DB_NAME$].sys.SYSCHECK c ON s.constraint_id = c.check_idWHERE s.table_object_id = :OBJECT_IDUNION ALLSELECT i.index_name,    CASE i.index_category    WHEN 1 THEN 'P'    WHEN 2 THEN 'F'    ELSE CASE i."unique" WHEN 4 THEN 'I' ELSE 'U' END    END,    c.column_name,    CASE WHEN fpc.column_name IS NOT NULL    THEN CASE WHEN ci.sequence = 0 THEN fpu."user_name" + '.' + fpt.table_name + '.' ELSE '' END + fpc.column_name    ELSE CAST(NULL AS VARCHAR)    END,    ci.sequenceFROM [$DB_NAME$].sys.SYSIDXCOL ciJOIN [$DB_NAME$].sys.SYSIDX i ON ci.table_id = i.table_id AND ci.index_id = i.index_idJOIN [$DB_NAME$].sys.SYSTABCOL c ON c.table_id = ci.table_id AND c.column_id = ci.column_idLEFT JOIN [$DB_NAME$].sys.SYSFKEY fk ON fk.foreign_table_id = i.table_id AND fk.foreign_index_id = i.index_idLEFT JOIN [$DB_NAME$].sys.SYSTAB fpt ON fpt.table_id = fk.primary_table_idLEFT JOIN [$DB_NAME$].sys.SYSIDXCOL fci ON fci.table_id = fpt.table_id AND fci.sequence = ci.sequence AND fci.index_id = fk.primary_index_idLEFT JOIN [$DB_NAME$].sys.SYSTABCOL fpc ON fpc.table_id = fci.table_id AND fpc.column_id = fci.column_idLEFT JOIN [$DB_NAME$].sys.SYSUSER fpu ON fpu.user_id = fpt.creatorLEFT JOIN [$DB_NAME$].sys.SYSTAB pt ON pt.table_id = ci.table_idWHERE pt."object_id" = :OBJECT_IDUNION ALLSELECT iname + ' (' + indextype + ')', 'I', colnames, '', 0FROM sys.sysindexesWHERE creator = :SCHEMA_NAME AND tname = :OBJECT_NAMEUNION ALLSELECT trigname, 'TR', trigtime + ' ' + "event", '', 0FROM [$DB_NAME$].sys.SYSTRIGGERSWHERE tname = :OBJECT_NAME AND "owner" = :SCHEMA_NAMEORDER BY 2, 1, 5
minVer=0

[queries.115]
enabled=1
caption=Table Objects (ASE)
export=1
dbType=4
queryType=14
queryText=SELECT o.[name], 'D', c.[name], i.[text]FROM [$DB_NAME$].dbo.syscolumns c noholdlockJOIN [$DB_NAME$].dbo.syscomments i noholdlock ON c.cdefault = i.idJOIN [$DB_NAME$].dbo.sysobjects o noholdlock ON c.cdefault = o.id WHERE c.id = :OBJECT_IDUNION ALLSELECT s2.[name], 'C', '', s3.[text]FROM [$DB_NAME$].dbo.sysconstraints AS s noholdlockJOIN [$DB_NAME$].dbo.sysobjects AS s2 noholdlock ON s.constrid = s2.idJOIN [$DB_NAME$].dbo.syscomments AS s3 noholdlock ON s3.id = s2.idWHERE s.[status] = 128AND s.tableid = :OBJECT_IDUNION ALLSELECT    i.[name],    CASE    WHEN i.[status] & 2048 <> 0 THEN 'P'    WHEN i.[status] & 2 <> 0 THEN 'U'    END,index_col('$DB_NAME$.' + u.name + '.' + o.name, i.indid, 1) +case when (case when i.status & 16 <> 0 then 0 else -1 end + i.keycnt) >= 2 then ', ' + index_col('$DB_NAME$.' + u.name + '.' + o.name, i.indid, 2) else '' end +case when (case when i.status & 16 <> 0 then 0 else -1 end + i.keycnt) >= 3 then ', ' + index_col('$DB_NAME$.' + u.name + '.' + o.name, i.indid, 3) else '' end +case when (case when i.status & 16 <> 0 then 0 else -1 end + i.keycnt) >= 4 then ', ' + index_col('$DB_NAME$.' + u.name + '.' + o.name, i.indid, 4) else '' end +case when (case when i.status & 16 <> 0 then 0 else -1 end + i.keycnt) >= 5 then ', ' + index_col('$DB_NAME$.' + u.name + '.' + o.name, i.indid, 5) else '' end +case when (case when i.status & 16 <> 0 then 0 else -1 end + i.keycnt) >= 6 then ', ' + index_col('$DB_NAME$.' + u.name + '.' + o.name, i.indid, 6) else '' end +case when (case when i.status & 16 <> 0 then 0 else -1 end + i.keycnt) >= 7 then ', ' + index_col('$DB_NAME$.' + u.name + '.' + o.name, i.indid, 7) else '' end +case when (case when i.status & 16 <> 0 then 0 else -1 end + i.keycnt) >= 8 then ', ' + index_col('$DB_NAME$.' + u.name + '.' + o.name, i.indid, 8) else '' end, ''FROM [$DB_NAME$].dbo.sysindexes AS i noholdlockJOIN [$DB_NAME$].dbo.sysobjects AS o noholdlock ON o.id = i.idJOIN [$DB_NAME$].dbo.sysusers AS u noholdlock ON u.uid = o.uidWHERE i.[status] & 2050 <> 0AND o.id = :OBJECT_IDunion allSELECT o.[name], 'F',  (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey1) +  CASE WHEN i.keycnt >= 2 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey2) END +  CASE WHEN i.keycnt >= 3 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey3) END +  CASE WHEN i.keycnt >= 4 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey4) END +  CASE WHEN i.keycnt >= 5 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey5) END +  CASE WHEN i.keycnt >= 6 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey6) END +  CASE WHEN i.keycnt >= 7 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey7) END +  CASE WHEN i.keycnt >= 8 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey8) END +  CASE WHEN i.keycnt >= 9 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey9) END +  CASE WHEN i.keycnt >= 10 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey10) END +  CASE WHEN i.keycnt >= 11 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey11) END +  CASE WHEN i.keycnt >= 12 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey12) END +  CASE WHEN i.keycnt >= 13 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey13) END +  CASE WHEN i.keycnt >= 14 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey14) END +  CASE WHEN i.keycnt >= 15 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey15) END +  CASE WHEN i.keycnt >= 16 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.tableid AND c.colid = i.fokey16) END,  ub.name + '.' + ob.name + '.' +  (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey1) +  CASE WHEN i.keycnt >= 2 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey2) END +  CASE WHEN i.keycnt >= 3 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey3) END +  CASE WHEN i.keycnt >= 4 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey4) END +  CASE WHEN i.keycnt >= 5 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey5) END +  CASE WHEN i.keycnt >= 6 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey6) END +  CASE WHEN i.keycnt >= 7 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey7) END +  CASE WHEN i.keycnt >= 8 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey8) END +  CASE WHEN i.keycnt >= 9 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey9) END +  CASE WHEN i.keycnt >= 10 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey10) END +  CASE WHEN i.keycnt >= 11 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey11) END +  CASE WHEN i.keycnt >= 12 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey12) END +  CASE WHEN i.keycnt >= 13 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey13) END +  CASE WHEN i.keycnt >= 14 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey14) END +  CASE WHEN i.keycnt >= 15 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey15) END +  CASE WHEN i.keycnt >= 16 THEN ', ' + (SELECT c.[name] FROM [$DB_NAME$].dbo.syscolumns c WHERE c.id = i.reftabid AND c.colid = i.refkey16) ENDFROM [$DB_NAME$].dbo.sysreferences AS i noholdlockJOIN [$DB_NAME$].dbo.sysobjects AS o noholdlock ON o.id = i.constridJOIN [$DB_NAME$].dbo.sysobjects AS op noholdlock ON op.id = i.reftabidJOIN [$DB_NAME$].dbo.sysusers AS up noholdlock ON up.uid = op.uidJOIN [$DB_NAME$].dbo.sysobjects AS ob noholdlock ON ob.id = i.reftabidJOIN [$DB_NAME$].dbo.sysusers AS ub noholdlock ON ub.uid = ob.uidWHERE i.tableid = :OBJECT_IDunion allSELECT name + ' (' + CASE WHEN ([status] & 16) <> 0 THEN 'Clustered' ELSE 'Nonclustered' END + ', ' +CASE WHEN ([status] & 2) <> 0 THEN 'Unique' ELSE 'Nonunique' END + CASE WHEN ([status] & 2048) <> 0 THEN ', Primary Key' ELSE '' END + ')', 'I', '', ''FROM [$DB_NAME$].dbo.sysindexes noholdlockWHERE keys1 IS NOT NULL and id = :OBJECT_IDUNION ALLSELECT o.[name], 'TR', 'INSERT', '' FROM [$DB_NAME$].dbo.sysobjects o noholdlockJOIN [$DB_NAME$].dbo.sysobjects r noholdlock ON o.id = r.instrigWHERE r.id = :OBJECT_IDUNION ALLSELECT o.[name], 'TR', 'DELETE', '' FROM [$DB_NAME$].dbo.sysobjects o noholdlockJOIN [$DB_NAME$].dbo.sysobjects r noholdlock ON o.id = r.deltrigWHERE r.id = :OBJECT_IDUNION ALLSELECT o.[name], 'TR', 'UPDATE', '' FROM [$DB_NAME$].dbo.sysobjects o noholdlockJOIN [$DB_NAME$].dbo.sysobjects r noholdlock ON o.id = r.updtrigWHERE r.id = :OBJECT_ID
minVer=0

[queries.116]
enabled=1
caption=Table Objects (Oracle)
export=1
dbType=0
queryType=14
queryText=SELECT    column_name || '_DEF',    'D',    column_name,    data_default,    '',	0FROM    all_tab_columnsWHERE    default_length > 0 AND owner = :SCHEMA_NAMEAND table_name = :OBJECT_NAMEUNION ALL SELECT    ac.constraint_name,    ac.constraint_type,    acc.column_name,    ac.search_condition,    CASE         WHEN racc.column_name IS NOT NULL THEN racc.owner || '.' || racc.table_name              || '.' || racc.column_name        ELSE ''    END,	acc.positionFROM    all_constraints ac    LEFT JOIN all_cons_columns acc        ON acc.constraint_name = ac.constraint_name        AND acc.owner = ac.owner    LEFT JOIN all_constraints rac        ON rac.owner = ac.r_owner        AND rac.constraint_name = ac.r_constraint_name    LEFT JOIN all_cons_columns racc        ON racc.constraint_name = rac.constraint_name        AND racc.owner = rac.owner        AND racc.position = acc.positionWHERE ac.owner = :SCHEMA_NAMEAND ac.table_name = :OBJECT_NAMEAND ac.constraint_type != 'O'UNION ALL SELECT i.index_name || ' (' || i.index_type || ', ' || i.uniqueness || ')', 'I', ic.column_name || ' ' || ic.descend, ac.search_condition, '', column_positionFROM all_indexes i, all_ind_columns icLEFT JOIN all_constraints ac ON 1 = 0WHERE ic.index_name = i.index_name AND ic.index_owner = i.owner AND ic.table_name = i.table_name and i.table_owner = :SCHEMA_NAME AND i.table_name = :OBJECT_NAMEUNION ALL SELECT t.trigger_name, 'TR', t.triggering_event, t2.trigger_body, t.trigger_type, 0FROM all_triggers tLEFT JOIN all_triggers t2 ON 1 = 0WHERE t.owner = :SCHEMA_NAMEAND t.table_name = :OBJECT_NAMEORDER BY 2, 1, 5
minVer=0

[queries.117]
enabled=1
caption=Context (SQLite)
export=1
dbType=9
queryType=10
queryText=select    'noSrv',    '',    'noDb',    'main'
minVer=0

[queries.118]
enabled=1
caption=DDL Code (SQLite)
export=1
dbType=9
queryType=8
queryText=select sql from $SCHEMA_NAME$.sqlite_master where name = :OBJECT_NAME
minVer=0

[queries.119]
enabled=1
caption=Objects (SQLite)
export=1
dbType=9
queryType=3
queryText=select    name,    CASE    	WHEN SQL LIKE 'CREATE VIRTUAL TABLE%' THEN 'MA'		ELSE upper(substr(type, 1, 2))	END,    cast(NULL as TIMESTAMP) as create_time,    cast(NULL as TIMESTAMP) as alter_timefrom    $SCHEMA_NAME$.sqlite_masterwhere    type in ('table', 'view', 'trigger')
minVer=0

[queries.120]
enabled=1
caption=Schemas (SQLite)
export=1
dbType=9
queryType=2
queryText=select 'main', 'SC'unionselect 'temp', 'SC'
minVer=0

[queries.121]
enabled=1
caption=Record Count (SQLite)
export=1
dbType=9
queryType=12
queryText=select count(*) from [$SCHEMA_NAME$].[$OBJECT_NAME$]
minVer=0

[queries.122]
enabled=1
caption=DDL Code (PostgreSQL)
export=1
dbType=7
queryType=8
queryText=select 'CREATE VIEW "' || table_schema || '"."' || table_name || '" AS' || chr(10) || view_definitionfrom information_schema.viewswhere     table_schema = :SCHEMA_NAME     and table_name = :OBJECT_NAMEUNION ALLSELECT	'CREATE FUNCTION "' || routine_schema || '"."' || routine_name || '"(' ||    array_to_string(array(		SELECT COALESCE (p.parameter_name, '') || ' ' || LOWER (p.parameter_mode) || ' ' || REPLACE(REPLACE(p.data_type, 'character varying', 'varchar'), '"', '')         FROM information_schema.parameters p		WHERE p.specific_catalog = r.specific_catalog			AND p.specific_schema = r.specific_schema			AND p.specific_name = r.specific_name		ORDER BY p.ordinal_position	), ',')  ||	')' || CHR(10) || '  RETURNS ' || REPLACE(REPLACE(r.data_type, 'character varying', 'varchar'), '"', '') ||	' AS' || CHR(10) || '$$' || r.routine_definition  	|| '$$' || CHR(10) || 'LANGUAGE ' || r.external_language || ';'FROM	information_schema.routines rWHERE	r.routine_schema = :SCHEMA_NAME	AND r.routine_name = :OBJECT_NAME	AND r.external_language in ('SQL', 'PLPGSQL') 	AND r.routine_definition <> 'aggregate_dummy'	UNION ALLSELECT	'CREATE AGGREGATE "' || routine_schema || '"."' || routine_name || '"(' ||    array_to_string(array(		SELECT COALESCE (p.parameter_name, '') || ' ' || LOWER (p.parameter_mode) || ' ' || REPLACE(REPLACE(p.data_type, 'character varying', 'varchar'), '"', '')         FROM information_schema.parameters p		WHERE p.specific_catalog = r.specific_catalog			AND p.specific_schema = r.specific_schema			AND p.specific_name = r.specific_name		ORDER BY p.ordinal_position	), ',')  ||	')' || chr(10) || '(' || chr(10) || 	'  SFUNC = ' || pa.aggtransfn || ',' || chr(10) ||	'  STYPE = ' || REPLACE(r.data_type, 'character varying', 'varchar') ||  	CASE WHEN pa.aggfinalfn <> 0 THEN ',' || chr(10) || '  FINALFUNC = ' || pa.aggfinalfn ELSE '' END ||	CASE WHEN pa.agginitval <> '' THEN ',' || chr(10) || '  INITCOND = ' || pa.agginitval ELSE '' END ||	COALESCE(',' || chr(10) || '  SORTOP = ' || po.oprname, '') || 	chr(10) || ');'FROM	information_schema.routines r	JOIN pg_catalog.pg_aggregate AS pa		ON pa.aggfnoid = substring(r.specific_name, '_([^_]*?)$')::oid	LEFT JOIN pg_catalog.pg_operator AS po     	ON pa.aggsortop = po.oidWHERE	r.routine_schema = :SCHEMA_NAME	AND r.routine_name = :OBJECT_NAMEUNION ALLSELECT 'Code of external routine "'|| routine_name ||'"('|| routine_definition ||') is not available'|| chr(10)FROM information_schema.routinesWHERE    routine_schema = :SCHEMA_NAME    AND routine_name = :OBJECT_NAME	AND not (external_language in ('SQL', 'PLPGSQL'))      	AND routine_definition <> 'aggregate_dummy'      UNION ALL    SELECT DISTINCT	'CREATE TRIGGER "' || t.trigger_name || '" ' || condition_timing || ' ' ||	array_to_string(ARRAY(		SELECT event_manipulation::CHAR VARYING FROM information_schema.triggers t1		WHERE t1."trigger_schema" = t."trigger_schema" AND t1."trigger_name" = t."trigger_name" 	), ' OR ') || 	' ON "' || t.event_object_schema || '"."' || t.event_object_table || '"' || chr(10) || 	'FOR EACH ' || t.action_orientation || ' ' || t.action_statement	FROM 	information_schema.triggers tWHERE	t.event_object_schema = :SCHEMA_NAME	AND t.trigger_name = :OBJECT_NAMELIMIT 1
minVer=458752

[queries.123]
enabled=1
caption=DDL Code (PostgreSQL)
export=1
dbType=7
queryType=8
queryText=SELECT 'CREATE' || CASE WHEN pc.relkind = 'm' THEN ' MATERIALIZED' ELSE '' END || ' VIEW "' || 	pn.nspname || '"."' || pc.relname || '" AS' || chr(10) || 	pg_catalog.pg_get_viewdef(pc.oid)FROM	 pg_catalog.pg_class pc,	 pg_catalog.pg_namespace pnWHERE pc.relnamespace = pn.oid	AND pc.relkind in ('m', 'v')	AND pc.oid = :OBJECT_ID UNION ALLSELECT	'CREATE FUNCTION "' || pn.nspname || '"."' || pp.proname || '"(' ||   replace( pg_catalog.pg_get_function_arguments(pp.oid), 'character varying', 'varchar')  ||	')' || CHR(10) || '  RETURNS ' || replace(pg_catalog.pg_get_function_result(pp.oid), 'character varying', 'varchar') ||	' AS' || CHR(10) || '$$' || pp.prosrc  	|| '$$' || CHR(10) || 'LANGUAGE ' || pl.lanname || ';'FROM pg_catalog.pg_proc AS pp    JOIN pg_catalog.pg_namespace AS pn         ON pn.oid = pp.pronamespace    JOIN pg_catalog.pg_language AS pl         ON pl.oid = pp.prolangWHERE	pp.oid = :OBJECT_ID	AND pl.lanname in ('sql', 'plpgsql') 	AND pp.prosrc <> 'aggregate_dummy'	UNION ALLSELECT	'CREATE AGGREGATE "' || pn.nspname || '"."' || pp.proname || '"(' ||    replace(pg_catalog.pg_get_function_arguments(pp.oid), 'character varying', 'varchar') || ')' || chr(10) || '(' || chr(10) || 	'  SFUNC = ' || pa.aggtransfn || ',' || chr(10) ||	'  STYPE = ' || replace(pg_catalog.pg_get_function_result(pp.oid), 'character varying', 'varchar') ||  	CASE WHEN pa.aggfinalfn <> 0 THEN ',' || chr(10) || '  FINALFUNC = ' || pa.aggfinalfn ELSE '' END ||	CASE WHEN pa.agginitval <> '' THEN ',' || chr(10) || '  INITCOND = ' || pa.agginitval ELSE '' END ||	COALESCE(',' || chr(10) || '  SORTOP = ' || po.oprname, '') || 	chr(10) || ');'FROM pg_catalog.pg_aggregate AS pa    JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pa.aggfnoid    JOIN pg_catalog.pg_namespace AS pn         ON pn.oid = pp.pronamespace	LEFT JOIN pg_catalog.pg_operator AS po     	ON pa.aggsortop = po.oidWHERE	pn.nspname = :SCHEMA_NAME	AND pp.proname = :OBJECT_NAMEUNION ALLSELECT 'Code of external routine "'|| routine_name ||'"('|| routine_definition ||') is not available'|| chr(10)FROM information_schema.routinesWHERE    routine_schema = :SCHEMA_NAME    AND routine_name = :OBJECT_NAME	AND not (external_language in ('SQL', 'PLPGSQL'))	AND routine_definition <> 'aggregate_dummy'      UNION ALL    SELECT 	'CREATE TRIGGER "' || trigger_name || '" ' || action_timing || ' ' ||	string_agg(event_manipulation, ' OR ') || 	' ON "' || event_object_schema || '"."' || event_object_table || '"' || chr(10) || 	'FOR EACH ' || action_orientation || ' ' || action_statement	FROM 	information_schema.triggersWHERE	event_object_schema = :SCHEMA_NAME	AND trigger_name = :OBJECT_NAMEGROUP BY	event_object_schema, 	event_object_table, 	trigger_name,  action_timing,	action_statement, action_orientationUNION ALL	SELECT 'CREATE SEQUENCE "' || s.sequence_schema || '"."' || s.sequence_name || '"' || CHR(10) ||   'INCREMENT ' || increment || CHR(10) ||   CASE WHEN s.minimum_value = s.start_value THEN 'NO MINVALUE' ELSE 'MINVALUE ' || s.minimum_value END || CHR(10) ||  CASE WHEN s.maximum_value = '9223372036854775807' THEN 'NO MAXVALUE' ELSE 'MAXVALUE ' || s.maximum_value END || CHR(10) ||   'START WITH ' || s.start_value || CHR(10) ||  CASE s.cycle_option WHEN 'YES' THEN 'CYCLE' ELSE 'NO CYCLE' END ||   CASE WHEN a.attname IS NULL THEN '' ELSE CHR(10) || 'OWNED BY ' || t.relname || '.' || a.attname END || ';' FROM information_schema.sequences AS s    JOIN pg_catalog.pg_class AS c       ON c.relkind = 'S'       AND c.relname = s.sequence_name    JOIN pg_catalog.pg_namespace AS n         ON n.oid = c.relnamespace         AND n.nspname = s.sequence_schema     LEFT JOIN pg_catalog.pg_depend AS d        on d.refobjid = c.oid        AND d.deptype = 'n'     LEFT JOIN pg_catalog.pg_attrdef AS ad        ON ad.oid = d.objid     LEFT JOIN pg_catalog.pg_class AS t        ON t.relnamespace = c.relnamespace        AND t.oid = ad.adrelid     LEFT JOIN pg_catalog.pg_attribute AS a        ON a.attnum = ad.adnum        AND a.attrelid = t.oid        AND a.attnum > 0 WHERE c.oid = :OBJECT_IDLIMIT 1
minVer=589825

[queries.124]
enabled=1
caption=DDL Code (DB2 UDB)
export=1
dbType=3
queryType=8
queryText=select	case external_action	when 'E' then value(text,'/* Code of this external procedure/function is not available */') 	else text 	endfrom	syscat.routineswhere	routineschema = :SCHEMA_NAMEand specificname = :OBJECT_NAMEunion allselect	textfrom	syscat.viewswhere	viewschema = :SCHEMA_NAMEand viewname = :OBJECT_NAMEunion allselect	textfrom	syscat.triggerswhere	trigschema = :SCHEMA_NAMEand trigname = :OBJECT_NAMEunion allSELECT	'CREATE ALIAS "' || TABSCHEMA || '"."' || TABNAME || '" FOR "' || BASE_TABSCHEMA || '"."' || BASE_TABNAME || '"'FROM	SYSCAT.TABLESWHERE	TABSCHEMA = :SCHEMA_NAMEAND TABNAME = :OBJECT_NAMEAND TYPE = 'A'union allSELECT	'CREATE ALIAS "' || SEQSCHEMA || '"."' || SEQNAME || '" FOR SEQUENCE "' || BASE_SEQSCHEMA || '"."' || BASE_SEQNAME || '"'FROM	SYSCAT.SEQUENCESWHERE	SEQSCHEMA = :SCHEMA_NAMEAND SEQNAME = :OBJECT_NAMEAND SEQTYPE = 'A'union allSELECT	'CREATE ALIAS "' || MODULESCHEMA || '"."' || MODULENAME || '" FOR MODULE "' || BASE_MODULESCHEMA || '"."' || BASE_MODULENAME || '"'FROM	SYSCAT.MODULESWHERE	MODULESCHEMA = :SCHEMA_NAMEAND MODULENAME = :OBJECT_NAMEAND MODULETYPE = 'A'union allSELECT 'CREATE SEQUENCE "' || SEQSCHEMA || '"."' || SEQNAME || '"' || CHR(10) ||	'  START WITH '   || "START" || CHR(10) ||	'  INCREMENT BY ' || "INCREMENT" || CHR(10) ||	'  MINVALUE '     || "MINVALUE" || CHR(10) ||	'  MAXVALUE '     || "MAXVALUE" || CHR(10) ||	'  CACHE '        || "CACHE" || CHR(10) ||	'  ' || CASE WHEN CYCLE = 'Y' THEN 'CYCLE' ELSE 'NO CYCLE' ENDFROM syscat.SEQUENCESWHERE SEQNAME = :OBJECT_NAME AND SEQSCHEMA = :SCHEMA_NAMEAND DEFINERTYPE = 'U'AND SEQTYPE <> 'A'union allSELECT 'CREATE TYPE "' || TYPESCHEMA || '"."' || TYPENAME || '" AS ' ||    CASE    WHEN METATYPE IN ('T', 'A', 'L') THEN        SOURCENAME ||        CASE        WHEN SOURCENAME IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',                'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN            '(' || LENGTH || ')'        WHEN SOURCENAME IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN            CASE WHEN "LENGTH" <> 5 OR SCALE <> 0 THEN            '(' || LENGTH || CASE WHEN SCALE <> 0 THEN ', ' || SCALE ELSE '' END || ')'            ELSE ''            END        ELSE            ''        END    ELSE ''    END ||    CASE METATYPE    WHEN 'L' THEN ' ARRAY[' || ARRAYINDEXTYPENAME ||        CASE        WHEN ARRAYINDEXTYPENAME IN ('VARCHAR', 'CHARACTER VARYING', 'CHAR VARYING') THEN            '(' || RTRIM(ARRAYINDEXTYPELENGTH) || ')'        ELSE ''        END        || ']'    WHEN 'A' THEN ' ARRAY[' || CASE WHEN ARRAY_LENGTH <> 2147483647 THEN RTRIM(ARRAY_LENGTH) ELSE '' END  || ']'    WHEN 'C' THEN COALESCE(SOURCENAME || ' ', '') || 'CURSOR'    WHEN 'F' THEN ' ROW (' || CHR(10) ||     	(			select				LISTAGG('  ' || fieldname || ' ' || fieldtypename ||				CASE				WHEN fieldtypename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',						'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN					'(' || LENGTH || ')'				WHEN fieldtypename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN					'(' || LENGTH || ', ' || SCALE || ')'				ELSE					''				END, ', ') WITHIN GROUP (ORDER BY a.ORDINAL)			from				syscat.rowfields a    		WHERE    			a.TYPESCHEMA = dt.TYPESCHEMA AND a.TYPENAME = dt.TYPENAME    	) || CHR(10) || ')'    WHEN 'R' THEN ' (' || CHR(10) ||     	(    		select				LISTAGG('  ' || attr_name || ' ' || attr_typename ||				CASE				WHEN attr_typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',						'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN					'(' || LENGTH || ')'				WHEN attr_typename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN					'(' || LENGTH || ', ' || SCALE || ')'				ELSE					''				END,', ' || CHR(10)) WITHIN GROUP (ORDER BY a.ORDINAL)			from				syscat.attributes a    		WHERE    			a.TYPESCHEMA = dt.TYPESCHEMA AND a.TYPENAME = dt.TYPENAME    	) || CHR(10) || ') MODE DB2SQL' ||     	COALESCE(CHR(10) || CHR(10) ||    	(			select				LISTAGG('    METHOD ' || routinename || '(' || 				COALESCE(					(select						LISTAGG( COALESCE(p.PARMNAME || ' ', '') ||						CASE WHEN p.typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 								'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')							THEN RTRIM(p.typename) || '(' || RTRIM(CHAR(p.LENGTH)) || ')'							ELSE p.typename 						END, ',') WITHIN GROUP (ORDER BY p.ORDINAL)					from						syscat.routineparms p					where 						p.routineschema = r.ROUTINESCHEMA						and p.specificname = r.SPECIFICNAME						AND p.ORDINAL > 1)				, '') || ')' || 				COALESCE(CHR(10) || '    RETURNS ' || 					(						select							CASE WHEN p.typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 									'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')								THEN RTRIM(p.typename) || '(' || RTRIM(CHAR(p.LENGTH)) || ')'								ELSE p.typename 							END						from							syscat.routineparms p						where 							p.routineschema = r.ROUTINESCHEMA							and p.specificname = r.SPECIFICNAME							AND p.ORDINAL = 0					), '') || 				CHR(10) || '    LANGUAGE ' || RTRIM(r."LANGUAGE") ||				CASE WHEN r."DETERMINISTIC" = 'Y' THEN 	CHR(10) || '    DETERMINISTIC' ELSE '' END				, ',' || CHR(10) || CHR(10))			from				syscat.routines r			where    			r.SUBJECT_TYPESCHEMA = dt.TYPESCHEMA     				AND r.SUBJECT_TYPENAME = dt.TYPENAME					and	origin in ('Q','E')    	), '')    ELSE ''    END ||     COALESCE(CHR(10) || '$$$' ||     (		select			LISTAGG(CHR(10) || CHR(10) || text			, CHR(10) || '$$$')		from			syscat.routines r		where			r.SUBJECT_TYPESCHEMA = dt.TYPESCHEMA 				AND r.SUBJECT_TYPENAME = dt.TYPENAME				and	origin in ('Q','E')    ), '')FROM SYSCAT.DATATYPES dt WHERE METATYPE <> 'S'and	typeschema = :SCHEMA_NAMEand	typename = :OBJECT_NAMEunion allSELECT 'CREATE MODULE "' || m.MODULESCHEMA || '"."' || m.MODULENAME || '"' || CHR(10) || '$$$' || 	COALESCE((		SELECT 			CHR(10) || CHR(10) || LISTAGG(TEXT, CHR(10) || '$$$' || CHR(10) || CHR(10)) || CHR(10) || '$$$' 		FROM SYSCAT.ROUTINES AS r		WHERE r.ROUTINESCHEMA = m.MODULESCHEMA 			AND r.ROUTINEMODULENAME = m.MODULENAME 	), '') || 	COALESCE((		SELECT 			CHR(10) || CHR(10) || 			LISTAGG(				'ALTER MODULE "' || m.MODULESCHEMA || '"."' || m.MODULENAME || 				'" ADD VARIABLE "' || v.VARNAME || '" ' ||				RTRIM(v.TYPENAME) ||  					RTRIM(CASE 						WHEN RTRIM(v.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING')							THEN '(' || RTRIM(CHAR(v.LENGTH)) || COALESCE(' ' || v.TYPESTRINGUNITS, '') || ')' ||								CASE WHEN v.CODEPAGE = 0 THEN ' FOR BIT DATA' ELSE '' END 						WHEN RTRIM(v.TYPENAME) IN ('CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',							'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')							THEN '(' || RTRIM(CHAR(v.LENGTH)) || COALESCE(' ' || v.TYPESTRINGUNITS, '') || ')'						WHEN RTRIM(v.TYPENAME) IN ('BLOB', 'BINARY LARGE OBJECT', 							'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',							'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',							'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',							'FLOAT', 'DECFLOAT')							THEN '(' || RTRIM(CHAR(v.LENGTH)) || ')'						WHEN RTRIM(v.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC')							THEN '(' || RTRIM(CHAR(v.LENGTH)) || ', ' || RTRIM(CHAR(v.SCALE)) || ')' 						ELSE ''					END) 			, CHR(10) || '$$$' || CHR(10) || CHR(10)) || CHR(10) || '$$$'		FROM SYSCAT.VARIABLES AS v		WHERE v.VARSCHEMA = m.MODULESCHEMA 			AND v.VARMODULENAME = m.MODULENAME 	), '') ||	COALESCE((		SELECT 			CHR(10) || CHR(10) || 			LISTAGG(				'ALTER MODULE "' || m.MODULESCHEMA || '"."' || m.MODULENAME || 				'" ADD TYPE "' || dt.TYPENAME || '" AS ' ||				CASE				WHEN METATYPE IN ('T', 'A', 'L') THEN					SOURCENAME ||					CASE					WHEN SOURCENAME IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',							'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN						'(' || LENGTH || ')'					WHEN SOURCENAME IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN						CASE WHEN "LENGTH" <> 5 OR SCALE <> 0 THEN						'(' || LENGTH || CASE WHEN SCALE <> 0 THEN ', ' || SCALE ELSE '' END || ')'						ELSE ''						END					ELSE						''					END				ELSE ''				END ||				CASE METATYPE				WHEN 'L' THEN ' ARRAY[' || ARRAYINDEXTYPENAME ||					CASE					WHEN ARRAYINDEXTYPENAME IN ('VARCHAR', 'CHARACTER VARYING', 'CHAR VARYING') THEN						'(' || RTRIM(ARRAYINDEXTYPELENGTH) || ')'					ELSE ''					END					|| ']'				WHEN 'A' THEN ' ARRAY[' || CASE WHEN ARRAY_LENGTH <> 2147483647 THEN RTRIM(ARRAY_LENGTH) ELSE '' END  || ']'				WHEN 'C' THEN COALESCE(SOURCENAME || ' ', '') || 'CURSOR'				WHEN 'F' THEN ' ROW (' || CHR(10) || 					(						select							LISTAGG('  ' || fieldname || ' ' || fieldtypename ||							CASE							WHEN fieldtypename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',									'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN								'(' || LENGTH || ')'							WHEN fieldtypename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN								'(' || LENGTH || ', ' || SCALE || ')'							ELSE								''							END, ', ') WITHIN GROUP (ORDER BY a.ORDINAL)						from							syscat.rowfields a						WHERE							a.TYPESCHEMA = dt.TYPESCHEMA AND a.TYPENAME = dt.TYPENAME					) || CHR(10) || ')'				WHEN 'R' THEN ' (' || CHR(10) || 					(						select							LISTAGG('  ' || attr_name || ' ' || attr_typename ||							CASE							WHEN attr_typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',									'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN								'(' || LENGTH || ')'							WHEN attr_typename IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN								'(' || LENGTH || ', ' || SCALE || ')'							ELSE								''							END,', ' || CHR(10)) WITHIN GROUP (ORDER BY a.ORDINAL)						from							syscat.attributes a						WHERE							a.TYPESCHEMA = dt.TYPESCHEMA AND a.TYPENAME = dt.TYPENAME					) || CHR(10) || ') MODE DB2SQL' || 					COALESCE(CHR(10) || CHR(10) ||					(						select							LISTAGG('    METHOD ' || routinename || '(' || 							COALESCE(								(select									LISTAGG( COALESCE(p.PARMNAME || ' ', '') ||									CASE WHEN p.typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 											'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')										THEN RTRIM(p.typename) || '(' || RTRIM(CHAR(p.LENGTH)) || ')'										ELSE p.typename 									END, ',') WITHIN GROUP (ORDER BY p.ORDINAL)								from									syscat.routineparms p								where 									p.routineschema = r.ROUTINESCHEMA									and p.specificname = r.SPECIFICNAME									AND p.ORDINAL > 1)							, '') || ')' || 							COALESCE(CHR(10) || '    RETURNS ' || 								(									select										CASE WHEN p.typename IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 												'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')											THEN RTRIM(p.typename) || '(' || RTRIM(CHAR(p.LENGTH)) || ')'											ELSE p.typename 										END									from										syscat.routineparms p									where 										p.routineschema = r.ROUTINESCHEMA										and p.specificname = r.SPECIFICNAME										AND p.ORDINAL = 0								), '') || 							CHR(10) || '    LANGUAGE ' || RTRIM(r."LANGUAGE") ||							CASE WHEN r."DETERMINISTIC" = 'Y' THEN 	CHR(10) || '    DETERMINISTIC' ELSE '' END							, ',' || CHR(10) || CHR(10))						from							syscat.routines r						where							r.SUBJECT_TYPESCHEMA = dt.TYPESCHEMA 								AND r.SUBJECT_TYPENAME = dt.TYPENAME								and	origin in ('Q','E')					), '')				ELSE ''				END 			, CHR(10) || '$$$' || CHR(10) || CHR(10)) || CHR(10) || '$$$'		FROM SYSCAT.DATATYPES dt 		WHERE METATYPE <> 'S'			AND	dt.TYPESCHEMA = m.MODULESCHEMA			AND	dt.TYPEMODULENAME = m.MODULENAME	), '')FROM SYSCAT.MODULES AS mWHERE m.MODULESCHEMA = :SCHEMA_NAME	AND m.MODULENAME = :OBJECT_NAME	AND m.MODULETYPE = 'M'UNION ALLSELECT  SOURCEHEADER || CHR(10) || '$$$' || CHR(10) || CHR(10) || SOURCEBODY || CHR(10) || '$$$' FROM SYSIBM.SYSMODULESWHERE MODULETYPE = 'P'	AND MODULESCHEMA = :SCHEMA_NAME	AND MODULENAME = :OBJECT_NAME
minVer=589832

[queries.125]
enabled=1
caption=Objects (DB2 UDB)
export=1
dbType=3
queryType=3
queryText=select 	tabname,	case 		when type in ('V','W') then 'VI' 		when type = 'S' then 'MA'		when type = 'A' then 			case when tabschema = 'SYSPUBLIC' then '|T' else '^T' end		else 'TA' 	end, 	create_time,	alter_timefrom	syscat.tableswhere	tabschema = :SCHEMA_NAME or tabschema = 'SYSPUBLIC' and type = 'A'union allselect	routinename || X'00' || specificname,	case		when functiontype = 'T' then 'TF'		when routinetype = 'F' then 'FU' 		else 'PR' 	end, 	create_time,	alter_time from	syscat.routineswhere	routineschema = :SCHEMA_NAMEand routinetype in ('F','P')and coalesce(length(rtrim(language)), 0) > 0and routinemodulename is NULLunion allselect	seqname, 	CASE seqtype	WHEN 'A' THEN 		case when seqschema = 'SYSPUBLIC' then '|I' else '^I' end	ELSE 'SQ'	END,	create_time,	alter_time from	syscat.sequenceswhere	origin = 'U'	and (seqschema = :SCHEMA_NAME or seqschema = 'SYSPUBLIC' and seqtype = 'A')union allselect	typename || X'00' ||    CASE    WHEN METATYPE = 'C' THEN COALESCE(SOURCENAME || ' ', '') || 'CURSOR'    WHEN METATYPE IN ('T', 'L', 'A') THEN        SOURCENAME ||        CASE        WHEN SOURCENAME IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB',                'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC') THEN            '(' || LENGTH || ')'        WHEN SOURCENAME IN ('DECIMAL', 'DEC', 'NUMERIC', 'NUM') THEN            '(' || LENGTH || ', ' || SCALE || ')'        ELSE            ''        END    ELSE ''    END ||    CASE METATYPE    WHEN 'L' THEN ' ARRAY[' || ARRAYINDEXTYPENAME || ']'    WHEN 'A' THEN ' ARRAY[' || ARRAY_LENGTH || ']'    ELSE ''    END,	case metatype	   when 'A'  then 'AR'	   when 'L' then 'AR'	   when 'T' then 'TD'	   when 'F' then 'TT'	   else 'TY'	end,	create_time,	alter_timefrom	syscat.datatypeswhere	typeschema = :SCHEMA_NAME	and typemodulename IS NULL and metatype <> 'S'union allselect	trigname,	'TR',	create_time,	create_timefrom	syscat.triggerswhere	trigschema = :SCHEMA_NAME	union allSELECT 	MODULENAME, 	CASE MODULETYPE	WHEN 'A' THEN  		case when MODULESCHEMA = 'SYSPUBLIC' then '|C' else '^C' end	ELSE 'PA'	END, 	CREATE_TIME, 	CREATE_TIME FROM SYSCAT.MODULESWHERE MODULESCHEMA = :SCHEMA_NAME OR MODULESCHEMA = 'SYSPUBLIC' AND MODULETYPE = 'A'
minVer=589831

[queries.126]
enabled=1
caption=Packages (DB2 UDB)
export=1
dbType=3
queryType=6
queryText=SELECT  	ROUTINENAME || X'00' || SPECIFICNAME, 	CASE		WHEN FUNCTIONTYPE = 'T' THEN 'TF'		WHEN ROUTINETYPE = 'F' THEN 'FU' 		ELSE 'PR' 	END, 	CREATE_TIME, 	ALTER_TIMEFROM SYSCAT.ROUTINESWHERE ROUTINESCHEMA = :SCHEMA_NAME	AND ROUTINEMODULENAME = :OBJECT_NAME	AND ORIGIN IN ('E', 'Q')UNION ALLSELECT	TYPENAME,	'Pt',	CREATE_TIME,	ALTER_TIME FROM SYSCAT.DATATYPESWHERE TYPESCHEMA = :SCHEMA_NAME	AND TYPEMODULENAME = :OBJECT_NAMEUNION ALLSELECT	VARNAME,	'Pv',	CREATE_TIME,	CREATE_TIME FROM SYSCAT.VARIABLESWHERE VARSCHEMA = :SCHEMA_NAME	AND VARMODULENAME = :OBJECT_NAME
minVer=0

[queries.127]
enabled=1
caption=Synonyms (DB2 UDB)
export=1
dbType=3
queryType=9
queryText=SELECT 	BASE_TABNAME, 'TA', RTRIM(BASE_TABSCHEMA)FROM 	SYSCAT.TABLESWHERE 	TYPE = 'A'	AND (TABSCHEMA = :SCHEMA_NAME OR TABSCHEMA = 'SYSPUBLIC')	AND TABNAME = :OBJECT_NAME	UNION ALLSELECT 	BASE_SEQNAME, 'SQ', RTRIM(BASE_SEQSCHEMA)FROM 	SYSCAT.SEQUENCESWHERE 	SEQTYPE = 'A'	AND (SEQSCHEMA = :SCHEMA_NAME OR SEQSCHEMA = 'SYSPUBLIC') 	AND SEQNAME = :OBJECT_NAME	UNION ALLSELECT 	BASE_MODULENAME, 'PA', RTRIM(BASE_MODULESCHEMA)FROM 	SYSCAT.MODULESWHERE 	MODULETYPE = 'A'	AND (MODULESCHEMA = :SCHEMA_NAME OR MODULESCHEMA = 'SYSPUBLIC')	AND MODULENAME = :OBJECT_NAME
minVer=589831

[queries.128]
enabled=1
caption=Record Count (DB2 iSeries)
export=1
dbType=3
queryType=12
queryText=SELECT NUMBER_ROWSFROM QSYS2.SYSTABLESSTATWHERE TABLE_SCHEMA = :SCHEMA_NAMEAND TABLE_NAME = :OBJECT_NAME 
minVer=0

[queries.129]
enabled=1
caption=DDL Code (PostgreSQL)
export=1
dbType=7
queryType=8
queryText=select 'CREATE VIEW "' || table_schema || '"."' || table_name || '" AS' || chr(10) || view_definitionfrom information_schema.viewswhere     table_schema = :SCHEMA_NAME     and table_name = :OBJECT_NAMEUNION ALLSELECT	'CREATE FUNCTION "' || pn.nspname || '"."' || pp.proname || '"(' ||    replace(pg_catalog.pg_get_function_arguments(pp.oid), 'character varying', 'varchar')  ||	')' || CHR(10) || '  RETURNS ' || replace(pg_catalog.pg_get_function_result(pp.oid), 'character varying', 'varchar') ||	' AS' || CHR(10) || '$$' || pp.prosrc  	|| '$$' || CHR(10) || 'LANGUAGE ' || pl.lanname || ';'FROM pg_catalog.pg_proc AS pp    JOIN pg_catalog.pg_namespace AS pn         ON pn.oid = pp.pronamespace    JOIN pg_catalog.pg_language AS pl         ON pl.oid = pp.prolangWHERE	pn.nspname = :SCHEMA_NAME	AND pp.proname = :OBJECT_NAME	AND pl.lanname in ('sql', 'plpgsql') 	AND pp.prosrc <> 'aggregate_dummy'	UNION ALLSELECT	'CREATE AGGREGATE "' || pn.nspname || '"."' || pp.proname || '"(' ||    replace(pg_catalog.pg_get_function_arguments(pp.oid), 'character varying', 'varchar') || ')' || chr(10) || '(' || chr(10) || 	'  SFUNC = ' || pa.aggtransfn || ',' || chr(10) ||	'  STYPE = ' || replace(pg_catalog.pg_get_function_result(pp.oid), 'character varying', 'varchar') ||  	CASE WHEN pa.aggfinalfn <> 0 THEN ',' || chr(10) || '  FINALFUNC = ' || pa.aggfinalfn ELSE '' END ||	CASE WHEN pa.agginitval <> '' THEN ',' || chr(10) || '  INITCOND = ' || pa.agginitval ELSE '' END ||	COALESCE(',' || chr(10) || '  SORTOP = ' || po.oprname, '') || 	chr(10) || ');'FROM pg_catalog.pg_aggregate AS pa    JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pa.aggfnoid    JOIN pg_catalog.pg_namespace AS pn         ON pn.oid = pp.pronamespace	LEFT JOIN pg_catalog.pg_operator AS po     	ON pa.aggsortop = po.oidWHERE	pn.nspname = :SCHEMA_NAME	AND pp.proname = :OBJECT_NAMEUNION ALLSELECT 'Code of external routine "'|| routine_name ||'"('|| routine_definition ||') is not available'|| chr(10)FROM information_schema.routinesWHERE    routine_schema = :SCHEMA_NAME    AND routine_name = :OBJECT_NAME	AND not (external_language in ('SQL', 'PLPGSQL'))      	AND routine_definition <> 'aggregate_dummy'      UNION ALL    SELECT DISTINCT	'CREATE TRIGGER "' || t.trigger_name || '" ' || condition_timing || ' ' ||	array_to_string(ARRAY(		SELECT event_manipulation::CHAR VARYING FROM information_schema.triggers t1		WHERE t1."trigger_schema" = t."trigger_schema" AND t1."trigger_name" = t."trigger_name" 	), ' OR ') || 	' ON "' || t.event_object_schema || '"."' || t.event_object_table || '"' || chr(10) || 	'FOR EACH ' || t.action_orientation || ' ' || t.action_statement	FROM 	information_schema.triggers tWHERE	t.event_object_schema = :SCHEMA_NAME	AND t.trigger_name = :OBJECT_NAMELIMIT 1
minVer=524292

[queries.130]
enabled=1
caption=Objects (PostgreSQL)
export=1
dbType=7
queryType=3
queryText=SELECT relname,       CASE relkind       	WHEN 'r' THEN 'TA'       	WHEN 'f' THEN 'TA'       	WHEN 'S' THEN 'SQ'       	WHEN 'v' THEN 'VI'		WHEN 'm' THEN 'MA'       END ,       oid,       NULL::TIMESTAMP,       NULL::TIMESTAMPFROM   pg_catalog.pg_classWHERE  relnamespace = :SCHEMA_ID       AND relkind IN ('r', 'f', 'v', 'S', 'm')UNION ALLSELECT p.proname,       CASE format_type (t.oid, NULL)       	WHEN 'trigger' 	THEN 'PC'       	WHEN 'void' 	THEN 'PR'       	WHEN 'record' 	THEN 'FT'       ELSE 				 'FU'       END ,       p.oid,       NULL::TIMESTAMP,       NULL::TIMESTAMPFROM   pg_catalog.pg_proc          p,       pg_catalog.pg_type          t,       pg_catalog.pg_namespace     ntWHERE  pronamespace = :SCHEMA_ID       AND t.oid = p.prorettype       AND t.typnamespace = nt.oidUNION ALLSELECT t.tgname,       'TR',       t.oid,       NULL::TIMESTAMP,       NULL::TIMESTAMPFROM   pg_catalog.pg_trigger     t,       pg_catalog.pg_class       cWHERE  t.tgrelid = c.oid        AND c.relnamespace = :SCHEMA_ID
minVer=0

[queries.131]
enabled=1
caption=Columns (Amazon Redshift)
export=1
dbType=8
queryType=4
queryText=SELECT 'oid', 'oid', 'NP', 0FROM pg_catalog.pg_class cWHERE c.oid = $OBJECT_ID$::int4    AND c.relhasoids UNION ALLSELECT    a.attname, 	CASE		WHEN (t.typtype = 'd') THEN		t.typname || ' - ' ||		CASE			WHEN (nbt.nspname = 'pg_catalog') THEN replace(format_type(t.typbasetype, t.typtypmod), 'character varying', 'varchar')			ELSE nbt.nspname || '.' || bt.typname 		END		ELSE		CASE			WHEN (nt.nspname = 'pg_catalog') THEN replace(format_type(a.atttypid, a.atttypmod), 'character varying', 'varchar')			ELSE nt.nspname || '.' || t.typname		END	END,    CASE WHEN pg_get_expr(ad.adbin, ad.adrelid) LIKE 'nextval(%' THEN 'A' ELSE     	CASE WHEN (a.attnotnull OR ((t.typtype = 'd'::"char") AND t.typnotnull)) THEN 'N' ELSE 'Y' END     END,     a.attnumFROM ((pg_attribute a     LEFT JOIN pg_attrdef ad ON (a.attrelid = ad.adrelid) AND (a.attnum = ad.adnum))     JOIN (pg_type t     JOIN pg_namespace nt ON t.typnamespace = nt.oid) ON a.atttypid = t.oid)     LEFT JOIN (pg_type bt     JOIN pg_namespace nbt ON bt.typnamespace = nbt.oid) ON (t.typtype = 'd'::"char") AND (t.typbasetype = bt.oid)WHERE a.attnum > 0	AND a.attrelid = $OBJECT_ID$::int4	  ORDER BY    4
minVer=0

[queries.132]
enabled=1
caption=Arguments (Greenplum)
export=1
dbType=12
queryType=5
queryText=select '' as parameter_name,	 replace(CASE WHEN data_type = 'USER-DEFINED' AND udt_name IS NOT NULL				THEN type_udt_schema || '.' || type_udt_name				ELSE REPLACE(data_type, 'character varying', 'varchar')			END, '"', '') as data_type,	 'R' as parameter_mode,	 0 as ordinal_positionfrom information_schema.routineswhere specific_name = :OBJECT_NAME || '_' || (:OBJECT_ID)::text	  and not data_type in ('void', 'trigger', 'record')union allselect coalesce(p.parameter_name, 'unnamed parameter ' || p.ordinal_position) as parameter_name,	 replace(CASE WHEN p.data_type = 'USER-DEFINED' AND p.udt_name IS NOT NULL				THEN p.udt_schema || '.' || p.udt_name				ELSE REPLACE(p.data_type, 'character varying', 'varchar')			END, '"', ''),	 case when p.parameter_mode = 'OUT' then 'O'		  when p.parameter_mode = 'INOUT' then 'U'		  else 'I' 	 end,	 p.ordinal_positionfrom information_schema.parameters p   join information_schema.routines r	  on p.specific_name = r.specific_namewhere r.specific_name = :OBJECT_NAME || '_' || (:OBJECT_ID)::text	  and (not p.parameter_mode in ('OUT', 'INOUT') or r.data_type <> 'record')order by 4
minVer=0

[queries.133]
enabled=1
caption=Columns (Greenplum)
export=1
dbType=12
queryType=4
queryText=SELECT 'oid', 'oid', 'NP', 0FROM pg_catalog.pg_class cWHERE c.oid = :OBJECT_ID    AND c.relhasoids UNION ALLSELECT    a.attname, 	CASE		WHEN (t.typtype = 'd') THEN		t.typname || ' - ' ||		CASE			WHEN (nbt.nspname = 'pg_catalog') THEN replace(format_type(t.typbasetype, t.typtypmod), 'character varying', 'varchar')			ELSE nbt.nspname || '.' || bt.typname 		END		ELSE		CASE			WHEN (nt.nspname = 'pg_catalog') THEN replace(format_type(a.atttypid, a.atttypmod), 'character varying', 'varchar')			ELSE nt.nspname || '.' || t.typname		END	END,    CASE WHEN pg_get_expr(ad.adbin, ad.adrelid) LIKE 'nextval(%' THEN 'A' ELSE     	CASE WHEN (a.attnotnull OR ((t.typtype = 'd'::"char") AND t.typnotnull)) THEN 'N' ELSE 'Y' END     END,     a.attnumFROM ((pg_attribute a     LEFT JOIN pg_attrdef ad ON (a.attrelid = ad.adrelid) AND (a.attnum = ad.adnum))     JOIN (pg_type t     JOIN pg_namespace nt ON t.typnamespace = nt.oid) ON a.atttypid = t.oid)     LEFT JOIN (pg_type bt     JOIN pg_namespace nbt ON bt.typnamespace = nbt.oid) ON (t.typtype = 'd'::"char") AND (t.typbasetype = bt.oid)WHERE a.attnum > 0	AND a.attrelid = :OBJECT_ID	UNION ALLSELECT p.parameter_name,	 replace(CASE WHEN p.data_type = 'USER-DEFINED' AND p.udt_name IS NOT NULL				THEN p.udt_schema || '.' || p.udt_name				ELSE replace(p.data_type, 'character varying', 'varchar')			END, '"', ''),	 '',	 p.ordinal_positionFROM information_schema.parameters p   JOIN information_schema.routines r	  ON p.specific_name = r.specific_nameWHERE r.specific_name = :OBJECT_NAME || '_' || (:OBJECT_ID)::text	  AND r.data_type = 'record' 	  AND p."parameter_mode" = 'OUT'	  ORDER BY    4 
minVer=0

[queries.134]
enabled=1
caption=Columns (Greenplum) + Keys
export=1
dbType=12
queryType=4
queryText=SELECT 'oid', 'oid', 'NP', 0FROM pg_catalog.pg_class cWHERE c.oid = :OBJECT_ID    AND c.relhasoids UNION ALLSELECT    a.attname, 	CASE		WHEN (t.typtype = 'd') THEN		t.typname || ' - ' ||		CASE			WHEN (nbt.nspname = 'pg_catalog') THEN replace(format_type(t.typbasetype, t.typtypmod), 'character varying', 'varchar')			ELSE nbt.nspname || '.' || bt.typname 		END		ELSE		CASE			WHEN (nt.nspname = 'pg_catalog') THEN replace(format_type(a.atttypid, a.atttypmod), 'character varying', 'varchar')			ELSE nt.nspname || '.' || t.typname		END	END,    CASE WHEN pg_get_expr(ad.adbin, ad.adrelid) LIKE 'nextval(%' THEN 'A' ELSE     	CASE WHEN (a.attnotnull OR ((t.typtype = 'd') AND t.typnotnull)) THEN 'N' ELSE 'Y' END     END     || COALESCE(( /* P,F,U */		select max(upper(c.contype))		from pg_constraint c 		WHERE c.contype <> 'c' 			AND a.attnum = ANY(c.conkey)			AND c.conrelid = a.attrelid	        ),' ')    || COALESCE(( /* I */            SELECT max('I')            FROM pg_index i              WHERE i.indrelid = a.attrelid                 AND a.attnum = ANY(i.indkey)        ),' '),    a.attnumFROM ((pg_attribute a     LEFT JOIN pg_attrdef ad ON (a.attrelid = ad.adrelid) AND (a.attnum = ad.adnum))     JOIN (pg_type t     JOIN pg_namespace nt ON t.typnamespace = nt.oid) ON a.atttypid = t.oid)     LEFT JOIN (pg_type bt     JOIN pg_namespace nbt ON bt.typnamespace = nbt.oid) ON (t.typtype = 'd') AND (t.typbasetype = bt.oid)WHERE a.attnum > 0	AND a.attrelid = :OBJECT_ID	UNION ALLSELECT p.parameter_name,	 replace(CASE WHEN p.data_type = 'USER-DEFINED' AND p.udt_name IS NOT NULL				THEN p.udt_schema || '.' || p.udt_name				ELSE replace(p.data_type, 'character varying', 'varchar')			END, '"', ''),	 '',	 p.ordinal_positionFROM information_schema.parameters p   JOIN information_schema.routines r	  ON p.specific_name = r.specific_nameWHERE r.specific_name = :OBJECT_NAME || '_' || (:OBJECT_ID)::text	  AND r.data_type = 'record' 	  AND p."parameter_mode" = 'OUT'	  ORDER BY    4 
minVer=0

[queries.135]
enabled=1
caption=Context (Greenplum)
export=1
dbType=12
queryType=10
queryText=select      case when inet_server_addr() is null then 'localhost' else                 substring( cast(inet_server_addr() as varchar(24)), 1, position('/' in cast(inet_server_addr() as varchar(24))) - 1) end ||             case when inet_server_port() is null then '' else ':' || inet_server_port() end,      user,      current_database(),      current_schema()
minVer=0

[queries.136]
enabled=1
caption=Context (Teradata)
export=1
dbType=11
queryType=10
queryText=select    'noSrv',    USER,    'noDB',    DATABASE
minVer=0

[queries.137]
enabled=1
caption=Databases (Greenplum)
export=1
dbType=12
queryType=1
queryText=select datname, 'DB'from pg_catalog.pg_databasewhere datname not like 'template%'
minVer=0

[queries.138]
enabled=1
caption=DDL Code (Greenplum)
export=1
dbType=12
queryType=8
queryText=select 'CREATE VIEW "' || table_schema || '"."' || table_name || '" AS' || chr(10) || view_definitionfrom information_schema.viewswhere     table_schema = :SCHEMA_NAME     and table_name = :OBJECT_NAMEUNION ALLSELECT	'CREATE FUNCTION "' || routine_schema || '"."' || routine_name || '"(' ||    array_to_string(array(		SELECT COALESCE (p.parameter_name, '') || ' ' || LOWER (p.parameter_mode) || ' ' || REPLACE (p.data_type, '"', '')         FROM information_schema.parameters p		WHERE p.specific_catalog = r.specific_catalog			AND p.specific_schema = r.specific_schema			AND p.specific_name = r.specific_name		ORDER BY p.ordinal_position	), ',')  ||	')' || CHR(10) || '  RETURNS ' || REPLACE (r.data_type, '"', '') ||	' AS' || CHR(10) || '$$' || r.routine_definition  	|| '$$' || CHR(10) || 'LANGUAGE ' || r.external_language || ';'FROM	information_schema.routines rWHERE	r.routine_schema = :SCHEMA_NAME	AND r.routine_name = :OBJECT_NAME	AND r.external_language in ('SQL', 'PLPGSQL') 	AND r.routine_definition <> 'aggregate_dummy'	UNION ALLSELECT	'CREATE AGGREGATE "' || routine_schema || '"."' || routine_name || '"(' ||    array_to_string(array(		SELECT COALESCE (p.parameter_name, '') || ' ' || LOWER (p.parameter_mode) || ' ' || REPLACE (p.data_type, '"', '')         FROM information_schema.parameters p		WHERE p.specific_catalog = r.specific_catalog			AND p.specific_schema = r.specific_schema			AND p.specific_name = r.specific_name		ORDER BY p.ordinal_position	), ',')  ||	')' || chr(10) || '(' || chr(10) || 	'  SFUNC = ' || pa.aggtransfn || ',' || chr(10) ||	'  STYPE = ' || r.data_type ||  	CASE WHEN pa.aggfinalfn <> 0 THEN ',' || chr(10) || '  FINALFUNC = ' || pa.aggfinalfn ELSE '' END ||	CASE WHEN pa.agginitval <> '' THEN ',' || chr(10) || '  INITCOND = ' || pa.agginitval ELSE '' END ||	COALESCE(',' || chr(10) || '  SORTOP = ' || po.oprname, '') || 	chr(10) || ');'FROM	information_schema.routines r	JOIN pg_catalog.pg_aggregate AS pa		ON pa.aggfnoid = substring(r.specific_name, '_([^_]*?)$')::oid	LEFT JOIN pg_catalog.pg_operator AS po     	ON pa.aggsortop = po.oidWHERE	r.routine_schema = :SCHEMA_NAME	AND r.routine_name = :OBJECT_NAMEUNION ALLSELECT 'Code of external routine "'|| routine_name ||'"('|| routine_definition ||') is not available'|| chr(10)FROM information_schema.routinesWHERE    routine_schema = :SCHEMA_NAME    AND routine_name = :OBJECT_NAME	AND not (external_language in ('SQL', 'PLPGSQL'))      	AND routine_definition <> 'aggregate_dummy'      UNION ALL    SELECT DISTINCT	'CREATE TRIGGER "' || t.trigger_name || '" ' || condition_timing || ' ' ||	array_to_string(ARRAY(		SELECT event_manipulation::CHAR VARYING FROM information_schema.triggers t1		WHERE t1."trigger_schema" = t."trigger_schema" AND t1."trigger_name" = t."trigger_name" 	), ' OR ') || 	' ON "' || t.event_object_schema || '"."' || t.event_object_table || '"' || chr(10) || 	'FOR EACH ' || t.action_orientation || ' ' || t.action_statement	FROM 	information_schema.triggers tWHERE	t.event_object_schema = :SCHEMA_NAME	AND t.trigger_name = :OBJECT_NAMELIMIT 1
minVer=0

[queries.139]
enabled=1
caption=Joins (Greenplum)
export=1
dbType=12
queryType=7
queryText=select	fkc.relname as table_name,	fka.attname as fk_column,	pka.attname as pk_column,	fks.nspname,	'P:' || fkcon.connamefrom	pg_catalog.pg_constraint as fkcon	join pg_catalog.pg_constraint as pkcon		on   fkcon.confrelid = pkcon.conrelid		and fkcon.confkey = pkcon.conkey	join pg_catalog.pg_class fkc		on   fkc.oid = fkcon.conrelid	join pg_catalog.pg_class pkc		on   pkc.oid = fkcon.confrelid	join pg_catalog.pg_namespace pks		on   pkcon.connamespace = pks.oid	join pg_catalog.pg_namespace fks		on   fkcon.connamespace = fks.oid	join pg_catalog.pg_attribute fka		on   fka.attnum = fkcon.conkey[1]		and fka.attrelid = fkc.oid	join pg_catalog.pg_attribute pka		on   pka.attnum = pkcon.conkey[1]		and pka.attrelid = pkc.oidwhere pkc.oid = :OBJECT_ID     and fks.oid = pks.oidunion allselect	pkc.relname as table_name,	pka.attname as pk_column,	fka.attname as fk_column,	pks.nspname,	'F:' || fkcon.connamefrom	pg_catalog.pg_constraint as fkcon	join pg_catalog.pg_constraint as pkcon		on   fkcon.confrelid = pkcon.conrelid		and fkcon.confkey = pkcon.conkey	join pg_catalog.pg_class fkc		on   fkc.oid = fkcon.conrelid	join pg_catalog.pg_class pkc		on   pkc.oid = fkcon.confrelid	join pg_catalog.pg_namespace pks		on   pkcon.connamespace = pks.oid	join pg_catalog.pg_namespace fks		on   fkcon.connamespace = fks.oid	join pg_catalog.pg_attribute fka		on   fka.attnum = fkcon.conkey[1]		and fka.attrelid = fkc.oid	join pg_catalog.pg_attribute pka		on   pka.attnum = pkcon.conkey[1]		and pka.attrelid = pkc.oidwhere fkc.oid = :OBJECT_ID     and pks.oid = fks.oidorder by table_name
minVer=0

[queries.140]
enabled=1
caption=Object Info (Greenplum)
export=1
dbType=12
queryType=13
queryText=SELECT '*  Table info *' || chr(10) || 	'Pages allocated: ' || chr(9) || cl.relpages || ' (' || pg_catalog.pg_relation_size('"' || n.nspname || '"."' || cl.relname || '"') / 1024 || ' KB)' FROM pg_catalog.pg_class cl    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespaceWHERE cl.relkind = 'r'    AND cl.oid = :OBJECT_IDUNION ALLSELECT chr(10) || '*  Table comment *' || chr(10) || pg_catalog.obj_description(cl.oid)FROM pg_catalog.pg_class cl    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespaceWHERE cl.relkind = 'r'     AND pg_catalog.obj_description(cl.oid) IS NOT NULL    AND cl.oid = :OBJECT_ID    UNION ALLSELECT chr(10) || '*  Columns'UNION ALLSELECT chr(10) || c.column_name || chr(9) ||  pg_catalog.col_description(cl.oid, c.ordinal_position) FROM information_schema.columns c    JOIN pg_catalog.pg_class cl        ON cl.relkind = 'r'        AND cl.relname = c.table_name    JOIN pg_catalog.pg_namespace n        ON n.oid = cl.relnamespace        AND n.nspname = c.table_schemaWHERE pg_catalog.col_description(cl.oid, c.ordinal_position) IS NOT NULL    AND cl.oid = :OBJECT_ID
minVer=0

[queries.141]
enabled=1
caption=Objects (Greenplum)
export=1
dbType=12
queryType=3
queryText=SELECT relname,       CASE relkind       	WHEN 'r' THEN 'TA'       	WHEN 'f' THEN 'TA'       	WHEN 'S' THEN 'SQ'       	WHEN 'v' THEN 'VI'		WHEN 'm' THEN 'MA'       END ,       oid,       NULL::TIMESTAMP,       NULL::TIMESTAMPFROM   pg_catalog.pg_classWHERE  relnamespace = :SCHEMA_ID       AND relkind IN ('r', 'f', 'v', 'S', 'm')UNION ALLSELECT p.proname,       CASE format_type (t.oid, NULL)       	WHEN 'trigger' 	THEN 'PC'       	WHEN 'void' 	THEN 'PR'       	WHEN 'record' 	THEN 'FT'       ELSE 				 'FU'       END ,       p.oid,       NULL::TIMESTAMP,       NULL::TIMESTAMPFROM   pg_catalog.pg_proc          p,       pg_catalog.pg_type          t,       pg_catalog.pg_namespace     ntWHERE  pronamespace = :SCHEMA_ID       AND t.oid = p.prorettype       AND t.typnamespace = nt.oidUNION ALLSELECT t.tgname,       'TR',       t.oid,       NULL::TIMESTAMP,       NULL::TIMESTAMPFROM   pg_catalog.pg_trigger     t,       pg_catalog.pg_class       cWHERE  t.tgrelid = c.oid        AND c.relnamespace = :SCHEMA_ID
minVer=0

[queries.142]
enabled=1
caption=Record Count (Greenplum)
export=1
dbType=12
queryType=12
queryText=SELECT c.reltuples FROM pg_catalog.pg_class c    JOIN pg_catalog.pg_namespace n        ON n.oid = c.relnamespaceWHERE c.relkind = 'r'     AND c.oid = :OBJECT_ID
minVer=0

[queries.143]
enabled=1
caption=Schemas (Greenplum)
export=1
dbType=12
queryType=2
queryText=SELECT 	nspname, 'SC', oidFROM 	pg_catalog.pg_namespaceWHERE nspname NOT LIKE 'pg\_%'    OR nspname = 'pg_catalog'   UNION ALLSELECT	usename, 'SL', usesysidFROM	pg_catalog.pg_user
minVer=0

[queries.144]
enabled=1
caption=Table Objects (Greenplum)
export=1
dbType=12
queryType=14
queryText=SELECT c."column_name", 'D', c."column_name", c.column_default, 0FROM information_schema.columns cWHERE c.column_default IS NOT NULLAND c.table_schema = :SCHEMA_NAME AND c."table_name" = :OBJECT_NAMEUNION ALLSELECT c."column_name", 'D', c."column_name", d.domain_default, 0FROM information_schema.columns cJOIN information_schema.domains d ON d.domain_catalog = c.domain_catalog AND d.domain_schema = c.domain_schema AND d.domain_name = c.domain_nameWHERE d.domain_default IS NOT NULLAND c.table_schema = :SCHEMA_NAME AND c."table_name" = :OBJECT_NAMEUNION ALLSELECT    tc."constraint_name",    substr (tc.constraint_type, 1, 1),    kcu."column_name",    CASE        WHEN tc.constraint_type = 'FOREIGN KEY' THEN       ( 	         	select ccu.table_schema || '.' || ccu."table_name" || '.' || ccu."column_name"        	FROM information_schema.constraint_column_usage ccu         	WHERE ccu."constraint_catalog" = tc."constraint_catalog"                AND ccu."constraint_schema" = tc."constraint_schema"                AND ccu."constraint_name" = tc."constraint_name"            LIMIT 1        )        ELSE         	cc.check_clause    END,	kcu.ordinal_position FROM    information_schema.table_constraints tc    LEFT JOIN information_schema.check_constraints cc        ON  cc."constraint_catalog" = tc."constraint_catalog"        AND cc."constraint_schema" = tc."constraint_schema"        AND cc."constraint_name" = tc."constraint_name"    LEFT JOIN information_schema.key_column_usage kcu        ON kcu."constraint_catalog" = tc."constraint_catalog"        AND kcu."constraint_schema" = tc."constraint_schema"        AND kcu."constraint_name" = tc."constraint_name"WHERE (cc.check_clause IS NULL OR NOT (cc.check_clause LIKE '%IS NOT NULL'))AND tc.table_schema = :SCHEMA_NAME AND tc."table_name" = :OBJECT_NAMEUNION ALLSELECT  i.relname, 'I',        array_to_string(ARRAY(       SELECT pg_get_indexdef(x.indexrelid, k + 1, true)       FROM generate_series(array_lower(x.indkey, 1), array_upper(x.indkey, 1)) as k       ORDER BY k       ), ', '),        pg_get_indexdef (i.oid),	   0 FROM pg_index x JOIN pg_class c ON c.oid = x.indrelid JOIN pg_class i ON i.oid = x.indexrelidJOIN pg_namespace n ON n.oid = c.relnamespace  WHERE (c.relkind = 'r'::"char") AND (i.relkind = 'i'::"char")AND n.nspname = :SCHEMA_NAME AND c.relname = :OBJECT_NAME  UNION ALLSELECT "trigger_name", 'TR', event_manipulation, '', 0 FROM information_schema.triggersWHERE event_object_schema = :SCHEMA_NAME	AND event_object_table = :OBJECT_NAMEORDER BY 2, 1, 5
minVer=0

[queries.145]
enabled=1
caption=Arguments (Teradata)
export=1
dbType=11
queryType=5
queryText=SELECT	CASE WHEN c.SPParameterType = 'O' AND TRIM(c.ColumnName) = 'RETURN0' THEN '' ELSE TRIM(c.ColumnName) END AS ColumnName,	CASE 		WHEN c.ColumnType IS NULL 		THEN '<resolved at runtime>'		ELSE 	  CASE c.ColumnType		  WHEN 'BF' THEN 'BYTE('            || TRIM(c.ColumnLength) || ')'		  WHEN 'BV' THEN 'VARBYTE('         || TRIM(c.ColumnLength) || ')'		  WHEN 'CF' THEN 'CHARACTER('       || TRIM(c.ColumnLength) || ')'		  WHEN 'CV' THEN 'VARCHAR('         || TRIM(c.ColumnLength) || ')'		  WHEN 'D ' THEN 'DECIMAL('         || TRIM(c.DecimalTotalDigits) || ','											|| TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'DA' THEN 'DATE'		  WHEN 'F ' THEN 'FLOAT'		  WHEN 'I1' THEN 'BYTEINT'		  WHEN 'I2' THEN 'SMALLINT'		  WHEN 'I8' THEN 'BIGINT'		  WHEN 'I ' THEN 'INTEGER'		  WHEN 'AT' THEN 'TIME('            || TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'TS' THEN 'TIMESTAMP'        || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'TZ' THEN 'TIME('            || TRIM(c.DecimalFractionalDigits) || ')' 											|| ' WITH TIME ZONE'		  WHEN 'SZ' THEN 'TIMESTAMP'        || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END 											|| ' WITH TIME ZONE'		  WHEN 'YR' THEN 'INTERVAL YEAR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'YM' THEN 'INTERVAL YEAR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MONTH'		  WHEN 'MO' THEN 'INTERVAL MONTH'   || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'DY' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'DH' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO HOUR'		  WHEN 'DM' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MINUTE'		  WHEN 'DS' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'HR' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 		  WHEN 'HM' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MINUTE'		  WHEN 'HS' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'MI' THEN 'INTERVAL MINUTE'  || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'MS' THEN 'INTERVAL MINUTE'  || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'SC' THEN 'INTERVAL SECOND(' || TRIM(c.DecimalTotalDigits) || ',' 											|| TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'BO' THEN 'BLOB('            || TRIM(c.ColumnLength) || ')'		  WHEN 'CO' THEN 'CLOB('            || TRIM(c.ColumnLength) || ')'		  WHEN 'PD' THEN 'PERIOD(DATE)'     		  WHEN 'PM' THEN 'PERIOD(TIMESTAMP' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ') WITH TIME ZONE'		  WHEN 'PS' THEN 'PERIOD(TIMESTAMP' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ')'		  WHEN 'PT' THEN 'PERIOD(TIME'      || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ')'		  WHEN 'PZ' THEN 'PERIOD(TIME'      || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ') WITH TIME ZONE'		  WHEN 'UT' THEN COALESCE(TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  WHEN '++' THEN 'TD_ANYTYPE'		  WHEN 'N'  THEN 'NUMBER('          || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) = -128 THEN '*' ELSE TRIM(c.DecimalTotalDigits) END											|| CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) IN (0, -128) THEN '' ELSE ',' || TRIM(c.DecimalFractionalDigits) END || ')'		  WHEN 'A1' THEN COALESCE('SYSUDTLIB.' || TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  WHEN 'AN' THEN COALESCE('SYSUDTLIB.' || TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  ELSE '<Unknown> ' || TRIM(c.ColumnType)	  END 	  /* || CASE		  WHEN c.ColumnType IN ('CV', 'CF', 'CO') 		  THEN CASE c.CharType 				  WHEN 1 THEN ' CHARACTER SET LATIN'				  WHEN 2 THEN ' CHARACTER SET UNICODE'				  WHEN 3 THEN ' CHARACTER SET KANJISJIS'				  WHEN 4 THEN ' CHARACTER SET GRAPHIC'				  WHEN 5 THEN ' CHARACTER SET KANJI1'				  ELSE ''			   END		   ELSE ''	     END */	END,	CASE WHEN c.SPParameterType = 'O' AND TRIM(c.ColumnName) = 'RETURN0' THEN 'R' ELSE c.SPParameterType ENDFROM	DBC.ColumnsV AS cWHERE	c.DatabaseName = :SCHEMA_NAMEAND c.TableName = :OBJECT_NAMEORDER BY	c.ColumnId
minVer=0

[queries.146]
enabled=1
caption=Columns (Teradata)
export=1
dbType=11
queryType=4
queryText=SELECT	TRIM(c.ColumnName) AS ColumnName,	CASE 		WHEN c.ColumnType IS NULL 		THEN '<resolved at runtime>'		ELSE 	  CASE c.ColumnType		  WHEN 'BF' THEN 'BYTE('            || TRIM(c.ColumnLength) || ')'		  WHEN 'BV' THEN 'VARBYTE('         || TRIM(c.ColumnLength) || ')'		  WHEN 'CF' THEN 'CHARACTER('       || TRIM(c.ColumnLength) || ')'		  WHEN 'CV' THEN 'VARCHAR('         || TRIM(c.ColumnLength) || ')'		  WHEN 'D ' THEN 'DECIMAL('         || TRIM(c.DecimalTotalDigits) || ','											|| TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'DA' THEN 'DATE'		  WHEN 'F ' THEN 'FLOAT'		  WHEN 'I1' THEN 'BYTEINT'		  WHEN 'I2' THEN 'SMALLINT'		  WHEN 'I8' THEN 'BIGINT'		  WHEN 'I ' THEN 'INTEGER'		  WHEN 'AT' THEN 'TIME('            || TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'TS' THEN 'TIMESTAMP'        || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'TZ' THEN 'TIME('            || TRIM(c.DecimalFractionalDigits) || ')' 											|| ' WITH TIME ZONE'		  WHEN 'SZ' THEN 'TIMESTAMP'        || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END 											|| ' WITH TIME ZONE'		  WHEN 'YR' THEN 'INTERVAL YEAR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'YM' THEN 'INTERVAL YEAR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MONTH'		  WHEN 'MO' THEN 'INTERVAL MONTH'   || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'DY' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'DH' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO HOUR'		  WHEN 'DM' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MINUTE'		  WHEN 'DS' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'HR' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 		  WHEN 'HM' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MINUTE'		  WHEN 'HS' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'MI' THEN 'INTERVAL MINUTE'  || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'MS' THEN 'INTERVAL MINUTE'  || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'SC' THEN 'INTERVAL SECOND(' || TRIM(c.DecimalTotalDigits) || ',' 											|| TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'BO' THEN 'BLOB('            || TRIM(c.ColumnLength) || ')'		  WHEN 'CO' THEN 'CLOB('            || TRIM(c.ColumnLength) || ')'		  WHEN 'PD' THEN 'PERIOD(DATE)'     		  WHEN 'PM' THEN 'PERIOD(TIMESTAMP' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ') WITH TIME ZONE'		  WHEN 'PS' THEN 'PERIOD(TIMESTAMP' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ')'		  WHEN 'PT' THEN 'PERIOD(TIME'      || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ')'		  WHEN 'PZ' THEN 'PERIOD(TIME'      || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ') WITH TIME ZONE'		  WHEN 'UT' THEN COALESCE(TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  WHEN '++' THEN 'TD_ANYTYPE'		  WHEN 'N'  THEN 'NUMBER('          || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) = -128 THEN '*' ELSE TRIM(c.DecimalTotalDigits) END											|| CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) IN (0, -128) THEN '' ELSE ',' || TRIM(c.DecimalFractionalDigits) END || ')'		  WHEN 'A1' THEN COALESCE('SYSUDTLIB.' || TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  WHEN 'AN' THEN COALESCE('SYSUDTLIB.' || TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  ELSE '<Unknown> ' || TRIM(c.ColumnType)	  END 	  /* || CASE		  WHEN c.ColumnType IN ('CV', 'CF', 'CO') 		  THEN CASE c.CharType 				  WHEN 1 THEN ' CHARACTER SET LATIN'				  WHEN 2 THEN ' CHARACTER SET UNICODE'				  WHEN 3 THEN ' CHARACTER SET KANJISJIS'				  WHEN 4 THEN ' CHARACTER SET GRAPHIC'				  WHEN 5 THEN ' CHARACTER SET KANJI1'				  ELSE ''			   END		   ELSE ''	     END */	END,	CASE WHEN c.IdColType = 'GA' THEN 'A' ELSE '' END ||		CASE WHEN Nullable = 'Y' THEN 'Y' ELSE 'N' END || ' 'FROM	DBC.ColumnsV AS cWHERE	c.DatabaseName = :SCHEMA_NAMEAND c.TableName = :OBJECT_NAMEORDER BY	c.ColumnId
minVer=0

[queries.147]
enabled=1
caption=Columns (Teradata) + Keys
export=1
dbType=11
queryType=4
queryText=SELECT	TRIM(c.ColumnName) AS ColumnName,	CASE 		WHEN c.ColumnType IS NULL 		THEN '<resolved at runtime>'		ELSE 	  CASE c.ColumnType		  WHEN 'BF' THEN 'BYTE('            || TRIM(c.ColumnLength) || ')'		  WHEN 'BV' THEN 'VARBYTE('         || TRIM(c.ColumnLength) || ')'		  WHEN 'CF' THEN 'CHARACTER('       || TRIM(c.ColumnLength) || ')'		  WHEN 'CV' THEN 'VARCHAR('         || TRIM(c.ColumnLength) || ')'		  WHEN 'D ' THEN 'DECIMAL('         || TRIM(c.DecimalTotalDigits) || ','											|| TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'DA' THEN 'DATE'		  WHEN 'F ' THEN 'FLOAT'		  WHEN 'I1' THEN 'BYTEINT'		  WHEN 'I2' THEN 'SMALLINT'		  WHEN 'I8' THEN 'BIGINT'		  WHEN 'I ' THEN 'INTEGER'		  WHEN 'AT' THEN 'TIME('            || TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'TS' THEN 'TIMESTAMP'        || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'TZ' THEN 'TIME('            || TRIM(c.DecimalFractionalDigits) || ')' 											|| ' WITH TIME ZONE'		  WHEN 'SZ' THEN 'TIMESTAMP'        || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END 											|| ' WITH TIME ZONE'		  WHEN 'YR' THEN 'INTERVAL YEAR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'YM' THEN 'INTERVAL YEAR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MONTH'		  WHEN 'MO' THEN 'INTERVAL MONTH'   || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'DY' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'DH' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO HOUR'		  WHEN 'DM' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MINUTE'		  WHEN 'DS' THEN 'INTERVAL DAY'     || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'HR' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 		  WHEN 'HM' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO MINUTE'		  WHEN 'HS' THEN 'INTERVAL HOUR'    || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'MI' THEN 'INTERVAL MINUTE'  || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END		  WHEN 'MS' THEN 'INTERVAL MINUTE'  || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalTotalDigits) || ')' ELSE '' END 											|| ' TO SECOND' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END		  WHEN 'SC' THEN 'INTERVAL SECOND(' || TRIM(c.DecimalTotalDigits) || ',' 											|| TRIM(c.DecimalFractionalDigits) || ')'		  WHEN 'BO' THEN 'BLOB('            || TRIM(c.ColumnLength) || ')'		  WHEN 'CO' THEN 'CLOB('            || TRIM(c.ColumnLength) || ')'		  WHEN 'PD' THEN 'PERIOD(DATE)'     		  WHEN 'PM' THEN 'PERIOD(TIMESTAMP' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ') WITH TIME ZONE'		  WHEN 'PS' THEN 'PERIOD(TIMESTAMP' || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ')'		  WHEN 'PT' THEN 'PERIOD(TIME'      || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ')'		  WHEN 'PZ' THEN 'PERIOD(TIME'      || CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) <> 0 THEN '(' || TRIM(c.DecimalFractionalDigits) || ')' ELSE '' END || ') WITH TIME ZONE'		  WHEN 'UT' THEN COALESCE(TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  WHEN '++' THEN 'TD_ANYTYPE'		  WHEN 'N'  THEN 'NUMBER('          || CASE WHEN CAST(c.DecimalTotalDigits AS INTEGER) = -128 THEN '*' ELSE TRIM(c.DecimalTotalDigits) END											|| CASE WHEN CAST(c.DecimalFractionalDigits AS INTEGER) IN (0, -128) THEN '' ELSE ',' || TRIM(c.DecimalFractionalDigits) END || ')'		  WHEN 'A1' THEN COALESCE('SYSUDTLIB.' || TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  WHEN 'AN' THEN COALESCE('SYSUDTLIB.' || TRIM(c.ColumnUDTName),  '<Unknown> ' || TRIM(c.ColumnType))		  ELSE '<Unknown> ' || TRIM(c.ColumnType)	  END 	  /* || CASE		  WHEN c.ColumnType IN ('CV', 'CF', 'CO') 		  THEN CASE c.CharType 				  WHEN 1 THEN ' CHARACTER SET LATIN'				  WHEN 2 THEN ' CHARACTER SET UNICODE'				  WHEN 3 THEN ' CHARACTER SET KANJISJIS'				  WHEN 4 THEN ' CHARACTER SET GRAPHIC'				  WHEN 5 THEN ' CHARACTER SET KANJI1'				  ELSE ''			   END		   ELSE ''	     END */	END,	CASE /* Y,N,A */ 		WHEN c.IdColType = 'GA' THEN 'A'  	    WHEN Nullable = 'Y' THEN 'Y' 		ELSE 'N' 	END 	|| CASE /* P,F,U */ 		  WHEN i.pk IS NOT NULL THEN 'P' 		  WHEN f.ColumnName IS NOT NULL THEN 'F' 		  WHEN i.uk IS NOT NULL THEN 'U' 		  ELSE ' ' 	   END     || CASE 		  WHEN i.idx IS NOT NULL THEN 'I' 		  ELSE '' 	   ENDFROM	DBC.ColumnsV AS c	LEFT JOIN 	 (	 	SELECT ColumnName,		  max(CASE WHEN IndexType = 'K' THEN 'P' END) AS pk,		  max(CASE WHEN IndexType = 'U' THEN 'U' END) AS uk,		  'I' AS idx 		FROM DBC.IndicesV		/* 	P (Nonpartitioned Primary)			Q (Partitioned Primary)			S (Secondary)			J (join index)			N (hash index)			K (primary key)			U (unique constraint)			V (value ordered secondary)			H (hash ordered ALL covering secondary)			O (valued ordered ALL covering secondary)			I (ordering column of a composite secondary index)			M (Multi-column statistics)			D (Derived column partition statistics)			1 (field1 column of a join or hash index)			2 (field2 column of a join or hash index)		*/				WHERE DatabaseName = :SCHEMA_NAME			  AND TableName = :OBJECT_NAME	 	GROUP BY ColumnName	 ) AS i	 ON i.ColumnName = c.ColumnName	LEFT JOIN 	 (	 	SELECT ChildKeyColumn AS ColumnName		FROM DBC.All_RI_ChildrenV		WHERE ChildDB = :SCHEMA_NAME			  AND ChildTable = :OBJECT_NAME	 	GROUP BY ChildKeyColumn	 ) AS f	 ON f.ColumnName = c.ColumnNameWHERE	c.DatabaseName = :SCHEMA_NAMEAND c.TableName = :OBJECT_NAMEORDER BY	c.ColumnId
minVer=0

[queries.148]
enabled=1
caption=Databases (Teradata)
export=1
dbType=11
queryType=1
queryText=select	trim(DatabaseName), 'SC' -- CASE WHEN DBKind = 'D' THEN 'SC' ELSE 'SL' ENDfrom	DBC.DatabasesV AS dwhere DBKind = 'D'  or (DBKind = 'U' and exists (select 1 from DBC.TablesV AS t where t.DatabaseName = d.DatabaseName))  	UNION ALLselect	trim(DatabaseName), 'SL' -- CASE WHEN DBKind = 'D' THEN 'SC' ELSE 'SL' ENDfrom	DBC.DatabasesV AS dwhere DBKind = 'U'
minVer=0

[queries.149]
enabled=1
caption=DDL Code (Teradata)
export=1
dbType=11
queryType=8
queryText=/*SELECT m.CreateText FROM DBC.TVM AS m	JOIN DBC.Databases2 AS d		ON m.DatabaseId = d.DatabaseId		AND d.DatabaseName = :SCHEMA_NAME		AND m.TVMNameI = :OBJECT_NAME*/		SHOW $OBJECT_TYPE$ 	$SCHEMA_NAME$.$OBJECT_NAME$
minVer=0

[queries.150]
enabled=1
caption=Joins (Teradata)
export=1
dbType=11
queryType=7
queryText=SELECT trim(c.ParentTable) AS pk_table,	trim(c.ParentKeyColumn) AS pk_column,	trim(c.ChildKeyColumn) AS fk_column,	trim(c.ParentDB) AS pk_schema,	'F:' || trim(c.ChildDB) || '.' || trim(c.ChildTable) || '$' || CAST(IndexID AS VARCHAR(3)) AS fk_constraint FROM DBC.All_RI_ChildrenV AS cWHERE ChildDB = :SCHEMA_NAME	AND ChildTable = :OBJECT_NAME UNION ALL SELECT trim(c.ChildTable) AS fk_table,	trim(c.ChildKeyColumn) AS fk_column,	trim(c.ParentKeyColumn) AS pk_column,	trim(c.ChildDB) AS fk_schema,	'P:' || trim(c.ChildDB) || '.' || trim(c.ChildTable) || '$' || CAST(IndexID AS VARCHAR(3)) AS fk_constraint FROM DBC.All_RI_ChildrenV AS cWHERE ParentDB = :SCHEMA_NAME	AND ParentTable = :OBJECT_NAMEUNION-- pull indexed multi-table joinsSELECT DISTINCT        trim(i2.TableName)         AS join_pk_table,       trim(i2.ColumnName)        AS join_pk_column,       trim(i.ColumnName)         AS join_fk_column,       trim(i2.DatabaseName)      AS join_pk_schema,       'J:' || trim(i.IndexName)  AS join_index_idFROM   DBC.IndicesV                AS i       JOIN DBC.IndicesV           AS i2            ON  i2.IndexName = i.IndexName            AND i2.IndexType = i.IndexType            AND i2.TableName <> i.TableName            AND i2.ColumnPosition = i.ColumnPositionWHERE  i.IndexType = 'J'       AND i.DatabaseName = :SCHEMA_NAME       AND i.TableName = :OBJECT_NAME	ORDER BY 1
minVer=0

[queries.151]
enabled=1
caption=Object Info (Teradata)
export=1
dbType=11
queryType=13
queryText=SELECT txtFROM(    SELECT '*  Table info  *' || chr(10) || 		  'Object created:' || chr(9) || cast(t.CreateTimeStamp AS VARCHAR(20)) || chr(10) ||		  'Last modified:' || chr(9) || COALESCE(cast(t.LastAlterTimeStamp AS VARCHAR(20)), '-') || chr(10) ||		  'Last analyzed:' || chr(9) || COALESCE(cast(a.LastCollectTimeStamp AS VARCHAR(20)), '-') || chr(10) ||		  'Last accessed:' || chr(9) || COALESCE(cast(t.LastAccessTimeStamp AS VARCHAR(20)), '-') || chr(10) ||		  'Space usage (allocated/used/free):' || chr(9) ||COALESCE(cast(cast(s.PeakPerm AS DECIMAL(20,1)) AS VARCHAR(30)) || ' MB / ' 																  || cast(cast(s.CurrentPerm AS DECIMAL(20,1)) AS VARCHAR(30)) || ' MB / '																  || cast(cast(s.PctFree AS DECIMAL(4,1)) AS VARCHAR(10)) || '%', '') || chr(10) ||		  'Version:' || chr(9) || trim(cast(t.Version AS VARCHAR(10))) AS txt,		  1 AS groupid,  CAST(0 AS INTEGER) AS lineid  FROM DBC.TablesV AS t	  LEFT JOIN (SELECT max(LastCollectTimeStamp) AS LastCollectTimeStamp				 FROM DBC.TableStatsV				 WHERE DatabaseName = :SCHEMA_NAME 					  AND TableName = :OBJECT_NAME			  ) AS a	  ON 1 = 1	  LEFT JOIN (SELECT COALESCE(sum(PeakPerm), 0)/2014/2014 AS PeakPerm, 					  COALESCE(sum(CurrentPerm), 0)/2014/2014 AS CurrentPerm,					  CASE WHEN sum(PeakPerm) <> 0 THEN sum(CurrentPerm)/sum(PeakPerm) ELSE 0.0 END * 100.0 AS PctFree				FROM DBC.TableSizeV				WHERE DatabaseName = :SCHEMA_NAME 					  AND TableName = :OBJECT_NAME			  ) AS s	  ON 1 = 1		  WHERE t.DatabaseName = :SCHEMA_NAME 	  AND t.TableName = :OBJECT_NAME  UNION ALL   SELECT chr(10) || '*  Table comment  *' || chr(10) || CASE WHEN CommentString IS NULL THEN '' ELSE  chr(10) || CommentString END,	  2 AS groupid,  CAST(0 AS INTEGER) AS lineid   FROM DBC.TablesV  WHERE DatabaseName = :SCHEMA_NAME 	  AND TableName = :OBJECT_NAME  UNION ALL  SELECT chr(10) || '*  Columns  *',	  3 AS groupid,  CAST(0 AS INTEGER) AS lineid   FROM DBC.TablesV  WHERE DatabaseName = :SCHEMA_NAME 	  AND TableName = :OBJECT_NAME  	  UNION ALL   SELECT chr(10) || trim(ColumnName) || chr(9) || CommentString,	  4 AS groupid,  ColumnId AS lineid   FROM DBC.ColumnsV  WHERE DatabaseName = :SCHEMA_NAME 	  AND TableName = :OBJECT_NAME) AS cORDER BY groupid, lineid
minVer=0

[queries.152]
enabled=1
caption=Objects (Teradata)
export=1
dbType=11
queryType=3
queryText=SELECT trim(TableName),	CASE TableKind		WHEN 'T' THEN 'TA' -- Data Table		WHEN 'J' THEN 'TA' -- Journal Table		WHEN 'R' THEN 'TF' -- Table Function		WHEN 'V' THEN 'V' -- View		WHEN 'M' THEN 'MP' -- Macro		WHEN 'P' THEN 'P' -- Stored Procedure		WHEN 'G' THEN 'TR' -- Trigger		WHEN 'F' THEN 'FU' -- Scalar UDF		WHEN 'A' THEN 'AF' -- Aggregate UDF		WHEN 'B' THEN 'AF' -- Combined Aggregate Function and ordered analytical function		WHEN 'S' THEN 'AF' -- Ordered Analytical Function		WHEN 'U' THEN 'DT' -- User-defined Data Type		-- WHEN 'I' THEN 'MV' -- Join Index Table		-- WHEN 'N' THEN 'MV' -- Hash Index Table		WHEN 'E' THEN 'P' -- External Stored Procedure	END,	CreateTimeStamp,	LastAlterTimeStampFROM DBC.TablesVWHERE TemporalProperty = 'N'	AND TableKind IN ('T', 'V', 'M', 'J', 'I', 'P', 'G', 'F', 'A', 'B', 'N', 'U', 'E', 'R', 'S')	AND DatabaseName = :SCHEMA_NAME	AND NOT (DatabaseName = 'DBC' AND trim(TableName) IN ('TransientJournal', 'ChangedRowJournal', 'LocalTransactionStatusTable', 								'UtilityLockJournalTable', 'LocalSessionStatusTable', 'SysRcvStatJournal',								'SavedTransactionStatusTable', 'OrdSysChngTable', 'RecoveryLockTable', 								'RecoveryPJTable', 'ALL'))
minVer=0

[queries.153]
enabled=1
caption=Record Count (Teradata)
export=1
dbType=11
queryType=12
queryText=SELECT COALESCE(MAX(RowCount),(								  SELECT COUNT(1)								  FROM  "$SCHEMA_NAME$"."$OBJECT_NAME$"							 )       )FROM   dbc.TableStatsVWHERE  DatabaseName = :SCHEMA_NAME	AND TableName = :OBJECT_NAME
minVer=0

[queries.154]
enabled=1
caption=Schemas (Teradata)
export=1
dbType=11
queryType=2
queryText=select	trim(DatabaseName), 'SC' -- CASE WHEN DBKind = 'D' THEN 'SC' ELSE 'SL' ENDfrom	DBC.DatabasesV AS dwhere DBKind = 'D'  or (DBKind = 'U' and exists (select 1 from DBC.TablesV AS t where t.DatabaseName = d.DatabaseName))  	UNION ALLselect	trim(DatabaseName), 'SL' -- CASE WHEN DBKind = 'D' THEN 'SC' ELSE 'SL' ENDfrom	DBC.DatabasesV AS dwhere DBKind = 'U'
minVer=0

[queries.155]
enabled=1
caption=Table Objects (Teradata)
export=1
dbType=11
queryType=14
queryText=SELECT COALESCE(trim(tc.ConstraintName), 'Check Constraint #' || CAST(ROW_NUMBER() OVER (PARTITION BY tc.DatabaseName, tc.TableName ORDER BY tc.ConstraintName) AS VARCHAR(5))) as constraint_name,     'C' AS constraint_type,    trim(tc.ConstraintText) as column_name,     '',    1 as ordinal_positionFROM DBC.Table_LevelConstraintsV AS tcWHERE tc.DatabaseName = :SCHEMA_NAME 	AND tc.TableName = :OBJECT_NAMEUNION ALLSELECT 	trim(c.ChildDB) || '.' || trim(c.ChildTable) || '$' || CAST(IndexID AS VARCHAR(3)) as constraint_name, 	'F' as constraint_type, 	c.ChildKeyColumn as fk_column,	trim(c.ParentDB) || '.' || trim(c.ParentTable) || '.' || trim(c.ParentKeyColumn) as pk_column,     ROW_NUMBER() OVER (PARTITION BY c.ChildDB, c.ChildTable ORDER BY c.ChildKeyColumn) AS ordinal_positionFROM DBC.All_RI_ChildrenV AS cWHERE ChildDB = :SCHEMA_NAME	AND ChildTable = :OBJECT_NAMEUNION ALLSELECT COALESCE(trim(i.IndexName), 'Unnamed Index #' || CAST(i.IndexNumber AS VARCHAR(3))) || ' (' || 	CASE i.IndexType		WHEN 'P' THEN 'Nonpartitioned Primary'		WHEN 'Q' THEN 'Partitioned Primary'		WHEN 'S' THEN 'Secondary'		WHEN 'J' THEN 'Join Index'		WHEN 'N' THEN 'Hash Index'		WHEN 'K' THEN 'Primary Key'		WHEN 'U' THEN 'Unique Constraint'		WHEN 'V' THEN 'Value Ordered Secondary'		WHEN 'H' THEN 'Hhash Ordered All Covering Secondary'		WHEN 'O' THEN 'Valued Ordered All Covering Secondary'		WHEN 'I' THEN 'Ordering Column of a Composite Secondary Index'		WHEN 'M' THEN 'Multi-column Statistics'		WHEN 'D' THEN 'Derived Column Partition Statistics'		WHEN '1' THEN 'Field1 Column of a Join or Hash Index'		WHEN '2' THEN 'Field2 Column of a Join or Hash Index'		ELSE '{Unknown index type]'	END || ', ' || CASE WHEN i.UniqueFlag = 'N' THEN 'Nonunique' ELSE 'Unique' END  || ')' as index_type, 	'I', 	i.ColumnName, 	'',	i.ColumnPositionFROM DBC.IndicesV AS i WHERE i.DatabaseName = :SCHEMA_NAME 	AND i.TableName = :OBJECT_NAMEUNION ALLSELECT trim(t.TriggerName), 	'TR', 	CASE t.ActionTime 		WHEN 'A' THEN 'AFTER'		WHEN 'B' THEN 'BEFORE'		WHEN 'I' THEN 'INSTEAD OF'		ELSE '[Unknown Action Time]'	END || ' ' ||	CASE t.Event		WHEN 'D' THEN 'DELETE'		WHEN 'I' THEN 'INSERT'		WHEN 'U' THEN 'UPDATE'		ELSE '[Unknown Event Type]'	END || ' FOR EACH ' ||	CASE t.Kind		WHEN 'R' THEN 'ROW'		WHEN 'S' THEN 'STATEMENT'		ELSE '[Unknown Kind of Trigger]'	END,	'', 	1 FROM DBC.TriggersV AS tWHERE t.SubjectTableDataBaseName = :SCHEMA_NAME 	AND t.TableName = :OBJECT_NAMEORDER BY 2, 1, 5 
minVer=0

[queries.156]
enabled=1
caption=Current Session (ASA)
export=1
dbType=5
queryType=15
queryText=SELECT @@SPID
minVer=0

[queries.157]
enabled=1
caption=Current Session (ASE)
export=1
dbType=4
queryType=15
queryText=SELECT @@SPID
minVer=0

[queries.158]
enabled=1
caption=Current Session (DB2 UDB)
export=1
dbType=3
queryType=15
queryText=SELECT application_id() FROM sysibm.sysdummy1
minVer=0

[queries.159]
enabled=1
caption=Current Session (Greenplum)
export=1
dbType=12
queryType=15
queryText=SELECT pg_backend_pid()
minVer=0

[queries.160]
enabled=1
caption=Current Session (MSSQL)
export=1
dbType=1
queryType=15
queryText=SELECT @@SPID
minVer=0

[queries.161]
enabled=1
caption=Current Session (MySQL)
export=1
dbType=2
queryType=15
queryText=SELECT connection_id()
minVer=0

[queries.162]
enabled=1
caption=Current Session (Oracle)
export=1
dbType=0
queryType=15
queryText=SELECT sys_context('USERENV','SID') FROM dual
minVer=0

[queries.163]
enabled=1
caption=Current Session (PostgreSQL)
export=1
dbType=7
queryType=15
queryText=SELECT pg_backend_pid()
minVer=0

[queries.164]
enabled=1
caption=Current Session (Amazon Redshift)
export=1
dbType=8
queryType=15
queryText=SELECT pg_backend_pid()
minVer=0

[queries.165]
enabled=1
caption=Current Session (Teradata)
export=1
dbType=11
queryType=15
queryText=SELECT SESSION
minVer=0

[queries.166]
enabled=1
caption=Arguments (Netezza)
export=1
dbType=10
queryType=5
queryText=SELECT param_name,     CASE WHEN data_type LIKE 'CHARACTER VARYING(%' THEN 'VARCHAR' || substring(data_type, 18, 255)         WHEN data_type LIKE 'NATIONAL CHARACTER VARYING(%' THEN 'NVARCHAR' || substring(data_type, 27, 255)         WHEN data_type LIKE 'CHARACTER(%' THEN 'CHAR' || substring(data_type, 10, 255)         WHEN data_type LIKE 'NATIONAL CHARACTER(%' THEN 'NCHAR' || substring(data_type, 19, 255)         WHEN data_type LIKE 'BINARY VARYING(%' THEN 'VARBINARY' || substring(data_type, 14, 255)         WHEN data_type = 'CHARACTER VARYING' THEN 'VARCHAR(ANY)'         WHEN data_type = 'NATIONAL CHARACTER VARYING' THEN 'NVARCHAR(ANY)'         WHEN data_type = 'CHARACTER' THEN 'CHAR(ANY)'         WHEN data_type = 'NATIONAL CHARACTER' THEN 'NCHAR(ANY)'         WHEN data_type = 'BINARY VARYING' THEN 'VARBINARY(ANY)'         ELSE data_type    END AS data_type, 	 param_mode || substr(specific_name, length(specific_name)-1)FROM (  select '' as param_name,	   f."RESULT" as data_type,	   'R' as param_mode,	   0 as ordinal_position,	   f."FUNCTION" || '#' || f.objid AS specific_name  from "$DB_NAME$".._v_function AS f,		 _T_OBJECT o  where f."OWNER" = :SCHEMA_NAME  	  AND o.OID = f.OBJID	  AND o.objdb IN (SELECT 0::OID as objid 					  UNION ALL 					  SELECT d.oid 					  FROM _t_database AS d					  WHERE d.datname = :DB_NAME)	  AND o.objname = :OBJECT_NAME || '#' || o.oid  UNION ALL	   SELECT '$' || INT2 (INT8INC (INT8 (i.IDX))) AS param_name,		 FORMAT_TYPE (((GETOIDVECTORELEMENT (p.PROARGTYPES, i.IDX))::INT4)::OID,					  (GETOIDVECTORELEMENT (p.PROARGTYPMODS, i.IDX))::INT4) AS data_type,		 'I' AS param_mode,		 INT2 (INT8INC (INT8 (i.IDX))) AS ordinal_position,		 p.PRONAME || '#' || p.OID AS specific_name  FROM   _T_PROC p,		 "$DB_NAME$".._V_VECTOR_IDX i,		 _T_TYPE t,		 _T_OBJECT o,		 _T_USER u  WHERE  i.IDX BETWEEN 0 AND p.PRONARGS - 1		  AND t.OID = (GETOIDVECTORELEMENT (p.PROARGTYPES, i.IDX))::INT4		  AND o.OID = p.OID		  AND u.usesysid = o.objowner		  AND o.objclass > 0		  AND u.usename = :SCHEMA_NAME		  AND o.objname = :OBJECT_NAME || '#' || o.oid		  AND o.objdb IN (SELECT 0::OID as objid 					  UNION ALL 					  SELECT d.oid 					  FROM _t_database AS d					  WHERE d.datname = :DB_NAME)) aORDER BY specific_name, ordinal_position
minVer=458752

[queries.167]
enabled=1
caption=Arguments (Netezza)
export=1
dbType=10
queryType=5
queryText=SELECT param_name,     CASE WHEN data_type LIKE 'CHARACTER VARYING(%' THEN 'VARCHAR' || substring(data_type, 18, 255)         WHEN data_type LIKE 'NATIONAL CHARACTER VARYING(%' THEN 'NVARCHAR' || substring(data_type, 27, 255)         WHEN data_type LIKE 'CHARACTER(%' THEN 'CHAR' || substring(data_type, 10, 255)         WHEN data_type LIKE 'NATIONAL CHARACTER(%' THEN 'NCHAR' || substring(data_type, 19, 255)         WHEN data_type LIKE 'BINARY VARYING(%' THEN 'VARBINARY' || substring(data_type, 14, 255)         WHEN data_type = 'CHARACTER VARYING' THEN 'VARCHAR(ANY)'         WHEN data_type = 'NATIONAL CHARACTER VARYING' THEN 'NVARCHAR(ANY)'         WHEN data_type = 'CHARACTER' THEN 'CHAR(ANY)'         WHEN data_type = 'NATIONAL CHARACTER' THEN 'NCHAR(ANY)'         WHEN data_type = 'BINARY VARYING' THEN 'VARBINARY(ANY)'         ELSE data_type    END AS data_type, 	 param_mode || substr(specific_name, length(specific_name)-1)FROM (  select '' as param_name,	   f."RESULT" as data_type,	   'R' as param_mode,	   0 as ordinal_position,	   f."FUNCTION" || '#' || f.objid AS specific_name  from "$DB_NAME$".._v_function AS f,		 _t_object o  where f."SCHEMA" = :SCHEMA_NAME  	  AND o.OID = f.OBJID	  AND o.objdb IN (SELECT 0::OID as objid 					  UNION ALL 					  SELECT d.oid 					  FROM _t_database AS d					  WHERE d.datname = :DB_NAME)	  AND o.objname = :OBJECT_NAME || '#' || o.oid  UNION ALL	   SELECT '$' || INT2 (INT8INC (INT8 (i.IDX))) AS param_name,		 FORMAT_TYPE (((GETOIDVECTORELEMENT (p.PROARGTYPES, i.IDX))::INT4)::OID,					  (GETOIDVECTORELEMENT (p.PROARGTYPMODS, i.IDX))::INT4) AS data_type,		 'I' AS param_mode,		 INT2 (INT8INC (INT8 (i.IDX))) AS ordinal_position,		 p.PRONAME || '#' || p.OID AS specific_name  FROM   _t_proc p,		 "$DB_NAME$".._v_vector_idx i,		 _t_type t,		 _t_object o,		 _t_object u,		 _t_object_classes sc  WHERE  i.IDX BETWEEN 0 AND p.PRONARGS - 1		  AND t.OID = (GETOIDVECTORELEMENT (p.PROARGTYPES, i.IDX))::INT4		  AND o.OID = p.OID		  AND o.objclass > 0		  AND u.objid = o.objschemaoid		  AND sc.objclass = u.objclass		  AND sc.classname = 'SCHEMA'		  AND u.objname = :SCHEMA_NAME		  AND o.objname = :OBJECT_NAME || '#' || o.oid		  AND o.objdb IN (SELECT 0::OID as objid 					  UNION ALL 					  SELECT d.oid 					  FROM _t_database AS d					  WHERE d.datname = :DB_NAME)) aORDER BY specific_name, ordinal_position
minVer=458753

[queries.168]
enabled=1
caption=Columns (Netezza) + Keys
export=1
dbType=10
queryType=4
queryText=SELECT 'OID' as column_name, 'OID' as data_type, 'NP' as col_attrib, 0 as column_positionFROM "$DB_NAME$".._v_obj_relation AS rWHERE r.objid = :OBJECT_ID    AND r.rowidname = 'OID' UNION ALLSELECT    c.attname AS column_name,     CASE WHEN c.format_type LIKE 'CHARACTER VARYING(%' THEN 'VARCHAR' || substring(c.format_type, 18, 255)         WHEN c.format_type LIKE 'NATIONAL CHARACTER VARYING(%' THEN 'NVARCHAR' || substring(c.format_type, 27, 255)         WHEN c.format_type LIKE 'CHARACTER(%' THEN 'CHAR' || substring(c.format_type, 10, 255)         WHEN c.format_type LIKE 'NATIONAL CHARACTER(%' THEN 'NCHAR' || substring(c.format_type, 19, 255)         WHEN c.format_type LIKE 'BINARY VARYING(%' THEN 'VARBINARY' || substring(c.format_type, 14, 255)         WHEN c.format_type = 'CHARACTER VARYING' THEN 'VARCHAR(ANY)'         WHEN c.format_type = 'NATIONAL CHARACTER VARYING' THEN 'NVARCHAR(ANY)'         WHEN c.format_type = 'CHARACTER' THEN 'CHAR(ANY)'         WHEN c.format_type = 'NATIONAL CHARACTER' THEN 'NCHAR(ANY)'         WHEN c.format_type = 'BINARY VARYING' THEN 'VARBINARY(ANY)'         ELSE c.format_type    END AS data_type,     CASE WHEN c.coldefault LIKE 'nextval(%' THEN 'A' ELSE '' END    || CASE WHEN c.attnotnull THEN 'N' ELSE 'Y' END     || ( /* P,F,U */            select nvl(upper(max(k.contype)), '')             from "$DB_NAME$".._v_relation_keydata_xdb AS k             where k.objid = c.objid                and k.attname = c.attname        )    || ( /* I */            select nvl(max('I'), ' ')            from "$DB_NAME$".._v_table_dist_map_xdb as i            where i.objid = c.objid                and i.attname = c.attname        ) AS col_attrib,    c.attnum AS column_positionFROM    "$DB_NAME$".._v_relation_column_xdb AS cWHERE    c.objid = :OBJECT_IDORDER BY    column_position
minVer=458752

[queries.169]
enabled=1
caption=Columns (Netezza) + Keys
export=1
dbType=10
queryType=4
queryText=SELECT 'OID' as column_name, 'OID' as data_type, 'NP' as col_attrib, 0 as column_positionFROM "$DB_NAME$".DEFINITION_SCHEMA._v_obj_relation AS rWHERE r.objid = :OBJECT_ID    AND r.rowidname = 'OID' UNION ALLSELECT    c.attname AS column_name,     CASE WHEN c.format_type LIKE 'CHARACTER VARYING(%' THEN 'VARCHAR' || substring(c.format_type, 18, 255)         WHEN c.format_type LIKE 'NATIONAL CHARACTER VARYING(%' THEN 'NVARCHAR' || substring(c.format_type, 27, 255)         WHEN c.format_type LIKE 'CHARACTER(%' THEN 'CHAR' || substring(c.format_type, 10, 255)         WHEN c.format_type LIKE 'NATIONAL CHARACTER(%' THEN 'NCHAR' || substring(c.format_type, 19, 255)         WHEN c.format_type LIKE 'BINARY VARYING(%' THEN 'VARBINARY' || substring(c.format_type, 14, 255)         WHEN c.format_type = 'CHARACTER VARYING' THEN 'VARCHAR(ANY)'         WHEN c.format_type = 'NATIONAL CHARACTER VARYING' THEN 'NVARCHAR(ANY)'         WHEN c.format_type = 'CHARACTER' THEN 'CHAR(ANY)'         WHEN c.format_type = 'NATIONAL CHARACTER' THEN 'NCHAR(ANY)'         WHEN c.format_type = 'BINARY VARYING' THEN 'VARBINARY(ANY)'         ELSE c.format_type    END AS data_type,     CASE WHEN c.coldefault LIKE 'nextval(%' THEN 'A' ELSE '' END    || CASE WHEN c.attnotnull THEN 'N' ELSE 'Y' END     || ( /* P,F,U */            select nvl(upper(max(k.contype)), '')             from "$DB_NAME$".DEFINITION_SCHEMA._v_relation_keydata_xdb AS k             where k.objid = c.objid                and k.attname = c.attname        )    || ( /* I */            select nvl(max('I'), ' ')            from "$DB_NAME$".DEFINITION_SCHEMA._v_table_dist_map_xdb as i            where i.objid = c.objid                and i.attname = c.attname        ) AS col_attrib,    c.attnum AS column_positionFROM    "$DB_NAME$".DEFINITION_SCHEMA._v_relation_column_xdb AS cWHERE    c.objid = :OBJECT_IDORDER BY    column_position
minVer=458753

[queries.170]
enabled=1
caption=Context (Netezza)
export=1
dbType=10
queryType=10
queryText=select      'netezza',      current_user,      current_catalog,      current_schema
minVer=0

[queries.171]
enabled=1
caption=Current Session (Netezza)
export=1
dbType=10
queryType=15
queryText=SELECT current_sid
minVer=0

[queries.172]
enabled=1
caption=Databases (Netezza)
export=1
dbType=10
queryType=1
queryText=select datname, 'DB'from _t_databasewhere datistemplate = False
minVer=0

[queries.173]
enabled=1
caption=DDL Code (Netezza)
export=1
dbType=10
queryType=8
queryText=select 'CREATE ' || v.objtype || ' "' || v.owner || '"."' || v.viewname || '" AS' || chr(10) || v.definitionfrom "$DB_NAME$".._v_view_xdb AS vwhere	 v."DATABASE" = :DB_NAME     and v."OWNER" = :SCHEMA_NAME     and v.viewname = :OBJECT_NAMEUNION ALLSELECT	CASE WHEN l.lanname = 'INTERNAL' 		THEN			'/* "' || f."OWNER" || '"."' || f."FUNCTION" || '" is an internal routine. Code of internal routines is not available. */'		ELSE			  'CREATE FUNCTION "' || f."OWNER" || '"."' || f."FUNCTION" || '"' || f.arguments || CHR(10) || 		  'RETURNS ' || f."RESULT" || CHR(10) ||		  'LANGUAGE ' || CASE WHEN l.lanname = 'C' THEN 'CPP' ELSE l.lanname END || CHR(10) ||		  CASE WHEN f.FENCED THEN 'FENCED' ELSE 'NOT FENCED' END || CHR(10) ||		  CASE WHEN f.DETERMINISTIC THEN 'DETERMINISTIC' ELSE 'NOT DETERMINISTIC' END || CHR(10) ||		  CASE WHEN f.RETURNSNULLONNULLINPUT THEN 'RETURNS NULL ON NULL INPUT' ELSE 'CALLED ON NULL INPUT' END || CHR(10) || 		  CASE WHEN f.MEMORY = 0 THEN '' ELSE 'MAXIMUM MEMORY ' || f.MEMORY || CHR(10) END ||		  CASE WHEN f.LOGMASK = 'NONE' THEN '' ELSE 'LOGMASK ' || f.LOGMASK || CHR(10) END ||  		  CASE WHEN l.lanname = 'C'		  THEN 			  CASE WHEN nvl(f.DEPENDENCIES, '') = '' THEN 'NO DEPENDENCIES' ELSE 'DEPENDENCIES ''' || f.DEPENDENCIES || '''' END || CHR(10) ||			  'API VERSION ' || f."VERSION" || CHR(10) ||			  CASE WHEN nvl(f.ENV, '') = '' THEN '' ELSE 'ENVIRONMENT ' || f.ENV || CHR(10) END ||			  'EXTERNAL CLASS NAME ''' || f.EXTERNALNAME || '''' || CHR(10) ||			  CASE WHEN nvl(f.LOCATION, '') = '' THEN '' ELSE 'EXTERNAL HOST OBJECT ' || f.LOCATION END		  ELSE			'AS' || CHR(10) || 			'BEGIN_PROC' || CHR(10) || 			r.prosrc || CHR(10) ||   			'END_PROC;'		  END	ENDFROM	_t_proc AS r 	JOIN _t_language AS l		ON l.OID = r.prolang 	JOIN "$DB_NAME$".._v_function AS f		ON  f.objid = r.OID	JOIN _t_object AS o		ON o.OID = f.OBJID		AND o.objdb IN (SELECT 0::OID as objid 						--WHERE :DB_NAME = 'SYSTEM'						UNION ALL 						SELECT d.oid 						FROM _t_database AS d						WHERE d.datname = :DB_NAME)WHERE	f."OWNER" = :SCHEMA_NAME	AND o.objname = :OBJECT_NAME || '#' || o.oid		UNION ALLSELECT	'CREATE PROCEDURE "' || p."OWNER" || '"."' || p."PROCEDURE" || '"' || p.arguments || CHR(10) || 	'RETURNS ' || p."RESULT" || CHR(10) ||	'LANGUAGE NZPLSQL' || CHR(10) ||	'AS' || CHR(10) || 	'BEGIN_PROC' || CHR(10) || 	p.proceduresource || CHR(10) ||   	'END_PROC;'FROM	"$DB_NAME$".._v_procedure AS p	JOIN _t_object AS o		ON o.OID = p.OBJID		AND o.objdb IN (SELECT 0::OID as objid 						--WHERE :DB_NAME = 'SYSTEM'						UNION ALL 						SELECT d.oid 						FROM _t_database AS d						WHERE d.datname = :DB_NAME)WHERE	p."OWNER" = :SCHEMA_NAME	AND p."PROCEDURE" = :OBJECT_NAME	/*UNION ALL	SELECT 'CREATE SEQUENCE ' || s."OWNER" || '.' || s.seqname || CHR(10) ||	'AS ' || vs."DATA_TYPE" || CHR(10) ||	'START WITH ' || vs."NEXT_CACHE_VAL" || CHR(10) ||	'INCREMENT ' || vs."INCREMENT" || CHR(10) ||	'MINVALUE ' || vs."MIN_VALUE" || CHR(10) ||	'MAXVALUE ' || vs."MAX_VALUE" || CHR(10) ||	CASE WHEN vs."CYCLE" THEN 'CYCLE' ELSE 'NO CYCLE' END  || ';' FROM "$DB_NAME$".._v_sequence_xdb as s	JOIN _vt_sequence as vs		ON vs.SEQ_ID = s.objid		AND vs.db_id = s.objdbWHERE s."DATABASE" = :DB_NAME     and s."OWNER" = :SCHEMA_NAME     and s.seqname = :OBJECT_NAME*/	 LIMIT 1
minVer=458752

[queries.174]
enabled=1
caption=DDL Code (Netezza)
export=1
dbType=10
queryType=8
queryText=select 'CREATE ' || v.objtype || ' "' || v.schema || '"."' || v.viewname || '" AS' || chr(10) || v.definitionfrom "$DB_NAME$".DEFINITION_SCHEMA._v_view_xdb AS vwhere	 v.database = :DB_NAME     and v.schema = :SCHEMA_NAME     and v.viewname = :OBJECT_NAMEUNION ALLSELECT	CASE WHEN l.lanname = 'INTERNAL' 		THEN			'/* "' || f."SCHEMA" || '"."' || f."FUNCTION" || '" is an internal routine. Code of internal routines is not available. */'		ELSE			  'CREATE FUNCTION "' || f."OWNER" || '"."' || f."FUNCTION" || '"' || f.arguments || CHR(10) || 		  'RETURNS ' || f."RESULT" || CHR(10) ||		  'LANGUAGE ' || CASE WHEN l.lanname = 'C' THEN 'CPP' ELSE l.lanname END || CHR(10) ||		  CASE WHEN f.FENCED THEN 'FENCED' ELSE 'NOT FENCED' END || CHR(10) ||		  CASE WHEN f.DETERMINISTIC THEN 'DETERMINISTIC' ELSE 'NOT DETERMINISTIC' END || CHR(10) ||		  CASE WHEN f.RETURNSNULLONNULLINPUT THEN 'RETURNS NULL ON NULL INPUT' ELSE 'CALLED ON NULL INPUT' END || CHR(10) || 		  CASE WHEN f.MEMORY = 0 THEN '' ELSE 'MAXIMUM MEMORY ' || f.MEMORY || CHR(10) END ||		  CASE WHEN f.LOGMASK = 'NONE' THEN '' ELSE 'LOGMASK ' || f.LOGMASK || CHR(10) END ||  		  CASE WHEN l.lanname = 'C'		  THEN 			  CASE WHEN nvl(f.DEPENDENCIES, '') = '' THEN 'NO DEPENDENCIES' ELSE 'DEPENDENCIES ''' || f.DEPENDENCIES || '''' END || CHR(10) ||			  'API VERSION ' || f."VERSION" || CHR(10) ||			  CASE WHEN nvl(f.ENV, '') = '' THEN '' ELSE 'ENVIRONMENT ' || f.ENV || CHR(10) END ||			  'EXTERNAL CLASS NAME ''' || f.EXTERNALNAME || '''' || CHR(10) ||			  CASE WHEN nvl(f.LOCATION, '') = '' THEN '' ELSE 'EXTERNAL HOST OBJECT ' || f.LOCATION END		  ELSE			'AS' || CHR(10) || 			'BEGIN_PROC' || CHR(10) || 			r.prosrc || CHR(10) ||   			'END_PROC;'		  END	ENDFROM	_t_proc AS r 	JOIN _t_language AS l		ON l.OID = r.prolang 	JOIN "$DB_NAME$".DEFINITION_SCHEMA._v_function AS f		ON  f.objid = r.OID	JOIN _t_object AS o		ON o.OID = f.OBJID		AND o.objdb IN (SELECT 0::OID as objid 						UNION ALL 						SELECT d.oid 						FROM _t_database AS d						WHERE d.datname = :DB_NAME)WHERE	f."SCHEMA" = :SCHEMA_NAME	AND o.objname = :OBJECT_NAME || '#' || o.oid		UNION ALLSELECT	'CREATE PROCEDURE "' || p."SCHEMA" || '"."' || p."PROCEDURE" || '"' || p.arguments || CHR(10) || 	'RETURNS ' || p."RESULT" || CHR(10) ||	'LANGUAGE NZPLSQL' || CHR(10) ||	'AS' || CHR(10) || 	'BEGIN_PROC' || CHR(10) || 	p.proceduresource || CHR(10) ||   	'END_PROC;'FROM	"$DB_NAME$".DEFINITION_SCHEMA._v_procedure AS p	JOIN _t_object AS o		ON o.OID = p.OBJID		AND o.objdb IN (SELECT 0::OID as objid 						UNION ALL 						SELECT d.oid 						FROM _t_database AS d						WHERE d.datname = :DB_NAME)WHERE	p."SCHEMA" = :SCHEMA_NAME	AND p."PROCEDURE" = :OBJECT_NAME/*	UNION ALL	SELECT 'CREATE SEQUENCE ' || s."SCHEMA" || '.' || s.seqname || CHR(10) ||	'AS ' || vs."DATA_TYPE" || CHR(10) ||	'START WITH ' || vs."NEXT_CACHE_VAL"::VARCHAR(20) || CHR(10) ||	'INCREMENT ' || vs."INCREMENT"::VARCHAR(20) || CHR(10) ||	'MINVALUE ' || vs."MIN_VALUE"::VARCHAR(20) || CHR(10) ||	'MAXVALUE ' || vs."MAX_VALUE"::VARCHAR(20) || CHR(10) ||	CASE WHEN vs."CYCLE" THEN 'CYCLE' ELSE 'NO CYCLE' END  || ';' FROM "$DB_NAME$".DEFINITION_SCHEMA._v_sequence_xdb as s	JOIN "$DB_NAME$".DEFINITION_SCHEMA._vt_sequence as vs		ON vs.SEQ_ID = s.objid		AND vs.db_id = s.objdbWHERE s."DATABASE" = :DB_NAME     and s."SCHEMA" = :SCHEMA_NAME     and s.seqname = :OBJECT_NAME*/	 LIMIT 1
minVer=458753

[queries.175]
enabled=1
caption=Joins (Netezza)
export=1
dbType=10
queryType=7
queryText=SELECT c.pkrelation AS pk_table,	c.pkattname AS pk_column,	c.attname AS fk_column,	CASE WHEN c.pkdatabase != c.database THEN c.pkdatabase || '.' ELSE '' END || c.pkowner AS pk_schema,	'F:' || c.constraintname AS fk_constraint FROM "$DB_NAME$".._v_relation_keydata_xdb AS cWHERE c.contype = 'f'  AND c.objid = :OBJECT_ID UNION ALL SELECT c.relation AS fk_table,	c.attname AS fk_column,	c.pkattname AS pk_column,	CASE WHEN c.pkdatabase != c.database THEN c.database || '.' ELSE '' END || c.owner AS fk_schema,	'P:' || c2.constraintname AS pk_constraint FROM "$DB_NAME$".._v_relation_keydata_xdb AS c	JOIN "$DB_NAME$".._v_relation_keydata_xdb AS c2		ON c2.relation = c.pkrelation		AND c2.owner = c.pkowner		AND c2.database = c.pkdatabase		AND c2.conseq = c.pkconseq		AND c2.contype = 'p'WHERE c.contype = 'f'  AND c.pkobjid = :OBJECT_IDORDER BY 1
minVer=458752

[queries.176]
enabled=1
caption=Joins (Netezza)
export=1
dbType=10
queryType=7
queryText=SELECT c.pkrelation AS pk_table,	c.pkattname AS pk_column,	c.attname AS fk_column,	CASE WHEN c.pkdatabase != c.database THEN c.pkdatabase || '.' ELSE '' END || c.pkschema AS pk_schema,	'F:' || c.constraintname AS fk_constraint FROM _v_relation_keydata_xdb AS cWHERE c.contype = 'f'  AND c.database = :DB_NAME  AND c.schema = :SCHEMA_NAME  AND c.relation = :OBJECT_NAME UNION ALL SELECT c.relation AS fk_table,	c.attname AS fk_column,	c.pkattname AS pk_column,	CASE WHEN c.pkdatabase != c.database THEN c.database || '.' ELSE '' END || c.schema AS fk_schema,	'P:' || c2.constraintname AS pk_constraint FROM _v_relation_keydata_xdb AS c	JOIN _v_relation_keydata_xdb AS c2		ON c2.relation = c.pkrelation		AND c2.schema = c.pkschema		AND c2.database = c.pkdatabase		AND c2.conseq = c.pkconseq		AND c2.contype = 'p'WHERE c.contype = 'f'  AND c.pkdatabase = :DB_NAME  AND c.pkschema = :SCHEMA_NAME  AND c.pkrelation = :OBJECT_NAMEORDER BY 1
minVer=458753

[queries.177]
enabled=1
caption=Object Info (Netezza)
export=1
dbType=10
queryType=13
queryText=SELECT line_text::TEXTFROM(	SELECT 1 AS rsid, '*  Table info *' || CHR(10) ||		 'Object created:' || CHR(9) || o.objcreated::TIMESTAMP || CHR(10) || 		 'Last modified:' || CHR(9) || o.objmodified::TIMESTAMP || CHR(10) ||		 'Versions:' || CHR(9) || CASE WHEN tos.table_versions IS NULL THEN 'None' ELSE '' || tos.table_versions END || CHR(10) ||		 'Total pages:' || CHR(9) || CASE WHEN tos.total_pages IS NULL THEN 'N/A' ELSE '' || tos.total_pages END || CHR(10) ||		 'Groomed pages:' || CHR(9) || CASE WHEN tos.groomed_pages IS NULL THEN 'N/A' ELSE '' || tos.groomed_pages END || CHR(10) || 		 'Groomed percent:' || CHR(9) || CASE WHEN tos.groomed_percent IS NULL THEN 'N/A' ELSE '' || tos.groomed_percent END AS line_text   FROM "$DB_NAME$".._v_table AS t	  LEFT JOIN "$DB_NAME$".._v_table_orgstate AS tos		  ON tos.tableid = t.objid  WHERE t.objid = :OBJECT_ID  UNION ALL   SELECT 2 AS rsid, CHR(10) || '*  Table comment *' || CHR(10) || t.description   FROM "$DB_NAME$".._v_table AS t  WHERE t.objid = :OBJECT_ID	  AND t.description IS NOT NULL  	  UNION ALL   SELECT 3 AS rsid, CHR(10) || '*  Columns *'  UNION ALL  SELECT 4 AS rsid, CHR(10) || c.attname || CHR(9) || c.description  FROM	  "$DB_NAME$".._v_relation_column AS c  WHERE	  c.objid = :OBJECT_ID	  AND c.description IS NOT NULL) AS tORDER by rsid
minVer=458752

[queries.178]
enabled=1
caption=Object Info (Netezza)
export=1
dbType=10
queryType=13
queryText=SELECT line_text::TEXTFROM(	SELECT 1 AS rsid, '*  Table info *' || CHR(10) ||		 'Object created:' || CHR(9) || o.objcreated::TIMESTAMP || CHR(10) || 		 'Last modified:' || CHR(9) || o.objmodified::TIMESTAMP || CHR(10) ||		 'Versions:' || CHR(9) || CASE WHEN tos.table_versions IS NULL THEN 'None' ELSE '' || tos.table_versions END || CHR(10) ||		 'Total pages:' || CHR(9) || CASE WHEN tos.total_pages IS NULL THEN 'N/A' ELSE '' || tos.total_pages END || CHR(10) ||		 'Groomed pages:' || CHR(9) || CASE WHEN tos.groomed_pages IS NULL THEN 'N/A' ELSE '' || tos.groomed_pages END || CHR(10) || 		 'Groomed percent:' || CHR(9) || CASE WHEN tos.groomed_percent IS NULL THEN 'N/A' ELSE '' || tos.groomed_percent END AS line_text   FROM "$DB_NAME$".DEFINITION_SCHEMA._v_table AS t	  JOIN _t_object AS o		  ON o.objid = t.objid	  LEFT JOIN "$DB_NAME$".DEFINITION_SCHEMA._v_table_orgstate AS tos		  ON tos.tableid = t.objid  WHERE t.objid = :OBJECT_ID  UNION ALL   SELECT 2 AS rsid, CHR(10) || '*  Table comment *' || CHR(10) || t.description   FROM "$DB_NAME$".DEFINITION_SCHEMA._v_table AS t  WHERE t.objid = :OBJECT_ID	  AND t.description IS NOT NULL  	  UNION ALL   SELECT 3 AS rsid, CHR(10) || '*  Columns *'  UNION ALL  SELECT 4 AS rsid, CHR(10) || c.attname || CHR(9) || c.description  FROM	  "$DB_NAME$".DEFINITION_SCHEMA._v_relation_column AS c  WHERE	  c.objid = :OBJECT_ID	  AND c.description IS NOT NULL) AS tORDER by rsid
minVer=458753

[queries.179]
enabled=1
caption=Objects (Netezza)
export=1
dbType=10
queryType=3
queryText=SELECT	CASE WHEN o.objname LIKE '%#' || o.objid		THEN substring(o.objname, 1, strpos(o.objname, '#') - 1)		ELSE o.objname	END AS object_name,	CASE WHEN o.objdb = 0 AND :DB_NAME <> 'SYSTEM' 		THEN '^' || 			CASE WHEN c.classname LIKE '%TABLE%' THEN 'T'			  WHEN c.classname LIKE '%VIEW%' THEN 'V'			  ELSE substring(c.classname, 1, 1) 		   END		ELSE		  CASE WHEN c.classname LIKE 'SYSTEM %' THEN substring(c.classname, 8, 2)			  WHEN c.classname IN ('MANAGEMENT TABLE', 'EXTERNAL TABLE') THEN 'TA'			  WHEN c.classname = 'SYNONYM' THEN '^' || 				  CASE WHEN ro.objtype LIKE '%TABLE%' THEN 'T'					WHEN ro.objtype LIKE '%VIEW%' THEN 'V'					ELSE substring(ro.objtype, 1, 1) 				 END			  ELSE substring(c.classname, 1, 2)			  /*			   WHEN c.classname = 'SYNONYM' THEN 				  CASE 					  WHEN rc.classname IS NULL THEN 'SN'					  WHEN rc.classname LIKE 'SYSTEM %' THEN '^' || substring(rc.classname, 8, 1)					  WHEN rc.classname IN ('MANAGEMENT TABLE', 'EXTERNAL TABLE') THEN '^T'					  ELSE '^' || substring(rc.classname, 1, 1) 				  END			  ELSE substring(c.classname, 1, 2)			  */		  END 	END AS object_type,	min(nvl(ro.objid, o.oid)) as object_id,	min(o.objcreated) as create_time,	max(o.objmodified) as alter_timeFROM    _t_object AS o		JOIN _t_object_classes AS c			on c.objclass = o.objclass		JOIN _t_user AS u			ON u.usesysid = o.objowner		LEFT JOIN _t_synonym AS s	        ON  s.oid = o.objid		LEFT JOIN "$DB_NAME$".._v_object_data  AS ro            ON  ro."OWNER" = s.synschema            AND ro."OBJNAME" = s.synobject            AND ro."DBNAME" = s.syncatalog		LEFT JOIN _t_object_classes AS rc            ON rc.objclass = ro.objclassWHERE c.classname IN ('TABLE',                    'VIEW',                    'MATERIALIZED VIEW',                    'SEQUENCE',                    'EXTERNAL TABLE',                    'PROCEDURE',                    'TRIGGER',                    'FUNCTION',                    'SYNONYM',                    'SYSTEM TABLE',                    'SYSTEM VIEW',                    'SYSTEM SEQ',					'SYSTEM MVIEW',					'MANAGEMENT TABLE' )	AND o.objclass > 0	AND u.usename = :SCHEMA_NAME	AND o.objdb in (SELECT 0::OID as objid					UNION ALL					SELECT d.oid					FROM _t_database AS d    				WHERE d.datname = :DB_NAME)	AND NOT (o.objdb = 0 AND :DB_NAME <> 'SYSTEM' 			AND c.classname NOT LIKE '%TABLE%'			AND c.classname NOT LIKE '%VIEW%')GROUP BY object_name,	object_type
minVer=458752

[queries.180]
enabled=1
caption=Objects (Netezza)
export=1
dbType=10
queryType=3
queryText=SELECT	CASE WHEN o.objname LIKE '%#' || o.objid		THEN substring(o.objname, 1, strpos(o.objname, '#') - 1)		ELSE o.objname	END AS object_name,	CASE WHEN o.objdb = 0 AND :DB_NAME <> 'SYSTEM' 		THEN '^' || 			CASE WHEN c.classname LIKE '%TABLE%' THEN 'T'			  WHEN c.classname LIKE '%VIEW%' THEN 'V'			  ELSE substring(c.classname, 1, 1) 		   END		ELSE		  CASE WHEN c.classname LIKE 'SYSTEM %' THEN substring(c.classname, 8, 2)			  WHEN c.classname IN ('MANAGEMENT TABLE', 'EXTERNAL TABLE') THEN 'TA'			  WHEN c.classname = 'SYNONYM' THEN '^' || 				  CASE WHEN ro.objtype LIKE '%TABLE%' THEN 'T'					WHEN ro.objtype LIKE '%VIEW%' THEN 'V'					ELSE substring(ro.objtype, 1, 1) 				 END			  ELSE substring(c.classname, 1, 2)			  /*			   WHEN c.classname = 'SYNONYM' THEN 				  CASE 					  WHEN rc.classname IS NULL THEN 'SN'					  WHEN rc.classname LIKE 'SYSTEM %' THEN '^' || substring(rc.classname, 8, 1)					  WHEN rc.classname IN ('MANAGEMENT TABLE', 'EXTERNAL TABLE') THEN '^T'					  ELSE '^' || substring(rc.classname, 1, 1) 				  END			  ELSE substring(c.classname, 1, 2)			  */		  END 	END AS object_type,	min(nvl(ro.objid, o.oid)) as object_id,	min(o.objcreated) as create_time,	max(o.objmodified) as alter_timeFROM    _t_object AS o		JOIN _t_object_classes AS c			on c.objclass = o.objclass		JOIN _t_object AS u			ON u.objid = o.objschemaoid		JOIN _t_object_classes as sc			ON sc.objclass = u.objclass			AND sc.classname = 'SCHEMA'					LEFT JOIN _t_synonym AS s	        ON  s.oid = o.objid		LEFT JOIN "$DB_NAME$".DEFINITION_SCHEMA._v_object_data  AS ro            ON  ro."OWNER" = s.synschema            AND ro."OBJNAME" = s.synobject            AND ro."DBNAME" = s.syncatalog		LEFT JOIN _t_object_classes AS rc            ON rc.objclass = ro.objclassWHERE c.classname IN ('TABLE',                    'VIEW',                    'MATERIALIZED VIEW',                    'SEQUENCE',                    'EXTERNAL TABLE',                    'PROCEDURE',                    'TRIGGER',                    'FUNCTION',                    'SYNONYM',                    'SYSTEM TABLE',                    'SYSTEM VIEW',                    'SYSTEM SEQ',					'SYSTEM MVIEW',					'MANAGEMENT TABLE' )	AND o.objclass > 0	AND u.objname = :SCHEMA_NAME	AND o.objdb in (SELECT 0::OID as objid					UNION ALL					SELECT d.oid					FROM _t_database AS d    				WHERE d.datname = :DB_NAME)	AND NOT (o.objdb = 0 AND :DB_NAME <> 'SYSTEM' 			AND c.classname NOT LIKE '%TABLE%'			AND c.classname NOT LIKE '%VIEW%')GROUP BY object_name,	object_type
minVer=458753

[queries.181]
enabled=1
caption=Record Count (Netezza)
export=1
dbType=10
queryType=12
queryText=SELECT t.reltuples FROM "$DB_NAME$".._v_table AS tWHERE t.objid = :OBJECT_ID	
minVer=458752

[queries.182]
enabled=1
caption=Record Count (Netezza)
export=1
dbType=10
queryType=12
queryText=SELECT t.reltuples FROM "$DB_NAME$".DEFINITION_SCHEMA._v_table AS tWHERE t.objid = :OBJECT_ID
minVer=458753

[queries.183]
enabled=1
caption=Schemas (Netezza)
export=1
dbType=10
queryType=2
queryText=select distinct u.usename as schemaname, 'SC' as schematype, u.usesysid as schemaidfrom _t_object AS o	join _t_user AS u		on u.usesysid = o.objowner    		 		join _t_object_classes AS c		on c.objclass = o.objclasswhere o.objdb in (SELECT 0::OID as objid 					UNION ALL 					SELECT d.oid 					FROM _t_database AS d					WHERE d.datname = :DB_NAME)	and c.classname IN ('TABLE',                    'VIEW',                    'MATERIALIZED VIEW',                    'SEQUENCE',                    'EXTERNAL TABLE',                    'PROCEDURE',                    'TRIGGER',                    'FUNCTION',                    'SYNONYM',                    'SYSTEM TABLE',                    'SYSTEM VIEW',                    'SYSTEM SEQ',					'SYSTEM MVIEW',					'MANAGEMENT TABLE' )	and o.objclass > 0
minVer=458752

[queries.184]
enabled=1
caption=Schemas (Netezza)
export=1
dbType=10
queryType=2
queryText=select distinct o.objname as schemaname, 'SC' as schematype, objid as schemaidfrom _t_object as o		join _t_object_classes as c			on c.objclass = o.objclasswhere c.classname = 'SCHEMA'  and o.objdb in (SELECT 0::OID as objid 					UNION ALL 					SELECT d.oid 					FROM _t_database AS d					WHERE d.datname = :DB_NAME)
minVer=458753

[queries.185]
enabled=1
caption=Synonyms (Netezza)
export=1
dbType=10
queryType=9
queryText=SELECT s.refschema || '"."' || s.refobjname, 	CASE WHEN ro.objtype LIKE 'SYSTEM %' THEN substring(ro.objtype, 8, 2)		WHEN ro.objtype IN ('MANAGEMENT TABLE', 'EXTERNAL TABLE') THEN 'TA'		WHEN ro.objtype = 'MATERIALIZED VIEW' THEN 'VI'		ELSE substring(ro.objtype, 1, 2)	END AS refobjtype,	ro.objid, 	s.refdatabaseFROM "$DB_NAME$".._v_synonym AS s	JOIN "$DB_NAME$".._v_object_data  AS ro            ON  ro."OWNER" = s.refschema            AND ro."OBJNAME" = s.refobjname            AND ro."DBNAME" = s.refdatabaseWHERE  s.objid = :OBJECT_ID		   UNION ALL        SELECT :SCHEMA_NAME || '"."' || :OBJECT_NAME  AS refobjname, 	CASE WHEN c.classname LIKE 'SYSTEM %' THEN 'VI' -- substring(c.classname, 8, 2)		WHEN c.classname IN ('MANAGEMENT TABLE', 'EXTERNAL TABLE') THEN 'TA'		WHEN c.classname = 'MATERIALIZED VIEW' THEN 'VI'		ELSE substr(c.classname, 1, 2) 	END AS refobjtype, 	o.objid,	'SYSTEM' AS refdatabaseFROM _t_object  AS o	  JOIN _t_object_classes AS c		  on c.objclass = o.objclassWHERE  o.objid = :OBJECT_ID
minVer=458752

[queries.186]
enabled=1
caption=Synonyms (Netezza)
export=1
dbType=10
queryType=9
queryText=SELECT s.refschema || '"."' || s.refobjname, 	CASE WHEN ro.objtype LIKE 'SYSTEM %' THEN substring(ro.objtype, 8, 2)		WHEN ro.objtype IN ('MANAGEMENT TABLE', 'EXTERNAL TABLE') THEN 'TA'		WHEN ro.objtype = 'MATERIALIZED VIEW' THEN 'VI'		ELSE substr(ro.objtype, 1, 2) 	END AS refobjtype, 	ro.objid,	s.refdatabaseFROM "$DB_NAME$".DEFINITION_SCHEMA._v_synonym AS s	JOIN "$DB_NAME$".DEFINITION_SCHEMA._v_object_data  AS ro            ON  ro.schema = s.refschema            AND ro.objname = s.refobjname            AND ro.dbname = s.refdatabaseWHERE  s.objid = :OBJECT_ID		   UNION ALL        SELECT :SCHEMA_NAME || '"."' || :OBJECT_NAME AS refobjname, 	CASE WHEN c.classname LIKE 'SYSTEM %' THEN 'VI' -- substring(c.classname, 8, 2)		WHEN c.classname IN ('MANAGEMENT TABLE', 'EXTERNAL TABLE') THEN 'TA'		WHEN c.classname = 'MATERIALIZED VIEW' THEN 'VI'		ELSE substr(c.classname, 1, 2) 	END AS refobjtype, 	o.objid,	'SYSTEM' AS refdatabaseFROM _t_object  AS o	  JOIN _t_object_classes AS c		  ON c.objclass = o.objclassWHERE  o.objid = :OBJECT_ID
minVer=458753

[queries.187]
enabled=1
caption=Table Objects (Netezza)
export=1
dbType=10
queryType=14
queryText=SELECT    tc.constraintname,    upper(tc.contype::TEXT),    tc.attname AS column_name,    tc.pkowner || '.' || tc.pkrelation || '.' || tc.pkattname,	0FROM "$DB_NAME$".._v_relation_keydata AS tcWHERE tc.objid = :OBJECT_IDUNION ALLSELECT 'Object identifiers' AS indexname, 	'I', 	'OID' AS column_name, 	'[Object identifiers]',	0FROM "$DB_NAME$".._v_obj_relation AS rWHERE r.objid = :OBJECT_ID    AND r.rowidname = 'OID' UNION ALLSELECT  'Distribution keys' AS indexname, 		'I',        i.attname AS column_name,         '[Distribution keys]',	   i.distattnumFROM "$DB_NAME$".._v_table_dist_map_xdb as iWHERE i.objid = :OBJECT_IDUNION ALLSELECT tr.tgname AS trigger_name, 	'TR', 	CASE tr.tgtype & cast(2 as int2)	  WHEN 0 THEN 'AFTER'	  ELSE 'BEFORE'  END || ' ' ||  CASE tr.tgtype & cast(28 as int2)	WHEN 16 THEN 'UPDATE'	WHEN  8 THEN 'DELETE'	WHEN  4 THEN 'INSERT'	WHEN 20 THEN 'INSERT, UPDATE'	WHEN 28 THEN 'INSERT, UPDATE, DELETE'	WHEN 24 THEN 'UPDATE, DELETE'	WHEN 12 THEN 'INSERT, DELETE'  END || ' ' ||  CASE tr.tgtype & cast(1 as int2)	  WHEN 0 THEN 'STATEMENT'	  ELSE 'ROW'  END AS trigger_event,   '',  0FROM _t_trigger AS trWHERE tr.tgrelid = :OBJECT_IDORDER BY 2, 1, 5
minVer=458752

[queries.188]
enabled=1
caption=Table Objects (Netezza)
export=1
dbType=10
queryType=14
queryText=SELECT    tc.constraintname,    upper(tc.contype::TEXT),    tc.attname AS column_name,    tc.pkschema || '.' || tc.pkrelation || '.' || tc.pkattname,	tc.conseqFROM "$DB_NAME$".DEFINITION_SCHEMA._v_relation_keydata AS tcWHERE tc.objid = :OBJECT_IDUNION ALLSELECT 'Object identifiers' AS indexname, 	'I', 	'OID' AS column_name, 	'[Object identifiers]',	0FROM _v_obj_relation AS rWHERE r.objid = :OBJECT_ID    AND r.rowidname = 'OID' UNION ALLSELECT  'Distribution keys' AS indexname, 		'I',        i.attname AS column_name,         '[Distribution keys]',	   i.distattnum FROM "$DB_NAME$".DEFINITION_SCHEMA._v_table_dist_map_xdb as iWHERE i.objid = :OBJECT_IDUNION ALLSELECT tr.tgname AS trigger_name, 	'TR', 	CASE tr.tgtype & cast(2 as int2)	  WHEN 0 THEN 'AFTER'	  ELSE 'BEFORE'  END || ' ' ||  CASE tr.tgtype & cast(28 as int2)	WHEN 16 THEN 'UPDATE'	WHEN  8 THEN 'DELETE'	WHEN  4 THEN 'INSERT'	WHEN 20 THEN 'INSERT, UPDATE'	WHEN 28 THEN 'INSERT, UPDATE, DELETE'	WHEN 24 THEN 'UPDATE, DELETE'	WHEN 12 THEN 'INSERT, DELETE'  END || ' ' ||  CASE tr.tgtype & cast(1 as int2)	  WHEN 0 THEN 'STATEMENT'	  ELSE 'ROW'  END AS trigger_event,   '',  0FROM _t_trigger AS trWHERE tr.tgrelid = :OBJECT_ID
minVer=458753

[queries.189]
enabled=1
caption=Table Objects (Amazon Redshift)
export=1
dbType=8
queryType=14
queryText=SELECT c."column_name" AS obj_name, 'D' AS obj_type, c."column_name", c.column_default AS obj_def, c.ordinal_positionFROM information_schema.columns cWHERE c.column_default IS NOT NULLAND c.table_schema = '$SCHEMA_NAME$' AND c."table_name" = '$OBJECT_NAME$'UNION ALLSELECT c."column_name", 'D', c."column_name", d.domain_default, c.ordinal_positionFROM information_schema.columns c  JOIN information_schema.domains d ON d.domain_catalog = c.domain_catalog AND d.domain_schema = c.domain_schema AND d.domain_name = c.domain_nameWHERE d.domain_default IS NOT NULLAND c.table_schema = '$SCHEMA_NAME$' AND c."table_name" = '$OBJECT_NAME$'UNION ALLSELECT c2.conname,	upper(substr(c2.contype,1,1)) AS const_type,	a.attname,	(nr.nspname || '.' || r.relname || '.' || a.attname),	a.attnumFROM	pg_catalog.pg_namespace nr,	pg_catalog.pg_class r,	pg_catalog.pg_attribute a,	pg_catalog.pg_namespace nc,	pg_catalog.pg_constraint c2,	pg_catalog.pg_user uWHERE	nr.oid = r.relnamespace	AND r.oid = a.attrelid	AND r.oid = c2.conrelid	AND nc.oid = c2.connamespace	AND NOT a.attisdropped	AND (			c2.contype = 'p' 			OR c2.contype = 'u' 			OR c2.contype = 'f' 		)	AND a.attnum = ANY(c2.conkey)	AND r.relkind = 'r' 	AND r.relowner = u.usesysid	AND nr.nspname = '$SCHEMA_NAME$'	AND r.relname = '$OBJECT_NAME$'UNION ALL/*SELECT i2.relname, 'I', a.attname, i2.ind_def,	a.attnum FROM (  SELECT c.oid AS tabid,		 i.relname, 		 pg_get_indexdef(i.oid) AS ind_def  FROM pg_catalog.pg_index x 	JOIN pg_catalog.pg_class c ON c.oid = x.indrelid AND c.relkind = 'r'::char 	JOIN pg_catalog.pg_class i ON i.oid = x.indexrelid AND i.relkind = 'i'::char	JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace  WHERE  n.nspname = '$SCHEMA_NAME$' 	  AND c.relname = '$OBJECT_NAME$' ) AS i2JOIN pg_catalog.pg_attribute a 	ON a.attrelid = i2.tabid   AND (',' || replace(substr(i2.ind_def, position('(' in i2.ind_def) + 1), ')', '') || ',')  LIKE '%,' || a.attname || ',%'   */	SELECT '[Distribution keys]', 'I', "column", (schemaname || '.' || tablename || '.' || "column"),	0::integerFROM    pg_catalog.pg_table_defWHERE schemaname = '$SCHEMA_NAME$'   AND tablename = '$OBJECT_NAME$'  AND distkey > 0  	 UNION ALLSELECT '[Sort keys]', 'I', "column", (schemaname || '.' || tablename || '.' || "column"),	1::integerFROM    pg_catalog.pg_table_defWHERE schemaname = '$SCHEMA_NAME$'   AND tablename = '$OBJECT_NAME$'  AND sortkey > 0  UNION ALLSELECT "trigger_name", 'TR', event_manipulation, '',	action_orderFROM information_schema.triggersWHERE event_object_schema = '$SCHEMA_NAME$'	AND event_object_table = '$OBJECT_NAME$'ORDER BY 2, 1, 5
minVer=0

[queries.190]
enabled=1
caption=Table Objects (DB2 iSeries)
export=1
dbType=3
queryType=14
queryText=SELECT C.CONSTRAINT_NAME, 'C' AS "TYPE", CC.COLUMN_NAME, chk.CHECK_CLAUSE AS CONST_DEF,	CAST(0 AS SMALLINT) AS col_positionFROM QSYS2.SYSCST  AS C  JOIN QSYS2.SYSCSTCOL AS CC	  ON CC.CONSTRAINT_SCHEMA = C.CONSTRAINT_SCHEMA	  AND CC.CONSTRAINT_NAME = C.CONSTRAINT_NAME  JOIN QSYS2.SYSCHKCST AS chk	 ON chk.CONSTRAINT_SCHEMA = C.CONSTRAINT_SCHEMA	 AND chk.CONSTRAINT_NAME = C.CONSTRAINT_NAMEWHERE C."TABLE_SCHEMA" = :SCHEMA_NAME	AND C."TABLE_NAME" = :OBJECT_NAME	AND C.CONSTRAINT_TYPE = 'CHECK' UNION ALLSELECT s.CONSTRAINT_NAME, SUBSTR(s.CONSTRAINT_TYPE, 1, 1), c.COLUMN_NAME, cr."TABLE_SCHEMA" || '.' || cr."TABLE_NAME" || '.' || cr.COLUMN_NAME,	c.ORDINAL_POSITION AS col_positionFROM QSYS2.SYSCST AS s	JOIN QSYS2.SYSKEYCST AS c		ON c.CONSTRAINT_SCHEMA = s.CONSTRAINT_SCHEMA		AND c.CONSTRAINT_NAME = s.CONSTRAINT_NAME	LEFT JOIN QSYS2.SYSREFCST AS k		ON k.CONSTRAINT_SCHEMA = s.CONSTRAINT_SCHEMA		AND k.CONSTRAINT_NAME = s.CONSTRAINT_NAME	LEFT JOIN QSYS2.SYSCST AS r		ON r.CONSTRAINT_SCHEMA = k.UNIQUE_CONSTRAINT_SCHEMA		AND r.CONSTRAINT_NAME = k.UNIQUE_CONSTRAINT_NAME	LEFT JOIN QSYS2.SYSKEYCST AS cr		ON cr.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA		AND cr.CONSTRAINT_NAME = r.CONSTRAINT_NAME		AND cr.ORDINAL_POSITION = c.ORDINAL_POSITIONWHERE s."TABLE_SCHEMA" = :SCHEMA_NAME	AND s."TABLE_NAME" = :OBJECT_NAME	AND SUBSTR(s.CONSTRAINT_TYPE, 1, 1) IN ('P', 'F', 'U') UNION ALLSELECT COLUMN_NAME, 'D', COLUMN_NAME, COLUMN_DEFAULT,	CAST(0 AS SMALLINT) AS col_positionFROM QSYS2.SYSCOLUMNSWHERE HAS_DEFAULT = 'Y'	AND TABLE_OWNER = :SCHEMA_NAME	AND "TABLE_NAME" = :OBJECT_NAMEUNION ALLSELECT i.INDEX_NAME || ' (' || CASE i.IS_UNIQUE WHEN 'N' THEN 'NONUNIQUE' ELSE 'UNIQUE' END || ')', 'I', k.COLUMN_NAME || CASE WHEN k.ORDERING = 'A' THEN ' ASC' ELSE ' DESC' END, '',	k.ORDINAL_POSITION AS col_position FROM QSYS2.SYSKEYS AS k	JOIN QSYS2.SYSINDEXES AS i		ON i.INDEX_SCHEMA = k.INDEX_SCHEMA		AND i.INDEX_NAME = k.INDEX_NAMEWHERE i.TABLE_OWNER = :SCHEMA_NAME  AND i."TABLE_NAME" = :OBJECT_NAME  UNION ALLSELECT s.TRIGGER_NAME, 'TR',     	s.EVENT_MANIPULATION,	'',	CAST(0 AS SMALLINT) AS col_positionFROM QSYS2.SYSTRIGGER AS sWHERE s.EVENT_OBJECT_SCHEMA = :SCHEMA_NAME	AND s.EVENT_OBJECT_TABLE = :OBJECT_NAMEORDER BY 2, 1, 5
minVer=0

[queries.191]
enabled=1
caption=DDL Code (DB2 UDB)
export=1
dbType=3
queryType=8
queryText=select	case external_action	when 'E' then value(text,'/* Code of this external procedure/function is not available */') 	else text 	endfrom	syscat.routineswhere	routineschema = :SCHEMA_NAMEand routinename = :OBJECT_NAMEunion allselect	textfrom	syscat.viewswhere	viewschema = :SCHEMA_NAMEand viewname = :OBJECT_NAME
minVer=0

[queries.192]
enabled=1
caption=DDL Code (MySQL)
export=1
dbType=2
queryType=8
queryText=select	concat(		'CREATE OR REPLACE DEFINER=''',REPLACE(definer, '@', '''@'''),''' SQL SECURITY ',SECURITY_TYPE,		'\nVIEW `',TABLE_NAME,'` AS\n',VIEW_DEFINITION	)from	information_schema.VIEWSwhere	TABLE_SCHEMA = :SCHEMA_NAMEand TABLE_NAME = :OBJECT_NAMEunion allselect	cast(concat(		'CREATE DEFINER=''',REPLACE(definer, '@', '''@'''),''' ',type,' `',db,'`.`',name,'` (',param_list,')',		if(returns <> '', concat('\n\tRETURNS ',returns), ''),		'\n\t',REPLACE(sql_data_access, '_', ' '),  		if(is_deterministic = 'YES','\n\tDETERMINISTIC',''),		'\n\tSQL SECURITY ', security_type,		if(comment <> '', concat('\n\tCOMMENT \'',COMMENT,'\''), ''),		'\n',body,'\n\n'	) as char)from	mysql.procwhere	db = :SCHEMA_NAMEand name = :OBJECT_NAMEunion allselect	cast(concat(		'CREATE ',		case when type = 'aggregate' then 'AGGREGATE ' else '' end,		'FUNCTION ', name, ' RETURNS ',		case ret when 0 then 'STRING' when 1 then 'REAL' else 'INTEGER' end,		' SONAME "', dl, '"'	) as char)from	mysql.funcwhere	name = :OBJECT_NAME
minVer=0

[queries.193]
enabled=1
caption=DDL Code (PostgreSQL)
export=1
dbType=7
queryType=8
queryText=select view_definitionfrom information_schema.viewswhere     table_schema = :SCHEMA_NAME     and table_name = :OBJECT_NAMEunion allselect case when routine_body = 'SQL' then '/* Procedure/function body of "' || routine_name || '" */' || chr(10) || routine_definition	    else 'Code of external routine "'|| routine_name ||'"('|| routine_definition ||') is not available'|| chr(10)	endfrom information_schema.routines pwhere     routine_schema = :SCHEMA_NAME     and routine_name = :OBJECT_NAME
minVer=0

[queries.194]
enabled=1
caption=Object Types (DB2)
export=1
dbType=3
queryType=11
queryText=select * from (select	attr_name || X'00' ||	case when attr_typename in ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'BLOB', 'CLOB', 			'DBCLOB', 'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC')		then RTRIM(attr_typename) || '(' || RTRIM(CHAR(length)) || ')'		else attr_typename 	end,	'AT'from	syscat.attributeswhere	typeschema = :SCHEMA_NAMEand	typename = :OBJECT_NAMEorder by	ordinal)union allselect	routinename,	case when functiontype = '' then 'PR' else 'FU' endfrom	syscat.routineswhere	subject_typeschema = :SCHEMA_NAMEand	subject_typename = :OBJECT_NAMEand	origin in ('Q','E')
minVer=0

[queries.195]
enabled=1
caption=Objects (PostgreSQL)
export=1
dbType=7
queryType=3
queryText=select    table_name,    case table_type        when 'BASE TABLE' then 'TA'        when 'LOCAL TEMPORARY' then 'TA'        when 'VIEW' then 'VI'        else table_type     end,    cast(NULL as TIMESTAMP) as create_time,    cast(NULL as TIMESTAMP) as alter_timefrom    information_schema.tableswhere    table_schema = :SCHEMA_NAME     and table_type is not nullunion allselect    routine_name, routine_type,    cast(NULL as TIMESTAMP) as create_time,    cast(NULL as TIMESTAMP) as alter_time from    information_schema.routineswhere    routine_schema = :SCHEMA_NAME group by    routine_name, routine_typeunion allSELECT c.relname as sequence_name, 'SQ',    cast(NULL as TIMESTAMP) as create_time,    cast(NULL as TIMESTAMP) as alter_time FROM pg_catalog.pg_class c    JOIN pg_catalog.pg_namespace n        ON n.oid=c.relnamespace         AND n.nspname = :SCHEMA_NAMEWHERE c.relkind = 'S'
minVer=458752

[queries.196]
enabled=1
caption=Record Count (DB2)
export=1
dbType=3
queryType=12
queryText=SELECT max(card)FROM syscat.tables WHERE tabschema = :SCHEMA_NAME AND tabname = :OBJECT_NAME
minVer=0

[queries.197]
enabled=1
caption=Synonyms (DB2 UDB)
export=1
dbType=3
queryType=9
queryText=select 	base_tabname, 'TA', base_tabschemafrom 	syscat.tableswhere 	tabschema = :SCHEMA_NAMEand tabname = :OBJECT_NAMEand type = 'A'
minVer=0

[conns]
enabled=0
caption=
export=1
count=3

[conns.1]
enabled=1
caption=(local) (ADO.NET)
export=1
dbType=1
dcType=2
authType=1
srvName=(local)
srvPort=
dbName=
userName=
userPswd=
dll=System.Data.SqlClient
timeOut1=10
timeOut2=60
encrypt=0
doValDBT=1
custVals=
hiliColor=0
appPlatform=0

[conns.2]
enabled=1
caption=. (ODBC)
export=1
dbType=1
dcType=0
authType=1
srvName=.
srvPort=
dbName=
userName=
userPswd=
dll=Driver={SQL Server}
timeOut1=10
timeOut2=60
encrypt=0
doValDBT=1
custVals=
hiliColor=0
appPlatform=0

[conns.3]
enabled=1
caption=(local) (ODBC)
export=1
dbType=1
dcType=0
authType=1
srvName=(local)
srvPort=
dbName=
userName=
userPswd=
dll=Driver={SQL Server}
timeOut1=10
timeOut2=60
encrypt=0
doValDBT=1
custVals=
hiliColor=0
appPlatform=0

[formats]
enabled=1
caption=
export=1
count=13

[formats.1]
enabled=1
caption=T-SQL
export=1
count=2
dbType=1
kwList=absabsentabsoluteaccent_sensitivityacosacpactiveactivationactionaddaddressaesaes_128aes_192aes_256afteraggregatealgorithmallallow_row_locksallow_page_locksallow_snapshot_isolationall_errormsgsall_constraintsall_indexesall_levelsall_resultsandanonymousansi_nullsansi_paddingansi_warningsansi_defaultsansi_null_dflt_offansi_null_dflt_onansi_null_defaultanyappendapplicationapplock_modeapplock_testapplyapp_namearithabortarithignoreasascasciiasinassemblyassemblypropertyasymmetricatanatn2attachattach_rebuild_logattestedauthorizationauthenticationauth_realmautoauto_closeauto_create_statisticsauto_shrinkauto_update_statisticsauto_update_statistics_asyncavgbackupbase64basicbatchsizebatchesbegin_dialogbetweenbigintbinary_checksumbinarybindingbitblocksizebreakbroker_instancebrowsebuffercountbulkbulk_loggedbycalledcallercascadecastcatalogcatchceilingcertificatechange_trackingcharcharindexcharacter_setcheckcheck_constraintscheckpointchecksumchecksum_aggcheckalloccheckcatalogcheckconstraintscheckdbcheckfilegroupcheckidentchecktablecheck_expirationcheck_policycleantableclearcleanupclear_portcloseclusteredcoalescecodepagecollatecollectioncollationpropertycolumncolumnpropertycolumns_updatedcolumnscol_lengthcol_namecommitcommittedcomputecompressionconcatconcat_null_yields_nullconstraintcontractcontentcontinue_after_errorcontainscontainstablecontext_infocontinueconversationconvertcookiecopy_onlycoscotcountercountcount_bigcount_rowscredentialcrosscubecurrentcurrent_request_idcurrent_timestampcurrent_usercursor_close_on_commitcursor_defaultcursor_statuscursordatabasedatabase_mirroringdatadatafiletypedatabasepropertydatabasepropertyexdatabase_principal_iddatalengthdata_puritydatabase_snapshotdate_correlation_optimizationdateadddatediffdatenamedatepartdatefirstdateformatdatetimedaydbccdbreindexdb_chainingdb_iddb_namedeadlock_prioritydeallocatedecimaldecryptiondefaultdefault_schemadefault_databasedefault_languagedefault_logon_domaindegreesdelaydeletedeleteddense_rankdenydependentsdesdescriptiondescdesxdialogdifferentialdifferencedigestdisableddisabledisable_brokerdiskdistinctdistributeddocumentdrop_existingdropcleanbuffersdynamicelementselseemergencyemptyemptyfileenableenable_brokerenabledencryptionendpointerrorfileerror_broker_conversationserrorerror_lineerror_messageerror_numbererror_procedureerror_severityerror_stateescapeestimateonlyeventeventdataexceptexecutableexpexpandexpiredateexpiry_dateexplicitexternalexternal_accessfailoverfalsefan_infastfast_forwardfastfirstrowfetchfieldterminatorfilefilegroupfilenamefilegrowthfilegrouppropertyfilegroup_idfilegroup_namefilepropertyfile_idfile_idexfile_namefilelistonlyfillfactorfips_flaggerfire_triggersfirstrowfirstfloatfloorfmtonlyforforceforce_service_allow_data_lossforcedforceplanforeignformatfileformatmessageformsofformatforward_onlyfreefreeproccachefreesessioncachefreesystemcachefreetextfreetexttablefulltextfullfullscanfulltextcatalogpropertyfulltextservicepropertyfunctiongetgetansinullgetdategetutcdateget_transmission_statusglobalgogotograntgroupgroupinghashedhashhas_dbaccessheaderonlyheader_limithelphighholdlockhost_idhost_namehttpidentityident_currentident_incrident_seedidentity_valueidentity_insertifignore_dup_keyignore_constraintsignore_triggersimageimmediateimplicit_transactionsincludeincrementalindexindexdefragindexkey_propertyindexpropertyindex_colinflectionalinitiatorinitinnerinputinputbufferinsertinsensitiveinsertedinsteadintintegratedintersectintoioisisaboutisdateisnullisnumericisolationis_memberis_srvrolememberjobjoinkeepidentitykeepnullskeep_replicationkeepkeepfixedkeepdefaultskerberoskeykeyskeysetkey_sourcekillkilobytes_per_batchlabelonlylanguagelastrowlastleftlenlevellifetimelikelistener_portlistener_iploadhistorylob_compactionlocallock_timeoutloglog10loginloginpropertylogin_typelogspacelooplowlowerltrimmachinemanualmarkmark_in_use_for_removalmastermaxmaxdopmaxerrorsmaxrecursionmaxsizemaxtransfersizemax_queue_readersmd2md4md5medianamemediapasswordmediadescriptionmergemessagemessage_forwardingmessage_forward_sizeminmirror_addressmirrormixedmodifymoneymonthmovemulti_usermust_changenamenamespacencharnearnegotiatenevernewidnewnamenewsequentialidnew_accountnew_passwordnew_brokernextnochecknocountnoexecnoexpandnoformatnoindexnoinitnolocknonclusterednonenorecoverynorewindnorecomputenoreseednoresetnormalnoskipnotificationnotruncatenounloadnowaitno_checksumno_infomsgsno_logno_truncateno_waitntextntilentlmnullnullifnumericnumeric_roundabortnvarcharobjectobjectpropertyobjectpropertyexobject_definitionobject_idobject_nameoemofoffofflineoffsetsold_accountold_passwordononlineonlyopentranopenopendatasourceopenqueryopenrowsetopenxmloptionoptimisticoptimizeororderoriginal_loginoutouteroutputoutputbufferoveroverrideownerpad_indexpagepage_verifypagecountpaglockparameterizationparsenameparseonlypartitionpartnerpartialpasswordpathpatindexpercentpermission_setpermissionspersistedphysical_onlypipivotplanpopulationportspowerprimaryprintpriorprivateprivilegesprocprocedureprocedure_nameproccacheprofilepropertypublishingservernameputqueryquery_governor_cost_limitqueuequotenamequoted_identifierradiansraiserrorrandrangerankrawrc2rc4rc4_128readonlyreadwriteread_onlyread_writeread_write_filegroupsreadreadtextread_committed_snapshotreadcommittedreadcommittedlockreadpastreaduncommittedrealrebuildreceiverecoveryrecompilereconfigurerecursive_triggersreferencesregeneraterelated_conversationrelated_conversation_grouprelativeremoveremoteremote_proc_transactionsreorganizerepair_allow_data_lossrepair_fastrepair_rebuildrepeatablerepeatablereadreplicationreplacereplicaterequiredresamplereseedrestartrestricted_userrestoreresumeretaindaysretentionreturnsreturnrevertreverserevokerewindrewindonlyrightrobustrolerolluprollbackrootroundrouterowcount_bigrowcountrowguidcolrowlockrows_per_batchrowsrowsets_onlyrowterminatorrow_numberrsa_512rsa_1024rsa_2048rtrimrulesafesafetysamplesaveschemaschemeschemabindingschema_idschema_namescope_identityscrollscroll_lockssecondssecretselfsendsentserializableservice_brokerserviceservice_nameserverserverpropertysessionpropertysession_usersessionssession_timeoutsetsetusershasha1showcontigshow_statisticsshowplan_allshowplan_textshowplan_xmlshrinkdatabaseshrinkfileshutdownsidsignaturesignsimplesinsingle_usersingle_blobsingle_clobsingle_nclobsitesizeskipsmalldatetimesmallintsmallmoneysnapshotsoapsomesort_in_tempdbsoundexspacesplitsqlsqlperfsql_variantsql_variant_propertysqrtsquaresslssl_portstandbystandardstartedstartstart_datestatestatusstatistics_norecomputestatsstatisticsstats_streamstat_headerstaticstatusonlystats_datestdevstdevpstoppedstopstop_on_errorstopatstopatmarkstopbeforemarkstrstuffsubjectsubscriptionsubstringsumsupportedsuser_idsuser_namesuser_sidsuser_snamesuspendswitchsymmetricsynonymsysnamesystem_usersystemtabletablocktableresultstablesampletablockxtantapetargettcptemplatetertiary_weightstexttextimage_ontextsizetextptrtextvalidthenthesaurustiestimetimeouttimertimestamptinyinttotoptorn_page_detectiontraceofftraceontracestatustransfertrantransactiontriggertrigger_nestleveltriple_destruetruncateonlytruncate_onlytruncatetrustworthytrytsqltypetype_warningtypepropertytype_idtype_nameuncheckeduncommittedunicodeuniqueuniqueidentifierunlimitedunloadunlockunpivotunsafeuowupdateusageupdatetextupdlockupperurluseuseduseruseroptionsuser_iduser_nameusingvalidationvalid_xmlvaluesvaluevarvarbinaryvarcharvarpvaryingverifyonlyviewviewsview_metadatavisibilitywaitforwebmethodweightwell_formed_xmlwhenwherewhilewindowswithwithoutwitnessworkwritewritetextwsdlxact_abortxact_statexlockxmlxmldataxmlnamespacesxmlschemaxsinilyear[Preferred keywords]alter tablealter functionalter procedurealterbeginbegin trybegin catchcasecase whencreate tablecreatedeclaredelete fromdrop tabledrop proceduredrop functiondropendend tryend catchexecexecuteexistsfromgroup byhavinginsert intoinnotnot nullnot innot existsorder byselectselect top select top 5 * fromselect distincttruncate tableunionunion allupdatewhere[Do not add delimiters]idname

[formats.1.1]
enabled=1
caption=T-SQL Default Style
export=1
count=28
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.1.1.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...

[formats.1.1.2]
enabled=1
caption=case
export=1
body=CASE ...     WHEN ... THEN ...     ELSE ...END

[formats.1.1.3]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>END

[formats.1.1.4]
enabled=1
caption=if
export=1
body=IF ...   AND ...   OR ...BEGIN    <stmtList>END...ELSE    ...BEGIN    <stmtList>END

[formats.1.1.5]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...BEGIN    <stmtList>END

[formats.1.1.6]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  )

[formats.1.1.7]
enabled=1
caption=update
export=1
body=UPDATE ...SET    ... = ...,       ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...

[formats.1.1.8]
enabled=1
caption=delete
export=1
body=DELETE ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...

[formats.1.1.9]
enabled=1
caption=exec
export=1
body=EXEC ...,     ...

[formats.1.1.10]
enabled=1
caption=declare
export=1
body=DECLARE ...,        ... CURSOR ... FOR    ...;

[formats.1.1.11]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...)

[formats.1.1.12]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...	@...	@...WITH ..., ...AS	<stmtList>GO

[formats.1.1.13]
enabled=1
caption=alter procedure
export=1
body=ALTER PROCEDURE ...	@...	@...WITH ..., ...AS	<stmtList>GO

[formats.1.1.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURNS ...WITH ..., ...AS	<stmtList>GO

[formats.1.1.15]
enabled=1
caption=alter function
export=1
body=ALTER FUNCTION ...(	...,	...)RETURNS ...WITH ..., ...AS

[formats.1.1.16]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.1.1.17]
enabled=1
caption=alter trigger
export=1
body=ALTER TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.1.1.18]
enabled=1
caption=set
export=1
body=SET ... = ...

[formats.1.1.19]
enabled=1
caption=begin try
export=1
body=BEGIN TRY	<stmtList>END TRY

[formats.1.1.20]
enabled=1
caption=begin catch
export=1
body=BEGIN CATCH	<stmtList>END CATCH

[formats.1.1.21]
enabled=1
caption=(...)
export=1
body=(    ...,    ...    AND ...    OR ...)

[formats.1.1.22]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.1.1.23]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.1.1.24]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.1.1.25]
enabled=1
caption=default values
export=1
body=DEFAULT VALUES

[formats.1.1.26]
enabled=1
caption=with
export=1
body=WITH ...

[formats.1.1.27]
enabled=1
caption=merge
export=1
body=MERGE INTO ... AS ... USING (          ...       ) AS ... ON ... = ...    AND ...    OR ... WHEN MATCHED THEN UPDATE ... SET ... = ... WHEN NOT MATCHED BY TARGET THEN INSERT ... (    ...    ,... ) VALUES (    ...    ,... ) WHEN NOT MATCHED BY SOURCE THEN DELETE ;

[formats.1.1.28]
enabled=1
caption=execute
export=1
body=EXECUTE ...,     ...

[formats.1.2]
enabled=1
caption=T-SQL Custom Style 1
export=1
count=28
autoIndent=1
kwConvert=1
maxBrkLen=1000
maxLineLen=80
separate=0
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.1.2.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...FROM   ... AS ...,       ...JOIN   ...  ON   ... = ... AND   ...WHERE  ...  AND  ...   OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...

[formats.1.2.2]
enabled=1
caption=case
export=1
body=CASE ...     WHEN ... THEN ...     ELSE ...END

[formats.1.2.3]
enabled=1
caption=begin
export=1
body=BEGIN    <stmtList>END

[formats.1.2.4]
enabled=1
caption=if
export=1
body=IF ...   AND ...   OR  ...BEGIN    <stmtList>END...ELSE    ...BEGIN    <stmtList>END

[formats.1.2.5]
enabled=1
caption=while
export=1
body=WHILE ...  AND  ...   OR  ...BEGIN    <stmtList>END

[formats.1.2.6]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  )

[formats.1.2.7]
enabled=1
caption=update
export=1
body=UPDATE ...SET    ... = ...,       ...FROM   ... AS ...,       ...JOIN   ...  ON   ... = ... AND   ...WHERE  ...  AND  ...   OR  ...

[formats.1.2.8]
enabled=1
caption=delete
export=1
body=DELETE ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...           AND  ...WHERE  ...  AND  ...   OR  ...

[formats.1.2.9]
enabled=1
caption=exec
export=1
body=EXEC ...,     ...

[formats.1.2.10]
enabled=1
caption=declare
export=1
body=DECLARE ...,        ... CURSOR ... FOR    ...;

[formats.1.2.11]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...)

[formats.1.2.12]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...	@...	@...WITH ...,     ...AS	<stmtList>GO

[formats.1.2.13]
enabled=1
caption=alter procedure
export=1
body=ALTER PROCEDURE ...	@...	@...WITH ...,     ...AS	<stmtList>GO

[formats.1.2.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURNS ...WITH ...,     ...AS	<stmtList>GO

[formats.1.2.15]
enabled=1
caption=alter function
export=1
body=ALTER FUNCTION ...(	...,	...)RETURNS ...WITH ...,     ...AS

[formats.1.2.16]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.1.2.17]
enabled=1
caption=alter trigger
export=1
body=ALTER TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.1.2.18]
enabled=1
caption=set
export=1
body=SET ... = ...

[formats.1.2.19]
enabled=1
caption=begin try
export=1
body=BEGIN TRY    <stmtList>END TRY

[formats.1.2.20]
enabled=1
caption=begin catch
export=1
body=BEGIN CATCH    <stmtList>END CATCH

[formats.1.2.21]
enabled=1
caption=(...)
export=1
body=(    ...,    ...    AND ...    OR ...)

[formats.1.2.22]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.1.2.23]
enabled=0
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.1.2.24]
enabled=1
caption=in
export=1
body=IN (...,    ...)

[formats.1.2.25]
enabled=1
caption=default values
export=1
body=DEFAULT VALUES

[formats.1.2.26]
enabled=1
caption=with
export=1
body=WITH ...

[formats.1.2.27]
enabled=1
caption=merge
export=1
body=MERGE INTO ... AS ... USING (          ...       ) AS ... ON ... = ...    AND ...    OR ... WHEN MATCHED THEN UPDATE ... SET ... = ... WHEN NOT MATCHED BY TARGET THEN INSERT ... (    ...    ,... ) VALUES (    ...    ,... ) WHEN NOT MATCHED BY SOURCE THEN DELETE ;

[formats.1.2.28]
enabled=1
caption=execute
export=1
body=EXECUTE ...,     ...

[formats.2]
enabled=1
caption=PL/SQL
export=1
count=2
dbType=0
kwList=abortabsaccessaccessedaccountacosactivateaddadd_monthsadminadministeradviseafteragentaggregatealiasallall_rowsallocateallowalwaysanalyzeancillaryandanyappendappendchildxmlapplyarchivearchivelogarrayarraylenasascasciiasciistrasinassertassignassociateatatanatan2attributeattributesauditauthenticatedauthenticationauthidauthorizationautoautoallocateautoextendautomaticautonomous_transactionavailabilityavgbackupbase_tablebatchbecomebeforebeginbetweenbfilebfilenamebigfilebin_to_numbinary_doublebinary_floatbinary_integerbindingbitandbitmapblobblockblock_rangeblocksizebodybooleanbothboundbroadcastbuffer_cachebuffer_poolbuildbulkbulk_exceptionsbulk_rowcountbybytecachecache_instancescallcancelcanonicalcardinalitycascadecastcategoryceilcfilechainedchangecharchar_basechar_cscharacterchartorowidcheckcheckpointchildchisq_dfchisq_obschisq_sigchoosechrchunkclassclearclobclonecloseclose_cached_open_cursorsclustercluster_idcluster_probabilitycluster_setclusterscoalescecoarsecoefficientcohens_kcolauthcollectcollectioncolumncolumn_valuecolumnscommentcommitcommittedcompactcompatibilitycompilecompletecomposecomposite_limitcompresscomputeconcatconnectconnect_timeconsiderconsistentconstantconstraintconstraintsconstructorcont_coefficientcontainercontentcontentscontextcontinuecontrolfileconvertcorrcorr_kcorr_scorruptioncoscoshcostcountcovar_popcovar_sampcpu_per_callcpu_per_sessioncramers_vcreate_stored_outlinescrosscubecume_distcurrentcurrent_datecurrent_ofcurrent_schemacurrent_timecurrent_timestampcurrent_usercurrvalcursorcursor_sharing_exactcvcycledanglingdatadata_basedatabasedatafiledatafilesdataobjnodatedate_modedaydbadba_recyclebindbtimezonedbtmezoneddldeallocatedebugdebugoffdebugondecdecimaldecodedecomposedecrementdecryptdefaultdeferrabledeferreddefinerdefinitiondegreedelaydeletedeletexmldemanddense_rankdepthderefdescdeterminesdeterministicdfdf_betweendf_dendf_numdf_withindictionarydigitsdimensiondirectorydisabledisassociatedisconnectdiskdiskgroupdisksdismountdisposedistinctdistributeddmldodocumentdoubledowngradedriving_sitedumpdynamicdynamic_samplingeachelementelseelsifemptyempty_blobempty_clobenableencryptencryptionendenforceenforcedenterpriseentryequals_patherror_codeerror_indexerrorsescapeestimateeventsexact_probexceptexceptionexception_initexceptionsexchangeexcludingexclusiveexistsnodeexitexpexpireexplainexplosionextendextendsextentextentsexternalexternallyextractextractvaluef_ratiofactfailedfailed_login_attemptsfailgroupfalsefastfeature_idfeature_setfeature_valuefetchfilefilterfinalfinefinishfirstfirst_rowsfirst_valueflaggerflashbackfloatflobfloorflushfollowingforforallforceforeignformfoundfreelistfreelistsfreepoolsfreshfrom_tzfullfunctionfunctionsgeneratedgenericglobalglobal_namegloballygotograntgreatestgroupgroup_idgroupinggrouping_idgroupsguaranteeguardhashhashkeysheaderheaphextorawhierarchyhighhourididentifiedidentifieridgeneratorsidle_timeifignoreimmediatein_outincludingincrementincrementalindexindex_ascindex_combineindex_descindex_ffsindex_joinindex_ssindex_ss_ascindex_ss_descindexedindexesindextypeindextypesindicatorindicesinfiniteinitcapinitialinitializedinitiallyinitransinnerinsertinsertchildxmlinsertxmlbeforeinstanceinstancesinstantiableinsteadinstrinstr2instr4instrbinstrcintintegerinterfaceintermediateintersectintervalintoinvalidateisis_recordisolationisolation_levelisopeniterateiteration_numberjavajoinkeepkeykilllabellaglanguagelastlast_daylast_valuelayerleadleadingleastleftlengthlength2length4lengthblengthclesslevellevelslibrarylikelike2like4likeclimitlimitedlinklistlnlnnvlloblocallocaltimelocaltimestamplocationlocatorlocklockedloglogfilelogginglogicallogical_reads_per_calllogical_reads_per_sessionlogofflogonlonglooplowerlpadltrimmainmake_refmanagemanagedmanagementmanualmapmappingmastermatchedmaterializedmaxmaxarchlogsmaxdatafilesmaxextentsmaximizemaxinstancesmaxlogfilesmaxloghistorymaxlogmembersmaxsizemaxtransmaxvaluemean_squares_betweenmean_squares_withinmeasuresmedianmembermemorymergemethodminminextentsminimizeminimumminusminuteminvaluemirrormlslabelmodmodemodelmodel_min_analysismodifymonitoringmonthmonths_betweenmountmovemovementmts_dispatchersmultisetnamenamednannanvlnationalnaturalnaturalnnavncharnchar_csnchrnclobneedednestednested_table_idnetworknevernewnew_timenextnext_daynextvalnls_calendarnls_charactersetnls_charset_decl_lennls_charset_idnls_charset_namenls_compnls_currencynls_date_formatnls_date_languagenls_initcapnls_iso_currencynls_langnls_languagenls_lowernls_numeric_charactersnls_sortnls_special_charsnls_territorynls_uppernlssortnono_expandno_factno_indexno_index_ffsno_index_ssno_mergeno_parallelno_parallel_indexno_push_predno_push_subqno_px_join_filterno_query_transformationno_rewriteno_star_transformationno_unnestno_use_hashno_use_mergeno_use_nlno_xml_query_rewritenoappendnoarchivelognoauditnocachenocompressnocopynocyclenodelaynoforcenoguaranteenologgingnomappingnomaxvaluenominimizenominvaluenomonitoringnonenoordernooverridenoparallelnorelynorepairnoresetlogsnoreversenormalnorowdependenciesnosegmentnosortnoswitchnot_nullnotfoundnothingnovalidatenowaitntilenullnullifnullsnumbernumber_basenumericnumtodsintervalnumtoymintervalnvarchar2nvlnvl2objectobjnoobjno_reuseocirowidofoffofflineoidoidindexoldonone_sided_prob_or_lessone_sided_prob_or_moreone_sided_sigone_sided_sig_negone_sided_sig_posonlineonlyopaqueopcodeopenoperatoroptimaloptimizer_goaloptionorora_hashorderorderedordinalityorganizationothersoutouteroutlineoveroverflowoverlapsoverridingownpackagepackagesparallelparallel_enableparallel_indexparametersparentpartitionpartition_hashpartition_rangepartitionspassingpasswordpassword_grace_timepassword_life_timepassword_lock_timepassword_reuse_maxpassword_reuse_timepassword_verify_functionpathpctfreepctincreasepctthresholdpctusedpctversionpercentpercent_rankpercentile_contpercentile_discperformancepermanentpfilephi_coefficientphysicalpipelinedplanpls_integerplsql_debugpointpositivepositivenpost_transactionpowerpowermultisetpowermultiset_by_cardinalitypq_distributepragmaprebuiltprecedingprecisionpredictionprediction_costprediction_detailsprediction_probabilityprediction_setpreparepresentpresentnnvpresentvpreservepreviousprimarypriorprivateprivate_sgaprivilegeprivilegesprocedureprofileprojectprotectionpublicpurgepush_predpush_subqpx_granulepx_join_filterqb_namequeryqueuequiescequotaraiserandomrangerankratio_to_reportrawrawtohexrawtonhexrbareadreadsrealrebalancerebuildrecordrecords_per_blockrecoverrecoverablerecoveryrecyclerecyclebinreducedredundancyrefreferencereferencedreferencesreferencingrefreshreftohexregexp_instrregexp_likeregexp_replaceregexp_substrregisterregr_avgxregr_avgyregr_countregr_interceptregr_r2regr_sloperegr_sxxregr_sxyregr_syyrejectrekeyrelationalreleaserelyremainderrenamerepairreplacerequiredresetresetlogsresizeresolveresolverresourcerestorerestrictrestrict_referencesrestrictedresultresumableresumeretentionreturnreturningreusereverserevokerewriterightrndsrnpsrolerolesrollbackrolluproundrowrow_numberrowcountrowdependenciesrowidrowidtocharrowidtoncharrownumrowsrowtyperpadrtrimrulerulessaltsamplesavesavepointsb4scanscan_instancesschemascnscn_to_timestampscopesd_allsd_inhibitsd_showsecondseedseg_blockseg_filesegmentselectivityselfseparatesequencesequentialserializableserially_reusableservererrorsessionsession_cached_cursorssessions_per_usersessiontimezonesetsetssettingssharesharedshared_poolshrinkshutdownsiblingssidsigsignsinsinglesingletasksinhsizeskipskip_unusable_indexessmallfilesmallintsnapshotsomesortsoundexsourcespacespecificationspfilesplitsqlsql_tracesqlcodesqlerrmsqrtstandalonestandbystar_transformationstartstartupstatementstatement_idstaticstatisticstatisticsstats_binomial_teststats_crosstabstats_f_teststats_ks_teststats_modestats_mw_teststats_one_way_anovastats_t_test_indepstats_t_test_indepustats_t_test_onestats_t_test_pairedstats_wsr_teststddevstddev_popstddev_sampstopstoragestorestructuresubmultisetsubpartitionsubpartitionssubstitutablesubstrsubstr2substr4substrbsubstrcsubtypesuccessfulsumsum_squares_betweensum_squares_withinsummarysupplementalsuspendswitchswitchoversynonymsyssys_connect_by_pathsys_contextsys_dburigensys_extract_utcsys_guidsys_op_bitvecsys_op_enforce_not_null$sys_op_noexpandsys_op_ntcimg$sys_typeidsys_xmlaggsys_xmlgensysauxsysdatesysdbasysopersystemsystimestamptabauthtabletablestablespacetablespace_notabnotantanhtasktempfiletemplatetemporaryterminatetestthanthethenthreadthroughtimetime_zonetimeouttimestamptimestamp_to_scntimezone_abbrtimezone_hourtimezone_minutetimezone_regiontoto_binary_doubleto_binary_floatto_charto_clobto_dateto_dsintervalto_lobto_multi_byteto_ncharto_nclobto_numberto_single_byteto_timestampto_timestamp_tzto_ymintervaltopleveltracetracingtrackingtrailingtransactiontransitionaltranslatetreattriggertriggerstrimtruetrunctruncatetrusttrustedtwo_sided_probtwo_sided_sigtypetypestz_offsetu_statisticuidunarchivedunboundunboundedunderunder_pathundoundropuniformuniqueunistrunlimitedunlockunnestunprotectedunquiesceunrecoverableuntilunusableunusedupd_indexesupdatableupdatedupdatexmlupgradeupperupserturowidusageuseuse_concatuse_hashuse_mergeuse_nluse_nl_with_indexuse_stored_outlinesuseruser_defineduserenvusersusingvalidatevalidationvaluevaluesvar_popvar_sampvarcharvarchar2variablevariancevarrayvarryingvaryingversionversionsviewvsizewaitwalletwellformedwhenwheneverwherewhilewidth_bucketwithwithinwithoutwndswnpsworkwritexidxmlaggxmlattributesxmlcdataxmlcolattvalxmlcommentxmlconcatxmlelementxmlforestxmlnamespacesxmlparsexmlpixmlqueryxmlrootxmlschemaxmlsequencexmlserializexmltablexmltransformxmltypexoryearyeszone[Preferred keywords]alter tablealter functionalter procedurealtercasecase whencreate or replacecreate tablecreatedeclaredelete fromdrop tabledrop proceduredrop functiondropexecexecuteexistsfromgroup byhavinginsert intoinnotnot nullnot innot existsorder byselectselect distincttruncate tableunionunion allupdatewhere[Do not add delimiters]idname

[formats.2.1]
enabled=1
caption=PL/SQL Default Style
export=1
count=28
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.2.1.1]
enabled=1
caption=select
export=1
body=SELECT	... AS ...,	...INTO	...,	...FROM	... AS ...,	...	JOIN ...		ON   ...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...,	...HAVING	...,	...ORDER BY	...,	...;

[formats.2.1.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  );

[formats.2.1.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.2.1.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...;

[formats.2.1.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.2.1.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.2.1.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.2.1.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.1.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.2.1.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.2.1.11]
enabled=1
caption=procedure
export=1
body=PROCEDURE ...(	...,	...)IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.1.12]
enabled=1
caption=function
export=1
body=FUNCTION ...(	...,	...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.1.13]
enabled=1
caption=declare
export=1
body=DECLARE	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.1.14]
enabled=1
caption=type
export=1
body=TYPE ... IS RECORD (	...,	...);

[formats.2.1.15]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...) ...;

[formats.2.1.16]
enabled=1
caption=create package
export=1
body=CREATE PACKAGE ...IS	<stmtList>[BEGIN]	<stmtList>END

[formats.2.1.17]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...[DECLARE]	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.1.18]
enabled=1
caption=(...)
export=1
body=(	...,	...	AND ...	OR ...)

[formats.2.1.19]
enabled=1
caption=create type
export=1
body=CREATE TYPE ...(	...,	... [FUNCTION]... [PROCEDURE]...)

[formats.2.1.20]
enabled=1
caption=create type body
export=1
body=CREATE TYPE BODY ...IS	<stmtList>END

[formats.2.1.21]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.2.1.22]
enabled=1
caption=execute
export=1
body=EXECUTE IMMEDIATE ...   [INTO] ...  [USING] ...

[formats.2.1.23]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.2.1.24]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.1.25]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...(	...,	...)IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.1.26]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.2.1.27]
enabled=1
caption=varray
export=1
body=VARRAY(...) OF ...

[formats.2.1.28]
enabled=1
caption=with
export=1
body=WITH ...

[formats.2.2]
enabled=1
caption=PL/SQL Custom Style 1
export=1
count=28
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=1
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.2.2.1]
enabled=1
caption=select
export=1
body=SELECT	... AS ...   ,...INTO	...   ,...FROM	... AS ...   ,...	JOIN ...		ON   ...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...   ,...HAVING	...   ,...ORDER BY	...   ,...;

[formats.2.2.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.2.2.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.2.2.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...	AND ...	OR  ...;

[formats.2.2.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.2.2.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.2.2.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.2.2.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.2.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.2.2.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.2.2.11]
enabled=1
caption=procedure
export=1
body=PROCEDURE ...(	...   ,...)IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.2.12]
enabled=1
caption=function
export=1
body=FUNCTION ...(	...   ,...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.2.13]
enabled=1
caption=declare
export=1
body=DECLARE	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.2.14]
enabled=1
caption=type
export=1
body=TYPE ... IS RECORD (	...   ,...);

[formats.2.2.15]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...) ...;

[formats.2.2.16]
enabled=1
caption=create package
export=1
body=CREATE PACKAGE ...IS	<stmtList>[BEGIN]	<stmtList>END

[formats.2.2.17]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...[DECLARE]	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.2.18]
enabled=1
caption=(...)
export=1
body=(	...   ,...	AND ...	OR ...)

[formats.2.2.19]
enabled=1
caption=create type
export=1
body=CREATE TYPE ...(	...   ,... [FUNCTION]... [PROCEDURE]...)

[formats.2.2.20]
enabled=1
caption=create type body
export=1
body=CREATE TYPE BODY ...IS	<stmtList>END

[formats.2.2.21]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.2.2.22]
enabled=1
caption=execute
export=1
body=EXECUTE IMMEDIATE ...   [INTO] ...  [USING] ...

[formats.2.2.23]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.2.2.24]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...   ,...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.2.25]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...(	...   ,...)IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.2.2.26]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.2.2.27]
enabled=1
caption=varray
export=1
body=VARRAY(...) OF ...

[formats.2.2.28]
enabled=1
caption=with
export=1
body=WITH ...

[formats.3]
enabled=1
caption=DB2
export=1
count=2
dbType=3
kwList=absabsvalaccessaccordingacosactionactivateaddadministrationafteragealiasallallocateallowalterinalwaysandanyappendappl_idappl_namearearrayasascasciiasensitiveasinassociateasutimeasymmetricasynchronyatatanatan2atanhatomicattachattributeattributesauditauth_idauthorizationauthorizedautomaticautoresizeautostartauxauxiliaryavgbase64beforebeginbernoullibetweenbigintbinarybindbindaddbitblobblockedblockinsertblocksizebooleanbothbufferbufferpoolbufferpoolsbuffersizebuildbycachecachingcallcalledcallercapturecardinalitycascadecascadedcastccsidceilceilingchangescharchar_lengthcharactercharacter_lengthcheckcheckedchrclientclobcloseclrclustercoalescecobolcodeunits16codeunits32collatecollation_key_bitcollectcollectioncollidcolumncolumnscommentcommitcompactcomparisonscompilationcomponentcomponentscompoundcompresscompressionconcatconditionconfirmconnectconnectionconnectionsconstraintcontainerscontainscontentcontinuecontrolconvertcorrcorrelationcorrespondingcoscoshcotcountcount_bigcovarcovar_popcovar_sampcovariancecreate_external_routinecreate_not_fenced_routinecreateincreatetabcrosscscubecume_distcurrentcurrent_datecurrent_default_transform_groupcurrent_lc_ctypecurrent_pathcurrent_rolecurrent_schemacurrent_servercurrent_timecurrent_timestampcurrent_timezonecurrent_transform_group_for_typecurrent_usercursorcursorscycledatadatabasedatabasefromdatabasetodatapartitionnamedatapartitionnumdatedaydaynamedayofweekdayofweek_isodayofyeardaysdb2_return_statusdb2_token_stringdb2generaldb2genrldb2lbacreadarraydb2lbacreadsetdb2lbacreadtreedb2lbacrulesdb2lbacwritearraydb2lbacwritesetdb2lbacwritetreedb2securitylabeldb2sqldbadmdbclobdbinfodbpartitionnamedbpartitionnumdbpartitionnumsdeactivatedeadlocksdeallocatedecdecimaldeclare_cursor_statementdecompositiondecrypt_bindecrypt_chardefaultdefaultsdeferreddefinitiondegreedegreesdeletedense_rankdenserankderefdescdescribedescriptordetachdetaileddetailsdetermineddeterministicdevicediagnosticsdifferencedigitsdimensionsdisabledisallowdisconnectdispatchdistinctdistributedistributeddistributiondodocumentdoubledouble_precisiondropindroppeddssizedynamiceacheditprocelementelseelseifemptyenableencodingencryptencryptionendend-execendingenforcedenvironmenteraseescapeeurevaluateeventevent_mon_stateeveryexactexceptexceptionexcludesexcludingexclusiveexemptionexitexpexplainexpressionextendextensionextentsizeexternalextractfalsefederatedfederated_toolfencedfetchfieldprocfilefilterfinalfirstfloatfloorflushfollowingforforceforeignfoundfreefullfunctionfusiongeneralgenerategenerate_uniquegeneratedgetgethintglobalgogotograntgraphicgroupgroupinghandlerhashhashed_valuehashedvaluehashinghexhierarchyhighhinthistoryholdhourhoursididentityidentity_val_localifignoreimmediateimplicitimplicit_schemainincludeincludesincludinginclusiveincreasesizeincrementincrementalindexindexesindicatorinfixinheritinitiallyinitialsizeinlineinnerinoutinputinsensitiveinsertinstantiableinsteadintintegerintegrityintersectintersectionintervalintoisisoisobidisolationiteratejarjavajisjoinjulian_daykeepkeylabellanguagelargelastlaterallc_ctypelcaseleadingleaveleftlengthlevellevel2librarylikelinktypelnloadlocallocaldatelocalelocaltimelocaltimestamplocatelocationlocatorlocatorslocklockmaxlockslocksizeloglog10loggedlonglong_varcharlong_vargraphiclongvarlooplowlowerltrimmainmaintainedmanagedmanualstartmappingmatchmatchedmaterializedmaxmaxfilesmaxfilesizemaxsizemaxvaluemembermergemessage_textmethodmethodsmicrosecondmicrosecondsmidnight_secondsminminpctusedminuteminutesminvaluemodmodemodifiesmodulemonitormonthmonthnamemonthsmovementmultiply_altmultisetnamenamespacenationalnaturalncharnclobnewnew_tablenextnextvalnicknamenonocachenocyclenodenamenodenumbernomaxvaluenominvaluenonblockednonenoordernormalizenormalizednullnullifnullsnumnumbernumblockpagesnumericnumpartsobidobjectoctet_lengthoctetsofoffoldold_tableoleoledbononceonlineonlyopenoptimizationoptimizeoptionoptionsororderorganizeoutouteroutputoveroverflowoverheadoverlapsoverlayoverrideoverridingownershippackagepackagesetpaddedpagepagesizeparallelparameterparameterspartpartitionpartitionedpartitioningpartitioningspartitionspassingpassthrupasswordpathpctdeactivatepctfreepercentpercent_rankpercentile_contpercentile_discpiecesizepipeplanpolicypositionposstrpowerprecedingprecisionpredicatesprefetchsizepreparepreservepreviousprevvalprimarypriqtyprivilegesprocedureprofileprogramprunepsidpublicquarterqueryquerynoquerytagquiesce_connectradiansraise_errorrandrangerankreadreadsrealrec2xmlrecommendrecoveryrecursivereducerefreferencesreferencingrefreshregistersregr_avgxregr_avgyregr_countregr_icptregr_interceptregr_r2regr_sloperegr_sxxregr_sxyregr_syyregularreleaseremoterenamereoptrepeatrepeatablereplacereplicationrequestresetresignalresizerestartrestrictresultresult_set_locatorretainreturnreturningreturnsreverserevokerightrollbackrolluprootroundroutinerowrow_countrow_numberrownumberrowsrowsetrrrrnrsrtrimrulerunsampledsavepointscansschemascopescratchpadscrollsearchsecadmseclabelseclabel_by_nameseclabel_to_charsecondsecondssecqtysectionsecuredsecurityselectionselectivityselfsensitivesequenceserversessionsession_usersetsetssetsessionusersharesignsignalsimilarsimplesinsinglesinhsizesmallintsnapshotsomesoundexsourcespacespecialspecificspecificationspecifictypesplitsqlsqlcasqlcodesqldasqlerrorsqlexceptionsqlidsqlstatesqlwarningsqrtstackedstagingstandardstartstartingstatestatementstatementsstaticstatisticsstaystddevstddev_popstddev_sampstogroupstopstoragestoresstripstripestylesubsubmultisetsubstrsubstringsumsummaryswitchsymmetricsynonymsysfunsysibmsysprocsystemsystem_usertabletable_nametable_schematablestablesampletablespacetablespacestantanhtargettemplatetemporarythenthreadsafethroughtimetimeouttimestamptimestamp_formattimestamp_isotimestampdifftimezone_hourtimezone_minutetoto_charto_datetrailingtransactiontransactionstransfertransferratetransformtransformstranslatetranslationtreattreetriggertrimtruetrunctruncatetypetype_idtype_nametype_schematypesucaseuescapeunboundeduncheckedunderundounicodeuniqueunknownunnestuntilupperururiusausageuseuserusingvalidatedvalidprocvaluevaluesvarvar_popvar_sampvarcharvarchar_bit_formatvarchar_formatvarchar_format_bitvargraphicvariablevariancevariantvaryingvcatversionviewvolatilevolumeswaitweekweek_isowhenwheneverwherewhilewhitespacewidth_bucketwindowwithwithinwithoutwlmworkwrapperwritewritedownwriteupxmlxmlaggxmlattributesxmlbinaryxmlcastxmlcommentxmlconcatxmldeclarationxmldocumentxmlelementxmlexistsxmlforestxmlnamespacesxmlparsexmlpixmlqueryxmlschemaxmlserializexmltablexmltextxmlvalidatexmlxsrobjectidxqueryxsr_addschemadocxsr_completexsr_registerxsrobjectyearyearsyes[Preferred keywords]alter tablealter functionalter procedurealtercasecase whencreate tablecreate temporary tablecreatedeclaredelete fromdrop tabledrop proceduredrop functiondropexecexecuteexistsfromgroup byinsert intohavinginnotnot nullnot innot existsorder byselectselect distincttruncate tableunionunion allupdatewhere[Do not add delimiters]idname

[formats.3.1]
enabled=1
caption=DB2 SQL Default Style
export=1
count=21
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.3.1.1]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.3.1.2]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>END

[formats.3.1.3]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSEIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.3.1.4]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.3.1.5]
enabled=1
caption=repeat
export=1
body=REPEAT	<stmtList>END REPEAT;

[formats.3.1.6]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...DO	<stmtList>END WHILE;

[formats.3.1.7]
enabled=1
caption=for
export=1
body=FOR	...DO	<stmtList>END FOR;

[formats.3.1.8]
enabled=1
caption=select
export=1
body=SELECT	... AS ...,	...INTO	...,	...FROM	... AS ...,	...	JOIN ...		ON	...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...,	...HAVING	...,	...ORDER BY	...,	...;

[formats.3.1.9]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  );

[formats.3.1.10]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.3.1.11]
enabled=1
caption=update
export=1
body=UPDATE ...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...;

[formats.3.1.12]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...)

[formats.3.1.13]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...

[formats.3.1.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURNS	...

[formats.3.1.15]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...(	...,	...)

[formats.3.1.16]
enabled=1
caption=declare
export=1
body=DECLARE ...,        ... CURSOR ...FOR    ...

[formats.3.1.17]
enabled=1
caption=(...)
export=1
body=(	...,	...	AND ...	OR ...)

[formats.3.1.18]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.3.1.19]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.3.1.20]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.3.1.21]
enabled=1
caption=with
export=1
body=WITH ...

[formats.3.2]
enabled=1
caption=DB2 SQL Custom Style 1
export=1
count=21
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=1
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.3.2.1]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.3.2.2]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>END

[formats.3.2.3]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSEIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.3.2.4]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.3.2.5]
enabled=1
caption=repeat
export=1
body=REPEAT	<stmtList>END REPEAT;

[formats.3.2.6]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...DO	<stmtList>END WHILE;

[formats.3.2.7]
enabled=1
caption=for
export=1
body=FOR	...DO	<stmtList>END FOR;

[formats.3.2.8]
enabled=1
caption=select
export=1
body=SELECT	... AS ...   ,...INTO	...   ,...FROM	... AS ...   ,...	JOIN ...		ON	...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...   ,...HAVING	...   ,...ORDER BY	...   ,...;

[formats.3.2.9]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.3.2.10]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.3.2.11]
enabled=1
caption=update
export=1
body=UPDATE ...SET	... = ...   ,...WHERE	... = ...	AND ...	OR  ...;

[formats.3.2.12]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...)

[formats.3.2.13]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...

[formats.3.2.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...   ,...)RETURNS	...

[formats.3.2.15]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...(	...   ,...)

[formats.3.2.16]
enabled=1
caption=declare
export=1
body=DECLARE ...       ,... CURSOR ...FOR    ...

[formats.3.2.17]
enabled=1
caption=(...)
export=1
body=(	...   ,...	AND ...	OR ...)

[formats.3.2.18]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.3.2.19]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.3.2.20]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.3.2.21]
enabled=1
caption=with
export=1
body=WITH ...

[formats.4]
enabled=1
caption=MySQL
export=1
count=2
dbType=2
kwList=absacosactionaddaes_decryptaes_encryptafteragainstallanalyzeandasascasciiasensitiveasinatatanatan2authorsauto_incrementautocommitavg_row_lengthbackupbeforebeginbenchmarkbetweenbigintbinbinarybinlogbitbit_countbit_lengthblobboolbooleanbothbtreebycachecallcascadeceilceilingchainchangechangedcharchar_lengthcharactercharacter_lengthcharsetcheckchecksumcipherclosecoalescecodecoercibilitycollatecollationcolumncolumnscommentcommitcommittedcompactcompletioncompresscompressedconcatconcat_wsconcurrentconditionconnectionconnection_idconstraintcontainscontinuecontributorsconvconvertcoscotcrc32crosscurrent_datecurrent_timecurrent_timestampcurrent_usercursordatadatabasedatabasesdatedatetimedayday_hourday_microsecondday_minuteday_seconddecdecimaldecodedefaultdefinerdegreesdelay_key_writedelayeddeletedes_decryptdes_encryptdes_key_filedescdescribedeterministicdirectorydisablediscarddiskdistinctdistinctrowdivdodoubledualdumpfileduplicatedynamiceachelseelseifeltenableenclosedencodeencryptendendsengineenginesenumerrorsescapedeventeventseveryexitexpexpansionexplainexport_setextendedfalsefastfetchfieldfieldsfind_in_setfirstfixedfloatfloat4float8floorflushforforceforeignformatfound_rowsfullfulltextfunctionget_lockglobalgrantgrantsgrouphandlerhashhelphexhigh_priorityhostshourhour_microsecondhour_minutehour_secondidentifiedififnullignoreimportindexinet_atoninet_ntoainfileinnerinnodbinoutinsensitiveinsertinsert_methodinstrintint1int2int3int4int8integerintervalintoinvokerio_threadisis_free_lockis_used_lockisolationissueriteratejoinkeykeyskilllanguagelastlast_insert_idlcaseleadingleaveleavesleftlengthlesslevellikelimitlinearlineslistlnloadload_filelocallocaltimelocaltimestamplocatelockloglog10log2logslonglongbloblongtextlooplow_prioritylowerlpadltrimmake_setmastermaster_connect_retrymaster_hostmaster_log_filemaster_log_posmaster_passwordmaster_portmaster_pos_waitmaster_sslmaster_ssl_camaster_ssl_capathmaster_ssl_certmaster_ssl_ciphermaster_ssl_keymaster_usermatchmax_connections_per_hourmax_queries_per_hourmax_rowsmax_updates_per_hourmax_user_connectionsmaxvaluemd5mediummediumblobmediumintmediumtextmidmiddleintmin_rowsminuteminute_microsecondminute_secondmodmodemodifiesmodifymonthmutexname_constnationalnaturalnextnono_write_to_binlognodegroupnonenullnullifnumericoctoctet_lengthoffsetold_passwordonopenoptimizeoptionoptionallyorordorderoutouteroutfilepack_keyspartialpartitionpartitioningpartitionspasswordpipluginspositionpowpowerprecisionpreserveprevprimaryprivilegesprocedureprocesslistpurgequarterqueryquickquoteradiansraid0randrangereadreadsrealrebuildredundantreferencesregexprelay_log_filerelay_log_posreleaserelease_lockremoverenamereorganizerepairrepeatrepeatablereplacerequireresetrestorerestrictreturnreturnsreverserevokerightrlikerollbackrolluproundrow_countrow_formatrpadrtrimsavepointscheduleschedulerschemaschemassecondsecond_microsecondsecuritysensitiveseparatorserializablesessionsession_usersetshasha1shareshowsignsimplesinslavesleepsmallintsonamesoundexspacespatialspecificsqlsql_big_resultsql_buffer_resultsql_cachesql_calc_found_rowssql_log_binsql_no_cachesql_slave_skip_countersql_small_resultsql_threadsqlexceptionsqlstatesqlwarningsqrtsslstartstartingstartsstatusstopstoragestraight_joinsubjectsubpartitionsubpartitionssubstrsubstringsubstring_indexsystem_usertabletablestablespacetantemporaryterminatedtextthanthentimetimestamptinyblobtinyinttinytexttotrailingtransactiontriggertriggerstrimtruetruncatetypeucaseuncommitteduncompressuncompressed_lengthundounhexuniqueunlockunsigneduntilupgradeupperusageuseuse_frmuseruser_resourcesusingutc_dateutc_timeutc_timestampuuidvaluesvarbinaryvarcharvarcharactervariablesvaryingversionviewwarningsweekwhenwherewhilewithworkwritex509xoryearyear_monthzerofill[Preferred keywords]alter tablealter functionalter procedurealtercasecase whencreate tablecreate temporary tablecreatedeclaredelete fromdrop tabledrop proceduredrop functiondropexistsfromgroup byhavinginsert intoinnotnot nullnot innot existsorder byselectselect distincttruncate tableunionunion allupdatewhere[Do not add delimiters]idname

[formats.4.1]
enabled=1
caption=MySQL Default Style
export=1
count=21
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.4.1.1]
enabled=1
caption=select
export=1
body=SELECT	... AS ...,	...INTO	...,	...FROM	... AS ...,	...	JOIN ...		ON   ...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...,	...HAVING	...,	...ORDER BY	...,	...LIMIT ...;

[formats.4.1.2]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...LIMIT ...;

[formats.4.1.3]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...ORDER BY	...,	...LIMIT ...;

[formats.4.1.4]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN <stmtList>	ELSE <stmtList>END CASE;

[formats.4.1.5]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  );

[formats.4.1.6]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(    ...,    ...)

[formats.4.1.7]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSEIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.4.1.8]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.4.1.9]
enabled=1
caption=repeat
export=1
body=REPEAT	<stmtList>UNTIL ...      AND ...      OR ...END REPEAT;

[formats.4.1.10]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...DO	<stmtList>END WHILE;

[formats.4.1.11]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>END

[formats.4.1.12]
enabled=1
caption=declare
export=1
body=DECLARE ...,        ... CURSOR ...FOR    ...;

[formats.4.1.13]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...BEGIN	<stmtList>END

[formats.4.1.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURNS ...BEGIN	<stmtList>END

[formats.4.1.15]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...(	...,	...)BEGIN	<stmtList>END

[formats.4.1.16]
enabled=1
caption=drop
export=1
body=DROP ... IF EXISTS ...;

[formats.4.1.17]
enabled=1
caption=(...)
export=1
body=(	...,	...	AND ...	OR ...)

[formats.4.1.18]
enabled=1
caption=replace
export=1
body=REPLACE ...(	..., ...)VALUES(	..., ...);

[formats.4.1.19]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.4.1.20]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.4.1.21]
enabled=1
caption=with
export=1
body=WITH ...

[formats.4.2]
enabled=1
caption=MySQL Custom Style 1
export=1
count=21
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=1
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.4.2.1]
enabled=1
caption=select
export=1
body=SELECT	... AS ...   ,...INTO	...   ,...FROM	... AS ...   ,...	JOIN ...		ON   ...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...   ,...HAVING	...   ,...ORDER BY	...   ,...LIMIT ...;

[formats.4.2.2]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...LIMIT ...;

[formats.4.2.3]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...	AND ...	OR  ...ORDER BY	...   ,...LIMIT ...;

[formats.4.2.4]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN <stmtList>	ELSE <stmtList>END CASE;

[formats.4.2.5]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.4.2.6]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(    ...   ,...)

[formats.4.2.7]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSEIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.4.2.8]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.4.2.9]
enabled=1
caption=repeat
export=1
body=REPEAT	<stmtList>UNTIL ...      AND ...      OR ...END REPEAT;

[formats.4.2.10]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...DO	<stmtList>END WHILE;

[formats.4.2.11]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>END

[formats.4.2.12]
enabled=1
caption=declare
export=1
body=DECLARE ...       ,... CURSOR ...FOR    ...;

[formats.4.2.13]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...BEGIN	<stmtList>END

[formats.4.2.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...   ,...)RETURNS ...BEGIN	<stmtList>END

[formats.4.2.15]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...(	...   ,...)BEGIN	<stmtList>END

[formats.4.2.16]
enabled=1
caption=drop
export=1
body=DROP ... IF EXISTS ...;

[formats.4.2.17]
enabled=1
caption=(...)
export=1
body=(	...   ,...	AND ...	OR ...)

[formats.4.2.18]
enabled=1
caption=replace
export=1
body=REPLACE ...(	...   ,...)VALUES(	...   ,...);

[formats.4.2.19]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.4.2.20]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.4.2.21]
enabled=1
caption=with
export=1
body=WITH ...

[formats.5]
enabled=1
caption=PostgreSQL
export=1
count=2
dbType=7
kwList=abortabsabsoluteaccessactionadaaddadminafteraggregatealiasallallocatealsoalwaysanalyseanalyzeandanyarearrayasascasensitiveassertionassignmentasymmetricatatomicattributeattributesauthorizationavgbackwardbase64beforebeginbernoullibetweenbigintbinarybitbitvarbit_lengthblobbooleanbothbreadthbycachecallcalledcardinalitycascadecascadedcastcatalogcatalog_nameceilceilingchaincharcharactercharacteristicscharacterscharacter_lengthcharacter_set_catalogcharacter_set_namecharacter_set_schemachar_lengthcheckcheckedcheckpointclassclass_originclobcloseclustercoalescecobolcollatecollationcollation_catalogcollation_namecollation_schemacollectcolumncolumn_namecommand_functioncommand_function_codecommentcommitcommittedcompletionconcurrentlyconditioncondition_numberconfigurationconnectconnectionconnection_nameconstraintconstraintsconstraint_catalogconstraint_nameconstraint_schemaconstructorcontainscontentcontinueconversionconvertcopycorrcorrespondingcostcountcovar_popcovar_sampcreatedbcreaterolecreateusercrosscsvcubecume_distcurrentcurrent_datecurrent_default_transform_groupcurrent_pathcurrent_rolecurrent_timecurrent_timestampcurrent_transform_group_for_typecurrent_usercursorcursor_namecycledatadatabasedatedatetime_interval_codedatetime_interval_precisiondaydeallocatedecdecimaldefaultdefaultsdeferrabledeferreddefineddefinerdegreedeletedelimiterdelimitersdense_rankdepthderefderiveddescdescribedescriptordestroydestructordeterministicdiagnosticsdictionarydisablediscarddisconnectdispatchdistinctdodocumentdomaindoubledynamicdynamic_functiondynamic_function_codeeachelementelseenableencodingencryptedendend-execenumequalsescapeeveryexceptexceptionexcludeexcludingexclusiveexistingexpexplainexternalextractfalsefamilyfetchfilterfinalfirstfloatfloorfollowingforforceforeignfortranforwardfoundfreefreezefullfunctionfusiongeneralgeneratedgetglobalgogotograntgrantedgreatestgroupgroupinghandlerheaderhexhierarchyholdhosthouridentityifignoreilikeimmediateimmutableimplementationimplicitincludingincrementindexindexesindicatorinfixinheritinheritsinitializeinitiallyinnerinoutinputinsensitiveinsertinstanceinstantiableinsteadintintegerintersectintersectionintervalintoinvokerisisnullisolationiteratejoinkeykey_memberkey_typelancompilerlanguagelargelastlateralleadingleastleftlengthlesslevellikelimitlistenlnloadlocallocaltimelocaltimestamplocationlocatorlockloginlooplowermapmappingmatchmatchedmaxmaxvaluemembermergemessage_lengthmessage_octet_lengthmessage_textmethodminminuteminvaluemodmodemodifiesmodifymodulemonthmoremovemultisetmumpsnamenamesnationalnaturalncharnclobnestingnewnextnonocreatedbnocreaterolenocreateusernoinheritnologinnonenormalizenormalizednosuperusernothingnotifynotnullnowaitnullnullablenullifnullsnumbernumericobjectoctetsoctet_lengthofoffoffsetoidsoldononlyopenoperationoperatoroptionoptionsororderorderingordinalityothersoutouteroutputoveroverlapsoverlayoverridingownedownerpadparameterparametersparameter_modeparameter_nameparameter_ordinal_positionparameter_specific_catalogparameter_specific_nameparameter_specific_schemaparserpartialpartitionpascalpasswordpathpercentile_contpercentile_discpercent_rankplacingplansplipositionpostfixpowerprecedingprecisionprefixpreorderpreparepreparedpreserveprimarypriorprivilegesproceduralprocedurepublicquoterangerankreadreadsrealreassignrecheckrecursiverefreferencesreferencingregr_avgxregr_avgyregr_countregr_interceptregr_r2regr_sloperegr_sxxregr_sxyregr_syyreindexrelativereleaserenamerepeatablereplacereplicaresetrestartrestrictresultreturnreturned_cardinalityreturned_lengthreturned_octet_lengthreturned_sqlstatereturningreturnsrevokerightrolerollbackrolluproutineroutine_catalogroutine_nameroutine_schemarowrowsrow_countrow_numberrulesavepointscaleschemaschema_namescopescope_catalogscope_namescope_schemascrollsearchsecondsectionsecurityselfsensitivesequenceserializableserver_namesessionsession_usersetsetofsetsshareshowsimilarsimplesizesmallintsomesourcespacespecificspecifictypespecific_namesqlsqlcodesqlerrorsqlexceptionsqlstatesqlwarningsqrtstablestandalonestartstatestatementstaticstatisticsstddev_popstddev_sampstdinstdoutstoragestrictstripstructurestylesubclass_originsublistsubmultisetsubstringsumsuperusersymmetricsysidsystemsystem_usertabletablesampletablespacetable_nametemptemplatetemporaryterminatetextthanthentiestimetimestamptimezone_hourtimezone_minutetotop_level_counttrailingtransactiontransactions_committedtransactions_rolled_backtransaction_activetransformtransformstranslatetranslationtreattriggertrigger_catalogtrigger_nametrigger_schematrimtruetruncatetrustedtypeuescapeunboundeduncommittedunderunencrypteduniqueunknownunlistenunnamedunnestuntilupperusageuseruser_defined_type_cataloguser_defined_type_codeuser_defined_type_nameuser_defined_type_schemausingvacuumvalidvalidatorvaluevaluesvarcharvariablevaryingvar_popvar_sampverboseversionviewvolatilewhenwheneverwherewhitespacewidth_bucketwindowwithwithinwithoutworkwritexmlxmlaggxmlattributesxmlbinaryxmlcommentxmlconcatxmlelementxmlforestxmlnamespacesxmlparsexmlpixmlrootxmlserializeyearyeszone[Preferred keywords]alter tablealter functionalter procedurealtercasecase whencreate tablecreatedeclaredelete fromdrop tabledrop proceduredrop functiondropexecexecuteexistsfromgroup byhavinginsert intoinnotnot nullnot innot existsorder byselectselect distincttruncate tableunionunion allupdatewhere[Do not add delimiters]idname

[formats.5.1]
enabled=1
caption=PostgreSQL Default Style
export=1
count=22
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=2
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.5.1.1]
enabled=1
caption=select
export=1
body=SELECT	... AS ...,	...INTO	...,	...FROM	... AS ...,	...	JOIN ...		ON   ...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...,	...HAVING	...,	...ORDER BY	...,	...;

[formats.5.1.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  );

[formats.5.1.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.5.1.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...;

[formats.5.1.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.5.1.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.5.1.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.5.1.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.5.1.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.5.1.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.5.1.11]
enabled=1
caption=function
export=1
body=FUNCTION ...(	...,	...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.5.1.12]
enabled=1
caption=declare
export=1
body=DECLARE	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.5.1.13]
enabled=1
caption=type
export=1
body=TYPE ... IS RECORD (	...,	...);

[formats.5.1.14]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...) ...;

[formats.5.1.15]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...

[formats.5.1.16]
enabled=1
caption=(...)
export=1
body=(	...,	...	AND ...	OR ...)

[formats.5.1.17]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.5.1.18]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.5.1.19]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURNS ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.5.1.20]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.5.1.21]
enabled=1
caption=create type
export=1
body=CREATE TYPE ...(	...,	...)

[formats.5.1.22]
enabled=1
caption=with
export=1
body=WITH ...

[formats.5.2]
enabled=1
caption=PostgreSQL Custom Style 1
export=1
count=22
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.5.2.1]
enabled=1
caption=select
export=1
body=SELECT	... AS ...   ,...INTO	...   ,...FROM	... AS ...   ,...	JOIN ...		ON   ...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...   ,...HAVING	...   ,...ORDER BY	...   ,...;

[formats.5.2.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.5.2.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.5.2.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...	AND ...	OR  ...;

[formats.5.2.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.5.2.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.5.2.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.5.2.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.5.2.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.5.2.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.5.2.11]
enabled=1
caption=function
export=1
body=FUNCTION ...(	...   ,...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.5.2.12]
enabled=1
caption=declare
export=1
body=DECLARE	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.5.2.13]
enabled=1
caption=type
export=1
body=TYPE ... IS RECORD (	...   ,...);

[formats.5.2.14]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...) ...;

[formats.5.2.15]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...

[formats.5.2.16]
enabled=1
caption=(...)
export=1
body=(	...   ,...	AND ...	OR ...)

[formats.5.2.17]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.5.2.18]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.5.2.19]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...   ,...)RETURNS ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.5.2.20]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.5.2.21]
enabled=1
caption=create type
export=1
body=CREATE TYPE ...(	...   ,...)

[formats.5.2.22]
enabled=1
caption=with
export=1
body=WITH ...

[formats.6]
enabled=1
caption=Access
export=1
count=2
dbType=6
kwList=absoluteaddadmindballalphanumericalterandanyareasascassertionauthorizationautoincrementavgbeginbetweenbinarybitbit_lengthbooleanbothbybytecascadecatalogcharchar_lengthcharactercharacter_lengthcheckclausecloseclusteredcoalescecollatecollationcolumncommitcompcompressionconnectconnectionconstraintconstraintscontainercontainsconvertcountcountercreatecurrencycurrent_datecurrent_timecurrent_timestampcurrent_usercursordatabasedatedatetimedaydecdecimaldeclaredeletedescdisallowdisconnectdistinctdistinctrowdomaindoubledropeqvexclusiveconnectexecexecuteexistsextractfalsefetchfirstfloatfloat4float8foreignfromgeneralgrantgroupguidhavinghouridentityieeedoubleieeesingleignoreimageimpinindexindexcreatedbinnerinputinsensitiveinsertintintegerinteger1integer4intervalintoisisolationjoinkeylanguagelastleftlikelogicallogical1longlongbinarylongcharlongtextlowermatchmaxmemominminutemodmoneymonthnationalncharnonclusterednotntextnullnumbernumericnvarcharoctet_lengtholeobjectonopenoptionororderoutputowneraccesspadparameterspartialpasswordpercentpivotpositionprecisionprepareprimaryprivilegesprocprocedurepublicrealreferencesrestrictrevokerightrollbackschemasecondselectselectschemaselectsecuritysetshortsinglesizesmalldatetimesmallintsmallmoneysomespacesqlsqlcodesqlerrorsqlstatestdevstdevpstringsubstringsumsysnamesystem_usertabletemporarytexttimetimestamptimezone_hourtimezone_minutetinyinttotoptrailingtransactiontransformtranslatetranslationtrimtrueunionuniqueuniqueidentifierunknownupdateupdateidentityupdateownerupdatesecurityupperusageuserusingvaluevaluesvarvarbinaryvarcharvarpvaryingviewwhenwheneverwherewithworkxoryearyesnozone[preferred keywords]alter tablealtercreate tablecreatedeletedrop tabledropexistsfromgroup byhavinginsert intoinnotnot nullnot innot existsorder byselectselect top unionunion allupdatewhere

[formats.6.1]
enabled=1
caption=MS Access Default Style
export=1
count=10
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.6.1.1]
enabled=1
caption=select
export=1
body=SELECT	... AS ...,	...INTO	...,	...FROM	... AS ...,	...	JOIN ...		ON   ...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...,	...HAVING	...,	...ORDER BY	...,	...

[formats.6.1.2]
enabled=1
caption=delete
export=1
body=DELETE ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ... AND                ...WHERE  ... = ... AND       ... OR       ...

[formats.6.1.3]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...ORDER BY	...,	...

[formats.6.1.4]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  )

[formats.6.1.5]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(    ...,    ...)

[formats.6.1.6]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...	...,	...AS	<stmtList>

[formats.6.1.7]
enabled=1
caption=(...)
export=1
body=(    ...,    ... AND    ... OR    ...)

[formats.6.1.8]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.6.1.9]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.6.1.10]
enabled=1
caption=with
export=1
body=WITH ...

[formats.6.2]
enabled=1
caption=MS Access Custom Style 1
export=1
count=10
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.6.2.1]
enabled=1
caption=select
export=1
body=SELECT	... AS ...,	...INTO	...,	...FROM	... AS ...,	...	JOIN ...		ON   ...		AND ...WHERE	... = ...	AND ...	OR  ...GROUP BY	...,	...HAVING	...,	...ORDER BY	...,	...

[formats.6.2.2]
enabled=1
caption=delete
export=1
body=DELETE ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ... AND                ...WHERE  ... = ... AND       ... OR       ...

[formats.6.2.3]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...ORDER BY	...,	...

[formats.6.2.4]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  )

[formats.6.2.5]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(    ...,    ...)

[formats.6.2.6]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...	...,	...AS	<stmtList>

[formats.6.2.7]
enabled=1
caption=(...)
export=1
body=(    ...,    ... AND    ... OR    ...)

[formats.6.2.8]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.6.2.9]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.6.2.10]
enabled=1
caption=with
export=1
body=WITH ...

[formats.7]
enabled=1
caption=ASE
export=1
count=2
dbType=4
kwList=absabsentabsoluteaccent_sensitivityacosacpactiveactivationactionaddaddressaesaes_128aes_192aes_256afteraggregatealgorithmallallow_row_locksallow_page_locksallow_snapshot_isolationall_errormsgsall_constraintsall_indexesall_levelsall_resultsandanonymousansi_nullsansi_paddingansi_warningsansi_defaultsansi_null_dflt_offansi_null_dflt_onansi_null_defaultanyappendapplicationapplock_modeapplock_testapplyapp_namearithabortarithignoreasascasciiasinassemblyassemblypropertyasymmetricatanatn2attachattach_rebuild_logattestedauthorizationauthenticationauth_realmautoauto_closeauto_create_statisticsauto_shrinkauto_update_statisticsauto_update_statistics_asyncavgbackupbase64basicbatchsizebatchesbegin_dialogbetweenbigintbinary_checksumbinarybindingbitblocksizebreakbroker_instancebrowsebuffercountbulkbulk_loggedbycalledcallercascadecastcatalogcatchceilingcertificatechange_trackingcharcharindexcharacter_setcheckcheck_constraintscheckpointchecksumchecksum_aggcheckalloccheckcatalogcheckconstraintscheckdbcheckfilegroupcheckidentchecktablecheck_expirationcheck_policycleantableclearcleanupclear_portcloseclusteredcoalescecodepagecollatecollectioncollationpropertycolumncolumnpropertycolumns_updatedcolumnscol_lengthcol_namecommitcommittedcomputecompressionconcatconcat_null_yields_nullconstraintcontractcontentcontinue_after_errorcontainscontainstablecontext_infocontinueconversationconvertcookiecopy_onlycoscotcountercountcount_bigcount_rowscredentialcrosscubecurrentcurrent_request_idcurrent_timestampcurrent_usercursor_close_on_commitcursor_defaultcursor_statuscursordatabasedatabase_mirroringdatadatafiletypedatabasepropertydatabasepropertyexdatabase_principal_iddatalengthdata_puritydatabase_snapshotdate_correlation_optimizationdateadddatediffdatenamedatepartdatefirstdateformatdatetimedaydbccdbreindexdb_chainingdb_iddb_namedeadlock_prioritydeallocatedecimaldecryptiondefaultdefault_schemadefault_databasedefault_languagedefault_logon_domaindegreesdelaydeletedeleteddense_rankdenydependentsdesdescriptiondescdesxdialogdifferentialdifferencedigestdisableddisabledisable_brokerdiskdistinctdistributeddocumentdrop_existingdropcleanbuffersdynamicelementselseemergencyemptyemptyfileenableenable_brokerenabledencryptionendpointerrorfileerror_broker_conversationserrorerror_lineerror_messageerror_numbererror_procedureerror_severityerror_stateescapeestimateonlyeventeventdataexceptexecutableexpexpandexpiredateexpiry_dateexplicitexternalexternal_accessfailoverfalsefan_infastfast_forwardfastfirstrowfetchfieldterminatorfilefilegroupfilenamefilegrowthfilegrouppropertyfilegroup_idfilegroup_namefilepropertyfile_idfile_idexfile_namefilelistonlyfillfactorfips_flaggerfire_triggersfirstrowfirstfloatfloorfmtonlyforforceforce_service_allow_data_lossforcedforceplanforeignformatfileformatmessageformsofformatforward_onlyfreefreeproccachefreesessioncachefreesystemcachefreetextfreetexttablefulltextfullfullscanfulltextcatalogpropertyfulltextservicepropertyfunctiongetgetansinullgetdategetutcdateget_transmission_statusglobalgogotograntgroupgroupinghashedhashhas_dbaccessheaderonlyheader_limithelphighholdlockhost_idhost_namehttpidentityident_currentident_incrident_seedidentity_valueidentity_insertifignore_dup_keyignore_constraintsignore_triggersimageimmediateimplicit_transactionsincludeincrementalindexindexdefragindexkey_propertyindexpropertyindex_colinflectionalinitiatorinitinnerinputinputbufferinsertinsensitiveinsertedinsteadintintegratedintersectintoioisisaboutisdateisnullisnumericisolationis_memberis_srvrolememberjobjoinkeepidentitykeepnullskeep_replicationkeepkeepfixedkeepdefaultskerberoskeykeyskeysetkey_sourcekillkilobytes_per_batchlabelonlylanguagelastrowlastleftlenlevellifetimelikelistener_portlistener_iploadhistorylob_compactionlocallock_timeoutloglog10loginloginpropertylogin_typelogspacelooplowlowerltrimmachinemanualmarkmark_in_use_for_removalmastermaxmaxdopmaxerrorsmaxrecursionmaxsizemaxtransfersizemax_queue_readersmd2md4md5medianamemediapasswordmediadescriptionmergemessagemessage_forwardingmessage_forward_sizeminmirror_addressmirrormixedmodifymoneymonthmovemulti_usermust_changenamenamespacencharnearnegotiatenevernewidnewnamenewsequentialidnew_accountnew_passwordnew_brokernextnochecknocountnoexecnoexpandnoformatnoindexnoinitnolocknonclusterednonenorecoverynorewindnorecomputenoreseednoresetnormalnoskipnotificationnotruncatenounloadnowaitno_checksumno_infomsgsno_logno_truncateno_waitntextntilentlmnullnullifnumericnumeric_roundabortnvarcharobjectobjectpropertyobjectpropertyexobject_definitionobject_idobject_nameoemofoffofflineoffsetsold_accountold_passwordononlineonlyopentranopenopendatasourceopenqueryopenrowsetopenxmloptionoptimisticoptimizeororderoriginal_loginoutouteroutputoutputbufferoveroverrideownerpad_indexpagepage_verifypagecountpaglockparameterizationparsenameparseonlypartitionpartnerpartialpasswordpathpatindexpercentpermission_setpermissionspersistedphysical_onlypipivotplanpopulationportspowerprimaryprintpriorprivateprivilegesprocprocedureprocedure_nameproccacheprofilepropertypublishingservernameputqueryquery_governor_cost_limitqueuequotenamequoted_identifierradiansraiserrorrandrangerankrawrc2rc4rc4_128readonlyreadwriteread_onlyread_writeread_write_filegroupsreadreadtextread_committed_snapshotreadcommittedreadcommittedlockreadpastreaduncommittedrealrebuildreceiverecoveryrecompilereconfigurerecursive_triggersreferencesregeneraterelated_conversationrelated_conversation_grouprelativeremoveremoteremote_proc_transactionsreorganizerepair_allow_data_lossrepair_fastrepair_rebuildrepeatablerepeatablereadreplicationreplacereplicaterequiredresamplereseedrestartrestricted_userrestoreresumeretaindaysretentionreturnsreturnrevertreverserevokerewindrewindonlyrightrobustrolerolluprollbackrootroundrouterowcount_bigrowcountrowguidcolrowlockrows_per_batchrowsrowsets_onlyrowterminatorrow_numberrsa_512rsa_1024rsa_2048rtrimrulesafesafetysamplesaveschemaschemeschemabindingschema_idschema_namescope_identityscrollscroll_lockssecondssecretselfsendsentserializableservice_brokerserviceservice_nameserverserverpropertysessionpropertysession_usersessionssession_timeoutsetsetusershasha1showcontigshow_statisticsshowplan_allshowplan_textshowplan_xmlshrinkdatabaseshrinkfileshutdownsidsignaturesignsimplesinsingle_usersingle_blobsingle_clobsingle_nclobsitesizeskipsmalldatetimesmallintsmallmoneysnapshotsoapsomesort_in_tempdbsoundexspacesplitsqlsqlperfsql_variantsql_variant_propertysqrtsquaresslssl_portstandbystandardstartedstartstart_datestatestatusstatistics_norecomputestatsstatisticsstats_streamstat_headerstaticstatusonlystats_datestdevstdevpstoppedstopstop_on_errorstopatstopatmarkstopbeforemarkstrstuffsubjectsubscriptionsubstringsumsupportedsuser_idsuser_namesuser_sidsuser_snamesuspendswitchsymmetricsynonymsysnamesystem_usersystemtabletablocktableresultstablesampletablockxtantapetargettcptemplatetertiary_weightstexttextimage_ontextsizetextptrtextvalidthenthesaurustiestimetimeouttimertimestamptinyinttotoptorn_page_detectiontraceofftraceontracestatustransfertrantransactiontriggertrigger_nestleveltriple_destruetruncateonlytruncate_onlytruncatetrustworthytrytsqltypetype_warningtypepropertytype_idtype_nameuncheckeduncommittedunicodeuniqueuniqueidentifierunlimitedunloadunlockunpivotunsafeuowupdateusageupdatetextupdlockupperurluseuseduseruseroptionsuser_iduser_nameusingvalidationvalid_xmlvaluesvaluevarvarbinaryvarcharvarpvaryingverifyonlyviewviewsview_metadatavisibilitywaitforwebmethodweightwell_formed_xmlwhenwherewhilewindowswithwithoutwitnessworkwritewritetextwsdlxact_abortxact_statexlockxmlxmldataxmlnamespacesxmlschemaxsinilyear[Preferred keywords]alter tablealter functionalter procedurealterbeginbegin trybegin catchcasecase whencreate tablecreatedeclaredelete fromdrop tabledrop proceduredrop functiondropendend tryend catchexecexecuteexistsfromgroup byhavinginsert intoinnotnot nullnot innot existsorder byselectselect top select top 5 * fromselect distincttruncate tableunionunion allupdatewhere[Do not add delimiters]idname

[formats.7.1]
enabled=1
caption=Sybase ASE Default Style
export=1
count=26
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.7.1.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...

[formats.7.1.2]
enabled=1
caption=case
export=1
body=CASE ...     WHEN ... THEN ...     ELSE ...END

[formats.7.1.3]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>END

[formats.7.1.4]
enabled=1
caption=if
export=1
body=IF ...   AND ...   OR ...BEGIN    <stmtList>END...ELSE    ...BEGIN    <stmtList>END

[formats.7.1.5]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...BEGIN    <stmtList>END

[formats.7.1.6]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  )

[formats.7.1.7]
enabled=1
caption=update
export=1
body=UPDATE ...SET    ... = ...,       ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...

[formats.7.1.8]
enabled=1
caption=delete
export=1
body=DELETE ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...

[formats.7.1.9]
enabled=1
caption=exec
export=1
body=EXEC ...,     ...

[formats.7.1.10]
enabled=1
caption=declare
export=1
body=DECLARE ...,        ... CURSOR ... FOR    ...;

[formats.7.1.11]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...)

[formats.7.1.12]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...	@...	@...WITH ..., ...AS	<stmtList>GO

[formats.7.1.13]
enabled=1
caption=alter procedure
export=1
body=ALTER PROCEDURE ...	@...	@...WITH ..., ...AS	<stmtList>GO

[formats.7.1.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURNS ...WITH ..., ...AS	<stmtList>GO

[formats.7.1.15]
enabled=1
caption=alter function
export=1
body=ALTER FUNCTION ...(	...,	...)RETURNS ...WITH ..., ...AS

[formats.7.1.16]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.7.1.17]
enabled=1
caption=alter trigger
export=1
body=ALTER TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.7.1.18]
enabled=1
caption=set
export=1
body=SET ... = ...

[formats.7.1.19]
enabled=1
caption=begin try
export=1
body=BEGIN TRY	<stmtList>END TRY

[formats.7.1.20]
enabled=1
caption=begin catch
export=1
body=BEGIN CATCH	<stmtList>END CATCH

[formats.7.1.21]
enabled=1
caption=(...)
export=1
body=(    ...,    ...    AND ...    OR ...)

[formats.7.1.22]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.7.1.23]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.7.1.24]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.7.1.25]
enabled=1
caption=default values
export=1
body=DEFAULT VALUES

[formats.7.1.26]
enabled=1
caption=with
export=1
body=WITH ...

[formats.7.2]
enabled=1
caption=Sybase ASE Custom Style 1
export=1
count=26
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=1
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.7.2.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...      ,... = ...FROM   ... AS ...      ,...       JOIN ...            ON  ... = ...                AND ...WHERE  ... = ...       AND ...       OR ...GROUP BY       ...      ,...HAVING ...      ,...ORDER BY       ...      ,...

[formats.7.2.2]
enabled=1
caption=case
export=1
body=CASE ...     WHEN ... THEN ...     ELSE ...END

[formats.7.2.3]
enabled=1
caption=begin
export=1
body=BEGIN    <stmtList>END

[formats.7.2.4]
enabled=1
caption=if
export=1
body=IF ...   AND ...   OR ...BEGIN    <stmtList>END...ELSE    ...BEGIN    <stmtList>END

[formats.7.2.5]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...BEGIN    <stmtList>END

[formats.7.2.6]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  )

[formats.7.2.7]
enabled=1
caption=update
export=1
body=UPDATE ...SET    ... = ...      ,...FROM   ... AS ...      ,...       JOIN ...            ON  ... = ...                AND ...WHERE  ... = ...       AND ...       OR ...

[formats.7.2.8]
enabled=1
caption=delete
export=1
body=DELETE ...FROM   ... AS ...      ,...       JOIN ...            ON  ... = ...                AND ...WHERE  ... = ...       AND ...       OR ...

[formats.7.2.9]
enabled=1
caption=exec
export=1
body=EXEC ...    ,...

[formats.7.2.10]
enabled=1
caption=declare
export=1
body=DECLARE ...       ,... CURSOR ... FOR    ...;

[formats.7.2.11]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...)

[formats.7.2.12]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...	@...	@...WITH ...    ,...AS	<stmtList>GO

[formats.7.2.13]
enabled=1
caption=alter procedure
export=1
body=ALTER PROCEDURE ...	@...	@...WITH ...    ,...AS	<stmtList>GO

[formats.7.2.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...   ,...)RETURNS ...WITH ...    ,...AS	<stmtList>GO

[formats.7.2.15]
enabled=1
caption=alter function
export=1
body=ALTER FUNCTION ...(	...   ,...)RETURNS ...WITH ...    ,...AS

[formats.7.2.16]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.7.2.17]
enabled=1
caption=alter trigger
export=1
body=ALTER TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.7.2.18]
enabled=1
caption=set
export=1
body=SET ... = ...

[formats.7.2.19]
enabled=1
caption=begin try
export=1
body=BEGIN TRY    <stmtList>END TRY

[formats.7.2.20]
enabled=1
caption=begin catch
export=1
body=BEGIN CATCH    <stmtList>END CATCH

[formats.7.2.21]
enabled=1
caption=(...)
export=1
body=(    ...   ,...    AND ...    OR ...)

[formats.7.2.22]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.7.2.23]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.7.2.24]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.7.2.25]
enabled=1
caption=default values
export=1
body=DEFAULT VALUES

[formats.7.2.26]
enabled=1
caption=with
export=1
body=WITH ...

[formats.8]
enabled=1
caption=ASA
export=1
count=2
dbType=5
kwList=absabsentabsoluteaccent_sensitivityacosacpactiveactivationactionaddaddressaesaes_128aes_192aes_256afteraggregatealgorithmallallow_row_locksallow_page_locksallow_snapshot_isolationall_errormsgsall_constraintsall_indexesall_levelsall_resultsandanonymousansi_nullsansi_paddingansi_warningsansi_defaultsansi_null_dflt_offansi_null_dflt_onansi_null_defaultanyappendapplicationapplock_modeapplock_testapplyapp_namearithabortarithignoreasascasciiasinassemblyassemblypropertyasymmetricatanatn2attachattach_rebuild_logattestedauthorizationauthenticationauth_realmautoauto_closeauto_create_statisticsauto_shrinkauto_update_statisticsauto_update_statistics_asyncavgbackupbase64basicbatchsizebatchesbegin_dialogbetweenbigintbinary_checksumbinarybindingbitblocksizebreakbroker_instancebrowsebuffercountbulkbulk_loggedbycalledcallercascadecastcatalogcatchceilingcertificatechange_trackingcharcharindexcharacter_setcheckcheck_constraintscheckpointchecksumchecksum_aggcheckalloccheckcatalogcheckconstraintscheckdbcheckfilegroupcheckidentchecktablecheck_expirationcheck_policycleantableclearcleanupclear_portcloseclusteredcoalescecodepagecollatecollectioncollationpropertycolumncolumnpropertycolumns_updatedcolumnscol_lengthcol_namecommitcommittedcomputecompressionconcatconcat_null_yields_nullconstraintcontractcontentcontinue_after_errorcontainscontainstablecontext_infocontinueconversationconvertcookiecopy_onlycoscotcountercountcount_bigcount_rowscredentialcrosscubecurrentcurrent_request_idcurrent_timestampcurrent_usercursor_close_on_commitcursor_defaultcursor_statuscursordatabasedatabase_mirroringdatadatafiletypedatabasepropertydatabasepropertyexdatabase_principal_iddatalengthdata_puritydatabase_snapshotdate_correlation_optimizationdateadddatediffdatenamedatepartdatefirstdateformatdatetimedaydbccdbreindexdb_chainingdb_iddb_namedeadlock_prioritydeallocatedecimaldecryptiondefaultdefault_schemadefault_databasedefault_languagedefault_logon_domaindegreesdelaydeletedeleteddense_rankdenydependentsdesdescriptiondescdesxdialogdifferentialdifferencedigestdisableddisabledisable_brokerdiskdistinctdistributeddocumentdrop_existingdropcleanbuffersdynamicelementselseemergencyemptyemptyfileenableenable_brokerenabledencryptionendpointerrorfileerror_broker_conversationserrorerror_lineerror_messageerror_numbererror_procedureerror_severityerror_stateescapeestimateonlyeventeventdataexceptexecutableexpexpandexpiredateexpiry_dateexplicitexternalexternal_accessfailoverfalsefan_infastfast_forwardfastfirstrowfetchfieldterminatorfilefilegroupfilenamefilegrowthfilegrouppropertyfilegroup_idfilegroup_namefilepropertyfile_idfile_idexfile_namefilelistonlyfillfactorfips_flaggerfire_triggersfirstrowfirstfloatfloorfmtonlyforforceforce_service_allow_data_lossforcedforceplanforeignformatfileformatmessageformsofformatforward_onlyfreefreeproccachefreesessioncachefreesystemcachefreetextfreetexttablefulltextfullfullscanfulltextcatalogpropertyfulltextservicepropertyfunctiongetgetansinullgetdategetutcdateget_transmission_statusglobalgogotograntgroupgroupinghashedhashhas_dbaccessheaderonlyheader_limithelphighholdlockhost_idhost_namehttpidentityident_currentident_incrident_seedidentity_valueidentity_insertifignore_dup_keyignore_constraintsignore_triggersimageimmediateimplicit_transactionsincludeincrementalindexindexdefragindexkey_propertyindexpropertyindex_colinflectionalinitiatorinitinnerinputinputbufferinsertinsensitiveinsertedinsteadintintegratedintersectintoioisisaboutisdateisnullisnumericisolationis_memberis_srvrolememberjobjoinkeepidentitykeepnullskeep_replicationkeepkeepfixedkeepdefaultskerberoskeykeyskeysetkey_sourcekillkilobytes_per_batchlabelonlylanguagelastrowlastleftlenlevellifetimelikelistener_portlistener_iploadhistorylob_compactionlocallock_timeoutloglog10loginloginpropertylogin_typelogspacelooplowlowerltrimmachinemanualmarkmark_in_use_for_removalmastermaxmaxdopmaxerrorsmaxrecursionmaxsizemaxtransfersizemax_queue_readersmd2md4md5medianamemediapasswordmediadescriptionmergemessagemessage_forwardingmessage_forward_sizeminmirror_addressmirrormixedmodifymoneymonthmovemulti_usermust_changenamenamespacencharnearnegotiatenevernewidnewnamenewsequentialidnew_accountnew_passwordnew_brokernextnochecknocountnoexecnoexpandnoformatnoindexnoinitnolocknonclusterednonenorecoverynorewindnorecomputenoreseednoresetnormalnoskipnotificationnotruncatenounloadnowaitno_checksumno_infomsgsno_logno_truncateno_waitntextntilentlmnullnullifnumericnumeric_roundabortnvarcharobjectobjectpropertyobjectpropertyexobject_definitionobject_idobject_nameoemofoffofflineoffsetsold_accountold_passwordononlineonlyopentranopenopendatasourceopenqueryopenrowsetopenxmloptionoptimisticoptimizeororderoriginal_loginoutouteroutputoutputbufferoveroverrideownerpad_indexpagepage_verifypagecountpaglockparameterizationparsenameparseonlypartitionpartnerpartialpasswordpathpatindexpercentpermission_setpermissionspersistedphysical_onlypipivotplanpopulationportspowerprimaryprintpriorprivateprivilegesprocprocedureprocedure_nameproccacheprofilepropertypublishingservernameputqueryquery_governor_cost_limitqueuequotenamequoted_identifierradiansraiserrorrandrangerankrawrc2rc4rc4_128readonlyreadwriteread_onlyread_writeread_write_filegroupsreadreadtextread_committed_snapshotreadcommittedreadcommittedlockreadpastreaduncommittedrealrebuildreceiverecoveryrecompilereconfigurerecursive_triggersreferencesregeneraterelated_conversationrelated_conversation_grouprelativeremoveremoteremote_proc_transactionsreorganizerepair_allow_data_lossrepair_fastrepair_rebuildrepeatablerepeatablereadreplicationreplacereplicaterequiredresamplereseedrestartrestricted_userrestoreresumeretaindaysretentionreturnsreturnrevertreverserevokerewindrewindonlyrightrobustrolerolluprollbackrootroundrouterowcount_bigrowcountrowguidcolrowlockrows_per_batchrowsrowsets_onlyrowterminatorrow_numberrsa_512rsa_1024rsa_2048rtrimrulesafesafetysamplesaveschemaschemeschemabindingschema_idschema_namescope_identityscrollscroll_lockssecondssecretselfsendsentserializableservice_brokerserviceservice_nameserverserverpropertysessionpropertysession_usersessionssession_timeoutsetsetusershasha1showcontigshow_statisticsshowplan_allshowplan_textshowplan_xmlshrinkdatabaseshrinkfileshutdownsidsignaturesignsimplesinsingle_usersingle_blobsingle_clobsingle_nclobsitesizeskipsmalldatetimesmallintsmallmoneysnapshotsoapsomesort_in_tempdbsoundexspacesplitsqlsqlperfsql_variantsql_variant_propertysqrtsquaresslssl_portstandbystandardstartedstartstart_datestatestatusstatistics_norecomputestatsstatisticsstats_streamstat_headerstaticstatusonlystats_datestdevstdevpstoppedstopstop_on_errorstopatstopatmarkstopbeforemarkstrstuffsubjectsubscriptionsubstringsumsupportedsuser_idsuser_namesuser_sidsuser_snamesuspendswitchsymmetricsynonymsysnamesystem_usersystemtabletablocktableresultstablesampletablockxtantapetargettcptemplatetertiary_weightstexttextimage_ontextsizetextptrtextvalidthenthesaurustiestimetimeouttimertimestamptinyinttotoptorn_page_detectiontraceofftraceontracestatustransfertrantransactiontriggertrigger_nestleveltriple_destruetruncateonlytruncate_onlytruncatetrustworthytrytsqltypetype_warningtypepropertytype_idtype_nameuncheckeduncommittedunicodeuniqueuniqueidentifierunlimitedunloadunlockunpivotunsafeuowupdateusageupdatetextupdlockupperurluseuseduseruseroptionsuser_iduser_nameusingvalidationvalid_xmlvaluesvaluevarvarbinaryvarcharvarpvaryingverifyonlyviewviewsview_metadatavisibilitywaitforwebmethodweightwell_formed_xmlwhenwherewhilewindowswithwithoutwitnessworkwritewritetextwsdlxact_abortxact_statexlockxmlxmldataxmlnamespacesxmlschemaxsinilyear[Preferred keywords]alter tablealter functionalter procedurealterbeginbegin trybegin catchcasecase whencreate tablecreatedeclaredelete fromdrop tabledrop proceduredrop functiondropendend tryend catchexecexecuteexistsfromgroup byhavinginsert intoinnotnot nullnot innot existsorder byselectselect top select top 5 * fromselect distincttruncate tableunionunion allupdatewhere[Do not add delimiters]idname

[formats.8.1]
enabled=1
caption=Sybase ASA Default Style
export=1
count=26
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.8.1.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...

[formats.8.1.2]
enabled=1
caption=case
export=1
body=CASE ...     WHEN ... THEN ...     ELSE ...END

[formats.8.1.3]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>END

[formats.8.1.4]
enabled=1
caption=if
export=1
body=IF ...   AND ...   OR ...BEGIN    <stmtList>END...ELSE    ...BEGIN    <stmtList>END

[formats.8.1.5]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...BEGIN    <stmtList>END

[formats.8.1.6]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  )

[formats.8.1.7]
enabled=1
caption=update
export=1
body=UPDATE ...SET    ... = ...,       ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...

[formats.8.1.8]
enabled=1
caption=delete
export=1
body=DELETE ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...

[formats.8.1.9]
enabled=1
caption=exec
export=1
body=EXEC ...,     ...

[formats.8.1.10]
enabled=1
caption=declare
export=1
body=DECLARE ...,        ... CURSOR ... FOR    ...;

[formats.8.1.11]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...)

[formats.8.1.12]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...	@...	@...WITH ..., ...AS	<stmtList>GO

[formats.8.1.13]
enabled=1
caption=alter procedure
export=1
body=ALTER PROCEDURE ...	@...	@...WITH ..., ...AS	<stmtList>GO

[formats.8.1.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURNS ...WITH ..., ...AS	<stmtList>GO

[formats.8.1.15]
enabled=1
caption=alter function
export=1
body=ALTER FUNCTION ...(	...,	...)RETURNS ...WITH ..., ...AS

[formats.8.1.16]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.8.1.17]
enabled=1
caption=alter trigger
export=1
body=ALTER TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.8.1.18]
enabled=1
caption=set
export=1
body=SET ... = ...

[formats.8.1.19]
enabled=1
caption=begin try
export=1
body=BEGIN TRY	<stmtList>END TRY

[formats.8.1.20]
enabled=1
caption=begin catch
export=1
body=BEGIN CATCH	<stmtList>END CATCH

[formats.8.1.21]
enabled=1
caption=(...)
export=1
body=(    ...,    ...    AND ...    OR ...)

[formats.8.1.22]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.8.1.23]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.8.1.24]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.8.1.25]
enabled=1
caption=default values
export=1
body=DEFAULT VALUES

[formats.8.1.26]
enabled=1
caption=with
export=1
body=WITH ...

[formats.8.2]
enabled=1
caption=Sybase ASA Custom Style 1
export=1
count=26
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=80
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=1
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.8.2.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...      ,... = ...FROM   ... AS ...      ,...       JOIN ...            ON  ... = ...                AND ...WHERE  ... = ...       AND ...       OR ...GROUP BY       ...      ,...HAVING ...      ,...ORDER BY       ...      ,...

[formats.8.2.2]
enabled=1
caption=case
export=1
body=CASE ...     WHEN ... THEN ...     ELSE ...END

[formats.8.2.3]
enabled=1
caption=begin
export=1
body=BEGIN    <stmtList>END

[formats.8.2.4]
enabled=1
caption=if
export=1
body=IF ...   AND ...   OR ...BEGIN    <stmtList>END...ELSE    ...BEGIN    <stmtList>END

[formats.8.2.5]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...BEGIN    <stmtList>END

[formats.8.2.6]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  )

[formats.8.2.7]
enabled=1
caption=update
export=1
body=UPDATE ...SET    ... = ...      ,...FROM   ... AS ...      ,...       JOIN ...            ON  ... = ...                AND ...WHERE  ... = ...       AND ...       OR ...

[formats.8.2.8]
enabled=1
caption=delete
export=1
body=DELETE ...FROM   ... AS ...      ,...       JOIN ...            ON  ... = ...                AND ...WHERE  ... = ...       AND ...       OR ...

[formats.8.2.9]
enabled=1
caption=exec
export=1
body=EXEC ...    ,...

[formats.8.2.10]
enabled=1
caption=declare
export=1
body=DECLARE ...       ,... CURSOR ... FOR    ...;

[formats.8.2.11]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...)

[formats.8.2.12]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...	@...	@...WITH ...    ,...AS	<stmtList>GO

[formats.8.2.13]
enabled=1
caption=alter procedure
export=1
body=ALTER PROCEDURE ...	@...	@...WITH ...    ,...AS	<stmtList>GO

[formats.8.2.14]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...   ,...)RETURNS ...WITH ...    ,...AS	<stmtList>GO

[formats.8.2.15]
enabled=1
caption=alter function
export=1
body=ALTER FUNCTION ...(	...   ,...)RETURNS ...WITH ...    ,...AS

[formats.8.2.16]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.8.2.17]
enabled=1
caption=alter trigger
export=1
body=ALTER TRIGGER ...ON ...[FOR] ... [INSERT]... [UPDATE]... [DELETE]...AS	<stmtList>GO

[formats.8.2.18]
enabled=1
caption=set
export=1
body=SET ... = ...

[formats.8.2.19]
enabled=1
caption=begin try
export=1
body=BEGIN TRY    <stmtList>END TRY

[formats.8.2.20]
enabled=1
caption=begin catch
export=1
body=BEGIN CATCH    <stmtList>END CATCH

[formats.8.2.21]
enabled=1
caption=(...)
export=1
body=(    ...   ,...    AND ...    OR ...)

[formats.8.2.22]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.8.2.23]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ?v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.8.2.24]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.8.2.25]
enabled=1
caption=default values
export=1
body=DEFAULT VALUES

[formats.8.2.26]
enabled=1
caption=with
export=1
body=WITH ...

[formats.9]
enabled=1
caption=Redshift
export=1
count=2
dbType=8
kwList=aes128aes256allallowoverwriteanalyseanalyzeandanyarrayasascauthorizationbackupbetweenbinaryblanksasnullbothbytedictcasecastcheckcollatecolumnconstraintcreatecredentialscrosscurrent_datecurrent_timecurrent_timestampcurrent_usercurrent_user_iddefaultdeferrabledeflatedefragdeltadelta32kdescdisabledistinctdoelseemptyasnullenableencodeencrypt     encryptionendexceptexplicitfalseforforeignfreezefromfullglobaldict256globaldict64kgrantgroupgziphavingidentityignoreilikeininitiallyinnerintersectintoisisnulljoinleadingleftlikelimitlocaltimelocaltimestamplunlunslzolzopminusmostly13mostly32mostly8naturalnewnotnotnullnullnullsoffofflineoffsetoldononlyopenororderouteroverlapsparallelpartitionpercentplacingprimaryrawreadratiorecoverreferencesrejectlogresortrestorerightselectsession_usersimilarsomesysdatesystemtabletagtdestext255text32kthentotoptrailingtruetruncatecolumnsunionuniqueuserusingverbosewalletwhenwherewithwithout

[formats.9.1]
enabled=1
caption=Amazon Redshift Default Style
export=1
count=10
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=2
operPos=1
spaceBr=2
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.9.1.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.9.1.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.9.1.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...AND ...OR  ...;

[formats.9.1.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...AND ...OR  ...;

[formats.9.1.5]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.9.1.6]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...) ...;

[formats.9.1.7]
enabled=1
caption=(...)
export=1
body=(	...   ,...AND ...OR  ...)

[formats.9.1.8]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.9.1.9]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant © v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.9.1.10]
enabled=1
caption=with
export=1
body=WITH ...

[formats.9.2]
enabled=1
caption=Amazon Redshift Custom Style 1
export=1
count=10
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=2
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.9.2.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.9.2.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.9.2.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.9.2.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...	AND ...	OR  ...;

[formats.9.2.5]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.9.2.6]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...) ...;

[formats.9.2.7]
enabled=1
caption=(...)
export=1
body=(	...   ,...	AND ...	OR ...)

[formats.9.2.8]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.9.2.9]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant © v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.9.2.10]
enabled=1
caption=with
export=1
body=WITH ...

[formats.10]
enabled=1
caption=SQLite
export=1
count=2
dbType=9
kwList=ABORTACTIONADDAFTERALLALTERANALYZEANDASASCATTACHAUTOINCREMENTBEFOREBEGINBETWEENBYCASCADECASECASTCHECKCOLLATECOLUMNCOMMITCONFLICTCONSTRAINTCREATECROSSCURRENT_DATECURRENT_TIMECURRENT_TIMESTAMPDATABASEDEFAULTDEFERRABLEDEFERREDDELETEDESCDETACHDISTINCTDROPEACHELSEENDESCAPEEXCEPTEXCLUSIVEEXISTSEXPLAINFAILFORFOREIGNFROMFULLGLOBGROUPHAVINGIFIGNOREIMMEDIATEININDEXINDEXEDINITIALLYINNERINSERTINSTEADINTERSECTINTOISISNULLJOINKEYLEFTLIKELIMITMATCHNATURALNONOTNOTNULLNULLOFOFFSETONORORDEROUTERPLANPRAGMAPRIMARYQUERYRAISERECURSIVEREFERENCESREGEXPREINDEXRELEASERENAMEREPLACERESTRICTRIGHTROLLBACKROWSAVEPOINTSELECTSETTABLETEMPTEMPORARYTHENTOTRANSACTIONTRIGGERUNIONUNIQUEUPDATEUSINGVACUUMVALUESVIEWVIRTUALWHENWHEREWITHWITHOUTINTINTEGERTINYINTSMALLINTMEDIUMINTBIGINTUNSIGNEDINT2INT8CHARCHARACTERNCHARVARCHARNVARCHARTEXTCLOBREALDOUBLEFLOATNUMERICDECIMALBOOLEANDATEDATETIME

[formats.10.1]
enabled=1
caption=SQLite Default Style
export=1
count=10
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=2
operPos=1
spaceBr=2
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.10.1.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.10.1.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.10.1.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...AND ...OR  ...;

[formats.10.1.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...AND ...OR  ...;

[formats.10.1.5]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.10.1.6]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...) ...;

[formats.10.1.7]
enabled=1
caption=(...)
export=1
body=(	...   ,...AND ...OR  ...)

[formats.10.1.8]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.10.1.9]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant © v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.10.1.10]
enabled=1
caption=with
export=1
body=WITH ...

[formats.10.2]
enabled=1
caption=SQLite Custom Style 1
export=1
count=10
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=2
operPos=1
spaceBr=2
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.10.2.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.10.2.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.10.2.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...AND ...OR  ...;

[formats.10.2.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...AND ...OR  ...;

[formats.10.2.5]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.10.2.6]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...) ...;

[formats.10.2.7]
enabled=1
caption=(...)
export=1
body=(	...   ,...AND ...OR  ...)

[formats.10.2.8]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.10.2.9]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant © v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.10.2.10]
enabled=1
caption=with
export=1
body=WITH ...

[formats.11]
enabled=1
caption=Netezza
export=1
count=2
dbType=10
kwList=ABORTACCESSACCOUNTACTIONADDADMINAGGREGATEALLALLOWALTERASASCATTRNAMEAUDITAUTHAUTHENTICATIONAUTHORIZATIONAVGBACKUPBACKUPSETBASEBEGINBINARYBINDDNBINDPWBYCASCADECATALOGCATEGORYCHARCHARACTERCLIENT_ACCOUNTING_STRINGCLIENT_APPLICATION_NAMECLIENT_USER_IDCLIENT_WORKSTATION_NAMECOLLATIONCOLLECTCOLUMNCOMMENTCOMMITCOMMITTEDCONCURRENTCONFIGURATIONCONNECTIONCONSTRAINTCOPYCOUNTCREATECRITICALCROSSCURRENTCURRENT_CATALOGCURRENT_DATECURRENT_PATHCURRENT_SCHEMACURRENT_TIMECURRENT_TIMESTAMPCURRENT_TX_PATHCURRENT_TX_SCHEMACURRENT_USERCYCLEDATABASEDATEDATE_PARTDATE_TRUNCDATESTYLEDAYDECREASEDEFAULTDEFERRABLEDEFERREDDEFPRIORITYDELETEDELIMITERSDENSEDENSE_RANKDESCDISKFULLTHRESHOLDDISTINCTDISTRIBUTEDISTRIBUTIONDROPENABLEHISTENABLESYSTEMENDESTIMATEEXCEPTEXCLUSIVEEXECUTEEXPANDEXPIREEXPLAINEXPRESSEXTERNALEXTRACTFAILUREFALSEFIRSTFIRST_VALUEFOLLOWINGFORFOREIGNFROMFULLFUNCTIONGENERATEGENSTATSGRANTGROOMGROUPHARDWAREHASHHAVINGHIGHHISTORYHISTTYPEHOSTHOSTNOSSLHOSTSSLIDIFIMMEDIATEININCLUDINGINCREASEINCREMENTINITIALLYINNERINSERTINTERSECTINTOIPADDRIPMASKISISHOWISOISOLATIONJOBJOINKDCKEEPKERBEROSKEYLABELLAGLASTLAST_VALUELATIN9LDAPLEADLEFTLEVELLIBRARYLIMITLISTLOAD_REPLAY_REGIONLOADINTERVALLOADMAXTHRESHOLDLOADMINTHRESHOLDLOADRETRYLOCALLOCALHOSTLOCKLOWLOWERLOWERCASEMANAGEMANAGEMENTMATCHMATCHDBMATERIALIZEMATERIALIZEDMATERIALZEMAXMAXIMUMMAXPRIORITYMAXVALUEMINMINIMUMMINUSMINVALUEMODEMODIFYNAMECASENATURALNONONENORMALNOTNOWNOWAITNPSNULLNULLSNUMBEROFFONONEONLYOPTIONORORDERORGANIZEOUTEROVEROWNERPAGESPARTPASSWORDPASSWORDEXPIRYPASSWORDPOLICYPATHPERPLANPLANFILEPLANGRAPHPLANTEXTPOPULATIONPORTPOSITIONPRECEDINGPRIMARYPRIORITYPRIVILEGESPROCEDUREPUBLICQUERYQUERYTIMEOUTRANDOMRANDOM_SEEDRANGERANKREADREADYREALMRECLAIMRECORDSREFERENCESREFRESHREINDEXREMOVERENAMEREPEATABLEREPLACERESETRESOURCERESOURCEGROUPRESTARTRESTORERESTRICTREVOKERIGHTROLLBACKROWROW_NUMBERROWSETLIMITRULESAMEASSAMPLESCHEDULERSCHEMASCOPESECURITYSELECTSEQUENCESERIALIZABLESERVERSERVICESESSIONSESSIONSSESSIONTIMEOUTSETSHARESHORTSHOWSQLSSLST_GEOMETRYSTARTSTATESTATISTICSSTDDEVSTDDEV_POPSTDDEV_SAMPSTORAGELIMITSUBSUBSTRINGSUCCESSSUMSUSPENDSYNONYMSYSIDSYSTEMTABLETAGTAGSTEMPTEMPORARYTHENTHRESHOLDTIMETIMEOFDAYTIMESTAMPTIMEZONETOTRANSACTIONTRIMTRUETRUNCTRUNCATETYPEUNBOUNDEDUNCOMMITTEDUNIONUNIQUEUNLIMITEDUNTILUPDATEUPPERUPPERCASEUSERUSERCASEUSINGVALIDVALUEVALUESVAR_POPVAR_SAMPVARBINARYVARCHARVARIANCEVERBOSEVERSIONVERSIONSVIEWVIEWSWHEREWITHWITHINWORKWRITEZONE

[formats.11.1]
enabled=1
caption=Netezza Default Style
export=1
count=23
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=2
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.11.1.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.11.1.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  );

[formats.11.1.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.11.1.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...;

[formats.11.1.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.11.1.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.11.1.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.11.1.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.11.1.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.11.1.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.11.1.11]
enabled=0
caption=function
export=1
body=FUNCTION ...(	...,	...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.11.1.12]
enabled=1
caption=declare
export=1
body=DECLARE	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.11.1.13]
enabled=0
caption=type
export=1
body=TYPE ... IS RECORD (	...,	...);

[formats.11.1.14]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...) ...;

[formats.11.1.15]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...

[formats.11.1.16]
enabled=1
caption=(...)
export=1
body=(	...,	...	AND ...	OR ...)

[formats.11.1.17]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.11.1.18]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ???? v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.11.1.19]
enabled=1
caption=create function
export=1
body=CREATE ... FUNCTION ...(	...,	...)RETURNS ...(	...,	...	)LANGUAGE ...ASBEGIN_PROC	<stmtList>END_PROC;

[formats.11.1.20]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.11.1.21]
enabled=0
caption=create type
export=1
body=CREATE TYPE ...(	...,	...)

[formats.11.1.22]
enabled=0
caption=with
export=1
body=WITH ...

[formats.11.1.23]
enabled=1
caption=create procedure
export=1
body=CREATE ... PROCEDURE ...(	...,	...)RETURNS ...(	...,	...	)LANGUAGE ...ASBEGIN_PROC	<stmtList>END_PROC;

[formats.11.2]
enabled=1
caption=Netezza Custom Style 1
export=1
count=23
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.11.2.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.11.2.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.11.2.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.11.2.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...	AND ...	OR  ...;

[formats.11.2.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.11.2.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.11.2.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.11.2.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.11.2.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.11.2.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.11.2.11]
enabled=0
caption=function
export=1
body=FUNCTION ...(	...   ,...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.11.2.12]
enabled=1
caption=declare
export=1
body=DECLARE	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.11.2.13]
enabled=0
caption=type
export=1
body=TYPE ... IS RECORD (	...   ,...);

[formats.11.2.14]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...) ...;

[formats.11.2.15]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...

[formats.11.2.16]
enabled=1
caption=(...)
export=1
body=(	...   ,...	AND ...	OR ...)

[formats.11.2.17]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.11.2.18]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant ???? v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.11.2.19]
enabled=1
caption=create function
export=1
body=CREATE ... FUNCTION ...(	...,	...)RETURNS ...(	...,	...	)LANGUAGE ...ASBEGIN_PROC	<stmtList>END_PROC;

[formats.11.2.20]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.11.2.21]
enabled=0
caption=create type
export=1
body=CREATE TYPE ...(	...   ,...)

[formats.11.2.22]
enabled=0
caption=with
export=1
body=WITH ...

[formats.11.2.23]
enabled=1
caption=create procedure
export=1
body=CREATE ... PROCEDURE ...(	...,	...)RETURNS ...(	...,	...	)LANGUAGE ...ASBEGIN_PROC	<stmtList>END_PROC;

[formats.12]
enabled=1
caption=Greenplum
export=1
count=2
dbType=12
kwList=abortabsabsoluteaccessactionadaaddadminafteraggregatealiasallallocatealsoalwaysanalyseanalyzeandanyarearrayasascasensitiveassertionassignmentasymmetricatatomicattributeattributesauthorizationavgbackwardbase64beforebeginbernoullibetweenbigintbigserialbinarybitbitvarbit_lengthblobbooleanbothbreadthbybyteacachecallcalledcardinalitycascadecascadedcastcatalogcatalog_nameceilceilingchaincharcharactercharacteristicscharacterscharacter_lengthcharacter_set_catalogcharacter_set_namecharacter_set_schemachar_lengthcheckcheckedcheckpointclassclass_originclobcloseclustercoalescecobolcollatecollationcollation_catalogcollation_namecollation_schemacollectcolumncolumn_namecommand_functioncommand_function_codecommentcommitcommittedcompletionconcurrentlyconditioncondition_numberconfigurationconnectconnectionconnection_nameconstraintconstraintsconstraint_catalogconstraint_nameconstraint_schemaconstructorcontainscontentcontinueconversionconvertcopycorrcorrespondingcostcountcovar_popcovar_sampcreatedbcreaterolecreateusercrosscsvcubecume_distcurrentcurrent_datecurrent_default_transform_groupcurrent_pathcurrent_rolecurrent_timecurrent_timestampcurrent_transform_group_for_typecurrent_usercursorcursor_namecycledatadatabasedatedatetime_interval_codedatetime_interval_precisiondaydeallocatedecdecimaldefaultdefaultsdeferrabledeferreddefineddefinerdegreedeletedelimiterdelimitersdense_rankdepthderefderiveddescdescribedescriptordestroydestructordeterministicdiagnosticsdictionarydisablediscarddisconnectdispatchdistinctdodocumentdomaindoubledynamicdynamic_functiondynamic_function_codeeachelementelseenableencodingencryptedendend-execenumequalsescapeeveryexceptexceptionexcludeexcludingexclusiveexistingexpexplainexternalextractfalsefamilyfetchfilterfinalfirstfloatfloorfollowingforforceforeignfortranforwardfoundfreefreezefullfunctionfusiongeneralgeneratedgetglobalgogotograntgrantedgreatestgroupgroupinghandlerheaderhexhierarchyholdhosthouridentityifignoreilikeimmediateimmutableimplementationimplicitincludingincrementindexindexesindicatorinfixinheritinheritsinitializeinitiallyinnerinoutinputinsensitiveinsertinstanceinstantiableinsteadintintegerintersectintersectionintervalintoinvokerisisnullisolationiteratejoinkeykey_memberkey_typelancompilerlanguagelargelastlateralleadingleastleftlengthlesslevellikelimitlistenlnloadlocallocaltimelocaltimestamplocationlocatorlockloginlooplowermapmappingmatchmatchedmaxmaxvaluemembermergemessage_lengthmessage_octet_lengthmessage_textmethodminminuteminvaluemodmodemodifiesmodifymodulemonthmoremovemultisetmumpsnamenamesnationalnaturalncharnclobnestingnewnextnonocreatedbnocreaterolenocreateusernoinheritnologinnonenormalizenormalizednosuperusernothingnotifynotnullnowaitnullnullablenullifnullsnumbernumericobjectoctetsoctet_lengthofoffoffsetoidsoldononlyopenoperationoperatoroptionoptionsororderorderingordinalityothersoutouteroutputoveroverlapsoverlayoverridingownedownerpadparameterparametersparameter_modeparameter_nameparameter_ordinal_positionparameter_specific_catalogparameter_specific_nameparameter_specific_schemaparserpartialpartitionpascalpasswordpathpercentile_contpercentile_discpercent_rankplacingplansplipositionpostfixpowerprecedingprecisionprefixpreorderpreparepreparedpreserveprimarypriorprivilegesproceduralprocedurepublicquoterangerankreadreadsrealreassignrecheckrecursiverefreferencesreferencingregr_avgxregr_avgyregr_countregr_interceptregr_r2regr_sloperegr_sxxregr_sxyregr_syyreindexrelativereleaserenamerepeatablereplacereplicaresetrestartrestrictresultreturnreturned_cardinalityreturned_lengthreturned_octet_lengthreturned_sqlstatereturningreturnsrevokerightrolerollbackrolluproutineroutine_catalogroutine_nameroutine_schemarowrowsrow_countrow_numberrulesavepointscaleschemaschema_namescopescope_catalogscope_namescope_schemascrollsearchsecondsectionsecurityselfsensitivesequenceserializableserver_namesessionsession_usersetsetofsetsshareshowsimilarsimplesizesmallintsomesourcespacespecificspecifictypespecific_namesqlsqlcodesqlerrorsqlexceptionsqlstatesqlwarningsqrtstablestandalonestartstatestatementstaticstatisticsstddev_popstddev_sampstdinstdoutstoragestrictstripstructurestylesubclass_originsublistsubmultisetsubstringsumsuperusersymmetricsysidsystemsystem_usertabletablesampletablespacetable_nametemptemplatetemporaryterminatetextthanthentiestimetimestamptimezone_hourtimezone_minutetotop_level_counttrailingtransactiontransactions_committedtransactions_rolled_backtransaction_activetransformtransformstranslatetranslationtreattriggertrigger_catalogtrigger_nametrigger_schematrimtruetruncatetrustedtypeuescapeunboundeduncommittedunderunencrypteduniqueunknownunlistenunnamedunnestuntilupperusageuseruser_defined_type_cataloguser_defined_type_codeuser_defined_type_nameuser_defined_type_schemausinguuidvacuumvalidvalidatorvaluevaluesvarcharvariablevaryingvar_popvar_sampverboseversionviewvolatilewhenwheneverwherewhitespacewidth_bucketwindowwithwithinwithoutworkwritexmlxmlaggxmlattributesxmlbinaryxmlcommentxmlconcatxmlelementxmlforestxmlnamespacesxmlparsexmlpixmlrootxmlserializeyearyeszone[Preferred keywords]alter tablealter functionalter procedurealtercasecase whencreate tablecreatedeclaredelete fromdrop tabledrop proceduredrop functiondropexecexecuteexistsfromgroup byhavinginsert intoinnotnot nullnot innot existsorder byselectselect distincttruncate tableunionunion allupdatewhere[Do not add delimiters]idname

[formats.12.1]
enabled=1
caption=Greenplum Default Style
export=1
count=22
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=2
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.12.1.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.12.1.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  );

[formats.12.1.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.12.1.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...;

[formats.12.1.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.12.1.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.12.1.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.12.1.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.12.1.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.12.1.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.12.1.11]
enabled=1
caption=function
export=1
body=FUNCTION ...(	...,	...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.12.1.12]
enabled=1
caption=declare
export=1
body=DECLARE	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.12.1.13]
enabled=1
caption=type
export=1
body=TYPE ... IS RECORD (	...,	...);

[formats.12.1.14]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...,	...) ...;

[formats.12.1.15]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...

[formats.12.1.16]
enabled=1
caption=(...)
export=1
body=(	...,	...	AND ...	OR ...)

[formats.12.1.17]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...,	...)AS

[formats.12.1.18]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant © v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.12.1.19]
enabled=1
caption=create function
export=1
body=CREATE ... FUNCTION ...(	...,	...)RETURNS ...(	...,	...	)LANGUAGE ...AS$$	<stmtList>$$LANGUAGE ...;

[formats.12.1.20]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.12.1.21]
enabled=1
caption=create type
export=1
body=CREATE TYPE ...(	...,	...)

[formats.12.1.22]
enabled=1
caption=with
export=1
body=WITH ...

[formats.12.2]
enabled=1
caption=Greenplum Custom Style 1
export=1
count=22
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.12.2.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.12.2.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.12.2.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.12.2.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...	AND ...	OR  ...;

[formats.12.2.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.12.2.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.12.2.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.12.2.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.12.2.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.12.2.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.12.2.11]
enabled=1
caption=function
export=1
body=FUNCTION ...(	...   ,...)RETURN ...IS	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.12.2.12]
enabled=1
caption=declare
export=1
body=DECLARE	<stmtList>BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.12.2.13]
enabled=1
caption=type
export=1
body=TYPE ... IS RECORD (	...   ,...);

[formats.12.2.14]
enabled=1
caption=create table
export=1
body=CREATE TABLE ...(	...   ,...) ...;

[formats.12.2.15]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...

[formats.12.2.16]
enabled=1
caption=(...)
export=1
body=(	...   ,...	AND ...	OR ...)

[formats.12.2.17]
enabled=1
caption=create view
export=1
body=CREATE VIEW ...(	...   ,...)AS

[formats.12.2.18]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant © v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.12.2.19]
enabled=1
caption=create function
export=1
body=CREATE ... FUNCTION ...(	...,	...)RETURNS ...(	...,	...	)LANGUAGE ...AS$$	<stmtList>$$LANGUAGE ...;

[formats.12.2.20]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.12.2.21]
enabled=1
caption=create type
export=1
body=CREATE TYPE ...(	...   ,...)

[formats.12.2.22]
enabled=1
caption=with
export=1
body=WITH ...

[formats.13]
enabled=1
caption=Teradata
export=1
count=2
dbType=11
kwList=ABORTABORTSESSIONABSABSOLUTEACCESS_LOCKACCOUNTACOSACOSHACTIONADDADD_MONTHSADMINAFTERAGGREGATEALIASALLALLOCATEALTERAMPANDANSIDATEANYAREARRAYASASCASINASINHASSERTIONATATANATAN2ATANHATOMICAUTHORIZATIONAVEAVERAGEAVGBEFOREBEGINBETWEENBINARYBITBLOBBOOLEANBOTHBREADTHBTBUTBYBYTEBYTEINTBYTESCALLCASCADECASCADEDCASECASE_NCASESPECIFICCASTCATALOGCDCHARCHAR_LENGTHCHAR2HEXINTCHARACTERCHARACTER_LENGTHCHARACTERSCHARSCHECKCHECKPOINTCLASSCLOBCLOSECLUSTERCMCOALESCECOLLATECOLLATIONCOLLECTCOLUMNCOMMENTCOMMITCOMPLETIONCOMPRESSCONNECTCONNECTIONCONSTRAINTCONSTRAINTSCONSTRUCTORCONTINUECONVERT_TABLE_HEADERCORRCORRESPONDINGCOSCOSHCOUNTCOVAR_POPCOVAR_SAMPCREATECROSSCSCSUMCTCUBECURRENTCURRENT_DATECURRENT_PATHCURRENT_ROLECURRENT_TIMECURRENT_TIMESTAMPCURRENT_USERCURSORCVCYCLEDATADATABASEDATABLOCKSIZEDATEDATEFORMDAYDEALLOCATEDECDECIMALDECLAREDEFAULTDEFERRABLEDEFERREDDEGREESDELDELETEDEPTHDEREFDESCDESCRIBEDESCRIPTORDESTROYDESTRUCTORDETERMINISTICDIAGNOSTICDIAGNOSTICSDICTIONARYDISABLEDDISCONNECTDISTINCTDODOMAINDOUBLEDROPDUALDUMPDYNAMICEACHECHOELSEELSEIFENABLEDENDEND-EXECEQEQUALSERRORERRORFILESERRORTABLESESCAPEETEVERYEXCEPTEXCEPTIONEXECEXECUTEEXISTSEXITEXPEXPLAINEXTERNALEXTRACTFALLBACKFALSEFASTEXPORTFETCHFIRSTFLOATFORFOREIGNFORMATFOUNDFREEFREESPACEFROMFULLFUNCTIONGEGENERALGENERATEDGETGIVEGLOBALGOGOTOGRANTGRAPHICGROUPGROUPINGGTHANDLERHASHHASHAMPHASHBAKAMPHASHBUCKETHASHROWHAVINGHELPHOSTHOURIDENTITYIFIGNOREIMMEDIATEININCONSISTENTINDEXINDICATORINITIALIZEINITIALLYINITIATEINNERINOUTINPUTINSINSERTINSTEADINTINTEGERINTEGERDATEINTERSECTINTERVALINTOISISOLATIONITERATEJOINJOURNALKEYKURTOSISLANGUAGELARGELASTLATERALLELEADINGLEAVELEFTLESSLEVELLIKELIMITLNLOADINGLOCALLOCALTIMELOCALTIMESTAMPLOCATORLOCKLOCKINGLOGLOGGINGLOGONLONGLOOPLOWERLTMACROMAPMATCHMAVGMAXMAXIMUMMCHARACTERSMDIFFMERGEMINMINDEXMINIMUMMINUSMINUTEMLINREGMLOADMODMODEMODIFIESMODIFYMODULEMONITORMONRESOURCEMONSESSIONMONTHMSUBSTRMSUMMULTISETNAMEDNAMESNATIONALNATURALNCHARNCLOBNENEWNEW_TABLENEXTNONONENOTNOWAITNULLNULLIFNULLIFZERONUMERICOBJECTOBJECTSOCTET_LENGTHOFOFFOLDOLD_TABLEONONLYOPENOPERATIONOPTIONORORDERORDINALITYOUTOUTEROUTPUTOVEROVERLAPSOVERRIDEPADPARAMETERPARAMETERSPARTIALPASSWORDPATHPERCENTPERCENT_RANKPERMPERMANENTPOSITIONPOSTFIXPRECISIONPREFIXPREORDERPREPAREPRESERVEPRIMARYPRIORPRIVATEPRIVILEGESPROCEDUREPROFILEPROPORTIONALPROTECTIONPUBLICQUALIFIEDQUALIFYQUANTILERADIANSRANDOMRANGE_NRANKREADREADSREALRECURSIVEREFREFERENCESREFERENCINGREGR_AVGXREGR_AVGYREGR_COUNTREGR_INTERCEPTREGR_R2REGR_SLOPEREGR_SXXREGR_SXYREGR_SYYRELATIVERELEASERENAMEREPEATREPLACEREPLICATIONREPOVERRIDEREQUESTRESTARTRESTORERESTRICTRESULTRESUMERETRETRIEVERETURNRETURNSREVALIDATEREVOKERIGHTRIGHTSROLEROLLBACKROLLFORWARDROLLUPROUTINEROWROW_NUMBERROWIDROWSSAMPLESAMPLEIDSAVEPOINTSCHEMASCOPESCROLLSEARCHSECONDSECTIONSELSELECTSEQUENCESESSIONSESSION_USERSETSETRESRATESETSSETSESSRATESHOWSINSINHSIZESKEWSMALLINTSOMESOUNDEXSPACESPECIFICSPECIFICTYPESPOOLSQLSQLEXCEPTIONSQLSTATESQLTEXTSQLWARNINGSQRTSSSTARTSTARTUPSTATESTATEMENTSTATICSTATISTICSSTDDEV_POPSTDDEV_SAMPSTEPINFOSTRING_CSSTRUCTURESUBSCRIBERSUBSTRSUBSTRINGSUMSUMMARYSUSPENDSYSTEM_USERTABLETANTANHTBL_CSTEMPORARYTERMINATETHANTHENTHRESHOLDTIMETIMESTAMPTIMEZONE_HOURTIMEZONE_MINUTETITLETOTRACETRAILINGTRANSACTIONTRANSLATETRANSLATE_CHKTRANSLATIONTREATTRIGGERTRIMTRUETYPEUCUNDEFINEDUNDERUNDOUNIONUNIQUEUNKNOWNUNNESTUNTILUPDUPDATEUPPERUPPERCASEUSAGEUSERUSINGVALUEVALUESVAR_POPVAR_SAMPVARBYTEVARCHARVARGRAPHICVARIABLEVARYINGVIEWVOLATILEWAITWHENWHENEVERWHEREWHILEWIDTH_BUCKETWITHWITHOUTWORKWRITEYEARZEROIFNULLZONE

[formats.13.1]
enabled=1
caption=Teradata Default Style
export=1
count=29
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=1
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.13.1.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...,       ... = ...INTO   ...,	   ...FROM   ... AS ...,       ...       JOIN ...            ON  ... = ...            AND ...WHERE  ... = ...       AND ...       OR  ...GROUP BY       ...,       ...HAVING ...,       ...ORDER BY       ...,       ...;

[formats.13.1.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...,    ...  )VALUES  (    ...,    ...  );

[formats.13.1.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR  ...;

[formats.13.1.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...,	...WHERE	... = ...	AND ...	OR  ...;

[formats.13.1.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.13.1.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.13.1.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.13.1.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.13.1.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.13.1.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.13.1.11]
enabled=1
caption=procedure
export=1
body=PROCEDURE ...(	...,	...)ASBEGIN	<stmtList>END

[formats.13.1.12]
enabled=1
caption=function
export=1
body=FUNCTION ...(	...,	...)RETURN ...ASBEGIN	<stmtList>END

[formats.13.1.13]
enabled=1
caption=create table
export=1
body=CREATE ... TABLE ...(	...,	...) ...;

[formats.13.1.14]
enabled=1
caption=create macro
export=1
body=CREATE MACRO ...(	...,	...)AS(	<stmtList>)

[formats.13.1.15]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...BEGIN	<stmtList>END

[formats.13.1.16]
enabled=1
caption=(...)
export=1
body=(	...,	...	AND ...	OR ...)

[formats.13.1.17]
enabled=1
caption=create view
export=1
body=CREATE ... VIEW ...(	...,	...)AS

[formats.13.1.18]
enabled=1
caption=execute
export=1
body=EXECUTE IMMEDIATE ...   [INTO] ...  [USING] ...

[formats.13.1.19]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant © v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.13.1.20]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...,	...)RETURN ...ASBEGIN	<stmtList>END

[formats.13.1.21]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...(	...,	...)ASBEGIN	<stmtList>END

[formats.13.1.22]
enabled=1
caption=in
export=1
body=IN (..., ...)

[formats.13.1.23]
enabled=1
caption=with
export=1
body=WITH ...

[formats.13.1.24]
enabled=1
caption=replace function
export=1
body=REPLACE FUNCTION ...(	...,	...)RETURN ...ASBEGIN	<stmtList>END

[formats.13.1.25]
enabled=1
caption=replace macro
export=1
body=REPLACE MACRO ...(	...,	...)AS(	<stmtList>)

[formats.13.1.26]
enabled=1
caption=replace procedure
export=1
body=REPLACE PROCEDURE ...(	...,	...)ASBEGIN	<stmtList>END

[formats.13.1.27]
enabled=1
caption=replace view
export=1
body=REPLACE ... VIEW ...(	...,	...)AS

[formats.13.1.28]
enabled=1
caption=macro
export=1
body=MACRO ...(	...,	...)AS(	<stmtList>)

[formats.13.1.29]
enabled=1
caption=replace trigger
export=1
body=REPLACE TRIGGER ...ON ...BEGIN	<stmtList>END

[formats.13.2]
enabled=1
caption=Teradata Custom Style 1
export=1
count=28
autoIndent=1
kwConvert=1
maxBrkLen=60
maxLineLen=120
separate=1
alignTypes=1
commasPos=2
operPos=2
spaceBr=1
spaceOper=4
alignAssign=1
alignAlias=1
maxAlignLen=40
autoLowCase=1

[formats.13.2.1]
enabled=1
caption=select
export=1
body=SELECT ... AS ...      ,... = ...INTO   ...      ,...FROM   ... AS ...      ,...       JOIN ...            ON  ... = ...                AND ...WHERE  ... = ...       AND ...       OR ...GROUP BY       ...      ,...HAVING ...      ,...ORDER BY       ...      ,...;

[formats.13.2.2]
enabled=1
caption=insert
export=1
body=INSERT ...  (    ...   ,...  )VALUES  (    ...   ,...  );

[formats.13.2.3]
enabled=1
caption=delete
export=1
body=DELETE ...WHERE	... = ...	AND ...	OR ...;

[formats.13.2.4]
enabled=1
caption=update
export=1
body=UPDATE	...SET	... = ...   ,...WHERE	... = ...	AND ...	OR ...;

[formats.13.2.5]
enabled=1
caption=if
export=1
body=IF  ...    AND ...    OR ...THEN	<stmtList>ELSIF ...THEN	<stmtList>ELSE	<stmtList>END IF;

[formats.13.2.6]
enabled=1
caption=case
export=1
body=CASE ...	WHEN ... THEN ...	ELSE ...END CASE;

[formats.13.2.7]
enabled=1
caption=loop
export=1
body=LOOP	<stmtList>END LOOP;

[formats.13.2.8]
enabled=1
caption=begin
export=1
body=BEGIN	<stmtList>EXCEPTION...	WHEN ... THEN		<stmtList>END

[formats.13.2.9]
enabled=1
caption=while
export=1
body=WHILE ...      AND ...      OR ...LOOP	<stmtList>END LOOP;

[formats.13.2.10]
enabled=1
caption=for
export=1
body=FOR ... IN ...(	...)LOOP	<stmtList>END LOOP;

[formats.13.2.11]
enabled=1
caption=procedure
export=1
body=PROCEDURE ...(	...   ,...)ASBEGIN	<stmtList>END

[formats.13.2.12]
enabled=1
caption=function
export=1
body=FUNCTION ...(	...   ,...)RETURN ...ASBEGIN	<stmtList>END

[formats.13.2.13]
enabled=1
caption=create table
export=1
body=CREATE ... TABLE ...(	...   ,...) ...;

[formats.13.2.14]
enabled=1
caption=create macro
export=1
body=CREATE MACRO ...(	...   ,...)AS(	<stmtList>)

[formats.13.2.15]
enabled=1
caption=create trigger
export=1
body=CREATE TRIGGER ...ON ...BEGIN	<stmtList>END

[formats.13.2.16]
enabled=1
caption=(...)
export=1
body=(	...   ,...    AND ...    OR ...)

[formats.13.2.17]
enabled=1
caption=create view
export=1
body=CREATE ... VIEW ...(	...   ,...)AS

[formats.13.2.18]
enabled=1
caption=execute
export=1
body=EXECUTE IMMEDIATE ...   [INTO] ...  [USING] ...

[formats.13.2.19]
enabled=1
caption=(header)
export=1
body=/************************************************************ * Code formatted by SoftTree SQL Assistant © v$SA_VERSION$ * Time: $DATE$ $TIME$ ************************************************************/

[formats.13.2.20]
enabled=1
caption=create function
export=1
body=CREATE FUNCTION ...(	...   ,...)RETURN ...ASBEGIN	<stmtList>END

[formats.13.2.21]
enabled=1
caption=create procedure
export=1
body=CREATE PROCEDURE ...(	...   ,...)ASBEGIN	<stmtList>END

[formats.13.2.22]
enabled=1
caption=in
export=1
body=IN (...   ,...)

[formats.13.2.23]
enabled=1
caption=with
export=1
body=WITH ...

[formats.13.2.24]
enabled=1
caption=replace function
export=1
body=REPLACE FUNCTION ...(	...   ,...)RETURN ...ASBEGIN	<stmtList>END

[formats.13.2.25]
enabled=1
caption=replace macro
export=1
body=REPLACE MACRO ...(	...   ,...)AS(	<stmtList>)

[formats.13.2.26]
enabled=1
caption=replace procedure
export=1
body=REPLACE PROCEDURE ...(	...   ,...)ASBEGIN	<stmtList>END

[formats.13.2.27]
enabled=1
caption=replace view
export=1
body=REPLACE ... VIEW ...(	...   ,...)AS

[formats.13.2.28]
enabled=1
caption=macro
export=1
body=MACRO ...(	...   ,...)AS(	<stmtList>)

[snips]
enabled=0
caption=
export=1
count=13

[snips.1]
enabled=1
caption=T-SQL Snippets
export=1
count=62
dbType=1
keyChar=2
isCase=0

[snips.1.1]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN     WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.2]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.3]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.4]
enabled=1
caption=sg
export=1
body=SELECT|FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.5]
enabled=1
caption=while
export=1
body=WHILE |     BEGIN            END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.6]
enabled=1
caption=fetch
export=1
body=FETCH NEXT FROM | INTO 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.7]
enabled=1
caption=cur
export=1
body=DECLARE DECLARE DECLARE cur1 CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT | FROM OPEN cur1    WHILE 1 = 1        BEGIN            FETCH cur1 INTO             IF @@FETCH_STATUS <> 0                BREAK            /*  do something  */        ENDCLOSE cur1DEALLOCATE cur1
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.8]
enabled=1
caption=del
export=1
body=DELETE FROM $OBJECT$ WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.9]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.10]
enabled=1
caption=iv
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS$)VALUES(	|)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.11]
enabled=1
caption=is
export=1
body=INSERT INTO $OBJECT$( 	$COLUMNS$)SELECTFROM|WHERE
keyChar=3
isCase=0
action=0
fmtStyle=

[snips.1.12]
enabled=1
caption=fun
export=1
body=IF object_id('|') IS NOT NULLBEGIN 	PRINT 'Dropping function'	DROP FUNCTION 	IF @@ERROR = 0 PRINT 'Function dropped'ENDgo--********************************************************************************************************************************----对象名称(Object Name):        $proc_name$----功能描述(Description):        ----数据�?Tables):               ----作�?Author):                 �?�?----日期(ALTER  Date):            $DATE$----示例(Example):                ----注释(Comments):               ----修改记录(Revision History):----********************************************************************************************************************************CREATE FUNCTION (	<parameters>) RETURNS <data type>BEGIN	DECLARE    	@v_ret <data type>	SET @v_ret = ...		RETURN @v_retEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.13]
enabled=1
caption=proc
export=1
body=$PROMPT(proc_name,Enter new procedure name)$USE [$DB$]goIF object_id('$proc_name$') IS NOT NULLBEGIN 	PRINT 'Dropping procedure $proc_name$'	DROP PROCEDURE [$proc_name$]  	IF @@ERROR = 0 PRINT 'Procedure $proc_name$ dropped'ENDgo--****************************************************************----对象名称(Object Name):    $proc_name$----功能描述(Description):    ----参数(Parameters):         ----作�?Author):             王煜----日期(ALTER  Date):        $DATE$----示例(Example):            ----修改记录(Revision History):----****************************************************************CREATE PROCEDURE [$proc_name$](	|<parameters>)ASBEGIN	DECLARE		@v_ret <data type>	SET @v_ret = ...		RETURN 0ENDgoIF @@ERROR = 0 PRINT 'Procedure $proc_name$ created'go
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.14]
enabled=1
caption=ife
export=1
body=IF |	BEGIN		ENDELSE	BEGIN		END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.15]
enabled=1
caption=if
export=1
body=IF |	BEGIN		END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.16]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.17]
enabled=1
caption=cfetch
export=1
body=DECLARE @$COLUMNS+TYPES$DECLARE my_cursor CURSOR FAST_FORWARD READ_ONLY FORSELECT $COLUMNS$FROM $OBJECT$OPEN my_cursor|FETCH FROM my_cursor INTO @$COLUMNS$WHILE @@FETCH_STATUS = 0BEGIN	/* ... Cursor logic here ... */	FETCH FROM my_cursor INTO @$COLUMNS$ENDCLOSE my_cursorDEALLOCATE my_cursor
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.18]
enabled=1
caption=begin
export=1
body=BEGIN	|END
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.1.19]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.1.20]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.21]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.22]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.23]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.24]
enabled=1
caption=si
export=1
body=DECLARE @$COLUMNS+TYPES$SELECT	@$COLUMNS$ = $COLUMNS$FROM $OBJECT$WHERE|
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.25]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = @$COLUMNS$WHERE|
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.26]
enabled=1
caption=begin try
export=1
body=BEGIN TRY	|END TRYBEGIN CATCH	/* 		SELECT			ERROR_NUMBER() AS ErrorNumber,			ERROR_SEVERITY() AS ErrorSeverity,			ERROR_STATE() AS ErrorState,			ERROR_PROCEDURE() AS ErrorProcedure,			ERROR_LINE() AS ErrorLine,			ERROR_MESSAGE() AS ErrorMessage	*/END CATCH
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.1.27]
enabled=1
caption=_WOW_
export=1
body=/************************************************************ The sample code of the following 4 table interface  * procedures has been generated with the help of * SQL Assistant and a single 5 letter code snippet _WOW_.* * The only purpose of this code snippet is to help you learn * the capabilities of code snippets and use them efficiently, * realizing tremendous productivity gains.** Suggestion: Press CTRL+F11 to auto-format this code.***********************************************************/goCREATE PROCEDURE sp_Update$OBJECT$/************************************************************ Procedure description: This interface procedure is used for *                        updating records in table $OBJECT$.* Date:   $DATE$ * Author: $OSUSER$** Changes* Date		Modified By			Comments************************************************************* $DATE$ $OSUSER$ Initial version************************************************************/(	@old_$COLUMNS+TYPES_V$=NULL	,	@new_$COLUMNS+TYPES_V$=NULL)ASBEGIN	UPDATE $OBJECT$	SET $COLUMNS_V$ = @new_$COLUMNS_V$	WHERE "AND isNull(convert(varchar, "$COLUMNS_V$"), '')" = isNull(convert(varchar, @old_$COLUMNS_V$"), '')"	RETURN (CASE WHEN @@ERROR != 0 THEN -@@ERROR ELSE @@ROWCOUNT END)ENDgoCREATE PROCEDURE sp_Delete$OBJECT$/************************************************************ Procedure description: This interface procedure is used for *                        deleteting records from table $OBJECT$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date		Modified By			Comments************************************************************* $DATE$ $OSUSER$ Initial version************************************************************/(	@$COLUMNS+TYPES_V$=NULL)ASBEGIN	DELETE FROM $OBJECT$	WHERE "AND isNull(convert(varchar, "$COLUMNS_V$"), '')" = isNull(convert(varchar, @$COLUMNS_V$"), '')"	RETURN (CASE WHEN @@ERROR != 0 THEN -@@ERROR ELSE @@ROWCOUNT END)ENDgoCREATE PROCEDURE sp_Insert$OBJECT$/************************************************************ Procedure description: This interface procedure is used for *                        adding records to table $OBJECT$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date		Modified By			Comments************************************************************* $DATE$ $OSUSER$ Initial version************************************************************/(	@$COLUMNS+TYPES_V$=NULL)ASBEGIN	INSERT INTO $OBJECT$	(		$COLUMNS$	)	VALUES 	(		@$COLUMNS$	)	RETURN (CASE WHEN @@ERROR != 0 THEN -@@ERROR ELSE @@ROWCOUNT END)ENDgoCREATE PROCEDURE sp_Get$OBJECT$/************************************************************ Procedure description: This interface procedure is used for *                        searching records in table $OBJECT$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date		Modified By			Comments************************************************************* $DATE$ $OSUSER$ Initial version************************************************************/(	@$COLUMNS+TYPES_V$=NULL)ASBEGIN	SELECT * 	FROM $OBJECT$	WHERE "AND isNull(convert(varchar, "$COLUMNS_V$"), '')" = isNull(convert(varchar, @$COLUMNS_V$"), '')"	RETURN (CASE WHEN @@ERROR != 0 THEN -@@ERROR ELSE @@ROWCOUNT END)ENDgo
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.28]
enabled=1
caption=procu
export=1
body=-- IMPORTANT: For this code to work correctly, --      selected table must have an identity column--      which is also a primary key USE [$DB$]goIF object_id('[dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]') IS NOT NULLBEGIN 	PRINT 'Dropping procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]'	DROP PROCEDURE [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]  	IF @@ERROR = 0 PRINT 'Procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] dropped'ENDgo--****************************************************************----对象名称(Object Name):    $proc_name$----功能描述(Description):    ----参数(Parameters):         ----作�?Author):             王煜----日期(ALTER  Date):        $DATE$----示例(Example):            ----修改记录(Revision History):----****************************************************************CREATE PROCEDURE [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] (    @$COLUMNS+TYPES_V$=NULL ) AS BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.    SET NOCOUNT ON;    IF @$COLUMN_KEYS_V$ < 1       BEGIN          INSERT INTO $OBJECT$          (             $COLUMNS_V$          )          VALUES          (             @$COLUMNS_V$          )          SELECT SCOPE_IDENTITY() $COLUMN_KEYS_V$       END    ELSE       BEGIN          UPDATE $OBJECT$ SET             $COLUMNS_V$ = @$COLUMNS_V$          WHERE $COLUMN_KEYS_V$ = @$COLUMN_KEYS_V$          SELECT @$COLUMN_KEYS_V$ $COLUMN_KEYS_V$       END ENDgoIF @@ERROR = 0 PRINT 'Procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] created'go
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.29]
enabled=1
caption=add
export=1
body=-- Added by WangYu $DATE$ |
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.30]
enabled=1
caption=addProp
export=1
body=DECLARE @TableName SYSNAMESET @TableName = '$OBJECT$|'DECLARE @TableID INTDECLARE @ColName SYSNAMEDECLARE @PLine   NVARCHAR(MAX)SET @TableID = (SELECT [object_id] FROM sys.all_objects WHERE [type] = 'U' AND [name] = @TableName)--表注�?PRINT '--添加表注�?PRINT '--' + @TableNameSET @PLine = 'IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N''描述'' , N''SCHEMA'',N''dbo'', N''TABLE'',N''' + @TableName + ''', NULL,NULL))'PRINT @PLineSET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''描述'', @value=N'''' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''''PRINT @PLinePRINT ''--表上字段注释PRINT '--添加表上字段注释'DECLARE cur1 CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT [name]                                                     FROM   sys.all_columns                                                     WHERE  [object_id] = @TableID                                                       --AND  [name] NOT IN ('Crtd_User', 'Crtd_Prog', 'Crtd_DateTime', 'LUpd_User', 'LUpd_Prog', 'LUpd_DateTime', 'RecId', 'Crtd_Session', 'tstamp')                                                     ORDER BY                                                            column_idOPEN cur1    WHILE 1 = 1        BEGIN            FETCH cur1 INTO @ColName            IF @@FETCH_STATUS <> 0                BREAK            PRINT '--' + @ColName             SET @PLine = 'IF NOT EXISTS (SELECT * FROM ::fn_listextendedproperty(N''MS_Description'' , N''SCHEMA'',N''dbo'', N''TABLE'',N''' + @TableName + ''', N''COLUMN'',N''' + @ColName + '''))'            PRINT @PLine            IF @ColName = 'Crtd_User'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''创建用户ID'' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE IF @ColName = 'Crtd_Prog'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''创建程序ID'' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE IF @ColName = 'Crtd_DateTime'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''创建时间'' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE IF @ColName = 'LUpd_User'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''更新用户ID'' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE IF @ColName = 'LUpd_Prog'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''更新程序ID'' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE IF @ColName = 'LUpd_DateTime'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''更新时间'' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE IF @ColName = 'RecId'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''记录流水�?' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE IF @ColName = 'Crtd_Session'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''创建Session标识'' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE IF @ColName = 'tstamp'                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N''时间�?' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            ELSE                BEGIN                    SET @PLine = 'EXEC sys.sp_addextendedproperty @name=N''MS_Description'', @value=N'''' , @level0type=N''SCHEMA'',@level0name=N''dbo'', @level1type=N''TABLE'',@level1name=N''' + @TableName + ''', @level2type=N''COLUMN'',@level2name=N''' + @ColName + ''''                END            PRINT @PLine            PRINT ''        ENDCLOSE cur1DEALLOCATE cur1
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.31]
enabled=1
caption=alertTempDB
export=1
body=use mastergoAlter database tempdb modify file (name = tempdev, filename = 'R:\tempdb.mdf')goAlter database tempdb modify file (name = templog, filename = 'R:\templog.ldf')
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.32]
enabled=1
caption=analysissql
export=1
body=DBCC FREEPROCCACHEDBCC DROPCLEANBUFFERSSET STATISTICS IO ON|SET STATISTICS IO OFF
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.33]
enabled=1
caption=AXLabel
export=1
body=USE MicrosoftDynamicsAX_modelSELECT Label = '@' + a.Module + CAST(a.LabelId AS NVARCHAR(10)),       a.[Text], b.[Text], c.[Text],       a.Comment, a.ElementHandle, a.LayerId, a.LabelIdFROM      ModelElementLabel aLEFT JOIN ModelElementLabel b ON b.[Language] = 'zh_hans' AND a.LabelId = b.LabelId AND a.Module = b.ModuleLEFT JOIN ModelElementLabel c ON c.[Language] = 'ja' AND a.LabelId = c.LabelId AND a.Module = c.ModuleWHERE a.[Language] = 'en_us'  AND a.[Text] LIKE '|%'/*SELECT * FROM ModelElementLabelWHERE [Language] = 'zh_hans'AND Module = 'SYS' AND LabelId = */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.34]
enabled=1
caption=beg
export=1
body=BEGIN	|END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.35]
enabled=1
caption=bt
export=1
body=BEGIN TRY    BEGIN TRANSACTION T1        |    COMMIT TRANSACTION T1END TRYBEGIN CATCH    ROLLBACK TRANSACTION T1    /*    DECLARE @ErrorMessage NVARCHAR(4000);    DECLARE @ErrorSeverity INT;    DECLARE @ErrorState INT;    SELECT         @ErrorMessage = ERROR_MESSAGE(),        @ErrorSeverity = ERROR_SEVERITY(),        @ErrorState = ERROR_STATE();    -- Use RAISERROR inside the CATCH block to return error    -- information about the original error that caused    -- execution to jump to the CATCH block.    RAISERROR (@ErrorMessage, -- Message text.               @ErrorSeverity, -- Severity.               @ErrorState -- State.               );*//*         SELECT            ERROR_NUMBER() AS ErrorNumber,            ERROR_SEVERITY() AS ErrorSeverity,            ERROR_STATE() AS ErrorState,            ERROR_PROCEDURE() AS ErrorProcedure,            ERROR_LINE() AS ErrorLine,            ERROR_MESSAGE() AS ErrorMessage*/END CATCH;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.36]
enabled=1
caption=comm
export=1
body=--****************************************************************----对象名称(Object Name):    ----功能描述(Description):    ----参数(Parameters):         ----作�?Author):             王煜----日期(ALTER  Date):        $DATE$----示例(Example):            ----修改记录(Revision History):----****************************************************************
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.37]
enabled=1
caption=createMemDB
export=1
body=|IF EXISTS(SELECT 1 FROM MASTER.sys.databases WHERE [name] = N'xDB')    BEGIN        USE [master]                EXEC msdb.dbo.sp_delete_database_backuphistory @database_name = N'xDB'        ALTER DATABASE [xDB] SET  SINGLE_USER WITH ROLLBACK IMMEDIATE        DROP DATABASE [xDB]    ENDGOCREATE DATABASE [xDB] ON  PRIMARY ( NAME = N'xDB', FILENAME = N'R:\xDB.mdf' , SIZE = 20480KB , FILEGROWTH = 10240KB ) LOG ON ( NAME = N'xDB_log', FILENAME = N'R:\xDB_log.ldf' , SIZE = 1024KB , FILEGROWTH = 10%)GOALTER DATABASE [xDB] SET COMPATIBILITY_LEVEL = 100GOALTER DATABASE [xDB] SET ANSI_NULL_DEFAULT OFF GOALTER DATABASE [xDB] SET ANSI_NULLS OFF GOALTER DATABASE [xDB] SET ANSI_PADDING OFF GOALTER DATABASE [xDB] SET ANSI_WARNINGS OFF GOALTER DATABASE [xDB] SET ARITHABORT OFF GOALTER DATABASE [xDB] SET AUTO_CLOSE OFF GOALTER DATABASE [xDB] SET AUTO_CREATE_STATISTICS ON GOALTER DATABASE [xDB] SET AUTO_SHRINK ON GOALTER DATABASE [xDB] SET AUTO_UPDATE_STATISTICS ON GOALTER DATABASE [xDB] SET CURSOR_CLOSE_ON_COMMIT OFF GOALTER DATABASE [xDB] SET CURSOR_DEFAULT  GLOBAL GOALTER DATABASE [xDB] SET CONCAT_NULL_YIELDS_NULL OFF GOALTER DATABASE [xDB] SET NUMERIC_ROUNDABORT OFF GOALTER DATABASE [xDB] SET QUOTED_IDENTIFIER OFF GOALTER DATABASE [xDB] SET RECURSIVE_TRIGGERS OFF GOALTER DATABASE [xDB] SET  DISABLE_BROKER GOALTER DATABASE [xDB] SET AUTO_UPDATE_STATISTICS_ASYNC OFF GOALTER DATABASE [xDB] SET DATE_CORRELATION_OPTIMIZATION OFF GOALTER DATABASE [xDB] SET PARAMETERIZATION SIMPLE GOALTER DATABASE [xDB] SET  READ_WRITE GOALTER DATABASE [xDB] SET RECOVERY FULL GOALTER DATABASE [xDB] SET  MULTI_USER GOALTER DATABASE [xDB] SET PAGE_VERIFY CHECKSUM  GOUSE [xDB]GOIF NOT EXISTS (SELECT name FROM sys.filegroups WHERE is_default=1 AND name = N'PRIMARY') ALTER DATABASE [xDB] MODIFY FILEGROUP [PRIMARY] DEFAULTGO--新建表，建立主键，形成聚集索�?CREATE TABLE BigTable(   [KEY] INT,   DATA INT,   DATA2 FLOAT,   PAD CHAR(36),   CONSTRAINT [BigTable_PK1] PRIMARY KEY ([KEY]))GOCREATE TABLE BigTable2(   [KEY] INT,   DATA INT,   DATA2 FLOAT,   PAD CHAR(36),   CONSTRAINT [BigTable2_PK1] PRIMARY KEY ([KEY]))GO--批量插入测试数据10W�? Cross join 执行，Solomon1:10; i7 920:12; i5 2320 11; solomonTest 11:45SET NOCOUNT ON DECLARE @i INT    SET @i = 1    WHILE @i < 100001    BEGIN       INSERT BigTable  VALUES(@i, CEILING(RAND() * 100000000), RAND() * 100000000, NEWID())       SET @i = @i + 1    END        WHILE @i > 1    BEGIN       SET @i = @i - 1       INSERT BigTable2 VALUES(@i, CEILING(RAND() * 100000000), RAND() * 100000000, NEWID())    ENDGO/*--磁盘大于1G再执行以下语�?SELECT [KEY],[DATA],[DATA2],[PAD] INTO BigTable3FROM BigTableGO*//*SELECT COUNT(1) AS BigTable  FROM BigTableSELECT COUNT(1) AS BigTable2 FROM BigTable2SELECT MAX(a.[KEY] + b.[KEY])FROM        (SELECT [KEY] FROM BigTable)  aCROSS JOIN  (SELECT [KEY] FROM BigTable2) bSELECT MAX(B1.[DATA]+B2.[DATA]) FROM BigTable B1 CROSS JOIN BigTable2 B2OPTION(MAXDOP 1) SELECT MAX(CAST(a.[DATA] AS BIGINT) * CAST(b.[DATA] AS BIGINT))FROM (SELECT [Key],[DATA] FROM BigTable)  aJOIN (SELECT [Key],[DATA] FROM BigTable2) bON a.[Key] = b.[Key]*/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.38]
enabled=1
caption=cur1
export=1
body=DECLARE @$COLUMNS+TYPES$DECLARE cur1 CURSOR LOCAL FAST_FORWARD READ_ONLY FORSELECT $COLUMNS$FROM $OBJECT$OPEN cur1    WHILE 1 = 1        BEGIN            FETCH cur1 INTO @$COLUMNS$            IF @@FETCH_STATUS <> 0                BREAK            /*  do something  */            |        ENDCLOSE cur1DEALLOCATE cur1
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.39]
enabled=1
caption=dt
export=1
body=DROP TABLE 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.40]
enabled=1
caption=getSelSql
export=1
body=SELECT 'SELECT * FROM ' + NAMEFROM   sysobjectsWHERE  [type] = 'U'--  AND  NAME LIKE 'Sys_%'ORDER BY NAME
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.41]
enabled=1
caption=i
export=1
body=INSERT INTO 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.42]
enabled=1
caption=kill
export=1
body=USE masterDeclare @dbname   varchar(200) Declare @programName     nvarchar(200)Declare @spid   nvarchar(20) SET @dbname = '|'declare   cDblogin   cursor   for select   cast(spid   as   varchar(20))  AS spid   from   master..sysprocesses   where   dbid=db_id(@dbname) open   cDbloginfetch   next   from   cDblogin   into   @spid while   @@fetch_status=0 begin    IF	@spid <> @@SPID	exec( 'kill   '+@spid) fetch   next   from  cDblogin   into   @spid end     close   cDblogin deallocate   cDblogin
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.43]
enabled=1
caption=mod
export=1
body=-- Modified by WangYu $DATE$ |
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.44]
enabled=1
caption=model
export=1
body=--****************************************************************--对象名称(Object Name):    SQL生成C# 表、视图的实体�?----功能描述(Description):    比通用工具生成的全----参数(Parameters):         ----作�?Author):             王煜----日期(ALTER  Date):        2013-09-16----示例(Example):            ----修改记录(Revision History):--  2017-9-22   加字段名称静态变�?----****************************************************************SET NOCOUNT ONDECLARE @TableName NVARCHAR(50)SET @TableName = '|'DECLARE @Namespace NVARCHAR(50)SET @Namespace = 'WindowsFormsApplication1'DECLARE @ColName        NVARCHAR(50)DECLARE @DataType       NVARCHAR(20)DECLARE @Length         INTDECLARE @Description    NVARCHAR(200)DECLARE @Default        NVARCHAR(MAX)DECLARE @Nullable       INTDECLARE @NetType        NVARCHAR(20)DECLARE @DefaultVal     SQL_VARIANTDECLARE @DefaultStr     NVARCHAR(100)DECLARE @StrSql         NVARCHAR(MAX)DECLARE @TableId        INT-- 存放表列�?DECLARE @tbColName AS TABLE ([ColName] NVARCHAR(20) NOT NULL)DECLARE @AllColNames    NVARCHAR(MAX)SET @TableId = (SELECT [object_id] FROM sys.objects WHERE NAME = @TableName)SET @AllColNames = ''PRINT 'using System;'PRINT 'using System.Collections.Generic;'PRINT ''PRINT 'namespace ' + @NamespacePRINT '{'PRINT '    /// <summary>'--表描�?DECLARE @DesName SYSNAMEDECLARE @DesValue SQL_VARIANTDECLARE curTabDesc CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT [name],[value] FROM sys.extended_properties WHERE major_id IN (SELECT [id] FROM sysobjects WHERE NAME = @TableName) AND minor_id = 0OPEN curTabDesc    WHILE 1 = 1        BEGIN            FETCH curTabDesc INTO @DesName,@DesValue            IF @@FETCH_STATUS <> 0                BREAK            PRINT '    /// ' + @DesName + ' ' + CAST(@DesValue AS NVARCHAR(50))            --PRINT @DesValue        ENDCLOSE curTabDescDEALLOCATE curTabDescPRINT '    /// </summary>'PRINT '    [Serializable]'PRINT '    public class ' + @TableNamePRINT '    {'--region 私有变量及默认�?PRINT N'        #region 私有变量及默认�?DECLARE curPrvtVar CURSOR LOCAL FAST_FORWARD READ_ONLY FOR    SELECT ColName = syscolumns.name,           DataType = systypes.name,           [Length] = CASE WHEN systypes.name IN ('nchar','nvarchar') THEN syscolumns.[length] / 2 ELSE syscolumns.[length] END,           [Description] = CAST(ISNULL( sys.extended_properties.[value],'') AS NVARCHAR(200)),           [Default] = ISNULL( syscomments.[text],''),           Nullable = syscolumns.isnullable,           NetType = CASE                           WHEN systypes.name IN ('bit') THEN 'Boolean?'                          WHEN systypes.name IN ('tinyint') THEN 'Byte?'                          WHEN systypes.name IN ('binary','image','timestamp','varbinary') THEN 'Byte[]'                          WHEN systypes.name IN ('date','datetime','datetime2','smalldatetime') THEN 'DateTime?'                          WHEN systypes.name IN ('datetimeoffset') THEN 'DateTimeOffset?'                          WHEN systypes.name IN ('decimal','money','numeric','smallmoney') THEN 'Decimal?'                          WHEN systypes.name IN ('float') THEN 'Double?'                          WHEN systypes.name IN ('uniqueidentifier') THEN 'Guid?'                          WHEN systypes.name IN ('smallint') THEN 'Int16?'                          WHEN systypes.name IN ('int') THEN 'Int32?'                          WHEN systypes.name IN ('bigint') THEN 'Int64?'                          WHEN systypes.name IN ('sql_variant') THEN 'Object'                          WHEN systypes.name IN ('real') THEN 'Single?'                          WHEN systypes.name IN ('geography') THEN 'SqlGeography'                          WHEN systypes.name IN ('geometry') THEN 'SqlGeometry'                          WHEN systypes.name IN ('hierarchyid') THEN 'SqlHierarchyId'                          WHEN systypes.name IN ('char','nchar','ntext','nvarchar','text','varchar','xml') THEN 'String'                          WHEN systypes.name IN ('time') THEN 'TimeSpan?'                          ELSE ''                      END    FROM   syscolumns    INNER JOIN   systypes      ON   syscolumns.xtype = systypes.xusertype    LEFT JOIN   sysobjects      ON   syscolumns.id = sysobjects.id    LEFT OUTER JOIN   sys.extended_properties      ON   (sys.extended_properties.minor_id = syscolumns.colid AND sys.extended_properties.major_id = syscolumns.id)    LEFT OUTER JOIN   syscomments      ON   syscolumns.cdefault = syscomments.id    WHERE  syscolumns.id IN (SELECT id                             FROM   SYSOBJECTS                             WHERE  xtype IN ( 'U','V'))      AND  (systypes.name <> 'sysname')      AND  sysobjects.name = @TableName    ORDER BY syscolumns.IdOPEN curPrvtVar    WHILE 1 = 1        BEGIN            FETCH curPrvtVar INTO @ColName, @DataType, @Length, @Description, @Default, @Nullable, @NetType            IF @@FETCH_STATUS <> 0                BREAK                            SET @AllColNames = @AllColNames + '"' + @ColName + '", '                        INSERT @tbColName VALUES (@ColName)            SET @DefaultStr = ''            IF @Default > ''                BEGIN                    SET @StrSql = 'SELECT @DefaultVal = ' + @Default                    EXEC sp_executesql @StrSql, N'@DefaultVal SQL_VARIANT OUT',@DefaultVal OUT                                        --IF @DataType IN ('float','smallint','int','bigint','tinyint') AND @DefaultVal = 0                    --    GOTO OUTPUTDCLR                    IF @DataType IN ('date','datetime','datetime2','smalldatetime')                        BEGIN                            IF CHARINDEX('GETDATE()',UPPER(@Default)) > 0                                SET @DefaultStr = ' = DateTime.Now'                            ELSE IF CHARINDEX('GETUTCDATE()',UPPER(@Default)) > 0                                SET @DefaultStr = ' = DateTime.UtcNow'                            ELSE                                SET @DefaultStr = ' = DateTime.Parse("' + CONVERT(NVARCHAR(50), CAST(@DefaultVal AS DATETIME), 121) + '")'                        END                    ELSE IF @DataType IN ('char','nchar','ntext','nvarchar','text','varchar','xml')                        BEGIN                            SET @DefaultStr = ' = "' + RTRIM(CAST(@DefaultVal AS NVARCHAR(MAX))) + '"'                        END                    ELSE IF @DataType IN ('datetimeoffset')                        SET @DefaultStr = ' = DateTimeOffset.Parse("' + CAST(CAST(@DefaultVal AS datetimeoffset(7)) AS NVARCHAR(50)) + '")'                    ELSE IF @DataType IN ('bit')                        IF @DefaultVal = 0                            SET @DefaultStr = ' = false'                        ELSE                            SET @DefaultStr = ' = true'                    ELSE IF @DataType IN ('time')                        SET @DefaultStr = ' = TimeSpan.Parse("' + CAST(CAST(@DefaultVal AS TIME(7)) AS NVARCHAR(20)) + '")'                    ELSE IF @DataType IN ('uniqueidentifier')                        SET @DefaultStr = ' = new Guid("' + CAST(@DefaultVal AS NVARCHAR(50)) + '")'                    ELSE IF @DataType IN ('tinyint','smallint','int','bigint')                        SET @DefaultStr = ' = ' + CAST(@DefaultVal AS NVARCHAR(50))                    ELSE IF @DataType IN ('decimal','money','numeric','smallmoney')                        IF @DefaultVal = 0                            SET @DefaultStr = ' = (decimal?)0.0'                        ELSE                            SET @DefaultStr = ' = Convert.ToDecimal(' + CAST(CONVERT(NUMERIC(38,8),@DefaultVal) AS NVARCHAR(38)) + ')'                    ELSE IF @DataType IN ('float')                        IF @DefaultVal = 0                            SET @DefaultStr = ' = 0.0'                        ELSE                            SET @DefaultStr = ' = ' + CAST(CONVERT(NUMERIC(38,8),@DefaultVal) AS NVARCHAR(38))                    ELSE IF @DataType IN ('real')                        IF @DefaultVal = 0                            SET @DefaultStr = ' = 0.0'                        ELSE                            SET @DefaultStr = ' = Convert.ToSingle(' + CAST(CONVERT(NUMERIC(38,8),@DefaultVal) AS NVARCHAR(38)) + ')'                ENDOUTPUTDCLR:            PRINT '        private ' + @NetType + ' _' + @ColName + @DefaultStr + ';'        ENDCLOSE curPrvtVarDEALLOCATE curPrvtVarPRINT N'        #endregion 私有变量及默认�?--endregion 私有变量及默认�?PRINT ''PRINT N'        #region 表字段名'DECLARE curColName CURSOR LOCAL FAST_FORWARD READ_ONLY FOR SELECT [ColName] FROM @tbColNameOPEN curColName    WHILE 1 = 1        BEGIN            FETCH curColName INTO @ColName            IF @@FETCH_STATUS <> 0                BREAK            PRINT '        public static string ColName_' + @ColName + ' = "' + @ColName + '";'        ENDCLOSE curColNameDEALLOCATE curColNamePRINT '        public List<string> AllColNames = new List<string> {' + SUBSTRING(@AllColNames, 0, LEN(@AllColNames)) + '};'PRINT N'        #endregion 表字段名'PRINT ''PRINT N'        #region 索引�?-- 表索引组DECLARE @IdxName     NVARCHAR(50)DECLARE @IdxId       INTDECLARE @IsUniq      BITDECLARE @IdxColName  NVARCHAR(50)DECLARE @IdxDecCode  NVARCHAR(MAX)DECLARE curIdx CURSOR LOCAL FAST_FORWARD READ_ONLY FOR    SELECT [name],[index_id],[is_unique] FROM sys.indexes WHERE [object_id] = @TableId ORDER BY [index_id]OPEN curIdx    WHILE 1 = 1        BEGIN            FETCH curIdx INTO @IdxName,@IdxId,@IsUniq            IF @@FETCH_STATUS <> 0                BREAK            IF @IsUniq = 1                SET @IdxDecCode = '        public List<string> UniIdx' + @IdxName + ' = new List<string> {'            ELSE                SET @IdxDecCode = '        public List<string> Idx' + @IdxName + ' = new List<string> {'            DECLARE curIdxCols CURSOR LOCAL FAST_FORWARD READ_ONLY FOR                SELECT B.[name]                FROM   sys.index_columns A JOIN sys.[columns] B ON A.[object_id] = B.[object_id] AND A.column_id = B.column_id                WHERE  A.[object_id] = @TableId                  AND  A.index_id = @IdxId                ORDER BY A.index_column_id            OPEN curIdxCols                WHILE 1 = 1                    BEGIN                        FETCH curIdxCols INTO @IdxColName                        IF @@FETCH_STATUS <> 0                            BREAK                        --判断是否是首�?                        IF SUBSTRING(@IdxDecCode, LEN(@IdxDecCode), 1) <> '{'                            SET @IdxDecCode = @IdxDecCode +  ','                        SET @IdxDecCode = @IdxDecCode +  '"' + @IdxColName + '"'                    END            CLOSE curIdxCols            DEALLOCATE curIdxCols            PRINT @IdxDecCode + '};'        ENDCLOSE curIdxDEALLOCATE curIdxPRINT N'        #endregion 索引�?PRINT ''PRINT N'        #region 公共属�?DECLARE curProp CURSOR LOCAL FAST_FORWARD READ_ONLY FOR    SELECT ColName = syscolumns.name,           DataType = systypes.name,           [Length] = CASE WHEN systypes.name IN ('nchar','nvarchar') THEN syscolumns.[length] / 2 ELSE syscolumns.[length] END,           [Description] = CAST(ISNULL( sys.extended_properties.[value],'') AS NVARCHAR(200)),           [Default] = ISNULL( syscomments.[text],''),           Nullable = syscolumns.isnullable,           NetType = CASE                           WHEN systypes.name IN ('bit') THEN 'Boolean?'                          WHEN systypes.name IN ('tinyint') THEN 'Byte?'                          WHEN systypes.name IN ('binary','image','timestamp','varbinary') THEN 'Byte[]'                          WHEN systypes.name IN ('date','datetime','datetime2','smalldatetime') THEN 'DateTime?'                          WHEN systypes.name IN ('datetimeoffset') THEN 'DateTimeOffset?'                          WHEN systypes.name IN ('decimal','money','numeric','smallmoney') THEN 'Decimal?'                          WHEN systypes.name IN ('float') THEN 'Double?'                          WHEN systypes.name IN ('uniqueidentifier') THEN 'Guid?'                          WHEN systypes.name IN ('smallint') THEN 'Int16?'                          WHEN systypes.name IN ('int') THEN 'Int32?'                          WHEN systypes.name IN ('bigint') THEN 'Int64?'                          WHEN systypes.name IN ('sql_variant') THEN 'Object'                          WHEN systypes.name IN ('real') THEN 'Single?'                          WHEN systypes.name IN ('geography') THEN 'SqlGeography'                          WHEN systypes.name IN ('geometry') THEN 'SqlGeometry'                          WHEN systypes.name IN ('hierarchyid') THEN 'SqlHierarchyId'                          WHEN systypes.name IN ('char','nchar','ntext','nvarchar','text','varchar','xml') THEN 'String'                          WHEN systypes.name IN ('time') THEN 'TimeSpan?'                          ELSE ''                      END    FROM   syscolumns    INNER JOIN   systypes      ON   syscolumns.xtype = systypes.xusertype    LEFT JOIN   sysobjects      ON   syscolumns.id = sysobjects.id    LEFT OUTER JOIN   sys.extended_properties      ON   (sys.extended_properties.minor_id = syscolumns.colid AND sys.extended_properties.major_id = syscolumns.id)    LEFT OUTER JOIN   syscomments      ON   syscolumns.cdefault = syscomments.id    WHERE  syscolumns.id IN (SELECT id                             FROM   SYSOBJECTS                             WHERE  xtype IN ( 'U','V'))      AND  (systypes.name <> 'sysname')      AND  sysobjects.name = @TableName    ORDER BY syscolumns.IdOPEN curProp    WHILE 1 = 1        BEGIN            FETCH curProp INTO @ColName, @DataType, @Length, @Description, @Default, @Nullable, @NetType             IF @@FETCH_STATUS <> 0                BREAK            PRINT ''            PRINT '        /// <summary>' + @Description            PRINT '        /// </summary>'            PRINT '        public ' + @NetType + ' ' + @ColName            PRINT '        {'            PRINT '            get { return _' + @ColName + '; }'            PRINT '            set'            PRINT '            {'            IF @Nullable = 0                BEGIN                    PRINT '                if (value == null)'                    PRINT '                    throw new ArgumentNullException("' + @ColName + '");'                    PRINT ''                END            IF (@DataType IN ('char','nchar','text','varchar') AND @Length > -1) OR (@DataType = 'nvarchar' AND @Length > 0)                BEGIN                    PRINT '                const int length = ' + CAST(@Length AS VARCHAR(20)) + ';'                    IF @Nullable = 0                        PRINT '                _' + @ColName + ' = value.Trim().Length > length ? value.Trim().Substring(0, length) : value.Trim();'                    ELSE                        PRINT '                _' + @ColName + ' = value == null ? null : (value.Trim().Length > length ? value.Trim().Substring(0, length) : value.Trim());'                END            ELSE IF @DataType IN ('binary','varbinary') AND @Length > -1                BEGIN                    PRINT '                const int length = ' + CAST(@Length AS VARCHAR(20)) + ';'                    PRINT ''                    PRINT '                if (value.Length > length)'                    PRINT '                    throw new ArgumentOutOfRangeException("' + @ColName + '[' + CAST(@Length AS VARCHAR(10)) + ']");'                    PRINT ''                    PRINT '                    _' + @ColName + ' = value;'                                            END            ELSE                PRINT '                _' + @ColName + ' = value;'            PRINT '            }'            PRINT '        }'        ENDCLOSE curPropDEALLOCATE curPropPRINT N'        #endregion 公共属�?PRINT ''PRINT N'        #region 公共方法'PRINT N'        /// <summary>检验不可为空项；返回是否检验通过及不能为空却为空的字段名'PRINT N'        /// </summary>'PRINT '        public Tuple<bool, List<string>> CheckNullable()'PRINT '        {'PRINT '            List<string> retList = new List<string>();'PRINT ''SET @AllColNames = ''DECLARE curNullable CURSOR LOCAL FAST_FORWARD READ_ONLY FOR    SELECT ColName = syscolumns.name    FROM   syscolumns    LEFT JOIN   sysobjects      ON   syscolumns.id = sysobjects.id    INNER JOIN   systypes      ON   syscolumns.xtype = systypes.xusertype    WHERE  syscolumns.id IN (SELECT id                             FROM   SYSOBJECTS                             WHERE  xtype IN ( 'U','V'))      AND  sysobjects.name = @TableName      AND  systypes.name <> 'timestamp'      AND  syscolumns.isnullable = 0    ORDER BY syscolumns.IdOPEN curNullable    WHILE 1 = 1        BEGIN            FETCH curNullable INTO @ColName            IF @@FETCH_STATUS <> 0                BREAK            SET @AllColNames = @AllColNames + ' _' + @ColName + ' != null &&'                        PRINT '            if (_' + @ColName + ' == null) retList.Add("' + @ColName + '");'        ENDCLOSE curNullableDEALLOCATE curNullableIF LEN(@AllColNames) > 0    BEGIN       PRINT ''        PRINT '            bool retBool = ' + SUBSTRING(@AllColNames, 0, LEN(@AllColNames) - 1) + ';'    ENDELSE    PRINT '            bool retBool = true;'PRINT ''PRINT '            return Tuple.Create(retBool, retList);'PRINT '        }'PRINT N'        #endregion 公共方法'PRINT '    }'PRINT '}'
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.45]
enabled=1
caption=mskey
export=1
body=SELECT A.KeyDescription      ,B.KeyTypeName      ,A.SupportedEditions      ,A.KeyValue      ,RemainingActivations = CASE A.RemainingActivations WHEN -2 THEN 'Blocked' WHEN -1 THEN C.LicenseStatusText ELSE CAST(A.RemainingActivations AS VARCHAR(10)) END      ,A.UserRemarksFROM base.ProductKey A JOIN base.ProductKeyTypeName B ON A.KeyType = B.KeyTypeLEFT JOIN base.LicenseStatusText C ON A.RemainingActivations = C.LicenseStatus|--WHERE ((B.KeyTypeName = 'MAK' AND A.RemainingActivations > -2) OR A.UserRemarks LIKE 'Hontec') AND A.SupportedEditions NOT LIKE 'Alpha%'--WHERE A.KeyDescription LIKE 'Win 8%'--WHERE A.UserRemarks LIKE N'%%'--WHERE B.KeyTypeName = 'MAK' AND A.RemainingActivations = -1--WHERE A.KeyValue IN ('')--WHERE A.KeyValue LIKE '%%'ORDER BY B.KeyType DESC, A.KeyDescription, A.RemainingActivations DESC/*UPDATE base.ProductKey SET UserRemarks = N'Hontec' --翱翔2013-02-16WHERE KeyValue IN ('')--备份�?DROP TABLE ProductKey_bakSELECT KeyValue,UserRemarks INTO ProductKey_bak FROM base.ProductKey*/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.46]
enabled=1
caption=notin
export=1
body=SELECT DISTINCT KEYVAL FROM (    SELECT '' AS KEYVAL UNION ALL) AWHERE A.KEYVAL NOT IN (SELECT KeyValue FROM base.ProductKey)  AND A.KEYVAL NOT IN (SELECT [Key] FROM UnVerifiedKey)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.47]
enabled=1
caption=offline
export=1
body=--关闭用户打开的进程处�?USE MASTERDECLARE @dbname       VARCHAR(200) --要关闭进程的数据库名DECLARE @programName  NVARCHAR(200)DECLARE @spid         NVARCHAR(20) SET @dbname = '|'DECLARE cDblogin CURSOR  FOR    SELECT CAST(spid AS VARCHAR(20)) AS spid    FROM   MASTER..sysprocesses    WHERE  dbid = DB_ID(@dbname) OPEN cDbloginFETCH NEXT FROM cDblogin INTO @spid WHILE @@fetch_status = 0BEGIN    --防止自己终止自己的进�?    --否则会报错不能用KILL 来终止您自己的进程�?     IF @spid<>@@SPID        EXEC ('kill '+@spid)     FETCH NEXT FROM cDblogin INTO @spidEND     CLOSE cDblogin DEALLOCATE cDblogin
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.48]
enabled=1
caption=p
export=1
body=PRINT 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.49]
enabled=1
caption=s
export=1
body=SELECT |
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.50]
enabled=1
caption=sc
export=1
body=SELECT COUNT(1) FROM 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.51]
enabled=1
caption=scol
export=1
body=SELECT * FROM sys.[columns] WHERE [object_id] = OBJECT_ID('$OBJECT$|')
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.52]
enabled=1
caption=sf
export=1
body=SELECT * FROM 
keyChar=3
isCase=1
action=0
fmtStyle=

[snips.1.53]
enabled=1
caption=shrinkDB
export=1
body=DBCC SHRINKDATABASE(N'tempdb' )DBCC SHRINKDATABASE(N'xDB' )
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.54]
enabled=1
caption=SKEGM
export=1
body=USE SKEGM|DECLARE @EstimateDate DATETIMEDECLARE @BillID CHAR(13)DECLARE @LastBillID CHAR(13)DECLARE @EstimateDateFrom DATETIMEDECLARE @EstimateDateTo DATETIME--默认预定明天（周五预定下周一），改为“GETDATE()”为预定当天SET @EstimateDate = CASE DATEPART(dw,GETDATE()) WHEN 6 THEN DATEADD(DAY,3,GETDATE()) ELSE DATEADD(DAY,1,GETDATE()) ENDSET @EstimateDateFrom = CONVERT(CHAR(10),@EstimateDate,121) + ' 08:30:00.000'SET @EstimateDateTo = CONVERT(CHAR(10),@EstimateDate,121) + ' 17:00:00.000'PRINT '预定开始日�?' + CONVERT(CHAR(23),@EstimateDateFrom,121)PRINT '预定结束日期:' + CONVERT(CHAR(23),@EstimateDateTo,121)DECLARE @CreateUser     NVARCHAR(20)DECLARE @DeptID         VARCHAR(20)DECLARE @Content        NVARCHAR(50)DECLARE @TelNo          VARCHAR(20)DECLARE @Numbers        INTDECLARE @Company        NVARCHAR(50)DECLARE @AppUserID      VARCHAR(20)DECLARE @VisitorName    NVARCHAR(10)DECLARE @VisitorTelNo   VARCHAR(20)DECLARE @CpnyID         CHAR(5)SET @CreateUser = 'hontec001'   --申请�?SET @DeptID = '1201211'         --预定部门�?201211：总务1系）SET @Content = N'系统维护'      --来访事由SET @TelNo = '4458'             --电话SET @Numbers = 1                --来访人数SET @Company = N'宏图信息'      --来访公司SET @AppUserID = '10000546'     --审核人（10000546：符静）SET @VisitorName = N'王煜'      --来访�?SET @VisitorTelNo = ''          --来访者电�?SET @CpnyID = 'SKEGM'SELECT @LastBillID = MAX(BillID)FROM SKEGM_DocSNWHERE CpnyID = 'SKEGM' AND DocID = '4504'AND BillID LIKE CONVERT(CHAR(8),GETDATE(),112) + '%'IF @LastBillID IS NULL    SET @BillID = CONVERT(CHAR(8),GETDATE(),112) + '00001'ELSE    SET @BillID = CONVERT(CHAR(13),CAST(@LastBillID AS BIGINT) + 1)PRINT '预定编号:' + @BillIDBEGIN TRY    BEGIN TRANSACTION T1        --插入SKEGM_BookVisitors�?        --SELECT     @CpnyID,--{ CpnyID },        --    @BillID,--{ BillID },        --    @CreateUser,--{ CreateUser },        --    GETDATE(),--{ CreateDate },        --    '',--{ TelephoneNo },        --    @DeptID,--{ DeptID },        --    @EstimateDateFrom,--{ EstimateDateFrom },        --    @EstimateDateTo,--{ EstimateDateTo },        --    @Content,--{ [Content] },        --    @Numbers,--{ Numbers },        --    @Company,--{ Company },        --    '',--{ [Address] },        --    '',--{ Remark },        --    @AppUserID,--{ ApproveUserID },        --    3,--{ [Status] },        --    0--{ DeleteFlag }                INSERT INTO SKEGM_BookVisitors(CpnyID,BillID,CreateUser,CreateDate,TelephoneNo,DeptID,EstimateDateFrom,EstimateDateTo,[Content],Numbers,Company,[Address],Remark,ApproveUserID,[Status],DeleteFlag)        VALUES        (            @CpnyID,--{ CpnyID },            @BillID,--{ BillID },            @CreateUser,--{ CreateUser },            GETDATE(),--{ CreateDate },            @TelNo,--{ TelephoneNo },            @DeptID,--{ DeptID },            @EstimateDateFrom,--{ EstimateDateFrom },            @EstimateDateTo,--{ EstimateDateTo },            @Content,--{ [Content] },            @Numbers,--{ Numbers },            @Company,--{ Company },            '',--{ [Address] },            '',--{ Remark },            @AppUserID,--{ ApproveUserID },            3,--{ [Status] },            0--{ DeleteFlag }        )                        --插入SKEGM_ApproveHistory�?        --SELECT @CpnyID,@BillID,1,1,@CreateUser,GETDATE(),1,1        INSERT INTO SKEGM_ApproveHistory(CpnyID,BillID,SeqNo,StepID,Approveby,ApproveDate,StepResult,AppStatus)        VALUES(@CpnyID,@BillID,1,1,@CreateUser,GETDATE(),1,1)                --SELECT @CpnyID,@BillID,2,2,@AppUserID,GETDATE(),3,3        INSERT INTO SKEGM_ApproveHistory(CpnyID,BillID,SeqNo,StepID,Approveby,ApproveDate,StepResult,AppStatus)        VALUES(@CpnyID,@BillID,2,2,@AppUserID,GETDATE(),3,3)        --插入SKEGM_VisitorsCard�?        --SELECT @CpnyID,@BillID,1,@VisitorName,@VisitorTelNo,'',0,0        INSERT INTO SKEGM_VisitorsCard(CpnyID,BillID,LineID,VisitorName,TelephoneNo,CardNo,ReturnFlag,DeleteFlag)        VALUES(@CpnyID,@BillID,1,@VisitorName,@VisitorTelNo,'',0,0)                        --插入SKEGM_DocSN�?        --SELECT @CpnyID,@BillID,4504        INSERT INTO SKEGM_DocSN(CpnyID,BillID,DocID)        VALUES(@CpnyID,@BillID,4504)    COMMIT TRANSACTION T1END TRYBEGIN CATCH    ROLLBACK TRANSACTION T1    SELECT        ERROR_NUMBER() AS ErrorNumber,        ERROR_SEVERITY() AS ErrorSeverity,        ERROR_STATE() AS ErrorState,        ERROR_PROCEDURE() AS ErrorProcedure,        ERROR_LINE() AS ErrorLine,        ERROR_MESSAGE() AS ErrorMessageEND CATCH;--隐藏已结束的记录--SELECT [Status], DeleteFlag, * FROM SKEGM_BookVisitors WHERE CreateUser = 'hontec001' AND [Status] = 9--UPDATE SKEGM_BookVisitors SET DeleteFlag = 1 WHERE CreateUser = 'hontec001' AND [Status] = 9 AND DeleteFlag = 0--物理删除特定单号/*DECLARE @BillID CHAR(13)SET @BillID = '2013110800004'IF EXISTS(SELECT 1 FROM SKEGM_BookVisitors WHERE CpnyID = 'SKEGM' AND BillID = @BillID)BEGIN    DELETE FROM SKEGM_VisitorsCard WHERE CpnyID = 'SKEGM' AND BillID = @BillID    DELETE FROM SKEGM_ApproveHistory WHERE CpnyID = 'SKEGM' AND BillID = @BillID    DELETE FROM SKEGM_BookVisitors WHERE CpnyID = 'SKEGM' AND BillID = @BillID    DELETE FROM SKEGM_DocSN WHERE CpnyID = 'SKEGM' AND BillID = @BillIDEND*/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.55]
enabled=1
caption=solomon
export=1
body=--****************************************************************--对象名称(Object Name):    SQL直接生成DO NET代码----功能描述(Description):    执行后结果为Solomon二次开发可用的类代�?----参数(Parameters):         ----作�?Author):             王煜----日期(ALTER  Date):        2013-02-01----示例(Example):            ----修改记录(Revision History):----****************************************************************DECLARE @TableName NVARCHAR(50)SET @TableName = '$OBJECT$|'PRINT 'Option Strict Off'PRINT 'Option Explicit On'PRINT 'Option Compare Text'PRINT 'Imports Solomon.Kernel' PRINT ''PRINT 'Module ' + @TableNamePRINT '    Public Class ' + @TableNamePRINT '        Inherits SolomonDataObject'DECLARE @tmpLine   NVARCHAR(200)DECLARE @TypeName  NVARCHAR(10)DECLARE @colName SYSNAME, @column_id INT, @system_type_id TINYINT, @max_length SMALLINTDECLARE cur1 CURSOR FAST_FORWARD READ_ONLY FORSELECT name, column_id, system_type_id, max_lengthFROM sys.[columns] WHERE object_id = OBJECT_ID(N'[dbo].[' + @TableName + ']')OPEN cur1    WHILE 1 = 1        BEGIN            FETCH cur1 INTO @colName, @column_id, @system_type_id, @max_length            IF @@FETCH_STATUS <> 0                BREAK            IF @system_type_id = 189                CONTINUE            SET @TypeName = CASE @system_type_id WHEN 175 THEN 'String' WHEN 52 THEN 'Short' WHEN 62 THEN 'Double' ELSE 'Integer' END                        PRINT ''            SET @tmpLine = '        <DataBinding(PropertyIndex:=' + CAST(@column_id - 1 AS NVARCHAR(3))            IF @system_type_id = 175                SET @tmpLine = @tmpLine + ', StringSize:=' + CAST(@max_length AS NVARCHAR(3)) + ' )> _'            ELSE                SET @tmpLine = @tmpLine + ' )> _'                                        PRINT @tmpLine                        PRINT '        Public Property ' + @colName + '() As ' + @TypeName            PRINT '            Get'            PRINT '                Return Me.GetPropertyValue("' + @colName + '")'            PRINT '            End Get'            PRINT ''            PRINT '            Set(ByVal setval As ' + @TypeName + ')'            PRINT '                Me.SetPropertyValue("' + @colName + '", setval)'            PRINT '            End Set'            PRINT '        End Property'        ENDCLOSE cur1DEALLOCATE cur1PRINT '    End Class'PRINT ''PRINT '    Public b' + @TableName + ' As ' + @TableName + ' = New ' + @TableName + ''PRINT '    Public n' + @TableName + ' As ' + @TableName + ' = New ' + @TableName + ''PRINT '    Public csr_' + @TableName + ' As Short'PRINT '    Public MemHandle_' + @TableName + ' As Short'PRINT 'End Module'
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.56]
enabled=1
caption=st
export=1
body=SELECT TOP 100 * FROM 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.57]
enabled=1
caption=tableSize
export=1
body=CREATE TABLE #tablespaceinfo    (      nameinfo VARCHAR(500) ,      rowsinfo BIGINT ,      reserved VARCHAR(20) ,      datainfo VARCHAR(20) ,      index_size VARCHAR(20) ,      unused VARCHAR(20)    )   DECLARE @tablename VARCHAR(255);   DECLARE Info_cursor CURSORFOR    SELECT  '[' + b.[name] + ']' + '.[' + a.[name] + ']'    FROM    sys.tables a JOIN sys.schemas b ON a.[schema_id] = b.[schema_id]    WHERE   a.[type] = 'U';  OPEN Info_cursor  FETCH NEXT FROM Info_cursor INTO @tablename   WHILE @@FETCH_STATUS = 0    BEGIN         INSERT  INTO #tablespaceinfo                EXEC sp_spaceused @tablename          FETCH NEXT FROM Info_cursor      INTO @tablename      END  CLOSE Info_cursor  DEALLOCATE Info_cursor   --创建临时�?CREATE TABLE [#tmptb]    (      TableName VARCHAR(50) ,      DataInfo BIGINT ,      RowsInfo BIGINT ,      Spaceperrow AS ( CASE RowsInfo                         WHEN 0 THEN 0                         ELSE DataInfo / RowsInfo                       END ) PERSISTED    )--插入数据到临时表INSERT  INTO [#tmptb]        ( [TableName] ,          [DataInfo] ,          [RowsInfo]        )        SELECT  [nameinfo] ,                CAST(REPLACE([datainfo], 'KB', '') AS BIGINT) AS 'datainfo' ,                [rowsinfo]        FROM    #tablespaceinfo        ORDER BY CAST(REPLACE(reserved, 'KB', '') AS INT) DESC  --汇总记�?SELECT  [tbspinfo].* ,        [tmptb].[Spaceperrow] AS '每行记录大概占用空间（KB�?FROM    [#tablespaceinfo] AS tbspinfo ,        [#tmptb] AS tmptbWHERE   [tbspinfo].[nameinfo] = [tmptb].[TableName]ORDER BY CAST(REPLACE([tbspinfo].[reserved], 'KB', '') AS INT) DESC  DROP TABLE [#tablespaceinfo]DROP TABLE [#tmptb]
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.58]
enabled=1
caption=tt
export=1
body=TRUNCATE TABLE 
keyChar=3
isCase=0
action=0
fmtStyle=

[snips.1.59]
enabled=1
caption=u
export=1
body=UPDATE 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.60]
enabled=1
caption=w
export=1
body=WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.61]
enabled=1
caption=c2n
export=1
body=[master].dbo.CvrtC2N(|)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.1.62]
enabled=1
caption=n2c
export=1
body=[master].dbo.CvrtN2C(|)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2]
enabled=1
caption=PL/SQL Snippets
export=1
count=24
dbType=0
keyChar=0
isCase=0

[snips.2.1]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.2.2]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.3]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.4]
enabled=1
caption=be
export=1
body=BEGIN	|EXCEPTION 	WHEN ... THEN ...	WHEN OTHERS THEN NULL;END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.5]
enabled=1
caption=begin
export=1
body=BEGIN	|END;
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.2.6]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.7]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.8]
enabled=1
caption=ex
export=1
body=EXCEPTION 	WHEN OTHERS THEN NULL;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.9]
enabled=1
caption=for
export=1
body=FOR i IN 0..| LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.10]
enabled=1
caption=forr
export=1
body=FOR rec IN (SELECT | FROM ...) LOOP		END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.11]
enabled=1
caption=func
export=1
body=CREATE OR REPLACE FUNCTION | (	i_ IN <data type>) RETURN <data type>/************************************************************ Function description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/ISDECLARE    v_ret <data type>;BEGIN	v_ret := ...;		RETURN v_ret;END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.12]
enabled=1
caption=if
export=1
body=IF | THEN	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.13]
enabled=1
caption=ife
export=1
body=IF | THEN	ELSE	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.14]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.15]
enabled=1
caption=proc
export=1
body=CREATE OR REPLACE PROCEDURE | (	i_ IN <data type>) /************************************************************ Procedure description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/ISDECLARE    v_var <data type>;BEGIN	v_var := ...;EXCEPTION 	WHEN OTHERS 		DBMS_OUTPUT.PUT_LINE(SQLERR);END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.16]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.17]
enabled=1
caption=sg
export=1
body=SELECT| FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.18]
enabled=1
caption=si
export=1
body=DECLARE v_$COLUMNS+TYPES$;SELECT 	$COLUMNS$INTO	v_$COLUMNS$FROM $OBJECT$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.19]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.20]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.21]
enabled=1
caption=type
export=1
body=TYPE | IS TABLE OF <data type> INDEX BY BINARY_INTEGER;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.22]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.23]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.2.24]
enabled=1
caption=while
export=1
body=WHILE | LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3]
enabled=1
caption=DB2 SQL Snippets
export=1
count=25
dbType=3
keyChar=0
isCase=0

[snips.3.1]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.2]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.3]
enabled=1
caption=sg
export=1
body=SELECT| FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.4]
enabled=1
caption=del
export=1
body=DELETE FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.5]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.6]
enabled=1
caption=iv
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS$)VALUES(	|)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.7]
enabled=1
caption=is
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS$)SELECTFROM|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.8]
enabled=1
caption=ife
export=1
body=IF | THEN	ELSE	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.9]
enabled=1
caption=if
export=1
body=IF | THEN	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.10]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.11]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.3.12]
enabled=1
caption=begin
export=1
body=BEGIN	|END;
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.3.13]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.14]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.15]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.16]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.17]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.18]
enabled=1
caption=while
export=1
body=WHILE	|END WHILE;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.19]
enabled=1
caption=loop
export=1
body=LOOP	|END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.20]
enabled=1
caption=cur
export=1
body=DECLARE | CURSORFOR SELECTFROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.21]
enabled=1
caption=cfetch
export=1
body=DECLARE at_end SMALLINT DEFAULT 0;DECLARE CONTINUE HANDLER FOR NOT FOUND SET at_end = 1;DECLARE v_$COLUMNS+TYPES$;DECLARE my_cursor CURSOR FORSELECT $COLUMNS$FROM $OBJECT$;OPEN my_cursor;fetch_loop:LOOP	FETCH FROM my_cursor INTO v_$COLUMNS$	IF at_end <> 0 THEN 		LEAVE fetch_loop;	END IF;	/* ... Cursor logic here ... */END LOOP fetch_loop;CLOSE my_cursor;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.22]
enabled=1
caption=nfound
export=1
body=DECLARE SQLSTATE char(5) DEFAULT '00000';DECLARE not_found CONDITION FOR SQLSTATE '02000'DECLARE EXIT HANDLER FOR not_found SIGNAL SQLSTATE '02444'
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.23]
enabled=1
caption=si
export=1
body=DECLARE v_$COLUMNS+TYPES$;SELECT 	$COLUMNS$INTO	v_$COLUMNS$FROM $OBJECT$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.24]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.3.25]
enabled=1
caption=repeat
export=1
body=REPEAT	|END REPEAT;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4]
enabled=1
caption=MySQL Snippets
export=1
count=27
dbType=2
keyChar=0
isCase=0

[snips.4.1]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.2]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.3]
enabled=1
caption=sg
export=1
body=SELECT | FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.4]
enabled=1
caption=del
export=1
body=DELETE FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.5]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.6]
enabled=1
caption=iv
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS$)VALUES(	|)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.7]
enabled=1
caption=is
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS$)SELECTFROM|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.8]
enabled=1
caption=ife
export=1
body=IF | THEN	ELSE	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.9]
enabled=1
caption=if
export=1
body=IF | THEN	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.10]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.11]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.4.12]
enabled=1
caption=begin
export=1
body=BEGIN	|END;
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.4.13]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.14]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.15]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.16]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.17]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.18]
enabled=1
caption=while
export=1
body=WHILE	|END WHILE;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.19]
enabled=1
caption=loop
export=1
body=LOOP	|END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.20]
enabled=1
caption=cur
export=1
body=DECLARE | CURSORFOR SELECTFROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.21]
enabled=1
caption=cfetch
export=1
body=DECLARE at_end SMALLINT DEFAULT 0;DECLARE CONTINUE HANDLER FOR NOT FOUND SET at_end = 1;DECLARE v_$COLUMNS+TYPES$;DECLARE my_cursor CURSOR FORSELECT $COLUMNS$FROM $OBJECT$;OPEN my_cursor;fetch_loop:LOOP	FETCH FROM my_cursor INTO v_$COLUMNS$	IF at_end <> 0 THEN 		LEAVE fetch_loop;	END IF;	/* ... Cursor logic here ... */END LOOP fetch_loop;CLOSE my_cursor;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.22]
enabled=1
caption=nfound
export=1
body=DECLARE SQLSTATE char(5) DEFAULT '00000';DECLARE not_found CONDITION FOR SQLSTATE '02000'DECLARE EXIT HANDLER FOR not_found SIGNAL SQLSTATE '02444'
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.23]
enabled=1
caption=si
export=1
body=DECLARE v_$COLUMNS+TYPES$;SELECT 	$COLUMNS$INTO	v_$COLUMNS$FROM $OBJECT$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.24]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.25]
enabled=1
caption=_WOW_
export=1
body=/************************************************************ The sample code of the following 4 table interface* procedures has been generated with the help of* SQL Assistant and a single 5 letter code snippet _WOW_.** The only purpose of this code snippet is to help you learn* the capabilities of code snippets and use them efficiently,* realizing tremendous productivity gains.** Suggestion: Press CTRL+F11 to auto-format this code.***********************************************************/$$$CREATE PROCEDURE sp_Update$OBJECT$/************************************************************ Procedure description: This interface procedure is used for*                        updating records in table $OBJECT$.* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments************************************************************* $DATE$ $OSUSER$ Initial version************************************************************/(	p_old_$COLUMNS+TYPES_V$    ,	p_new_$COLUMNS+TYPES_V$)BEGIN	DECLARE v_success INT DEFAULT 0;	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_success = -1;	DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_success = -2;	UPDATE $OBJECT$	SET $COLUMNS_V$ = p_new_$COLUMNS_V$	WHERE "AND ifNull(cast("$COLUMNS_V$" AS CHAR), '')" = ifNull(cast(p_old_$COLUMNS_V$" AS CHAR), '')";	SELECT (CASE WHEN v_success != 0 THEN v_success ELSE ROW_COUNT() END) AS RET_CODE;END$$$CREATE PROCEDURE sp_Delete$OBJECT$/************************************************************ Procedure description: This interface procedure is used for*                        deleteting records from table $OBJECT$* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments************************************************************* $DATE$ $OSUSER$ Initial version************************************************************/(	p_$COLUMNS+TYPES_V$)BEGIN	DECLARE v_success INT DEFAULT 0;	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_success = -1;	DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_success = -2;	DELETE FROM $OBJECT$	WHERE "AND ifNull(cast("$COLUMNS_V$" AS CHAR), '')" = ifNull(cast(p_$COLUMNS_V$" AS CHAR), '')";	SELECT (CASE WHEN v_success != 0 THEN v_success ELSE ROW_COUNT() END) AS RET_CODE;END$$$CREATE PROCEDURE sp_Insert$OBJECT$/************************************************************ Procedure description: This interface procedure is used for*                        adding records to table $OBJECT$* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments************************************************************* $DATE$ $OSUSER$ Initial version************************************************************/(	p_$COLUMNS+TYPES_V$)BEGIN	DECLARE v_success INT DEFAULT 0;	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_success = -1;	INSERT INTO $OBJECT$	(		$COLUMNS$	)	VALUES	(		p_$COLUMNS$	);	SELECT (CASE WHEN v_success != 0 THEN v_success ELSE ROW_COUNT() END) AS RET_CODE;END$$$CREATE PROCEDURE sp_Get$OBJECT$/************************************************************ Procedure description: This interface procedure is used for*                        searching records in table $OBJECT$* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments************************************************************* $DATE$ $OSUSER$ Initial version************************************************************/(	p_$COLUMNS+TYPES_V$)BEGIN	DECLARE v_success INT DEFAULT 0;	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET v_success = -1;	SELECT *	FROM $OBJECT$	WHERE "AND ifNull(cast("$COLUMNS_V$" AS CHAR), '')" = ifNull(cast(p_$COLUMNS_V$" AS CHAR), '')";	SELECT (CASE WHEN v_success != 0 THEN v_success ELSE 0 END) AS RET_CODE;END$$$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.26]
enabled=1
caption=proc
export=1
body=$PROMPT(proc_name,Enter new procedure name)$DELIMITER %%%USE $DB$ %%%-- Drop procedure $proc_name$ if it existsDROP PROCEDURE IF EXISTS $proc_name$ %%%-- Create procedure $proc_name$CREATE PROCEDURE $proc_name$	DEFINER = CURRENT_USER	LANGUAGE SQL 	SQL SECURITY DEFINER/************************************************************ Procedure description: |* Date:   $DATE$ * Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/(	<parameters>)BEGIN	DECLARE @v_ret <data type>;	SET @v_ret = ... ;		RETURN 0;END;%%%--- Procedure $proc_name$ createdDELIMITER ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.4.27]
enabled=1
caption=func
export=1
body=$PROMPT(func_name,Enter new function name)$DELIMITER %%%USE $DB$ %%%-- Drop function $func_name$ if it existsDROP FUNCTION IF EXISTS $func_name$ %%%-- Create function $func_name$CREATE FUNCTION $func_name$	DEFINER = CURRENT_USER	LANGUAGE SQL 	SQL SECURITY DEFINER/************************************************************ Function description: |* Date:   $DATE$ * Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/(	<parameters here>)RETURNS <data type here>BEGIN	DECLARE @v_ret <data type>;	SET @v_ret = ... ;		RETURN @v_ret;END;%%%-- Function $func_name$ createdDELIMITER ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5]
enabled=1
caption=PostgreSQL Snippets
export=1
count=25
dbType=7
keyChar=0
isCase=0

[snips.5.1]
enabled=1
caption=if
export=1
body=IF | THEN	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.2]
enabled=1
caption=for
export=1
body=FOR i IN 0..| LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.3]
enabled=1
caption=begin
export=1
body=BEGIN	|END;
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.5.4]
enabled=1
caption=be
export=1
body=BEGIN	|EXCEPTION 	WHEN ... THEN ...	WHEN OTHERS THEN NULL;END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.5]
enabled=1
caption=ex
export=1
body=EXCEPTION 	WHEN OTHERS THEN NULL;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.6]
enabled=1
caption=forr
export=1
body=FOR rec IN (SELECT | FROM ...) LOOP		END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.7]
enabled=1
caption=func
export=1
body=CREATE OR REPLACE FUNCTION | (	i_ IN <data type>) RETURN <data type>/************************************************************ Function description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/ISDECLARE    v_ret <data type>;BEGIN	v_ret := ...;		RETURN v_ret;END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.8]
enabled=1
caption=proc
export=1
body=CREATE OR REPLACE PROCEDURE | (	i_ IN <data type>) /************************************************************ Procedure description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/ISDECLARE    v_var <data type>;BEGIN	v_var := ...;EXCEPTION 	WHEN OTHERS 		DBMS_OUTPUT.PUT_LINE(SQLERR);END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.9]
enabled=1
caption=ife
export=1
body=IF | THEN	ELSE	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.10]
enabled=1
caption=type
export=1
body=TYPE | IS TABLE OF <data type> INDEX BY BINARY_INTEGER;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.11]
enabled=1
caption=while
export=1
body=WHILE | LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.12]
enabled=1
caption=sg
export=1
body=SELECT| FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.13]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.14]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.15]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.16]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.17]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.18]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.5.19]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.20]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.21]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.22]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.23]
enabled=1
caption=si
export=1
body=DECLARE v_$COLUMNS+TYPES$;SELECT 	$COLUMNS$INTO	v_$COLUMNS$FROM $OBJECT$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.24]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.5.25]
enabled=1
caption=pg_get_serial_sequence(
export=1
body=pg_get_serial_sequence('$OBJECT(ins_object, column)$','$OBJECT(ins_column)$')
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.6]
enabled=1
caption=Sybase ASA Snippets
export=1
count=27
dbType=5
keyChar=0
isCase=0

[snips.6.1]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN     WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.2]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.3]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.4]
enabled=1
caption=sg
export=1
body=SELECT|FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.5]
enabled=1
caption=while
export=1
body=WHILE | BEGIN	END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.6]
enabled=1
caption=fetch
export=1
body=FETCH NEXT FROM | INTO 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.7]
enabled=1
caption=cur
export=1
body=DECLARE | CURSORFOR SELECTFROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.8]
enabled=1
caption=del
export=1
body=DELETE FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.9]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.10]
enabled=1
caption=iv
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS$)VALUES(	|)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.11]
enabled=1
caption=is
export=1
body=INSERT INTO $OBJECT$( 	$COLUMNS$)SELECTFROM|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.12]
enabled=1
caption=fun
export=1
body=IF object_id('|') IS NOT NULLBEGIN 	PRINT 'Dropping function'	DROP FUNCTION 	IF @@ERROR = 0 PRINT 'Function dropped'ENDgoCREATE FUNCTION /************************************************************ Function description:* Date:   $DATE$  * Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/(	<parameters>) RETURNS <data type>BEGIN	DECLARE    	@v_ret <data type>	SET @v_ret = ...		RETURN @v_retEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.13]
enabled=1
caption=proc
export=1
body=$PROMPT(proc_name,Enter new procedure name)$USE [$DB$]goIF object_id('$proc_name$') IS NOT NULLBEGIN 	PRINT 'Dropping procedure $proc_name$'	DROP PROCEDURE [$proc_name$]  	IF @@ERROR = 0 PRINT 'Procedure $proc_name$ dropped'ENDgoCREATE PROCEDURE [$proc_name$]/************************************************************ Procedure description:* Date:   $DATE$ * Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/(	|<parameters>)ASBEGIN	DECLARE		@v_ret <data type>	SET @v_ret = ...		RETURN 0ENDgoIF @@ERROR = 0 PRINT 'Procedure $proc_name$ created'go
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.14]
enabled=1
caption=ife
export=1
body=IF |	BEGIN		ENDELSE	BEGIN		END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.15]
enabled=1
caption=if
export=1
body=IF | BEGIN	END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.16]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.17]
enabled=1
caption=cfetch
export=1
body=DECLARE @$COLUMNS+TYPES$DECLARE my_cursor CURSOR FAST_FORWARD READ_ONLY FORSELECT $COLUMNS$FROM $OBJECT$OPEN my_cursor|FETCH FROM my_cursor INTO @$COLUMNS$WHILE @@FETCH_STATUS = 0BEGIN	/*{ ... Cursor logic here ... }*/	FETCH FROM my_cursor INTO @$COLUMNS$ENDCLOSE my_cursorDEALLOCATE my_cursor
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.18]
enabled=1
caption=begin
export=1
body=BEGIN	|END
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.6.19]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.6.20]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.21]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.22]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.23]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.24]
enabled=1
caption=si
export=1
body=DECLARE @$COLUMNS+TYPES$SELECT	@$COLUMNS$ = $COLUMNS$FROM $OBJECT$WHERE|
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.25]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = @$COLUMNS$WHERE|
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.6.26]
enabled=1
caption=begin try
export=1
body=BEGIN TRY	|END TRYBEGIN CATCH	/* 		SELECT			ERROR_NUMBER() AS ErrorNumber,			ERROR_SEVERITY() AS ErrorSeverity,			ERROR_STATE() AS ErrorState,			ERROR_PROCEDURE() AS ErrorProcedure,			ERROR_LINE() AS ErrorLine,			ERROR_MESSAGE() AS ErrorMessage	*/END CATCH
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.6.27]
enabled=1
caption=procu
export=1
body=-- IMPORTANT: For this code to work correctly, --      selected table must have an identity column--      which is also a primary key USE [$DB$]goIF object_id('[dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]') IS NOT NULLBEGIN 	PRINT 'Dropping procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]'	DROP PROCEDURE [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]  	IF @@ERROR = 0 PRINT 'Procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] dropped'ENDgo-- ============================================= --    Created By: $OSUSER$ --  Created Date: $DATE$ $TIME$--   Description: Update procedure for table $OBJECT$--                Table primary key must be an identity column-- --   Modified By: -- Modified Date: --      Comments: -- ============================================= CREATE PROCEDURE [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] (    @$COLUMNS+TYPES_V$=NULL ) AS BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.    SET NOCOUNT ON;    IF @$COLUMN_KEYS_V$ < 1       BEGIN          INSERT INTO $OBJECT$          (             $COLUMNS_V$          )          VALUES          (             @$COLUMNS_V$          )          SELECT SCOPE_IDENTITY() $COLUMN_KEYS_V$       END    ELSE       BEGIN          UPDATE $OBJECT$ SET             $COLUMNS_V$ = @$COLUMNS_V$          WHERE $COLUMN_KEYS_V$ = @$COLUMN_KEYS_V$          SELECT @$COLUMN_KEYS_V$ $COLUMN_KEYS_V$       END ENDgoIF @@ERROR = 0 PRINT 'Procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] created'go
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7]
enabled=1
caption=Sybase ASE Snippets
export=1
count=27
dbType=4
keyChar=0
isCase=0

[snips.7.1]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN     WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.2]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.3]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.4]
enabled=1
caption=sg
export=1
body=SELECT|FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.5]
enabled=1
caption=while
export=1
body=WHILE | BEGIN	END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.6]
enabled=1
caption=fetch
export=1
body=FETCH NEXT FROM | INTO 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.7]
enabled=1
caption=cur
export=1
body=DECLARE | CURSORFOR SELECTFROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.8]
enabled=1
caption=del
export=1
body=DELETE FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.9]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.10]
enabled=1
caption=iv
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS$)VALUES(	|)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.11]
enabled=1
caption=is
export=1
body=INSERT INTO $OBJECT$( 	$COLUMNS$)SELECTFROM|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.12]
enabled=1
caption=fun
export=1
body=IF object_id('|') IS NOT NULLBEGIN 	PRINT 'Dropping function'	DROP FUNCTION 	IF @@ERROR = 0 PRINT 'Function dropped'ENDgoCREATE FUNCTION /************************************************************ Function description:* Date:   $DATE$  * Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/(	<parameters>) RETURNS <data type>BEGIN	DECLARE    	@v_ret <data type>	SET @v_ret = ...		RETURN @v_retEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.13]
enabled=1
caption=proc
export=1
body=$PROMPT(proc_name,Enter new procedure name)$USE [$DB$]goIF object_id('$proc_name$') IS NOT NULLBEGIN 	PRINT 'Dropping procedure $proc_name$'	DROP PROCEDURE [$proc_name$]  	IF @@ERROR = 0 PRINT 'Procedure $proc_name$ dropped'ENDgoCREATE PROCEDURE [$proc_name$]/************************************************************ Procedure description:* Date:   $DATE$ * Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/(	|<parameters>)ASBEGIN	DECLARE		@v_ret <data type>	SET @v_ret = ...		RETURN 0ENDgoIF @@ERROR = 0 PRINT 'Procedure $proc_name$ created'go
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.14]
enabled=1
caption=ife
export=1
body=IF |	BEGIN		ENDELSE	BEGIN		END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.15]
enabled=1
caption=if
export=1
body=IF | BEGIN	END
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.16]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.17]
enabled=1
caption=cfetch
export=1
body=DECLARE @$COLUMNS+TYPES$DECLARE my_cursor CURSOR FAST_FORWARD READ_ONLY FORSELECT $COLUMNS$FROM $OBJECT$OPEN my_cursor|FETCH FROM my_cursor INTO @$COLUMNS$WHILE @@FETCH_STATUS = 0BEGIN	/*{ ... Cursor logic here ... }*/	FETCH FROM my_cursor INTO @$COLUMNS$ENDCLOSE my_cursorDEALLOCATE my_cursor
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.18]
enabled=1
caption=begin
export=1
body=BEGIN	|END
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.7.19]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.7.20]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.21]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.22]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.23]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.24]
enabled=1
caption=si
export=1
body=DECLARE @$COLUMNS+TYPES$SELECT	@$COLUMNS$ = $COLUMNS$FROM $OBJECT$WHERE|
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.25]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = @$COLUMNS$WHERE|
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.7.26]
enabled=1
caption=begin try
export=1
body=BEGIN TRY	|END TRYBEGIN CATCH	/* 		SELECT			ERROR_NUMBER() AS ErrorNumber,			ERROR_SEVERITY() AS ErrorSeverity,			ERROR_STATE() AS ErrorState,			ERROR_PROCEDURE() AS ErrorProcedure,			ERROR_LINE() AS ErrorLine,			ERROR_MESSAGE() AS ErrorMessage	*/END CATCH
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.7.27]
enabled=1
caption=procu
export=1
body=-- IMPORTANT: For this code to work correctly, --      selected table must have an identity column--      which is also a primary key USE [$DB$]goIF object_id('[dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]') IS NOT NULLBEGIN 	PRINT 'Dropping procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]'	DROP PROCEDURE [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$]  	IF @@ERROR = 0 PRINT 'Procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] dropped'ENDgo-- ============================================= --    Created By: $OSUSER$ --  Created Date: $DATE$ $TIME$--   Description: Update procedure for table $OBJECT$--                Table primary key must be an identity column-- --   Modified By: -- Modified Date: --      Comments: -- ============================================= CREATE PROCEDURE [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] (    @$COLUMNS+TYPES_V$=NULL ) AS BEGIN     -- SET NOCOUNT ON added to prevent extra result sets from     -- interfering with SELECT statements.    SET NOCOUNT ON;    IF @$COLUMN_KEYS_V$ < 1       BEGIN          INSERT INTO $OBJECT$          (             $COLUMNS_V$          )          VALUES          (             @$COLUMNS_V$          )          SELECT SCOPE_IDENTITY() $COLUMN_KEYS_V$       END    ELSE       BEGIN          UPDATE $OBJECT$ SET             $COLUMNS_V$ = @$COLUMNS_V$          WHERE $COLUMN_KEYS_V$ = @$COLUMN_KEYS_V$          SELECT @$COLUMN_KEYS_V$ $COLUMN_KEYS_V$       END ENDgoIF @@ERROR = 0 PRINT 'Procedure [dbo].[usp$OBJECT$_Update_By$COLUMN_KEYS$] created'go
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8]
enabled=1
caption=MS Access Snippets
export=1
count=14
dbType=6
keyChar=0
isCase=0

[snips.8.1]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN     WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.2]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.3]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.4]
enabled=1
caption=sg
export=1
body=SELECT|FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.5]
enabled=1
caption=del
export=1
body=DELETE FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.6]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.7]
enabled=1
caption=iv
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS$)VALUES(	|)
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.8]
enabled=1
caption=is
export=1
body=INSERT INTO $OBJECT$( 	$COLUMNS$)SELECTFROM|WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.9]
enabled=1
caption=ife
export=1
body=IIF(|, , )
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.10]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.11]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.8.12]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.13]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.8.14]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = @$COLUMNS$WHERE|
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9]
enabled=1
caption=Amazon Redshift Snippets
export=1
count=25
dbType=8
keyChar=0
isCase=0

[snips.9.1]
enabled=0
caption=if
export=1
body=IF | THEN	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.2]
enabled=0
caption=for
export=1
body=FOR i IN 0..| LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.3]
enabled=1
caption=begin
export=1
body=BEGIN	|END;
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.9.4]
enabled=0
caption=be
export=1
body=BEGIN	|EXCEPTION 	WHEN ... THEN ...	WHEN OTHERS THEN NULL;END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.5]
enabled=0
caption=ex
export=1
body=EXCEPTION 	WHEN OTHERS THEN NULL;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.6]
enabled=0
caption=forr
export=1
body=FOR rec IN (SELECT | FROM ...) LOOP		END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.7]
enabled=0
caption=func
export=1
body=CREATE OR REPLACE FUNCTION | (	<data type>,	<data type>) RETURN <data type> AS $^body$^/************************************************************ Function description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/DECLARE    v_ret <data type>;BEGIN	v_ret := ...;		RETURN v_ret;END$^body$^LANGUAGE plpgsql;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.8]
enabled=0
caption=proc
export=1
body=CREATE OR REPLACE FUNCTION | (	<data type>,	<data type>) RETURN void AS $^body$^/************************************************************ Procedure description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/DECLARE    v_var <data type>;BEGIN	v_var := ...;END$^body$^LANGUAGE plpgsql;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.9]
enabled=0
caption=ife
export=1
body=IF | THEN	ELSE	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.10]
enabled=0
caption=type
export=1
body=TYPE | IS TABLE OF <data type> INDEX BY BINARY_INTEGER;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.11]
enabled=0
caption=while
export=1
body=WHILE | LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.12]
enabled=1
caption=sg
export=1
body=SELECT| FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.13]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.14]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.15]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.16]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.17]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.18]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.9.19]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.20]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.21]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.22]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.23]
enabled=0
caption=si
export=1
body=DECLARE v_$COLUMNS+TYPES$;SELECT 	$COLUMNS$INTO	v_$COLUMNS$FROM $OBJECT$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.24]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.9.25]
enabled=1
caption=pg_get_serial_sequence(
export=1
body=pg_get_serial_sequence('$OBJECT(ins_object, column)$','$OBJECT(ins_column)$')
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.10]
enabled=1
caption=SQLite Snippets
export=1
count=11
dbType=9
keyChar=0
isCase=0

[snips.10.1]
enabled=1
caption=sg
export=1
body=SELECT| FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.2]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.3]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.4]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.5]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.6]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.7]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.10.8]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.9]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.10]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.10.11]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11]
enabled=1
caption=Netezza Snippets
export=1
count=23
dbType=10
keyChar=0
isCase=0

[snips.11.1]
enabled=1
caption=if
export=1
body=IF | THEN	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.2]
enabled=1
caption=for
export=1
body=FOR i IN 0..| LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.3]
enabled=1
caption=begin
export=1
body=BEGIN	|END;
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.11.4]
enabled=1
caption=be
export=1
body=BEGIN	|EXCEPTION 	WHEN ... THEN ...	WHEN OTHERS THEN NULL;END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.5]
enabled=1
caption=ex
export=1
body=EXCEPTION 	WHEN OTHERS THEN NULL;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.6]
enabled=1
caption=forr
export=1
body=FOR rec IN (SELECT | FROM ...) LOOP		END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.7]
enabled=1
caption=func
export=1
body=CREATE OR REPLACE FUNCTION | (	<data type>,	<data type>) RETURN <data type>LANGUAGE nzplsql; AS BEGIN PROC/************************************************************ Function description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/DECLARE    v_ret <data type>;BEGIN	v_ret := ...;		RETURN v_ret;ENDEND PROC;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.8]
enabled=1
caption=proc
export=1
body=CREATE OR REPLACE PROCEDURE | (	<data type>,	<data type>) RETURN INT4 LANGUAGE nzplsql;AS BEGIN PROC/************************************************************ Procedure description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/DECLARE    v_var <data type>;BEGIN	v_var := ...;ENDEND PROC; 
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.9]
enabled=1
caption=ife
export=1
body=IF | THEN	ELSE	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.10]
enabled=1
caption=while
export=1
body=WHILE | LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.11]
enabled=1
caption=sg
export=1
body=SELECT| FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.12]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.13]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.14]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.15]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.16]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.17]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.11.18]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.19]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.20]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.21]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.22]
enabled=1
caption=si
export=1
body=DECLARE v_$COLUMNS+TYPES$;SELECT 	$COLUMNS$INTO	v_$COLUMNS$FROM $OBJECT$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.11.23]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12]
enabled=1
caption=Greenplum Snippets
export=1
count=25
dbType=12
keyChar=0
isCase=0

[snips.12.1]
enabled=1
caption=if
export=1
body=IF | THEN	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.2]
enabled=1
caption=for
export=1
body=FOR i IN 0..| LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.3]
enabled=1
caption=begin
export=1
body=BEGIN	|END;
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.12.4]
enabled=1
caption=be
export=1
body=BEGIN	|EXCEPTION 	WHEN ... THEN ...	WHEN OTHERS THEN NULL;END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.5]
enabled=1
caption=ex
export=1
body=EXCEPTION 	WHEN OTHERS THEN NULL;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.6]
enabled=1
caption=forr
export=1
body=FOR rec IN (SELECT | FROM ...) LOOP		END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.7]
enabled=1
caption=func
export=1
body=CREATE OR REPLACE FUNCTION | (	<data type>,	<data type>) RETURN <data type> AS $^body$^/************************************************************ Function description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/DECLARE    v_ret <data type>;BEGIN	v_ret := ...;		RETURN v_ret;END$^body$^ LANGUAGE plpgsql;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.8]
enabled=1
caption=proc
export=1
body=CREATE OR REPLACE FUNCTION | (	<data type>,	<data type>) RETURN void AS $^body$^/************************************************************ Procedure description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/DECLARE    v_var <data type>;BEGIN	v_var := ...;END$^body$^LANGUAGE plpgsql;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.9]
enabled=1
caption=ife
export=1
body=IF | THEN	ELSE	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.10]
enabled=1
caption=type
export=1
body=TYPE | IS TABLE OF <data type> INDEX BY BINARY_INTEGER;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.11]
enabled=1
caption=while
export=1
body=WHILE | LOOP	END LOOP;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.12]
enabled=1
caption=sg
export=1
body=SELECT| FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.13]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.14]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.15]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.16]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.17]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.18]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.12.19]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.20]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.21]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.22]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.23]
enabled=1
caption=si
export=1
body=DECLARE v_$COLUMNS+TYPES$;SELECT 	$COLUMNS$INTO	v_$COLUMNS$FROM $OBJECT$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.24]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.12.25]
enabled=1
caption=pg_get_serial_sequence(
export=1
body=pg_get_serial_sequence('$OBJECT(ins_object, column)$','$OBJECT(ins_column)$')
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.13]
enabled=1
caption=Teradata Snippets
export=1
count=25
dbType=11
keyChar=0
isCase=0

[snips.13.1]
enabled=1
caption=if
export=1
body=IF | THEN	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.2]
enabled=1
caption=for
export=1
body=for_loop: LOOP	-- check if work is complete, leave the FOR loop if done	IF v_done = 1 THEN 		LEAVE fetch_loop;	END IF;	/*{ ... business logic here ... }*/END LOOP for_loop;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.3]
enabled=1
caption=begin
export=1
body=BEGIN	|END;
keyChar=4
isCase=0
action=0
fmtStyle=

[snips.13.4]
enabled=1
caption=ex
export=1
body=DECLARE CONTINUE HANDLER FOR SQLEXCEPTION |...;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.5]
enabled=1
caption=func
export=1
body=CREATE FUNCTION | (	<data type>,	<data type>) RETURN <data type>AS BEGIN/************************************************************ Function description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/BEGIN	DECLARE v_ret <data type>;		v_ret := ...;		RETURN v_ret;END;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.6]
enabled=1
caption=proc
export=1
body=CREATE OR REPLACE PROCEDURE | (	<data type>,	<data type>) AS BEGIN/************************************************************ Procedure description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/BEGIN	DECLARE v_var <data type>;	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION ...;		v_var := ...;END;  
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.7]
enabled=1
caption=ife
export=1
body=IF | THEN	ELSE	END IF;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.8]
enabled=1
caption=while
export=1
body=WHILE | DO	END WHILE;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.9]
enabled=1
caption=sg
export=1
body=SELECT| FROM $OBJECT$WHEREGROUP BYORDER BY;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.10]
enabled=1
caption=sm
export=1
body=SELECT max(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.11]
enabled=1
caption=ss
export=1
body=SELECT sum(|)FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.12]
enabled=1
caption=case
export=1
body=CASE |    WHEN  THEN 	WHEN  THEN     ELSEEND
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.13]
enabled=1
caption=upd
export=1
body=UPDATE $OBJECT$SET|WHERE ;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.14]
enabled=1
caption=date
export=1
body=$DATE$
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.15]
enabled=0
caption=(
export=1
body=(|)
keyChar=6
isCase=0
action=0
fmtStyle=

[snips.13.16]
enabled=1
caption=/*
export=1
body=/* * | */
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.17]
enabled=1
caption=/**
export=1
body=/******************************************* * | *******************************************/
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.18]
enabled=1
caption=lj
export=1
body=LEFT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.19]
enabled=1
caption=rj
export=1
body=RIGHT OUTER JOIN
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.20]
enabled=1
caption=si
export=1
body=DECLARE v_$COLUMNS+TYPES$;SELECT 	$COLUMNS$INTO	v_$COLUMNS$FROM $OBJECT$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.21]
enabled=1
caption=up
export=1
body=UPDATE $OBJECT$SET	$COLUMNS$ = v_$COLUMNS$WHERE|;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.22]
enabled=1
caption=cfetch
export=1
body=DECLARE at_end SMALLINT DEFAULT 0;DECLARE CONTINUE HANDLER FOR NOT FOUND SET at_end = 1;DECLARE v_$COLUMNS+TYPES$;DECLARE my_cursor CURSOR FORSELECT $COLUMNS$FROM $OBJECT$;OPEN my_cursor;fetch_loop: LOOP	FETCH FROM my_cursor INTO v_$COLUMNS$	IF at_end <> 0 THEN 		LEAVE fetch_loop;	END IF;	/*{ ... Cursor logic here ... }*/END LOOP fetch_loop;CLOSE my_cursor;
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.23]
enabled=1
caption=cur
export=1
body=DECLARE | CURSORFOR SELECT $COLUMNS$FROM $OBJECT$WHERE
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.24]
enabled=1
caption=macro
export=1
body=CREATE MACRO | (	<data type>,	<data type>) AS BEGIN/************************************************************ Procedure description:* Date:   $DATE$* Author: $OSUSER$** Changes* Date		Modified By			Comments*************************************************************************************************************************/BEGIN	DECLARE v_var <data type>;	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION ...;		v_var := ...;END;  
keyChar=0
isCase=0
action=0
fmtStyle=

[snips.13.25]
enabled=1
caption=repeat
export=1
body=REPEAT	|END REPEAT;
keyChar=0
isCase=0
action=0
fmtStyle=

[copySql]
enabled=1
caption=
export=1
count=14

[copySql.1]
enabled=1
caption=Java
export=1
prefix=String sql = "
suffix=";
separ= \n"           + "
escape=\
lineLen=40

[copySql.2]
enabled=1
caption=Visual Basic
export=1
prefix=Dim sql As Stringsql = "
suffix="
separ= " & vbCrLf _    & "
escape="
lineLen=40

[copySql.3]
enabled=1
caption=VBScript
export=1
prefix=Dim sqlsql = "
suffix="
separ= " & vbCrLf _    & "
escape="
lineLen=40

[copySql.4]
enabled=1
caption=C#
export=1
prefix=string strSql = "
suffix=";
separ=" + "\r\n"              + "
escape=\
lineLen=40

[copySql.5]
enabled=1
caption=C++
export=1
prefix=std::string sql;sql = "
suffix=";
separ= \n"    + "
escape=\
lineLen=40

[copySql.6]
enabled=1
caption=Perl
export=1
prefix=$sql = '
suffix=';
separ= \n'     . '
escape=\
lineLen=40

[copySql.7]
enabled=1
caption=PHP
export=1
prefix=$sql = "
suffix=";
separ= \n"     . "
escape=\
lineLen=40

[copySql.8]
enabled=1
caption=PowerBuilder
export=1
prefix=string sqlsql = "
suffix="
separ= ~n" &    + "
escape=~
lineLen=40

[copySql.9]
enabled=1
caption=dynamic SQL (T-SQL)
export=1
prefix=DECLARE @sql nvarchar(4000)SET @sql = '
suffix='EXEC(@sql)
separ= ' + char(10)         + '
escape='
lineLen=40

[copySql.10]
enabled=1
caption=dynamic SQL (PL/SQL)
export=1
prefix=DECLARE    v_sql nvarchar2(4000);BEGIN   v_sql := '
suffix=';   EXECUTE IMMEDIATE v_sql;END;
separ= ' || chr(10)          || '
escape='
lineLen=40

[copySql.11]
enabled=1
caption=dynamic SQL (DB2) 
export=1
prefix=DECLARE v_sql varchar(4000);SET v_sql = '
suffix=';EXECUTE IMMEDIATE v_sql;
separ= ' || char(10)          || '
escape='
lineLen=40

[copySql.12]
enabled=1
caption=Delphi
export=1
prefix=var  sql string;begin  sql := '
suffix=';end;
separ= ' + #10       + '
escape='
lineLen=40

[copySql.13]
enabled=1
caption=Ruby
export=1
prefix=sql = '
suffix='
separ= \n'   << '
escape='
lineLen=40

[copySql.14]
enabled=1
caption=Batch script using OSQL
export=1
prefix=@echo offdate /T > osql.logtime /T >> osql.logecho >> ------------------------------------osql -E -S [server_name_here] -b -Q "
suffix=" >> osql.log 2&1if ERRORLEVEL 1 goto PRINT_ERRORecho >> ------------------------------------date /T >> osql.logtime /T >> osql.logexit 0:PRINT_ERRORecho >> ------------------------------------date /T >> osql.logtime /T >> osql.logecho *****************************************************************************echo ** An error occurred during database processing. See osql.log file for detailsecho *****************************************************************************exit 1
separ= 
escape=\
lineLen=10000

[rfRules]
enabled=1
caption=
export=1
count=14

[rfRules.1]
enabled=1
caption=SQL Server Refactoring
export=1
count=15
dbType=1
addSchema=1

[rfRules.1.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)ASBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$    RETURN @@ERROREND
minVer=0

[rfRules.1.2]
enabled=1
caption=(procedure call)
export=1
body=EXECUTE $REFACTORING_OBJ_NAME$ $REFACTORING_ARGS$
minVer=0

[rfRules.1.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.1.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.1.5]
enabled=1
caption=(search)
export=1
body=IF @@version LIKE 'Microsoft SQL Server 2005%'OR @@version LIKE 'Microsoft SQL Server 2008%'       SELECT DISTINCT s.name, o.name       FROM dbo.syscomments c                 JOIN sys.all_objects o                  ON o.object_id = c.id                JOIN sys.schemas s                  ON s.schema_id = o.schema_id       WHERE c.text LIKE '%$REFACTORING_OLD_NAME$%'ELSE      SELECT DISTINCT u.name, o.name       FROM dbo.syscomments c               JOIN dbo.sysobjects o                 ON o.id = c.id              JOIN dbo.sysusers u                 ON u.uid = o.uid          WHERE c.text LIKE '%$REFACTORING_OLD_NAME$%'
minVer=0

[rfRules.1.6]
enabled=1
caption=(object rename)
export=1
body=EXEC sp_rename '[$REFACTORING_SCHEMA$].[$REFACTORING_OLD_NAME$]', '$REFACTORING_NEW_NAME$', 'OBJECT'
minVer=0

[rfRules.1.7]
enabled=1
caption=(column rename)
export=1
body=EXEC sp_rename '[$REFACTORING_SCHEMA$].[$REFACTORING_OBJECT$].[$REFACTORING_OLD_NAME$]', '$REFACTORING_NEW_NAME$', 'COLUMN'
minVer=0

[rfRules.1.8]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE [$REFACTORING_SCHEMA$].[$REFACTORING_OBJECT$] ADD $REFACTORING_NEW_NAME$
minVer=0

[rfRules.1.9]
enabled=1
caption=(column delete)
export=1
body=DECLARE @schemaname VARCHAR(500) = :REFACTORING_SCHEMADECLARE @tablename  VARCHAR(500) = :REFACTORING_OBJECT DECLARE @columnname VARCHAR(500) = :REFACTORING_OLD_NAMESELECT CONSTRAINT_NAME,       'C' AS TYPE       INTO #dependenciesFROM   INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGEWHERE  TABLE_NAME = @tablename AND       COLUMN_NAME = @columnname AND       TABLE_SCHEMA = @schemanameINSERT INTO #dependenciesSELECT d.name,       'C'FROM   sys.default_constraints d       JOIN sys.columns c            ON  c.column_id = d.parent_column_id AND                c.object_id = d.parent_object_id       JOIN sys.objects o            ON  o.object_id = d.parent_object_id       JOIN sys.schemas s            ON  o.schema_id = s.schema_idWHERE  o.name = @tablename AND       c.name = @columnname AND       s.name = @schemanameINSERT INTO #dependenciesSELECT i.name,       'I'FROM   sys.indexes i       JOIN sys.index_columns ic            ON  ic.index_id = i.index_id AND                ic.object_id = i.object_id       JOIN sys.columns c            ON  c.column_id = ic.column_id AND                c.object_id = i.object_id       JOIN sys.objects o            ON  o.object_id = i.object_id       JOIN sys.schemas s            ON  o.schema_id = s.schema_idWHERE  o.name = @tableName AND       c.name = @columnname AND       s.name = @schemanameDECLARE @dep_name NVARCHAR(500)DECLARE @type NCHAR(1)DECLARE dep_cursor CURSOR  FOR    SELECT *    FROM   #dependenciesOPEN dep_cursorFETCH NEXT FROM dep_cursor INTO @dep_name, @type;DECLARE @sql NVARCHAR(MAX)SET @tablename = '[' + @schemaname + '].[' + @tablename + ']'  WHILE @@FETCH_STATUS = 0BEGIN    SET @sql = CASE @type                    WHEN 'C' THEN 'ALTER TABLE ' + @tablename + ' DROP CONSTRAINT ' + @dep_name                    WHEN 'I' THEN 'DROP INDEX ' + @dep_name + ' ON ' + @tablename               END        EXEC sp_executesql @sql    FETCH NEXT FROM dep_cursor     INTO @dep_name, @type;    SET @dep_name = '[' + @dep_name + ']';ENDCLOSE dep_cursorDEALLOCATE dep_cursorDROP TABLE #dependenciesSET @sql = 'ALTER TABLE ' + @tablename + ' DROP COLUMN [' + @columnname + ']'EXEC sp_executesql @sql
minVer=0

[rfRules.1.10]
enabled=1
caption=(copy grants)
export=1
body=SELECT DISTINCT 	upper(v2.name) + ' ' + upper(v1.name) + ' ON [' + user_name(o.uid) + '].[' + :REFACTORING_OLD_NAME + '] TO [' + user_name(p.uid)+ ']'FROM	dbo.sysprotects p,	master.dbo.spt_values v1,	master.dbo.spt_values v2,	master.dbo.spt_values v3,	dbo.sysusers u,	dbo.sysobjects oWHERE	v1.type = 'T'	AND v1.number = p.action	AND v2.type = 'T'	AND v2.number = p.protecttype	AND o.xtype = substring(v3.name,1,2) collate database_default 	AND v3.type = 'O9T'	AND p.id != 0	AND o.id = p.id	AND o.name = :REFACTORING_OLD_NAME	AND user_name(o.uid) = :REFACTORING_SCHEMA 
minVer=0

[rfRules.1.11]
enabled=1
caption=(column search)
export=1
body=IF @@version LIKE 'Microsoft SQL Server 2005%'OR @@version LIKE 'Microsoft SQL Server 2008%'OR @@version LIKE '%SQL Server 2012%'OR @@version LIKE '%Denali%'	SELECT DISTINCT s.name, o.name	FROM dbo.syscomments c 			JOIN sys.all_objects o			  ON o.object_id = c.id			JOIN sys.schemas s			  ON s.schema_id = o.schema_id	WHERE c.text LIKE ('%'+:REFACTORING_OLD_NAME+'%')	UNION	SELECT s.name, o.name	FROM sys.synonyms o			JOIN sys.schemas s			  ON s.schema_id = o.schema_id	WHERE o.base_object_name LIKE ('%'+:REFACTORING_OLD_NAME+'%')	UNION		select		(select s.name from sys.all_objects o, sys.schemas s where s.schema_id = o.schema_id and o.object_id = f1.fkeyid),		(select name from dbo.sysobjects where id = f1.fkeyid)	from dbo.sysforeignkeys f1	where		(rkeyid = OBJECT_ID(:REFACTORING_SCHEMA + '.' + :REFACTORING_OBJECT)) and		exists(select NULL from dbo.syscolumns where id = f1.rkeyid and colid = f1.rkey and name = :REFACTORING_OLD_NAME)			union		select		(select s.name from sys.all_objects o, sys.schemas s where s.schema_id = o.schema_id and o.object_id = f2.rkeyid),		(select name from dbo.sysobjects where id = f2.rkeyid)		from dbo.sysforeignkeys f2	where		(fkeyid = OBJECT_ID(:REFACTORING_SCHEMA + '.' + :REFACTORING_OBJECT)) and		  exists(select NULL from dbo.syscolumns where id = f2.fkeyid and colid = f2.fkey and name = :REFACTORING_OLD_NAME)	ELSE	SELECT DISTINCT u.name, o.name 	FROM dbo.syscomments c 			JOIN dbo.sysobjects o			   ON o.id = c.id			JOIN dbo.sysusers u			   ON u.uid = o.uid	WHERE c.text LIKE ('%'+:REFACTORING_OLD_NAME+'%')	UNION		select		(select u.name from dbo.sysusers u, dbo.sysobjects o where u.uid = o.uid and o.id = f1.fkeyid),		(select name from dbo.sysobjects where id = f1.fkeyid)	from dbo.sysforeignkeys f1	where		(rkeyid = OBJECT_ID(:REFACTORING_SCHEMA + '.' + :REFACTORING_OBJECT)) and		exists(select NULL from dbo.syscolumns where id = f1.rkeyid and colid = f1.rkey and name = :REFACTORING_OLD_NAME)			UNION		select		(select u.name from dbo.sysusers u, dbo.sysobjects o where u.uid = o.uid and o.id = f2.rkeyid),		(select name from dbo.sysobjects where id = f2.rkeyid)		from dbo.sysforeignkeys f2	where		(fkeyid = OBJECT_ID(:REFACTORING_SCHEMA + '.' + :REFACTORING_OBJECT)) and		  exists(select NULL from dbo.syscolumns where id = f2.fkeyid and colid = f2.fkey and name = :REFACTORING_OLD_NAME)
minVer=0

[rfRules.1.12]
enabled=1
caption=(table search)
export=1
body=IF @@version LIKE 'Microsoft SQL Server 2005%'OR @@version LIKE 'Microsoft SQL Server 2008%'OR @@version LIKE '%SQL Server 2012%'OR @@version LIKE '%Denali%'	SELECT DISTINCT s.name, o.name	FROM dbo.syscomments c 			JOIN sys.all_objects o			  ON o.object_id = c.id			JOIN sys.schemas s			  ON s.schema_id = o.schema_id	WHERE c.text LIKE ('%'+:REFACTORING_OLD_NAME+'%')	UNION	SELECT s.name, o.name	FROM sys.synonyms o			JOIN sys.schemas s			  ON s.schema_id = o.schema_id	WHERE o.base_object_name LIKE ('%'+:REFACTORING_OLD_NAME+'%')	UNION		select		(select s.name from sys.all_objects o, sys.schemas s where s.schema_id = o.schema_id and o.object_id = f1.fkeyid),		(select name from dbo.sysobjects where id = f1.fkeyid)	from dbo.sysforeignkeys f1	where		rkeyid = OBJECT_ID(:REFACTORING_SCHEMA + '.' + :REFACTORING_OBJECT)			union		select		(select s.name from sys.all_objects o, sys.schemas s where s.schema_id = o.schema_id and o.object_id = f2.rkeyid),		(select name from dbo.sysobjects where id = f2.rkeyid)		from dbo.sysforeignkeys f2	where		fkeyid = OBJECT_ID(:REFACTORING_SCHEMA + '.' + :REFACTORING_OBJECT)	ELSE	SELECT DISTINCT u.name, o.name 	FROM dbo.syscomments c 			JOIN dbo.sysobjects o			   ON o.id = c.id			JOIN dbo.sysusers u			   ON u.uid = o.uid	WHERE c.text LIKE ('%'+:REFACTORING_OLD_NAME+'%')	UNION		select		(select u.name from dbo.sysusers u, dbo.sysobjects o where u.uid = o.uid and o.id = f1.fkeyid),		(select name from dbo.sysobjects where id = f1.fkeyid)	from dbo.sysforeignkeys f1	where		rkeyid = OBJECT_ID(:REFACTORING_SCHEMA + '.' + :REFACTORING_OBJECT)			UNION		select		(select u.name from dbo.sysusers u, dbo.sysobjects o where u.uid = o.uid and o.id = f2.rkeyid),		(select name from dbo.sysobjects where id = f2.rkeyid)		from dbo.sysforeignkeys f2	where		fkeyid = OBJECT_ID(:REFACTORING_SCHEMA + '.' + :REFACTORING_OBJECT)
minVer=0

[rfRules.1.13]
enabled=1
caption=(code search)
export=1
body=IF @@version LIKE 'Microsoft SQL Server 2005%'OR @@version LIKE 'Microsoft SQL Server 2008%'OR @@version LIKE '%SQL Server 2012%'OR @@version LIKE '%Denali%'    SELECT DISTINCT s.name, o.name    FROM dbo.syscomments c        JOIN sys.all_objects o ON o.object_id = c.id        JOIN sys.schemas s ON s.schema_id = o.schema_id    WHERE c.text LIKE ('%'+:REFACTORING_OLD_NAME+'%')    UNION    SELECT s.name, o.name    FROM sys.synonyms o        JOIN sys.schemas s ON s.schema_id = o.schema_id    WHERE o.base_object_name LIKE ('%'+:REFACTORING_OLD_NAME+'%')    UNION	select DISTINCT s.name, o.name	from sys.all_objects o        JOIN sys.schemas s ON s.schema_id = o.schema_id	where o.name LIKE ('%'+:REFACTORING_OLD_NAME+'%')                   UNION	select DISTINCT s.name, o.name	from dbo.syscolumns c         JOIN sys.all_objects o ON o.object_id = c.id        JOIN sys.schemas s ON s.schema_id = o.schema_id	where c.name LIKE ('%'+:REFACTORING_OLD_NAME+'%')ELSE    SELECT DISTINCT u.name, o.name     FROM dbo.syscomments c         JOIN dbo.sysobjects o ON o.id = c.id        JOIN dbo.sysusers u ON u.uid = o.uid    WHERE c.text LIKE ('%'+:REFACTORING_OLD_NAME+'%')    UNION	select DISTINCT s.name, o.name	from dbo.sysobjects o        JOIN dbo.sysusers s ON s.uid = o.uid	where o.name LIKE ('%'+:REFACTORING_OLD_NAME+'%')                   UNION	select DISTINCT s.name, o.name	from dbo.syscolumns c         JOIN dbo.sysobjects o ON o.id = c.id        JOIN dbo.sysusers s ON s.uid = o.uid	where c.name LIKE ('%'+:REFACTORING_OLD_NAME+'%')
minVer=0

[rfRules.1.14]
enabled=1
caption=(drop schema)
export=1
body=WITH stmt(ord, text) AS(	SELECT         		CASE o.type			WHEN 'SN' THEN 1			WHEN 'FN' THEN 2			WHEN 'IF' THEN 3			WHEN 'P'  THEN 4 			WHEN 'AF' THEN 5 			WHEN 'V'  THEN 6			WHEN 'U'  THEN 8			WHEN 'R'  THEN 9			WHEN 'SO' THEN 10		END,		'DROP ' +		CASE o.type			WHEN 'SN' THEN 'SYNONYM'			WHEN 'FN' THEN 'FUNCTION'			WHEN 'IF' THEN 'FUNCTION'			WHEN 'P'  THEN 'RPOCEDURE'     			WHEN 'AF' THEN 'AGGREGATE'     			WHEN 'V'  THEN 'VIEW'			WHEN 'U'  THEN 'TABLE'			WHEN 'R'  THEN 'RULE'			WHEN 'SO'  THEN 'SEQUENCE'		END + ' [' + s.name + '].[' + o.name + '];'	FROM sys.objects AS o		JOIN sys.schemas AS s ON s.[schema_id] = o.[schema_id]	WHERE o.type IN ('AF', 'FN', 'P', 'R', 'SN', 'IF', 'SO', 'U', 'V') AND s.name = :REFACTORING_SCHEMA		UNION ALL	 	SELECT 		7, 'ALTER TABLE [' + s.name + '].[' + o.name + '] DROP CONSTRAINT [' + f.name + '];'	FROM sys.foreign_keys AS f		JOIN sys.objects AS o 			ON o.[object_id] = f.parent_object_id		JOIN sys.schemas AS s			ON s.[schema_id] = o.[schema_id]	WHERE s.name = :REFACTORING_SCHEMA 		UNION ALL	 	SELECT 		11, 'DROP TYPE [' + s.name + '].[' + t.name + '];'	FROM sys.types AS t		JOIN sys.schemas AS s			ON s.[schema_id] = t.[schema_id]	WHERE s.name = :REFACTORING_SCHEMA 		UNION ALL		SELECT 20, 'DROP SCHEMA [' + :REFACTORING_SCHEMA + '];')SELECT textFROM stmtORDER BY ord; 
minVer=0

[rfRules.1.15]
enabled=1
caption=(dependencies)
export=1
body=SELECT DISTINCT '[' + s1.name + '].[' + o1.name + ']' FROM [$REFACTORING_DATABASE$].dbo.sysdepends AS dJOIN [$REFACTORING_DATABASE$].sys.all_objects AS o1	ON o1.[object_id] = d.depidJOIN [$REFACTORING_DATABASE$].sys.schemas AS s1	ON s1.[schema_id] = o1.[schema_id]JOIN [$REFACTORING_DATABASE$].sys.all_objects AS o2	ON o2.[object_id] = d.idJOIN [$REFACTORING_DATABASE$].sys.schemas AS s2	ON s2.[schema_id] = o2.[schema_id]WHERE o2.NAME = :REFACTORING_OBJECT	AND s2.name = :REFACTORING_SCHEMA
minVer=0

[rfRules.2]
enabled=1
caption=PL/SQL Refactoring
export=1
count=13
dbType=0
addSchema=1

[rfRules.2.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)ASBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$;END;
minVer=0

[rfRules.2.2]
enabled=1
caption=(procedure call)
export=1
body=$REFACTORING_OBJ_NAME$($REFACTORING_ARGS$);
minVer=0

[rfRules.2.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.2.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.2.5]
enabled=1
caption=(column search)
export=1
body=SELECT owner, nameFROM all_dependenciesWHERE referenced_owner = '$REFACTORING_SCHEMA$' AND       referenced_name  = '$REFACTORING_OBJECT$'
minVer=0

[rfRules.2.6]
enabled=1
caption=(copy grants)
export=1
body=SELECT DISTINCT     'GRANT ' || PRIVILEGE || ' ON "' || table_schema || '"."' || '$REFACTORING_NEW_NAME$' ||'" TO ' || grantee     || DECODE(grantable, 'YES', ' WITH GRANT OPTION', '')FROM all_tab_privsWHERE table_schema = '$REFACTORING_SCHEMA$' AND table_name = '$REFACTORING_OLD_NAME$'
minVer=0

[rfRules.2.7]
enabled=1
caption=(search)
export=1
body=SELECT owner, nameFROM all_dependenciesWHERE referenced_owner = :REFACTORING_SCHEMA AND       referenced_name  = :REFACTORING_OBJECTunionSELECT decode(owner,'PUBLIC',:REFACTORING_SCHEMA,owner), synonym_nameFROM all_synonymsWHERE table_owner = :REFACTORING_SCHEMA AND       table_name  = :REFACTORING_OBJECT
minVer=0

[rfRules.2.8]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.2.9]
enabled=1
caption=(table rename)
export=1
body=RENAME "$REFACTORING_OLD_NAME$" TO "$REFACTORING_NEW_NAME$"
minVer=0

[rfRules.2.10]
enabled=1
caption=(code search)
export=1
body=SELECT owner, "NAME"from all_sourceWHERE text LIKE '%' || :REFACTORING_OLD_NAME || '%'UNIONSELECT owner, object_namefrom all_objectsWHERE object_name LIKE '%' || :REFACTORING_OLD_NAME || '%'UNIONSELECT owner, table_namefrom all_tab_columnsWHERE column_name LIKE '%' || :REFACTORING_OLD_NAME || '%'UNIONSELECT "OWNER", "TRIGGER_NAME"from all_triggers
minVer=0

[rfRules.2.11]
enabled=1
caption=(dependencies)
export=1
body=SELECT DISTINCT '"' || d.referenced_owner || '"."' || d.referenced_name || '"'FROM all_dependencies dWHERE d.owner = :REFACTORING_SCHEMA	AND d."NAME" = :REFACTORING_OBJECT  
minVer=0

[rfRules.2.12]
enabled=1
caption=(column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO "$REFACTORING_NEW_NAME$"
minVer=0

[rfRules.2.13]
enabled=1
caption=(object search)
export=1
body=SELECT owner, nameFROM all_dependenciesWHERE referenced_owner = '$REFACTORING_SCHEMA$' AND       referenced_name  = '$REFACTORING_OBJECT$'
minVer=0

[rfRules.3]
enabled=1
caption=MySQL Refactoring
export=1
count=11
dbType=2
addSchema=1

[rfRules.3.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)LANGUAGE SQLBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$;END;
minVer=0

[rfRules.3.2]
enabled=1
caption=(procedure call)
export=1
body=CALL $REFACTORING_OBJ_NAME$($REFACTORING_ARGS$)
minVer=0

[rfRules.3.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.3.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.3.5]
enabled=1
caption=(search)
export=1
body=SELECT db, name FROM mysql.procWHERE body LIKE '%$REFACTORING_OLD_NAME$%'UNION ALLSELECT TABLE_SCHEMA, TABLE_NAMEFROM information_schema.VIEWSWHERE VIEW_DEFINITION LIKE '%$REFACTORING_OLD_NAME$%'
minVer=0

[rfRules.3.6]
enabled=1
caption=(copy grants)
export=1
body=SELECT concat('GRANT ', replace(replace(privilege_type, 'LOCK TABLES', 'LOCK'), 'REFERENCES', 'REFERENCE'), ' ON `', '$REFACTORING_NEW_NAME$', '` TO ', grantee)FROM information_schema.TABLE_PRIVILEGESWHERE table_schema = '$REFACTORING_SCHEMA$' AND table_name = '$REFACTORING_OLD_NAME$'
minVer=0

[rfRules.3.7]
enabled=1
caption=(table rename)
export=1
body=RENAME TABLE `$REFACTORING_SCHEMA$`.`$REFACTORING_OLD_NAME$` TO `$REFACTORING_NEW_NAME$`
minVer=0

[rfRules.3.8]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE `$REFACTORING_SCHEMA$`.`$REFACTORING_OBJECT$` ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.3.9]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE `$REFACTORING_SCHEMA$`.`$REFACTORING_OBJECT$` DROP COLUMN `$REFACTORING_OLD_NAME$`
minVer=0

[rfRules.3.10]
enabled=1
caption=(code search)
export=1
body=SELECT TABLE_SCHEMA, TABLE_NAMEFROM information_schema.VIEWSWHERE VIEW_DEFINITION LIKE concat('%', :REFACTORING_OLD_NAME, '%')UNIONSELECT TRIGGER_SCHEMA, TRIGGER_NAMEFROM information_schema.TRIGGERSWHERE TRIGGER_NAME LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR ACTION_TIMING LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR EVENT_MANIPULATION LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR ACTION_STATEMENT LIKE concat('%', :REFACTORING_OLD_NAME, '%')UNIONSELECT db, nameFROM mysql.procWHERE name LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR sql_data_access LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR `returns` LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR param_list LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR security_type LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR `comment` LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR body LIKE concat('%', :REFACTORING_OLD_NAME, '%')UNIONSELECT TABLE_SCHEMA, TABLE_NAMEFROM information_schema.`TABLES`WHERE TABLE_NAME LIKE concat('%', :REFACTORING_OLD_NAME, '%')UNIONSELECT TABLE_SCHEMA, TABLE_NAMEFROM information_schema.`COLUMNS`WHERE COLUMN_NAME LIKE concat('%', :REFACTORING_OLD_NAME, '%')
minVer=327680

[rfRules.3.11]
enabled=1
caption=(code search)
export=1
body=SELECT TABLE_SCHEMA, TABLE_NAMEFROM information_schema.VIEWSWHERE VIEW_DEFINITION LIKE concat('%', :REFACTORING_OLD_NAME, '%')UNIONSELECT db, nameFROM mysql.procWHERE name LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR sql_data_access LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR `returns` LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR param_list LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR security_type LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR `comment` LIKE concat('%', :REFACTORING_OLD_NAME, '%')	OR body LIKE concat('%', :REFACTORING_OLD_NAME, '%')UNIONSELECT TABLE_SCHEMA, TABLE_NAMEFROM information_schema.`TABLES`WHERE TABLE_NAME LIKE concat('%', :REFACTORING_OLD_NAME, '%')UNIONSELECT TABLE_SCHEMA, TABLE_NAMEFROM information_schema.`COLUMNS`WHERE COLUMN_NAME LIKE concat('%', :REFACTORING_OLD_NAME, '%')
minVer=262144

[rfRules.4]
enabled=1
caption=DB2 UDB Refactoring
export=1
count=15
dbType=3
addSchema=1

[rfRules.4.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)LANGUAGE SQLBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$;END;
minVer=0

[rfRules.4.2]
enabled=1
caption=(procedure call)
export=1
body=CALL $REFACTORING_OBJ_NAME$($REFACTORING_ARGS$)
minVer=0

[rfRules.4.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.4.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.4.5]
enabled=1
caption=(search)
export=1
body=SELECT routineschema, routinenameFROM syscat.routinesWHERE text LIKE '$REFACTORING_OLD_NAME$'UNION ALLSELECT viewschema, viewnameFROM syscat.viewsWHERE text LIKE '$REFACTORING_OLD_NAME$'
minVer=0

[rfRules.4.6]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.4.7]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" DROP COLUMN "$REFACTORING_OLD_NAME$"
minVer=0

[rfRules.4.8]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.4.9]
enabled=1
caption=(table rename)
export=1
body=RENAME "$REFACTORING_SCHEMA$"."$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.4.10]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ALTER ON "' || TABSCHEMA || '".'  || :REFACTORING_NEW_NAME || ' TO ' || GRANTEE || CASE WHEN ALTERAUTH = 'G' THEN ' WITH GRANT OPTION' ELSE '' END || ';'FROM SYSCAT.TABAUTH WHERE ALTERAUTH <> 'N'AND TABSCHEMA = :REFACTORING_SCHEMA AND TABNAME = :REFACTORING_OLD_NAMEUNION ALLSELECT 'GRANT DELETE ON "' || TABSCHEMA || '".'  || :REFACTORING_NEW_NAME || ' TO ' || GRANTEE || CASE WHEN DELETEAUTH = 'G' THEN ' WITH GRANT OPTION' ELSE '' END  || ';'FROM SYSCAT.TABAUTH WHERE DELETEAUTH <> 'N'AND TABSCHEMA = :REFACTORING_SCHEMA AND TABNAME = :REFACTORING_OLD_NAMEUNION ALLSELECT 'GRANT INDEX ON "' || TABSCHEMA || '".'  || :REFACTORING_NEW_NAME || ' TO ' || GRANTEE || CASE WHEN INDEXAUTH = 'G' THEN ' WITH GRANT OPTION' ELSE '' END  || ';'FROM SYSCAT.TABAUTH WHERE INDEXAUTH <> 'N'AND TABSCHEMA = :REFACTORING_SCHEMA AND TABNAME = :REFACTORING_OLD_NAMEUNION ALLSELECT 'GRANT INSERT ON "' || TABSCHEMA || '".'  || :REFACTORING_NEW_NAME || ' TO ' || GRANTEE || CASE WHEN INSERTAUTH = 'G' THEN ' WITH GRANT OPTION' ELSE '' END  || ';'FROM SYSCAT.TABAUTH WHERE INSERTAUTH <> 'N'AND TABSCHEMA = :REFACTORING_SCHEMA AND TABNAME = :REFACTORING_OLD_NAMEUNION ALLSELECT 'GRANT SELECT ON "' || TABSCHEMA || '".'  || :REFACTORING_NEW_NAME || ' TO ' || GRANTEE || CASE WHEN SELECTAUTH = 'G' THEN ' WITH GRANT OPTION' ELSE '' END  || ';'FROM SYSCAT.TABAUTH WHERE SELECTAUTH <> 'N'AND TABSCHEMA = :REFACTORING_SCHEMA AND TABNAME = :REFACTORING_OLD_NAMEUNION ALLSELECT 'GRANT UPDATE ON "' || TABSCHEMA || '".'  || :REFACTORING_NEW_NAME || ' TO ' || GRANTEE || CASE WHEN UPDATEAUTH = 'G' THEN ' WITH GRANT OPTION' ELSE '' END  || ';'FROM SYSCAT.TABAUTH WHERE UPDATEAUTH <> 'N'AND TABSCHEMA = :REFACTORING_SCHEMA AND TABNAME = :REFACTORING_OLD_NAMEUNION ALLSELECT 'GRANT EXECUTE ON ' || CASE WHEN r.ROUTINETYPE = 'P' THEN 'PROCEDURE' ELSE 'FUNCTION' END || ' "' ||   	r."SCHEMA" || '".'  || :REFACTORING_NEW_NAME || ' TO ' || r.GRANTEE || 	CASE WHEN r.EXECUTEAUTH = 'G' THEN ' WITH GRANT OPTION' ELSE '' END  || ';'FROM SYSCAT.ROUTINEAUTH r JOIN SYSCAT.ROUTINES r2 ON r2.SPECIFICNAME = r.SPECIFICNAME WHERE r."SCHEMA" = :REFACTORING_SCHEMA AND r2.ROUTINENAME = :REFACTORING_OLD_NAME
minVer=0

[rfRules.4.11]
enabled=1
caption=(drop schema)
export=1
body=WITH STMT(ORD, TEXT) AS (SELECT	1, 'ALTER TABLE "' || TABSCHEMA || '"."'  || TABNAME || '" DROP CONSTRAINT "' || CONSTNAME || '";'   FROM SYSCAT.TABCONST WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'F'UNION ALL	SELECT	2, 'DROP TRIGGER "' || TRIGSCHEMA || '"."'  || TRIGNAME || '";'   FROM SYSCAT.TRIGGERS WHERE TRIGSCHEMA = :REFACTORING_SCHEMAUNION ALLSELECT	3, 'DROP ALIAS "' || MODULESCHEMA || '"."'  || MODULENAME || '" FOR MODULE;'   FROM SYSCAT.MODULESWHERE MODULESCHEMA = :REFACTORING_SCHEMA	AND MODULETYPE = 'A'UNION ALLSELECT	4, 'DROP MODULE "' || MODULESCHEMA || '"."'  || MODULENAME || '";'   FROM SYSCAT.MODULESWHERE MODULESCHEMA = :REFACTORING_SCHEMA	AND MODULETYPE = 'M'UNION ALLSELECT	5, 'DROP PACKAGE "' || MODULESCHEMA || '"."'  || MODULENAME || '";'   FROM SYSCAT.MODULESWHERE MODULESCHEMA = :REFACTORING_SCHEMA	AND MODULETYPE = 'P'UNION ALLSELECT	6, 'DROP SPECIFIC FUNCTION "' || ROUTINESCHEMA || '"."'  || SPECIFICNAME || '";'   FROM SYSCAT.ROUTINESWHERE ROUTINESCHEMA = :REFACTORING_SCHEMA	AND ROUTINETYPE = 'F'	AND COALESCE(LENGTH(RTRIM(LANGUAGE)), 0) > 0	AND ROUTINEMODULENAME IS NULL	UNION ALLSELECT	7, 'DROP SPECIFIC PROCEDURE "' || ROUTINESCHEMA || '"."'  || SPECIFICNAME || '";'   FROM SYSCAT.ROUTINESWHERE ROUTINESCHEMA = :REFACTORING_SCHEMA	AND ROUTINETYPE = 'P'	AND COALESCE(LENGTH(RTRIM(LANGUAGE)), 0) > 0	AND ROUTINEMODULENAME IS NULL	UNION ALLSELECT	8, 'DROP ALIAS "' || TABSCHEMA || '"."'  || TABNAME || '";'   FROM SYSCAT."TABLES"WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'A'UNION ALLSELECT	9, 'DROP VIEW "' || TABSCHEMA || '"."'  || TABNAME || '";'   FROM SYSCAT."TABLES"WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'V'UNION ALLSELECT	9, 'DROP TABLE "' || TABSCHEMA || '"."'  || TABNAME || '";'   FROM SYSCAT."TABLES"WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'S'UNION ALLSELECT	10, 'DROP TABLE "' || TABSCHEMA || '"."'  || TABNAME || '";'   FROM SYSCAT."TABLES"WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'T'UNION ALLSELECT	11, 'DROP ALIAS "' || SEQSCHEMA || '"."'  || SEQNAME || '" FOR SEQUENCE;'   FROM SYSCAT.SEQUENCESWHERE SEQSCHEMA = :REFACTORING_SCHEMA	AND SEQTYPE = 'A'	AND ORIGIN = 'U'UNION ALLSELECT	12, 'DROP SEQUENCE "' || SEQSCHEMA || '"."'  || SEQNAME || '";'   FROM SYSCAT.SEQUENCESWHERE SEQSCHEMA = :REFACTORING_SCHEMA	AND SEQTYPE <> 'A'	AND ORIGIN = 'U'UNION ALLSELECT	13, 'DROP TYPE "' || TYPESCHEMA || '"."'  || TYPENAME || '";'   FROM SYSCAT.DATATYPESWHERE TYPESCHEMA = :REFACTORING_SCHEMAUNION ALLSELECT	14, 'DROP VARIABLE "' || VARSCHEMA || '"."'  || VARNAME || '";'   FROM SYSCAT.VARIABLESWHERE VARSCHEMA = :REFACTORING_SCHEMA	AND VARMODULENAME  IS NULLUNION ALLSELECT	15, 'DROP SCHEMA "' || :REFACTORING_SCHEMA || '" RESTRICT;'FROM sysibm.sysdummy1)SELECT TEXT FROM STMTORDER BY ORD
minVer=589832

[rfRules.4.12]
enabled=1
caption=(code search)
export=1
body=SELECT ROUTINESCHEMA, COALESCE(ROUTINEMODULENAME, SUBJECT_TYPENAME, ROUTINENAME)FROM SYSCAT.ROUTINESWHERE text LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT VIEWSCHEMA, VIEWNAMEFROM SYSCAT.VIEWSWHERE text LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TRIGSCHEMA, TRIGNAME FROM SYSCAT.TRIGGERSWHERE text LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TABSCHEMA, TABNAME FROM SYSCAT.TABLESWHERE TABNAME LIKE ('%' || :REFACTORING_OLD_NAME || '%') UNIONSELECT TABSCHEMA, TABNAME FROM SYSCAT."COLUMNS"WHERE COLNAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT SEQSCHEMA, SEQNAME  FROM SYSCAT.SEQUENCESWHERE SEQNAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TYPESCHEMA, COALESCE(TYPEMODULENAME, TYPENAME)  FROM SYSCAT.DATATYPESWHERE TYPENAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT VARSCHEMA, COALESCE(VARMODULENAME, VARNAME)  FROM SYSCAT.VARIABLESWHERE VARNAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TYPESCHEMA, COALESCE(TYPEMODULENAME, TYPENAME)  FROM SYSCAT.ATTRIBUTESWHERE ATTR_NAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TYPESCHEMA, COALESCE(TYPEMODULENAME, TYPENAME)  FROM SYSCAT.ROWFIELDSWHERE FIELDNAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT MODULESCHEMA, MODULENAME FROM SYSIBM.SYSMODULESWHERE SOURCEHEADER LIKE ('%' || :REFACTORING_OLD_NAME || '%') 	OR SOURCEBODY LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=589832

[rfRules.4.13]
enabled=1
caption=(code search)
export=1
body=SELECT ROUTINESCHEMA, COALESCE(SUBJECT_TYPENAME, ROUTINENAME)FROM SYSCAT.ROUTINESWHERE text LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT VIEWSCHEMA, VIEWNAMEFROM SYSCAT.VIEWSWHERE text LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TRIGSCHEMA, TRIGNAME FROM SYSCAT.TRIGGERSWHERE text LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TABSCHEMA, TABNAME FROM SYSCAT.TABLESWHERE TABNAME LIKE ('%' || :REFACTORING_OLD_NAME || '%') UNIONSELECT TABSCHEMA, TABNAME FROM SYSCAT."COLUMNS"WHERE COLNAME LIKE ('%' || :REFACTORING_OLD_NAME || '%') UNIONSELECT SEQSCHEMA, SEQNAME  FROM SYSCAT.SEQUENCESWHERE SEQNAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TYPESCHEMA, TYPENAME  FROM SYSCAT.DATATYPESWHERE TYPENAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNIONSELECT TYPESCHEMA, TYPENAME  FROM SYSCAT.ATTRIBUTESWHERE ATTR_NAME LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=524288

[rfRules.4.14]
enabled=1
caption=(drop schema)
export=1
body=WITH STMT(ORD, TEXT) AS (SELECT	1, 'ALTER TABLE "' || TABSCHEMA || '"."'  || TABNAME || '" DROP CONSTRAINT "' || CONSTNAME || '";'   FROM SYSCAT.TABCONST WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'F'UNION ALL	SELECT	2, 'DROP TRIGGER "' || TRIGSCHEMA || '"."'  || TRIGNAME || '";'   FROM SYSCAT.TRIGGERS WHERE TRIGSCHEMA = :REFACTORING_SCHEMAUNION ALLSELECT	6, 'DROP SPECIFIC FUNCTION "' || ROUTINESCHEMA || '"."'  || SPECIFICNAME || '";'   FROM SYSCAT.ROUTINESWHERE ROUTINESCHEMA = :REFACTORING_SCHEMA	AND ROUTINETYPE = 'F'	AND COALESCE(LENGTH(RTRIM(LANGUAGE)), 0) > 0	UNION ALLSELECT	7, 'DROP SPECIFIC PROCEDURE "' || ROUTINESCHEMA || '"."'  || SPECIFICNAME || '";'   FROM SYSCAT.ROUTINESWHERE ROUTINESCHEMA = :REFACTORING_SCHEMA	AND ROUTINETYPE = 'P'	AND COALESCE(LENGTH(RTRIM(LANGUAGE)), 0) > 0	UNION ALLSELECT	8, 'DROP ALIAS "' || TABSCHEMA || '"."'  || TABNAME || '";'   FROM SYSCAT."TABLES"WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'A'UNION ALLSELECT	9, 'DROP VIEW "' || TABSCHEMA || '"."'  || TABNAME || '";'   FROM SYSCAT."TABLES"WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'V'UNION ALLSELECT	9, 'DROP TABLE "' || TABSCHEMA || '"."'  || TABNAME || '";'   FROM SYSCAT."TABLES"WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'S'UNION ALLSELECT	10, 'DROP TABLE "' || TABSCHEMA || '"."'  || TABNAME || '";'   FROM SYSCAT."TABLES"WHERE TABSCHEMA = :REFACTORING_SCHEMA	AND "TYPE" = 'T'UNION ALLSELECT	11, 'DROP ALIAS "' || SEQSCHEMA || '"."'  || SEQNAME || '" FOR SEQUENCE;'   FROM SYSCAT.SEQUENCESWHERE SEQSCHEMA = :REFACTORING_SCHEMA	AND SEQTYPE = 'A'	AND ORIGIN = 'U'UNION ALLSELECT	12, 'DROP SEQUENCE "' || SEQSCHEMA || '"."'  || SEQNAME || '";'   FROM SYSCAT.SEQUENCESWHERE SEQSCHEMA = :REFACTORING_SCHEMA	AND SEQTYPE <> 'A'	AND ORIGIN = 'U'UNION ALLSELECT	13, 'DROP TYPE "' || TYPESCHEMA || '"."'  || TYPENAME || '";'   FROM SYSCAT.DATATYPESWHERE TYPESCHEMA = :REFACTORING_SCHEMAUNION ALLSELECT	15, 'DROP SCHEMA "' || :REFACTORING_SCHEMA || '" RESTRICT;'FROM sysibm.sysdummy1)SELECT TEXT FROM STMTORDER BY ORD
minVer=524288

[rfRules.4.15]
enabled=1
caption=(dependencies)
export=1
body=SELECT DISTINCT '"' || v.BSCHEMA || '"."' || v.BNAME || '"'  FROM SYSCAT.VIEWDEP AS vWHERE v.BTYPE IN ('F', 'T', 'V') AND	v.VIEWSCHEMA = :REFACTORING_SCHEMA AND	v.VIEWNAME = :REFACTORING_OBJECTUNION ALLSELECT DISTINCT '"' || f.BSCHEMA || '"."' || f.BNAME || '"'FROM SYSCAT.FUNCDEP AS f WHERE f.BTYPE IN ('F', 'T', 'V') AND	f.FUNCSCHEMA = :REFACTORING_SCHEMA AND	f.FUNCNAME = :REFACTORING_OBJECT
minVer=0

[rfRules.5]
enabled=1
caption=DB2 for iSeries Refactoring
export=1
count=9
dbType=3
addSchema=1

[rfRules.5.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)LANGUAGE SQLBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$;END
minVer=0

[rfRules.5.2]
enabled=1
caption=(procedure call)
export=1
body=CALL $REFACTORING_OBJ_NAME$($REFACTORING_ARGS$)
minVer=0

[rfRules.5.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.5.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.5.5]
enabled=1
caption=(search)
export=1
body=SELECT SPECIFIC_SCHEMA, SPECIFIC_NAMEFROM QSYS2.SYSPROCSWHERE ROUTINE_DEFINITION LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNION ALLSELECT TABLE_SCHEMA, TABLE_NAMEFROM QSYS2.SYSVIEWSWHERE VIEW_DEFINITION LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=0

[rfRules.5.6]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.5.7]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" DROP COLUMN "$REFACTORING_OLD_NAME$"
minVer=0

[rfRules.5.8]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.5.9]
enabled=1
caption=(table rename)
export=1
body=RENAME "$REFACTORING_SCHEMA$"."$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.6]
enabled=1
caption=PostgreSQL Refactoring
export=1
count=14
dbType=7
addSchema=1

[rfRules.6.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE OR REPLACE FUNCTION $REFACTORING_OBJ_NAME$(	$REFACTORING_ARGS+TYPES$)RETURNS INTEGER AS '    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant     * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$'LANGUAGE SQL
minVer=0

[rfRules.6.2]
enabled=1
caption=(procedure call)
export=1
body=$REFACTORING_OBJ_NAME$($REFACTORING_ARGS$);
minVer=0

[rfRules.6.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.6.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.6.5]
enabled=1
caption=(search)
export=1
body=SELECT routine_schema, routine_nameFROM information_schema.routinesWHERE routine_body LIKE '%$REFACTORING_OLD_NAME$%'UNION ALLSELECT table_schema, table_nameFROM information_schema.VIEWSWHERE view_definition LIKE '%$REFACTORING_OLD_NAME$%'
minVer=0

[rfRules.6.6]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.6.7]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" DROP COLUMN "$REFACTORING_OLD_NAME$"
minVer=0

[rfRules.6.8]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.6.9]
enabled=1
caption=(table rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.6.10]
enabled=1
caption=(code search)
export=1
body=SELECT table_schema, "table_name" FROM information_schema.viewsWHERE view_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'UNIONSELECT "routine_schema", "routine_name"FROM information_schema.routinesWHERE "routine_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR routine_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR data_type LIKE '%' || :REFACTORING_OLD_NAME || '%'  	UNION    SELECT "trigger_schema", "trigger_name" FROM information_schema.triggersWHERE "trigger_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR condition_timing LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR event_manipulation LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR event_object_table LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_orientation LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_statement LIKE '%' || :REFACTORING_OLD_NAME || '%'	UNION    SELECT n.nspname, c.relname FROM pg_catalog.pg_class c    JOIN pg_catalog.pg_namespace n        ON n.oid=c.relnamespaceWHERE c.relname LIKE '%' || :REFACTORING_OLD_NAME || '%'	UNION    SELECT table_schema, "table_name"FROM information_schema.columnsWHERE "column_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'
minVer=458756

[rfRules.6.11]
enabled=1
caption=(code search)
export=1
body=SELECT table_schema, "table_name" FROM information_schema.viewsWHERE view_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'UNIONSELECT "routine_schema", "routine_name"FROM information_schema.routinesWHERE "routine_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR routine_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR data_type LIKE '%' || :REFACTORING_OLD_NAME || '%'  	UNION    SELECT "trigger_schema", "trigger_name" FROM information_schema.triggersWHERE "trigger_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_timing LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR event_manipulation LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR event_object_table LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_orientation LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_statement LIKE '%' || :REFACTORING_OLD_NAME || '%'	UNION    SELECT n.nspname, c.relname FROM pg_catalog.pg_class c    JOIN pg_catalog.pg_namespace n        ON n.oid=c.relnamespaceWHERE c.relname LIKE '%' || :REFACTORING_OLD_NAME || '%'	UNION    SELECT table_schema, "table_name"FROM information_schema.columnsWHERE "column_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'
minVer=589825

[rfRules.6.12]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ' || g.privilege_type || ' ON "' || g.table_schema || '"."' || :REFACTORING_NEW_NAME || '" TO ' ||         CASE WHEN upper(g.grantee) = 'PUBLIC' THEN g.grantee ELSE '"' || g.grantee || '"' END ||         CASE WHEN g.is_grantable = 'YES' THEN ' WITH GRANT OPTION' ELSE '' END || ';'FROM information_schema.role_table_grants gWHERE g.table_name = :REFACTORING_OLD_NAME AND    g.table_schema = :REFACTORING_SCHEMA AND    g.grantee <> USER AND    g.grantor = USERUNION ALLSELECT 'GRANT ' || g.privilege_type || ' ON FUNCTION "' || g.routine_schema || '"."' || :REFACTORING_NEW_NAME || '"(' ||    array_to_string(array(        SELECT COALESCE (p.parameter_name, '') || ' ' || LOWER (p.parameter_mode) || ' ' || REPLACE(p.data_type, '"', '')        FROM information_schema.parameters p        WHERE p.specific_catalog = g.specific_catalog            AND p.specific_schema = g.specific_schema            AND p.specific_name = g.specific_name        ORDER BY p.ordinal_position    ), ',') ||    ') TO ' || CASE WHEN upper(g.grantee) = 'PUBLIC' THEN g.grantee ELSE '"' || g.grantee || '"' END || CASE WHEN g.is_grantable = 'YES' THEN ' WITH GRANT OPTION' ELSE '' END || ';'FROM information_schema.role_routine_grants gWHERE g.routine_name = :REFACTORING_OLD_NAME AND    g.routine_schema = :REFACTORING_SCHEMA AND    g.grantee <> USER AND    g.grantor = USER
minVer=458752

[rfRules.6.13]
enabled=1
caption=(copy grants)
export=1
body=SELECT 	'ALTER TABLE ' || 		pn.nspname || '.' || :REFACTORING_NEW_NAME || ' OWNER TO ' || pg_catalog.pg_get_userbyid(pc.relowner) || ';' ||	array_to_string(array(		SELECT CHR(10) || 'GRANT ' || a.privilege_type || ' ON TABLE "' ||			pn.nspname || '"."' || :REFACTORING_NEW_NAME || 			'" TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE pg_catalog.pg_get_userbyid(a.grantee) END || 			CASE WHEN a.is_grantable THEN ' WITH GRANT OPTION' ELSE '' END || ';'		FROM pg_catalog.aclexplode(pc.relacl) as a 	), '')FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn   WHERE 	pn.oid = pc.relnamespace 	AND pn.nspname = :REFACTORING_SCHEMA 	AND pc.relname = :REFACTORING_OLD_NAMEUNION ALLSELECT 	'ALTER FUNCTION "' || 		pn.nspname || '"."' || :REFACTORING_NEW_NAME || '"(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' || 		' OWNER TO ' || pg_catalog.pg_get_userbyid(pp.proowner) || ';' ||	CASE WHEN pp.proacl IS NOT NULL THEN		CASE WHEN NOT EXISTS (SELECT 1 FROM pg_catalog.aclexplode(pp.proacl) as a WHERE a.grantee = 0) THEN			CHR(10) || 'REVOKE ALL ON FUNCTION "' ||			pn.nspname || '"."' || :REFACTORING_NEW_NAME || '"(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' || 			' FROM public;'		ELSE ''		END ||		array_to_string(array(			SELECT CHR(10) || 'GRANT ' || a.privilege_type || ' ON FUNCTION "' ||				pn.nspname || '"."' || :REFACTORING_NEW_NAME || '"(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' || 			 	' TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE pg_catalog.pg_get_userbyid(a.grantee) END || 			 	CASE WHEN a.is_grantable THEN ' WITH GRANT OPTION' ELSE '' END || ';'			FROM pg_catalog.aclexplode(pp.proacl) as a 		), '')	ELSE ''	END FROM pg_catalog.pg_proc pp, pg_catalog.pg_namespace pn   WHERE 	pn.oid = pp.pronamespace 	AND pn.nspname = :REFACTORING_SCHEMA	AND pp.proname = :REFACTORING_OLD_NAME
minVer=524292

[rfRules.6.14]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ' || g.privilege_type || ' ON "' || g.table_schema || '".' || :REFACTORING_NEW_NAME || ' TO ' ||         g.grantee || CASE WHEN g.is_grantable = 'YES' THEN ' WITH GRANT OPTION' ELSE '' ENDFROM information_schema.role_table_grants gWHERE g.table_name = :REFACTORING_OLD_NAME AND	g.table_schema = :REFACTORING_SCHEMA AND	g.grantee <> USER AND	g.grantor = USERUNION ALLSELECT 'GRANT ' || g.privilege_type || ' ON FUNCTION "' || g.routine_schema || '".' || :REFACTORING_NEW_NAME || '(' ||	array_to_string(array(		SELECT COALESCE (p.parameter_name, '') || ' ' || LOWER (p.parameter_mode) || ' ' || REPLACE (p.data_type, '"', '')		FROM information_schema.parameters p		WHERE p.specific_catalog = g.specific_catalog			AND p.specific_schema = g.specific_schema			AND p.specific_name = g.specific_name		ORDER BY p.ordinal_position	), ',') ||	') TO ' || g.grantee || CASE WHEN g.is_grantable = 'YES' THEN ' WITH GRANT OPTION' ELSE '' ENDFROM information_schema.role_routine_grants gWHERE g.routine_name = :REFACTORING_OLD_NAME AND	g.routine_schema = :REFACTORING_SCHEMA AND	g.grantee <> USER AND	g.grantor = USER
minVer=0

[rfRules.7]
enabled=1
caption=Sybase ASE Refactoring 
export=1
count=13
dbType=4
addSchema=1

[rfRules.7.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)ASBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$    RETURN @@ERROREND
minVer=0

[rfRules.7.2]
enabled=1
caption=(procedure call)
export=1
body=EXECUTE $REFACTORING_OBJ_NAME$ $REFACTORING_ARGS$
minVer=0

[rfRules.7.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.7.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.7.5]
enabled=1
caption=(search)
export=1
body=SELECT DISTINCT u.name, o.name FROM dbo.syscomments c     JOIN dbo.sysobjects o ON o.id = c.id    JOIN dbo.sysusers u ON u.uid = o.uidWHERE c.text LIKE '%$REFACTORING_OLD_NAME$%'
minVer=0

[rfRules.7.6]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE [$REFACTORING_SCHEMA$].[$REFACTORING_OBJECT$] ADD $REFACTORING_NEW_NAME$
minVer=0

[rfRules.7.7]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE [$REFACTORING_SCHEMA$].[$REFACTORING_OBJECT$] DROP [$REFACTORING_OLD_NAME$]
minVer=0

[rfRules.7.8]
enabled=1
caption=(column rename)
export=1
body=declare @objname varchar(255)set @objname = :REFACTORING_OBJECT+'.'+:REFACTORING_OLD_NAMEEXEC sp_rename @objname, :REFACTORING_NEW_NAME, 'column'
minVer=0

[rfRules.7.9]
enabled=1
caption=(table rename)
export=1
body=EXEC sp_rename :REFACTORING_OLD_NAME, :REFACTORING_NEW_NAME
minVer=0

[rfRules.7.10]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ' + CASE 	WHEN p.[action] = 193 THEN 'SELECT'	WHEN p.[action] = 195 THEN 'INSERT'	WHEN p.[action] = 196 THEN 'DELETE'	WHEN p.[action] = 197 THEN 'UPDATE'	WHEN p.[action] = 224 THEN 'EXECUTE'	ELSE '' END + ' ON '+ :REFACTORING_NEW_NAME + ' TO ' + u2.[name] + 	CASE WHEN p.protecttype = 0 THEN ' WITH GRANT OPTION' ELSE '' END   FROM sysprotects pJOIN sysobjects o ON o.[id] = p.[id]JOIN sysusers u ON u.uid = o.uidJOIN sysusers u2 ON u2.uid = p.uidWHERE u.[name] = :REFACTORING_SCHEMA AND o.[name] = :REFACTORING_OLD_NAME AND p.protecttype <> 2
minVer=0

[rfRules.7.11]
enabled=1
caption=(code search)
export=1
body=SELECT u.name, o.nameFROM dbo.syscomments c    JOIN dbo.sysobjects o        ON o.id = c.id    JOIN dbo.sysusers u        ON u.uid = o.uidWHERE c.text LIKE ('%' + :REFACTORING_OLD_NAME + '%')UNIONSELECT s.name, o.nameFROM dbo.sysobjects o    JOIN dbo.sysusers s        ON s.uid = o.uidWHERE o.name LIKE ('%' + :REFACTORING_OLD_NAME + '%')    AND o.type IN ('U', 'S', 'V', 'P', 'X', 'RF', 'FN', 'TF', 'IF', 'PC', 'FT', 'FS', 'SF', 'TR')                UNIONSELECT s.name, o.nameFROM dbo.syscolumns c    JOIN dbo.sysobjects o        ON o.id = c.id    JOIN dbo.sysusers s        ON s.uid = o.uidWHERE c.name LIKE ('%' + :REFACTORING_OLD_NAME + '%')    AND c.number = 0
minVer=0

[rfRules.7.12]
enabled=1
caption=(dependencies)
export=1
body=SELECT '[' + u2.[name] + '].[' + o2.[name] + ']'FROM [$REFACTORING_DATABASE$].dbo.sysdepends AS dJOIN [$REFACTORING_DATABASE$].dbo.sysobjects AS o1	ON d.id = o1.idJOIN [$REFACTORING_DATABASE$].dbo.sysusers AS u1	ON u1.uid = o1.uidJOIN [$REFACTORING_DATABASE$].dbo.sysobjects AS o2	ON d.depid = o2.idJOIN [$REFACTORING_DATABASE$].dbo.sysusers AS u2	ON u2.uid = o2.uidWHERE u1.[name] = :REFACTORING_SCHEMA AND	o1.[name] = :REFACTORING_OBJECT
minVer=0

[rfRules.7.13]
enabled=1
caption=(procedure rename)
export=1
body=EXEC sp_rename '[$REFACTORING_SCHEMA$].[$REFACTORING_OLD_NAME$]', '$REFACTORING_NEW_NAME$', 'OBJECT'
minVer=0

[rfRules.8]
enabled=1
caption=Sybase ASA Refactoring 
export=1
count=10
dbType=5
addSchema=1

[rfRules.8.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)ASBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$    RETURN @@ERROREND
minVer=0

[rfRules.8.2]
enabled=1
caption=(procedure call)
export=1
body=EXECUTE $REFACTORING_OBJ_NAME$ $REFACTORING_ARGS$
minVer=0

[rfRules.8.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.8.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.8.5]
enabled=1
caption=(search)
export=1
body=SELECT DISTINCT u.name, o.name FROM dbo.syscomments c     JOIN dbo.sysobjects o ON o.id = c.id    JOIN dbo.sysusers u ON u.uid = o.uidWHERE c.text LIKE '%$REFACTORING_OLD_NAME$%'
minVer=0

[rfRules.8.6]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE [$REFACTORING_SCHEMA$].[$REFACTORING_OBJECT$] DELETE [$REFACTORING_OLD_NAME$]
minVer=0

[rfRules.8.7]
enabled=1
caption=(table rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME $REFACTORING_NEW_NAME$
minVer=0

[rfRules.8.8]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME "$REFACTORING_OLD_NAME$" TO "$REFACTORING_NEW_NAME$"
minVer=0

[rfRules.8.9]
enabled=1
caption=(code search)
export=1
body=SELECT u.name, o.nameFROM dbo.syscomments c    JOIN dbo.sysobjects o        ON o.id = c.id    JOIN dbo.sysusers u        ON u.uid = o.uidWHERE c.text LIKE ('%' + :REFACTORING_OLD_NAME + '%')UNIONSELECT s.name, o.nameFROM dbo.sysobjects o    JOIN dbo.sysusers s        ON s.uid = o.uidWHERE o.name LIKE ('%' + :REFACTORING_OLD_NAME + '%')    AND o.type IN ('U', 'S', 'V', 'P', 'X', 'RF', 'FN', 'TF', 'IF', 'PC', 'FT', 'FS', 'SF', 'TR')                UNIONSELECT s.name, o.nameFROM dbo.syscolumns c    JOIN dbo.sysobjects o        ON o.id = c.id    JOIN dbo.sysusers s        ON s.uid = o.uidWHERE c.name LIKE ('%' + :REFACTORING_OLD_NAME + '%')    AND c.number = 0
minVer=0

[rfRules.8.10]
enabled=1
caption=(object rename)
export=1
body=EXEC sp_rename '$REFACTORING_SCHEMA$.$REFACTORING_OLD_NAME$', '$REFACTORING_NEW_NAME$', 'OBJECT'
minVer=0

[rfRules.9]
enabled=1
caption=Amazon Redshift Refactoring
export=1
count=9
dbType=8
addSchema=1

[rfRules.9.1]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.9.2]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.9.3]
enabled=1
caption=(search)
export=1
body=SELECT table_schema, table_nameFROM information_schema.VIEWSWHERE view_definition LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=0

[rfRules.9.4]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.9.5]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" DROP COLUMN "$REFACTORING_OLD_NAME$"
minVer=0

[rfRules.9.6]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.9.7]
enabled=1
caption=(table rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.9.8]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ' || g.privilege_type || ' ON "' || g.table_schema || '"."' || :REFACTORING_NEW_NAME || '" TO "' ||         g.grantee || '"' || CASE WHEN g.is_grantable = 'YES' THEN ' WITH GRANT OPTION' ELSE '' ENDFROM information_schema.role_table_grants gWHERE g.table_name = :REFACTORING_OLD_NAME AND	g.table_schema = :REFACTORING_SCHEMA AND	g.grantee <> USER AND	g.grantor = USER
minVer=0

[rfRules.9.9]
enabled=1
caption=(code search)
export=1
body=SELECT table_schema, "table_name" FROM information_schema.viewsWHERE view_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'UNIONSELECT "routine_schema", "routine_name"FROM information_schema.routinesWHERE "routine_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'    OR routine_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'    OR data_type LIKE '%' || :REFACTORING_OLD_NAME || '%'     UNION    -- table and view columnsSELECT n.nspname, o.relnameFROM pg_catalog.pg_attribute a     JOIN pg_catalog.pg_class o ON o.oid = a.attrelid AND o.relkind IN ('r', 'v')     JOIN pg_catalog.pg_namespace n ON n.oid = o.relnamespaceWHERE a.attnum > 0    AND a.attname LIKE '%' || :REFACTORING_OLD_NAME || '%'UNION    SELECT n.nspname, c.relname FROM pg_catalog.pg_class c    JOIN pg_catalog.pg_namespace n        ON n.oid=c.relnamespaceWHERE c.relname LIKE '%' || :REFACTORING_OLD_NAME || '%'
minVer=0

[rfRules.10]
enabled=1
caption=SQLite Refactoring
export=1
count=5
dbType=9
addSchema=1

[rfRules.10.1]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.10.2]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.10.3]
enabled=1
caption=(search)
export=1
body=SELECT '$REFACTORING_SCHEMA$', nameFROM $REFACTORING_SCHEMA$.sqlite_masterWHERE sql LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=0

[rfRules.10.4]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.10.5]
enabled=1
caption=(table rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.11]
enabled=1
caption=Netezza Refactoring
export=1
count=14
dbType=10
addSchema=1

[rfRules.11.1]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.11.2]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.11.3]
enabled=1
caption=(search)
export=1
body=SELECT u.usename AS schemaname,	CASE WHEN o.objname LIKE '%#' || o.objid		THEN substring(o.objname, 1, strpos(o.objname, '#') - 1)		ELSE o.objname	END AS object_name   FROM _t_object AS o		JOIN _t_object_classes AS c			on c.objclass = o.objclass		JOIN _t_user AS u			ON u.usesysid = o.objowner		JOIN _t_database AS d    		ON d.oid = o.objdbWHERE c.classname IN ('TABLE',                    'VIEW',                    'MATERIALIZED VIEW',                    'SEQUENCE',                    'EXTERNAL TABLE',                    'PROCEDURE',                    'TRIGGER',                    'FUNCTION',                    'SYNONYM',                    'SYSTEM TABLE',                    'SYSTEM VIEW',                    'SYSTEM SEQ',					'SYSTEM MVIEW',					'MANAGEMENT TABLE' )	AND o.objclass > 0	AND o.objname LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=0

[rfRules.11.4]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.11.5]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" DROP COLUMN "$REFACTORING_OLD_NAME$"
minVer=0

[rfRules.11.6]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.11.7]
enabled=1
caption=(table rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OLD_NAME$" RENAME TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.11.8]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)RETURN INTEGERLANGUAGE NZPLSQL ASBEGIN_PROCBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$	RETURN 0;EXCEPTION WHEN OTHERS THEN	RAISE NOTICE 'Exception Raised: %', SQLERRM;END;END_PROC;
minVer=0

[rfRules.11.9]
enabled=1
caption=(procedure call)
export=1
body=CALL $REFACTORING_OBJ_NAME$($REFACTORING_ARGS$)
minVer=0

[rfRules.11.10]
enabled=1
caption=(code search)
export=1
body=SELECT u.usename AS schemaname,	CASE WHEN o.objname LIKE '%#' || o.objid		THEN substring(o.objname, 1, strpos(o.objname, '#') - 1)		ELSE o.objname	END AS object_name   FROM _t_object AS o		JOIN _t_object_classes AS c			on c.objclass = o.objclass		JOIN _t_user AS u			ON u.usesysid = o.objowner		JOIN _t_database AS d    		ON d.oid = o.objdbWHERE c.classname IN ('TABLE',                    'VIEW',                    'MATERIALIZED VIEW',                    'SEQUENCE',                    'EXTERNAL TABLE',                    'PROCEDURE',                    'TRIGGER',                    'FUNCTION',                    'SYNONYM',                    'SYSTEM TABLE',                    'SYSTEM VIEW',                    'SYSTEM SEQ',					'SYSTEM MVIEW',					'MANAGEMENT TABLE' )	AND o.objclass > 0	AND o.objname LIKE ('%' || :REFACTORING_OLD_NAME || '%')								UNIONSELECT c.owner, c.nameFROM    _v_relation_column AS cWHERE    c.attname LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=458752

[rfRules.11.11]
enabled=1
caption=(code search)
export=1
body=SELECT u.objname AS schemaname,	CASE WHEN o.objname LIKE '%#' || o.objid		THEN substring(o.objname, 1, strpos(o.objname, '#') - 1)		ELSE o.objname	END AS object_name   FROM _t_object AS o		JOIN _t_object_classes AS c			on c.objclass = o.objclass		JOIN _t_object AS u			ON u.objid = o.objschemaoid		JOIN _t_object_classes as sc			ON sc.objclass = u.objclass			AND sc.classname = 'SCHEMA'					JOIN _t_database AS d    		ON d.oid = o.objdbWHERE c.classname IN ('TABLE',                    'VIEW',                    'MATERIALIZED VIEW',                    'SEQUENCE',                    'EXTERNAL TABLE',                    'PROCEDURE',                    'TRIGGER',                    'FUNCTION',                    'SYNONYM',                    'SYSTEM TABLE',                    'SYSTEM VIEW',                    'SYSTEM SEQ',					'SYSTEM MVIEW',					'MANAGEMENT TABLE' )	AND o.objclass > 0	AND o.objname LIKE ('%' || :REFACTORING_OLD_NAME || '%')								UNIONSELECT c.schema, c.nameFROM    DEFINITION_SCHEMA._v_relation_column_xdb AS cWHERE    c.attname LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=458753

[rfRules.11.12]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ' ||       substr(		   CASE WHEN (mod (privileges, 2) / 1) = 1 THEN ', LIST' ELSE '' END || 		   CASE WHEN (mod (privileges, 4) / 2) = 1 THEN ', SELECT' ELSE '' END ||		   CASE WHEN (mod (privileges, 8) / 4) = 1 THEN ', INSERT' ELSE '' END ||		   CASE WHEN (mod (privileges, 16) / 8) = 1 THEN ', UPDATE' ELSE '' END ||		   CASE WHEN (mod (privileges, 32) / 16) = 1 THEN ', DELETE' ELSE '' END ||		   CASE WHEN (mod (privileges, 64) / 32) = 1 THEN ', TRUNCATE' ELSE '' END ||		   CASE WHEN (mod (privileges, 128) / 64) = 1 THEN ', LOCK' ELSE '' END ||		   CASE WHEN (mod (privileges, 256) / 128) = 1 THEN ', ALTER' ELSE '' END ||		   CASE WHEN (mod (privileges, 512) / 256) = 1 THEN ', DROP' ELSE '' END ||		   CASE WHEN (mod (privileges, 1024) / 512) = 1 THEN ', ABORT' ELSE '' END ||		   CASE WHEN (mod (privileges, 4096) / 2048) = 1 THEN ', LOAD' ELSE '' END ||		   CASE WHEN (mod (privileges, 8192) / 4096) = 1 THEN ', GENSTATS' ELSE '' END ||		   CASE WHEN (mod (privileges, 32768) / 16384) = 1 THEN ', GROOM' ELSE '' END ||		   CASE WHEN (mod (privileges, 16384) / 8192) = 1 THEN ', EXECUTE' ELSE '' END ||		   CASE WHEN (mod (privileges, 131072) / 65536) = 1 THEN ', LABEL ACCESS' ELSE '' END ||		   CASE WHEN (mod (privileges, 262144) / 131072) = 1 THEN ', LABEL RESTRICT' ELSE '' END ||		   CASE WHEN (mod (privileges, 524288) / 262144) = 1 THEN ', LABEL EXPAND' ELSE '' END ||		   CASE WHEN (mod (privileges, 1048576) / 524288) = 1 THEN ', EXECUTE AS' ELSE '' END, 3) ||		' ON "' || d.database || '"."' || s.usename || '"."' || o.objname || 		'" TO "' ||  NVL(u.username, g.groupname) || '"' AS permissionsFROM   (       	SELECT UOPDB        AS dbid,       	       UOPOBJECT    AS objid,       	       UOPOBJPRIV   AS privileges,       	       UOPUSER      AS userid,       	       NULL::INT4   AS groupid       	FROM   _t_usrobj_priv       	WHERE  UOPOBJECT != 0 -- ignore admin privileges       	UNION ALL       	SELECT GOPDB        AS dbid,       	       GOPOBJECT    AS objid,       	       GOPOBJPRIV   AS privileges,       	       NULL::INT4   AS userid,       	       GOPGROUP     AS groupid       	FROM   _t_grpobj_priv       	WHERE  GOPOBJECT != 0 -- ignore admin privileges       		AND NOT (GOPDB = 0::OID -- ignore Global objects granted to PUBLIC       			AND GOPGROUP = (SELECT OBJID FROM _v_group WHERE GROUPNAME = 'PUBLIC'))        )                  AS t       JOIN _T_OBJECT AS o            ON  t.objid = o.objid       JOIN _V_DATABASE AS d            ON  t.dbid = d.objid            AND t.dbid != 0::OID -- ignore Global virtual database 	   JOIN _T_USER AS s			ON s.usesysid = o.objowner       LEFT JOIN _V_USER AS u            ON  t.userid = u.objid       LEFT JOIN _V_GROUP AS g            ON  t.groupid = g.objidWHERE d.database = :REFACTORING_DATABASE	AND s.usename = :REFACTORING_SCHEMA 	AND o.objname = :REFACTORING_OLD_NAME
minVer=458752

[rfRules.11.13]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ' ||       substr(		   CASE WHEN (mod (privileges, 2) / 1) = 1 THEN ', LIST' ELSE '' END || 		   CASE WHEN (mod (privileges, 4) / 2) = 1 THEN ', SELECT' ELSE '' END ||		   CASE WHEN (mod (privileges, 8) / 4) = 1 THEN ', INSERT' ELSE '' END ||		   CASE WHEN (mod (privileges, 16) / 8) = 1 THEN ', UPDATE' ELSE '' END ||		   CASE WHEN (mod (privileges, 32) / 16) = 1 THEN ', DELETE' ELSE '' END ||		   CASE WHEN (mod (privileges, 64) / 32) = 1 THEN ', TRUNCATE' ELSE '' END ||		   CASE WHEN (mod (privileges, 128) / 64) = 1 THEN ', LOCK' ELSE '' END ||		   CASE WHEN (mod (privileges, 256) / 128) = 1 THEN ', ALTER' ELSE '' END ||		   CASE WHEN (mod (privileges, 512) / 256) = 1 THEN ', DROP' ELSE '' END ||		   CASE WHEN (mod (privileges, 1024) / 512) = 1 THEN ', ABORT' ELSE '' END ||		   CASE WHEN (mod (privileges, 4096) / 2048) = 1 THEN ', LOAD' ELSE '' END ||		   CASE WHEN (mod (privileges, 8192) / 4096) = 1 THEN ', GENSTATS' ELSE '' END ||		   CASE WHEN (mod (privileges, 32768) / 16384) = 1 THEN ', GROOM' ELSE '' END ||		   CASE WHEN (mod (privileges, 16384) / 8192) = 1 THEN ', EXECUTE' ELSE '' END ||		   CASE WHEN (mod (privileges, 131072) / 65536) = 1 THEN ', LABEL ACCESS' ELSE '' END ||		   CASE WHEN (mod (privileges, 262144) / 131072) = 1 THEN ', LABEL RESTRICT' ELSE '' END ||		   CASE WHEN (mod (privileges, 524288) / 262144) = 1 THEN ', LABEL EXPAND' ELSE '' END ||		   CASE WHEN (mod (privileges, 1048576) / 524288) = 1 THEN ', EXECUTE AS' ELSE '' END, 3) ||		' ON "' || d.datname || '"."' || s.objname || '"."' || o.objname || 		'" TO "' ||  NVL(u.username, g.groupname) || '"' AS permissionsFROM   (       	SELECT UOPDB        AS dbid,       	       UOPOBJECT    AS objid,       	       UOPOBJPRIV   AS privileges,       	       UOPUSER      AS userid,       	       NULL::INT4   AS groupid       	FROM   _t_usrobj_priv       	WHERE  UOPOBJECT != 0 -- ignore admin privileges       	UNION ALL       	SELECT GOPDB        AS dbid,       	       GOPOBJECT    AS objid,       	       GOPOBJPRIV   AS privileges,       	       NULL::INT4   AS userid,       	       GOPGROUP     AS groupid       	FROM   _t_grpobj_priv       	WHERE  GOPOBJECT != 0 -- ignore admin privileges       		AND NOT (GOPDB = 0::OID -- ignore Global objects granted to PUBLIC       			AND GOPGROUP = (SELECT OBJID FROM _v_group WHERE GROUPNAME = 'PUBLIC'))        )                  AS t       JOIN _t_object AS o            ON  t.objid = o.objid       JOIN _t_database AS d    		ON d.oid = t.dbid		JOIN _t_object AS s			ON s.objid = o.objschemaoid		JOIN _t_object_classes as sc			ON sc.objclass = s.objclass			AND sc.classname = 'SCHEMA'	       LEFT JOIN _v_user AS u            ON  t.userid = u.objid       LEFT JOIN _v_group AS g            ON  t.groupid = g.objidWHERE d.datname = :REFACTORING_DATABASE	AND s.objname = :REFACTORING_SCHEMA 	AND o.objname = :REFACTORING_OLD_NAME
minVer=458753

[rfRules.11.14]
enabled=1
caption=(drop schema)
export=1
body=SELECT 'DROP SCHEMA "' || :REFACTORING_SCHEMA || '";'
minVer=0

[rfRules.12]
enabled=1
caption=Greenplum Refactoring
export=1
count=13
dbType=12
addSchema=1

[rfRules.12.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE FUNCTION $REFACTORING_OBJ_NAME$()RETURNS INTEGER AS $^$^    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant     * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$$^$^LANGUAGE SQL
minVer=0

[rfRules.12.2]
enabled=1
caption=(procedure call)
export=1
body=$REFACTORING_OBJ_NAME$($REFACTORING_ARGS$);
minVer=0

[rfRules.12.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.12.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.12.5]
enabled=1
caption=(search)
export=1
body=SELECT routine_schema, routine_nameFROM information_schema.routinesWHERE routine_definition LIKE ('%' || :REFACTORING_OLD_NAME || '%')UNION ALLSELECT table_schema, table_nameFROM information_schema.VIEWSWHERE view_definition LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=0

[rfRules.12.6]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.12.7]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" DROP COLUMN "$REFACTORING_OLD_NAME$"
minVer=0

[rfRules.12.8]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.12.9]
enabled=1
caption=(table rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.12.10]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ' || g.privilege_type || ' ON "' || g.table_schema || '"."' || :REFACTORING_NEW_NAME || '" TO ' ||         CASE WHEN upper(g.grantee) = 'PUBLIC' THEN g.grantee ELSE '"' || g.grantee || '"' END ||         CASE WHEN g.is_grantable = 'YES' THEN ' WITH GRANT OPTION' ELSE '' END || ';'FROM information_schema.role_table_grants gWHERE g.table_name = :REFACTORING_OLD_NAME AND    g.table_schema = :REFACTORING_SCHEMA AND    g.grantee <> USER AND    g.grantor = USERUNION ALLSELECT 'GRANT ' || g.privilege_type || ' ON FUNCTION "' || g.routine_schema || '"."' || :REFACTORING_NEW_NAME || '"(' ||    array_to_string(array(        SELECT COALESCE (p.parameter_name, '') || ' ' || LOWER (p.parameter_mode) || ' ' || REPLACE (p.data_type, '"', '')        FROM information_schema.parameters p        WHERE p.specific_catalog = g.specific_catalog            AND p.specific_schema = g.specific_schema            AND p.specific_name = g.specific_name        ORDER BY p.ordinal_position    ), ',') ||    ') TO ' || CASE WHEN upper(g.grantee) = 'PUBLIC' THEN g.grantee ELSE '"' || g.grantee || '"' END || CASE WHEN g.is_grantable = 'YES' THEN ' WITH GRANT OPTION' ELSE '' END || ';'FROM information_schema.role_routine_grants gWHERE g.routine_name = :REFACTORING_OLD_NAME AND    g.routine_schema = :REFACTORING_SCHEMA AND    g.grantee <> USER AND    g.grantor = USER
minVer=458752

[rfRules.12.11]
enabled=1
caption=(code search)
export=1
body=SELECT table_schema, "table_name" FROM information_schema.viewsWHERE view_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'UNIONSELECT "routine_schema", "routine_name"FROM information_schema.routinesWHERE "routine_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR routine_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR data_type LIKE '%' || :REFACTORING_OLD_NAME || '%'  	UNION    SELECT "trigger_schema", "trigger_name" FROM information_schema.triggersWHERE "trigger_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR condition_timing LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR event_manipulation LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR event_object_table LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_orientation LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_statement LIKE '%' || :REFACTORING_OLD_NAME || '%'	UNION    SELECT n.nspname, c.relname FROM pg_catalog.pg_class c    JOIN pg_catalog.pg_namespace n        ON n.oid=c.relnamespaceWHERE c.relname LIKE '%' || :REFACTORING_OLD_NAME || '%'	UNION    SELECT table_schema, "table_name"FROM information_schema.columnsWHERE "column_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'
minVer=458756

[rfRules.12.12]
enabled=1
caption=(code search)
export=1
body=SELECT table_schema, "table_name" FROM information_schema.viewsWHERE view_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'UNIONSELECT "routine_schema", "routine_name"FROM information_schema.routinesWHERE "routine_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR routine_definition LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR data_type LIKE '%' || :REFACTORING_OLD_NAME || '%'  	UNION    SELECT "trigger_schema", "trigger_name" FROM information_schema.triggersWHERE "trigger_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_timing LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR event_manipulation LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR event_object_table LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_orientation LIKE '%' || :REFACTORING_OLD_NAME || '%'	OR action_statement LIKE '%' || :REFACTORING_OLD_NAME || '%'	UNION    SELECT n.nspname, c.relname FROM pg_catalog.pg_class c    JOIN pg_catalog.pg_namespace n        ON n.oid=c.relnamespaceWHERE c.relname LIKE '%' || :REFACTORING_OLD_NAME || '%'	UNION    SELECT table_schema, "table_name"FROM information_schema.columnsWHERE "column_name" LIKE '%' || :REFACTORING_OLD_NAME || '%'
minVer=589825

[rfRules.12.13]
enabled=1
caption=(copy grants)
export=1
body=SELECT 	'ALTER TABLE ' || 		pn.nspname || '.' || :REFACTORING_NEW_NAME || ' OWNER TO ' || pg_catalog.pg_get_userbyid(pc.relowner) || ';' ||	array_to_string(array(		SELECT CHR(10) || 'GRANT ' || a.privilege_type || ' ON TABLE ' ||			pn.nspname || '.' || :REFACTORING_NEW_NAME || 			' TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE pg_catalog.pg_get_userbyid(a.grantee) END || 			CASE WHEN a.is_grantable THEN ' WITH GRANT OPTION' ELSE '' END || ';'		FROM pg_catalog.aclexplode(pc.relacl) as a 	), '')FROM pg_catalog.pg_class pc, pg_catalog.pg_namespace pn   WHERE 	pn.oid = pc.relnamespace 	AND pn.nspname = :REFACTORING_SCHEMA 	AND pc.relname = :REFACTORING_OLD_NAMEUNION ALLSELECT 	'ALTER FUNCTION ' || 		pn.nspname || '.' || :REFACTORING_NEW_NAME || '(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' || 		' OWNER TO ' || pg_catalog.pg_get_userbyid(pp.proowner) || ';' ||	CASE WHEN pp.proacl IS NOT NULL THEN		CASE WHEN NOT EXISTS (SELECT 1 FROM pg_catalog.aclexplode(pp.proacl) as a WHERE a.grantee = 0) THEN			CHR(10) || 'REVOKE ALL ON FUNCTION ' ||			pn.nspname || '.' || :REFACTORING_NEW_NAME || '(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' || 			' FROM public;'		ELSE ''		END ||		array_to_string(array(			SELECT CHR(10) || 'GRANT ' || a.privilege_type || ' ON FUNCTION ' ||				pn.nspname || '.' || :REFACTORING_NEW_NAME || '(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' || 			 	' TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE pg_catalog.pg_get_userbyid(a.grantee) END || 			 	CASE WHEN a.is_grantable THEN ' WITH GRANT OPTION' ELSE '' END || ';'			FROM pg_catalog.aclexplode(pp.proacl) as a 		), '')	ELSE ''	END FROM pg_catalog.pg_proc pp, pg_catalog.pg_namespace pn   WHERE 	pn.oid = pp.pronamespace 	AND pn.nspname = :REFACTORING_SCHEMA	AND pp.proname = :REFACTORING_OLD_NAME
minVer=524292

[rfRules.13]
enabled=1
caption=Teradata Refactoring
export=1
count=12
dbType=11
addSchema=1

[rfRules.13.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)BEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$END
minVer=0

[rfRules.13.2]
enabled=1
caption=(procedure call)
export=1
body=CALL $REFACTORING_OBJ_NAME$($REFACTORING_ARGS$)
minVer=0

[rfRules.13.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.13.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.13.5]
enabled=1
caption=(search)
export=1
body=SELECT DatabaseName, TableNameFROM DBC.TablesVWHERE RequestText  LIKE ('%' || :REFACTORING_OLD_NAME || '%') 	AND TemporalProperty = 'N'	AND TableKind IN ('V', 'M', 'P', 'G', 'F', 'A', 'B', 'U', 'S')
minVer=0

[rfRules.13.6]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD $REFACTORING_NEW_NAME$
minVer=0

[rfRules.13.7]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" DROP COLUMN "$REFACTORING_OLD_NAME$"
minVer=0

[rfRules.13.8]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.13.9]
enabled=1
caption=(table rename)
export=1
body=RENAME "$REFACTORING_SCHEMA$"."$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.13.10]
enabled=1
caption=(copy grants)
export=1
body=SELECT 'GRANT ' ||       CASE 		  WHEN AccessRight = 'AF ' THEN 'ALTER FUNCTION'		  WHEN AccessRight = 'AP ' THEN 'ALTER PROCEDURE'		  WHEN AccessRight = 'AS ' THEN 'ABORT SESSION'		  WHEN AccessRight = 'CD ' THEN 'CREATE DATABASE'		  WHEN AccessRight = 'CF ' THEN 'CREATE FUNCTION'		  WHEN AccessRight = 'CG ' THEN 'CREATE TRIGGER'		  WHEN AccessRight = 'CM ' THEN 'CREATE MACRO'		  WHEN AccessRight = 'CO ' THEN 'CREATE PROFILE'		  WHEN AccessRight = 'CP ' THEN 'CHECKPOINT'		  WHEN AccessRight = 'CR ' THEN 'CREATE ROLE'		  WHEN AccessRight = 'CT ' THEN 'CREATE TABLE'		  WHEN AccessRight = 'CU ' THEN 'CREATE USER'		  WHEN AccessRight = 'CV ' THEN 'CREATE VIEW'		  WHEN AccessRight = 'D ' THEN 'DELETE'		  WHEN AccessRight = 'DD ' THEN 'DROP DATABASE'		  WHEN AccessRight = 'DF ' THEN 'DROP FUNCTION'		  WHEN AccessRight = 'DG ' THEN 'DROP TRIGGER'		  WHEN AccessRight = 'DM ' THEN 'DROP MACRO'		  WHEN AccessRight = 'DO ' THEN 'DROP PROFILE'		  WHEN AccessRight = 'DP ' THEN 'DUMP'		  WHEN AccessRight = 'DR ' THEN 'DROP ROLE'		  WHEN AccessRight = 'DT ' THEN 'DROP TABLE'		  WHEN AccessRight = 'DU ' THEN 'DROP USER'		  WHEN AccessRight = 'DV ' THEN 'DROP VIEW'		  WHEN AccessRight = 'E ' THEN 'EXECUTE'		  WHEN AccessRight = 'EF ' THEN 'EXECUTE FUNCTION'		  WHEN AccessRight = 'I ' THEN 'INSERT'		  WHEN AccessRight = 'IX ' THEN 'INDEX'		  WHEN AccessRight = 'MR ' THEN 'MONITOR RESOURCE'		  WHEN AccessRight = 'MS ' THEN 'MONITOR SESSION'		  WHEN AccessRight = 'PC ' THEN 'CREATE PROCEDURE'		  WHEN AccessRight = 'PD ' THEN 'DROP PROCEDURE'		  WHEN AccessRight = 'PE ' THEN 'EXECUTE PROCEDURE'		  WHEN AccessRight = 'RO ' THEN 'REPLICATION OVERRIDE'		  WHEN AccessRight = 'R ' THEN 'RETRIEVE/SELECT'		  WHEN AccessRight = 'RF ' THEN 'REFERENCE'		  WHEN AccessRight = 'RS ' THEN 'RESTORE'		  WHEN AccessRight = 'SS ' THEN 'SET SESSION RATE'		  WHEN AccessRight = 'SR ' THEN 'SET RESOURCE RATE'		  WHEN AccessRight = 'U ' THEN 'UPDATE'       END  || ' ON "' || TRIM(DatabaseName) || '"."' || TRIM(TableName) || '" to "' || TRIM(UserName) || '";'FROM   DBC.AllRightsVWHERE DatabaseName = :REFACTORING_SCHEMA AND TableName = :REFACTORING_OLD_NAME
minVer=0

[rfRules.13.11]
enabled=1
caption=(drop schema)
export=1
body=SELECT 'DROP DATABASE "' || :REFACTORING_SCHEMA || '";'
minVer=0

[rfRules.13.12]
enabled=1
caption=(code search)
export=1
body=SELECT DatabaseName, TableNameFROM DBC.TablesVWHERE (		TableName LIKE ('%' || :REFACTORING_OLD_NAME || '%')	 OR RequestText  LIKE ('%' || :REFACTORING_OLD_NAME || '%') )	AND TemporalProperty = 'N'	AND TableKind IN ('T', 'V', 'M', 'J', 'I', 'P', 'G', 'F', 'A', 'B', 'N', 'U', 'E', 'R', 'S')	AND NOT (DatabaseName = 'DBC' AND trim(TableName) IN ('TransientJournal', 'ChangedRowJournal', 'LocalTransactionStatusTable', 								'UtilityLockJournalTable', 'LocalSessionStatusTable', 'SysRcvStatJournal',								'SavedTransactionStatusTable', 'OrdSysChngTable', 'RecoveryLockTable', 								'RecoveryPJTable', 'ALL'))								UNIONSELECT DatabaseName, TableName FROM DBC.ColumnsVWHERE ColumnName LIKE ('%' || :REFACTORING_OLD_NAME || '%')
minVer=0

[rfRules.14]
enabled=1
caption=DB2 for iSeries Refactoring (Copy)
export=1
count=9
dbType=3
addSchema=1

[rfRules.14.1]
enabled=1
caption=(procedure create)
export=1
body=CREATE PROCEDURE $REFACTORING_OBJ_NAME$(    $REFACTORING_ARGS+TYPES$)LANGUAGE SQLBEGIN    /*****************************************************************     * Time: $DATE$ $TIME$     * Author: $OSUSER$     * Comments: This procedure was generated using SQL Assistant's      * Refactoring -> Extract Procedure feature.     *****************************************************************/     $REFACTORING_CODE$;END;
minVer=0

[rfRules.14.2]
enabled=1
caption=(procedure call)
export=1
body=CALL $REFACTORING_OBJ_NAME$($REFACTORING_ARGS$)
minVer=0

[rfRules.14.3]
enabled=1
caption=(view create)
export=1
body=CREATE VIEW $REFACTORING_OBJ_NAME$ AS$REFACTORING_CODE$
minVer=0

[rfRules.14.4]
enabled=1
caption=(view call)
export=1
body=SELECT     $REFACTORING_COLUMNS$FROM $REFACTORING_OBJ_NAME$
minVer=0

[rfRules.14.5]
enabled=1
caption=(search)
export=1
body=SELECT SPECIFIC_SCHEMA, SPECIFIC_NAMEFROM QSYS2.SYSPROCSWHERE ROUTINE_DEFINITION LIKE '%$REFACTORING_OLD_NAME$%'UNION ALLSELECT TABLE_SCHEMA, TABLE_NAMEFROM QSYS2.SYSVIEWSWHERE VIEW_DEFINITION LIKE '%$REFACTORING_OLD_NAME$%'
minVer=0

[rfRules.14.6]
enabled=1
caption=(column add)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" ADD COLUMN $REFACTORING_NEW_NAME$
minVer=0

[rfRules.14.7]
enabled=1
caption=(column delete)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" DROP COLUMN "$REFACTORING_OLD_NAME$"
minVer=0

[rfRules.14.8]
enabled=1
caption=(table column rename)
export=1
body=ALTER TABLE "$REFACTORING_SCHEMA$"."$REFACTORING_OBJECT$" RENAME COLUMN "$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[rfRules.14.9]
enabled=1
caption=(table rename)
export=1
body=RENAME "$REFACTORING_SCHEMA$"."$REFACTORING_OLD_NAME$" TO $REFACTORING_NEW_NAME$
minVer=0

[utTempls]
enabled=1
caption=
export=1
count=33

[utTempls.1]
enabled=1
caption=New Table-based Unit Test (SQL Server)
export=1
count=4
dbType=1
oType=6

[utTempls.1.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/)

[utTempls.1.2]
enabled=1
caption=SELECT
export=1
body=SELECT TOP 1	$COLUMNS_V$FROM $OBJECT$IF @@ROWCOUNT != 1 	RAISERROR('No records returned from $OBJECT$', 10, 1)

[utTempls.1.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/IF @@ROWCOUNT != 1 	RAISERROR('Error updating record in $OBJECT$', 10, 1)

[utTempls.1.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/IF @@ROWCOUNT != 1 	RAISERROR('Error deleting record in $OBJECT$', 10, 1)

[utTempls.2]
enabled=1
caption=New View-based Unit Test (SQL Server)
export=1
count=1
dbType=1
oType=7

[utTempls.2.1]
enabled=1
caption=SELECT
export=1
body=SELECT TOP 1	$COLUMNS_V$FROM $OBJECT$IF @@ROWCOUNT != 1 	RAISERROR('No records returned from $OBJECT$', 10, 1)

[utTempls.3]
enabled=1
caption=New Procedure-based Unit Test (SQL Server)
export=1
count=1
dbType=1
oType=9

[utTempls.3.1]
enabled=1
caption=EXECUTE
export=1
body=EXEC $OBJECT$	$ARGS_V$=?

[utTempls.4]
enabled=1
caption=New Table-based Unit Test (Sybase ASE)
export=1
count=4
dbType=4
oType=6

[utTempls.4.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/)

[utTempls.4.2]
enabled=1
caption=SELECT
export=1
body=SELECT TOP 1	$COLUMNS_V$FROM $OBJECT$IF @@ROWCOUNT != 1 	RAISERROR('No records returned from $OBJECT$', 10, 1)

[utTempls.4.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/IF @@ROWCOUNT != 1 	RAISERROR('Error updating record in $OBJECT$', 10, 1)

[utTempls.4.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/IF @@ROWCOUNT != 1 	RAISERROR('Error deleting record in $OBJECT$', 10, 1)

[utTempls.5]
enabled=1
caption=New View-based Unit Test (Sybase ASE)
export=1
count=1
dbType=4
oType=7

[utTempls.5.1]
enabled=1
caption=SELECT
export=1
body=SELECT TOP 1	$COLUMNS_V$FROM $OBJECT$IF @@ROWCOUNT != 1 	RAISERROR('No records returned from $OBJECT$', 10, 1)

[utTempls.6]
enabled=1
caption=New Procedure-based Unit Test (Sybase ASE)
export=1
count=1
dbType=4
oType=9

[utTempls.6.1]
enabled=1
caption=EXECUTE
export=1
body=EXEC $OBJECT$	$ARGS_V$=?

[utTempls.7]
enabled=1
caption=New Table-based Unit Test (Sybase ASA)
export=1
count=4
dbType=5
oType=6

[utTempls.7.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/)

[utTempls.7.2]
enabled=1
caption=SELECT
export=1
body=SELECT TOP 1	$COLUMNS_V$FROM $OBJECT$IF @@ROWCOUNT != 1 	RAISERROR('No records returned from $OBJECT$', 10, 1)

[utTempls.7.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/IF @@ROWCOUNT != 1 	RAISERROR('Error updating record in $OBJECT$', 10, 1)

[utTempls.7.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/IF @@ROWCOUNT != 1 	RAISERROR('Error deleting record in $OBJECT$', 10, 1)

[utTempls.8]
enabled=1
caption=New View-based Unit Test (Sybase ASA)
export=1
count=1
dbType=5
oType=7

[utTempls.8.1]
enabled=1
caption=SELECT
export=1
body=SELECT TOP 1	$COLUMNS_V$FROM $OBJECT$IF @@ROWCOUNT != 1 	RAISERROR('No records returned from $OBJECT$', 10, 1)

[utTempls.9]
enabled=1
caption=New Procedure-based Unit Test (Sybase ASA)
export=1
count=1
dbType=5
oType=9

[utTempls.9.1]
enabled=1
caption=EXECUTE
export=1
body=EXEC $OBJECT$	$ARGS_V$=?

[utTempls.10]
enabled=1
caption=New Table-based Unit Test (Oracle)
export=1
count=4
dbType=0
oType=6

[utTempls.10.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.10.2]
enabled=1
caption=SELECT
export=1
body=DECLARE	v_rowcount INTEGER := 0;BEGIN	FOR rec IN 	(		SELECT 			$COLUMNS_V$		FROM $OBJECT$		WHERE rownum = 1	)	LOOP		v_rowcount := v_rowcount + 1;	END LOOP;	IF v_rowcount != 1 THEN		raise_application_error (-20001,'No records returned from $OBJECT$');	END IF;END;

[utTempls.10.3]
enabled=1
caption=UPDATE
export=1
body=BEGIN	UPDATE $OBJECT$	SET		$COLUMNS_V$=?	WHERE /*{ specify condition here }*/;	/* In case no records have been updated, NO_DATA_FOUND exception must be raised           by the database server. If multiple records have been updated, we need to	   take care of the exception handling */	IF SQL%ROWCOUNT != 1 THEN		raise_application_error (-20001,'Error updating records in $OBJECT$. Incorrect number of records affected.');	END IF;END;

[utTempls.10.4]
enabled=1
caption=DELETE
export=1
body=BEGIN	DELETE FROM $OBJECT$	WHERE /*{ specify condition here }*/;	/* In case no records have been deleted, NO_DATA_FOUND exception must be raised           by the database server. If multiple records have been deleted, we need to	   take care of the exception handling */	IF SQL%ROWCOUNT != 1 THEN		raise_application_error (-20001,'Error deleting records in $OBJECT$. Incorrect number of records affected.');	END IF;END;

[utTempls.11]
enabled=1
caption=New View-based Unit Test (Oracle)
export=1
count=1
dbType=0
oType=7

[utTempls.11.1]
enabled=1
caption=SELECT
export=1
body=DECLARE	v_rowcount INTEGER := 0;BEGIN	FOR rec IN 	(		SELECT 			$COLUMNS_V$		FROM $OBJECT$		WHERE rownum = 1	)	LOOP		v_rowcount := v_rowcount + 1;	END LOOP;	IF v_rowcount != 1 THEN		raise_application_error (-20001,'No records returned from $OBJECT$');	END IF;END;

[utTempls.12]
enabled=1
caption=New Procedure-based Unit Test (Oracle)
export=1
count=1
dbType=0
oType=9

[utTempls.12.1]
enabled=1
caption=EXECUTE
export=1
body=BEGIN	$OBJECT$		$ARGS_V$=?	;END;

[utTempls.13]
enabled=1
caption=New Table-based Unit Test (MySQL)
export=1
count=4
dbType=2
oType=6

[utTempls.13.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.13.2]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.13.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/;

[utTempls.13.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/;

[utTempls.14]
enabled=1
caption=New View-based Unit Test (MySQL)
export=1
count=1
dbType=2
oType=7

[utTempls.14.1]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.15]
enabled=1
caption=New Procedure-based Unit Test (MySQL)
export=1
count=1
dbType=2
oType=9

[utTempls.15.1]
enabled=1
caption=EXECUTE
export=1
body=CALL $OBJECT$	$ARGS_V$=?;

[utTempls.16]
enabled=1
caption=New Table-based Unit Test (PostgreSQL)
export=1
count=4
dbType=7
oType=6

[utTempls.16.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.16.2]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.16.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/;

[utTempls.16.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/;

[utTempls.17]
enabled=1
caption=New View-based Unit Test (PostgreSQL)
export=1
count=1
dbType=7
oType=7

[utTempls.17.1]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.18]
enabled=1
caption=New Procedure-based Unit Test (PostgreSQL)
export=1
count=1
dbType=7
oType=9

[utTempls.18.1]
enabled=1
caption=EXECUTE
export=1
body=CALL $OBJECT$	$ARGS_V$=?;

[utTempls.19]
enabled=1
caption=New Table-based Unit Test (MS Access)
export=1
count=4
dbType=6
oType=6

[utTempls.19.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.19.2]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$

[utTempls.19.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/;

[utTempls.19.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/;

[utTempls.20]
enabled=1
caption=New View-based Unit Test (MS Access)
export=1
count=1
dbType=6
oType=7

[utTempls.20.1]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.21]
enabled=1
caption=New Table-based Unit Test (DB2)
export=1
count=4
dbType=3
oType=6

[utTempls.21.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.21.2]
enabled=1
caption=SELECT
export=1
body=BEGIN ATOMIC	DECLARE v_rowcount INTEGER DEFAULT 0;	FOR rec AS 		SELECT 			$COLUMNS_V$		FROM $OBJECT$		FETCH FIRST 1 ROWS ONLY	DO		SET v_rowcount = v_rowcount + 1;	END FOR;	IF v_rowcount != 1 THEN		RAISE_ERROR('70001', 'No records returned from $OBJECT$');	END IF;END

[utTempls.21.3]
enabled=1
caption=UPDATE
export=1
body=BEGIN ATOMIC	UPDATE $OBJECT$	SET		$COLUMNS_V$=?	WHERE /*{ specify condition here }*/;	/* In case no records have been updated, NOT_FOUND exception must be raised           by the database server. If multiple records have been updated, we need to	   take care of the exception handling */	DECLARE v_rowcount INTEGER DEFAULT 0;	GET CURRENT DIAGNOSTICS v_rowcount = ROW_COUNT;	IF rowcount != 1 THEN		RAISE_ERROR('70001', 'Error updating records in $OBJECT$. Incorrect number of records affected.');	END IF;END

[utTempls.21.4]
enabled=1
caption=DELETE
export=1
body=BEGIN ATOMIC	DELETE FROM $OBJECT$	WHERE /*{ specify condition here }*/;	/* In case no records have been deleted, NOT_FOUND exception must be raised           by the database server. If multiple records have been deleted, we need to	   take care of the exception handling */	DECLARE v_rowcount INTEGER DEFAULT 0;	GET CURRENT DIAGNOSTICS rowcount = ROW_COUNT;	IF v_rowcount != 1 THEN		RAISE_ERROR('70001', 'Error deleting records in $OBJECT$. Incorrect number of records affected.');	END IF;END

[utTempls.22]
enabled=1
caption=New View-based Unit Test (DB2)
export=1
count=1
dbType=3
oType=7

[utTempls.22.1]
enabled=1
caption=SELECT
export=1
body=BEGIN ATOMIC	DECLARE v_rowcount INTEGER DEFAULT 0;	FOR rec AS 		SELECT 			$COLUMNS_V$		FROM $OBJECT$		FETCH FIRST 1 ROWS ONLY	DO		SET v_rowcount = v_rowcount + 1;	END FOR;	IF v_rowcount != 1 THEN		RAISE_ERROR('70001', 'No records returned from $OBJECT$');	END IF;END

[utTempls.23]
enabled=1
caption=New Procedure-based Unit Test (DB2)
export=1
count=1
dbType=3
oType=9

[utTempls.23.1]
enabled=1
caption=EXECUTE
export=1
body=CALL $OBJECT$	$ARGS_V$=?;

[utTempls.24]
enabled=1
caption=New Table-based Unit Test (Amazon Redshift)
export=1
count=4
dbType=8
oType=6

[utTempls.24.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.24.2]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.24.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/;

[utTempls.24.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/;

[utTempls.25]
enabled=1
caption=New View-based Unit Test (Amazon Redshift)
export=1
count=1
dbType=8
oType=7

[utTempls.25.1]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.26]
enabled=1
caption=New Table-based Unit Test (SQLite)
export=1
count=4
dbType=9
oType=6

[utTempls.26.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.26.2]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.26.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/;

[utTempls.26.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/;

[utTempls.27]
enabled=1
caption=New View-based Unit Test (SQLite)
export=1
count=1
dbType=9
oType=7

[utTempls.27.1]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.28]
enabled=1
caption=New Table-based Unit Test (Teradata)
export=1
count=4
dbType=11
oType=6

[utTempls.28.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.28.2]
enabled=1
caption=SELECT
export=1
body=SELECT TOP 1	$COLUMNS_V$FROM $OBJECT$;

[utTempls.28.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/;

[utTempls.28.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/;

[utTempls.29]
enabled=1
caption=New View-based Unit Test (Teradata)
export=1
count=1
dbType=11
oType=7

[utTempls.29.1]
enabled=1
caption=SELECT
export=1
body=SELECT TOP 1 	$COLUMNS_V$FROM $OBJECT$;

[utTempls.30]
enabled=1
caption=New Procedure-based Unit Test (Teradata)
export=1
count=1
dbType=11
oType=9

[utTempls.30.1]
enabled=1
caption=EXECUTE
export=1
body=CALL $OBJECT$ (	$ARGS_V$=?);

[utTempls.31]
enabled=1
caption=New Table-based Unit Test (Greenplum)
export=1
count=4
dbType=12
oType=6

[utTempls.31.1]
enabled=1
caption=INSERT
export=1
body=INSERT INTO $OBJECT$(	$COLUMNS_V$)VALUES(	/*{$COLUMNS_V$}*/);

[utTempls.31.2]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.31.3]
enabled=1
caption=UPDATE
export=1
body=UPDATE $OBJECT$SET	$COLUMNS_V$=?WHERE /*{ specify condition here }*/;

[utTempls.31.4]
enabled=1
caption=DELETE
export=1
body=DELETE FROM $OBJECT$WHERE /*{ specify condition here }*/;

[utTempls.32]
enabled=1
caption=New View-based Unit Test (Greenplum)
export=1
count=1
dbType=12
oType=7

[utTempls.32.1]
enabled=1
caption=SELECT
export=1
body=SELECT 	$COLUMNS_V$FROM $OBJECT$LIMIT 1;

[utTempls.33]
enabled=1
caption=New Procedure-based Unit Test (Greenplum)
export=1
count=1
dbType=12
oType=9

[utTempls.33.1]
enabled=1
caption=EXECUTE
export=1
body=SELECT $OBJECT$ (	$ARGS_V$=?)	;

[datagen]
enabled=1
caption=
export=1
count=55
customSet=0123456789ABCDEF
dictWords=It is not known with certainty how planets are formed.The prevailing theory is that they are formed during the collapse of a nebula into a thin disk of gas and dust. A protostar forms at the core, surrounded by a rotating protoplanetary disk. Through accretion (a process of sticky collision) dust particles in the disk steadily accumulate mass to form ever-larger bodies. Local concentrations of mass known as planetesimals form, and these accelerate the accretionprocess by drawing in additional material by theirgravitational attraction. These concentrations becomeever denser until they collapse inward under gravityto form protoplanets. After a planet reaches a diameterlarger than the Earth's moon, it begins to accumulatean extended atmosphere, greatly increasing the capture rate of the planetesimals by means of atmospheric drag. 55 123 89 USD33.12 # * ^ -

[datagen.1]
enabled=1
caption=04.country_codes.Code
export=1
columnKeys=countrycountrycode
columnRule=0

[datagen.2]
enabled=1
caption=04.country_codes.Name
export=1
columnKeys=countryname
columnRule=0

[datagen.3]
enabled=1
caption=06.dm_states.State
export=1
columnKeys=provinceregionregionname
columnRule=0

[datagen.4]
enabled=1
caption=07.europe_colleges.College
export=1
columnKeys=college
columnRule=1

[datagen.5]
enabled=1
caption=09.FR_postal.City
export=1
columnKeys=villeciudad
columnRule=0

[datagen.6]
enabled=1
caption=10.medproc.Code
export=1
columnKeys=code
columnRule=3

[datagen.7]
enabled=1
caption=12.NY_streets.Street Name
export=1
columnKeys=street
columnRule=0

[datagen.8]
enabled=1
caption=13.first_last_names.First Name
export=1
columnKeys=fname
columnRule=0

[datagen.9]
enabled=1
caption=13.first_last_names.Last Name
export=1
columnKeys=lname
columnRule=0

[datagen.10]
enabled=1
caption=14.full_names.Full Name
export=1
columnKeys=nameusernameusercontactnamestudentnamestudentcreatedbymodifiedbyownerownername
columnRule=0

[datagen.11]
enabled=1
caption=14.full_names.Full Name
export=1
columnKeys=loginlogonusuarioconexioncontrasenautilisateurouverture
columnRule=2

[datagen.12]
enabled=1
caption=16.customers.Company Name
export=1
columnKeys=customercustnamecustomernamecompanycompanyname
columnRule=0

[datagen.13]
enabled=1
caption=16.customers.Phone
export=1
columnKeys=phonetelephonetelpnonenumberfaxnumber
columnRule=0

[datagen.14]
enabled=1
caption=16.customers.Fax
export=1
columnKeys=faxtelefax
columnRule=0

[datagen.15]
enabled=1
caption=16.customers.Address
export=1
columnKeys=streetaddress
columnRule=1

[datagen.16]
enabled=1
caption=16.customers.Postal Code
export=1
columnKeys=postal
columnRule=1

[datagen.17]
enabled=1
caption=16.customers.Address
export=1
columnKeys=calleadresse
columnRule=2

[datagen.18]
enabled=1
caption=16.customers.Contact Name
export=1
columnKeys=accountnameacctname
columnRule=0

[datagen.19]
enabled=1
caption=17.orders.Ship Via
export=1
columnKeys=shipviashippercarrier
columnRule=0

[datagen.20]
enabled=1
caption=18.products.Supplier
export=1
columnKeys=suppliervendor
columnRule=0

[datagen.21]
enabled=1
caption=18.products.Product Name
export=1
columnKeys=productproductnameprodnamepoductdescproddesc
columnRule=0

[datagen.22]
enabled=1
caption=19.suppliers.Contact Title
export=1
columnKeys=titlejobtitlejobname
columnRule=0

[datagen.23]
enabled=1
caption=20.sic_code_w_industries.SIC
export=1
columnKeys=siccodesic
columnRule=0

[datagen.24]
enabled=1
caption=20.sic_code_w_industries.Industry Name
export=1
columnKeys=industryindustrynameindustry_name
columnRule=0

[datagen.25]
enabled=1
caption=23.us_counties.County Name
export=1
columnKeys=county
columnRule=3

[datagen.26]
enabled=1
caption=24.us_holidays.Holiday
export=1
columnKeys=holiday
columnRule=1

[datagen.27]
enabled=1
caption=25.us_states.State Code
export=1
columnKeys=statestateprovince
columnRule=0

[datagen.28]
enabled=1
caption=26.zip.Zip
export=1
columnKeys=zip
columnRule=0

[datagen.29]
enabled=1
caption=26.zip.State
export=1
columnKeys=state
columnRule=0

[datagen.30]
enabled=1
caption=26.zip.City
export=1
columnKeys=city
columnRule=0

[datagen.31]
enabled=1
caption=28.currencies.Currency Code
export=1
columnKeys=currency
columnRule=1

[datagen.32]
enabled=1
caption=29.science.Publication Name
export=1
columnKeys=descrcommentmemo
columnRule=1

[datagen.33]
enabled=1
caption=30.ora_books.ISBN Number
export=1
columnKeys=isbn
columnRule=1

[datagen.34]
enabled=1
caption=30.ora_books.Author Name(s)
export=1
columnKeys=author
columnRule=1

[datagen.35]
enabled=1
caption=31.shakespeare.ISBN Number
export=1
columnKeys=accountacct
columnRule=0

[datagen.36]
enabled=1
caption=32.email.email
export=1
columnKeys=email
columnRule=1

[datagen.37]
enabled=1
caption=33.ip_addresses.IP Address
export=1
columnKeys=ipipaddressip_addressipaddrip_addr
columnRule=0

[datagen.38]
enabled=1
caption=34.websites.Popular Websites
export=1
columnKeys=website
columnRule=3

[datagen.39]
enabled=1
caption=35.companies_w_url_and_desc.Company URL
export=1
columnKeys=url
columnRule=3

[datagen.40]
enabled=1
caption=36.naics_codes.NAICS Code
export=1
columnKeys=naicsnaics_codenaicscode
columnRule=0

[datagen.41]
enabled=1
caption=37.robotic_parts_price_list.Part
export=1
columnKeys=partpart_code
columnRule=0

[datagen.42]
enabled=1
caption=37.robotic_parts_price_list.Description
export=1
columnKeys=part_name
columnRule=0

[datagen.43]
enabled=1
caption=38.wine_list.Brand
export=1
columnKeys=brandbrandnamebrand_name
columnRule=0

[datagen.44]
enabled=1
caption=38.wine_list.Price
export=1
columnKeys=price
columnRule=0

[datagen.45]
enabled=1
caption=39.food_nutrients.Component
export=1
columnKeys=componentnutrientsnutrientingridient
columnRule=3

[datagen.46]
enabled=1
caption=40.departments.Department
export=1
columnKeys=deptdeptnamedept_namedepartment
columnRule=0

[datagen.47]
enabled=1
caption=41.music.Song Name
export=1
columnKeys=songsongnamesongname
columnRule=0

[datagen.48]
enabled=1
caption=41.music.Artist
export=1
columnKeys=artistartistnameartist_name
columnRule=0

[datagen.49]
enabled=1
caption=41.music.Album
export=1
columnKeys=albumtopicsubjectmatterthesisthemeeventreport
columnRule=1

[datagen.50]
enabled=1
caption=41.music.Genre
export=1
columnKeys=genre
columnRule=1

[datagen.51]
enabled=1
caption=41.music.Time
export=1
columnKeys=duration
columnRule=0

[datagen.52]
enabled=1
caption=13.first_last_names.First Name
export=1
columnKeys=firstname
columnRule=1

[datagen.53]
enabled=1
caption=13.first_last_names.Last Name
export=1
columnKeys=lastname
columnRule=1

[datagen.54]
enabled=1
caption=28.currencies.Currency Code
export=1
columnKeys=currencycurrencycode
columnRule=0

[datagen.55]
enabled=1
caption=30.ora_books.Author Name(s)
export=1
columnKeys=authorauthorname
columnRule=0

[scsPrj]
enabled=1
caption=
export=1
count=0
svnPath=
tfsPath=
gitPath=
p4Path=
cmpPath=
mergePath=
cmpType=0
mergeType=0

[bulks]
enabled=1
caption=
export=1
count=9

[bulks.1]
enabled=1
caption=SQL Server CRUD Procedures Template
export=1
count=3
dbType=1
stopOnError=0
saveLog=0
logFile=

[bulks.1.1]
enabled=1
caption=Delete
export=1
body=IF object_id('[$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$]') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types,keys)$)ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT    -- start transaction	BEGIN TRANSACTION    -- delete record using the specified criteria, 1 record deletion is expected    DELETE FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]    WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR    -- check for errors	IF @error != 0    BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR('Unable to delete record. See previous message for details.', 16, 1) 		RETURN @error    END    -- check for rows updated    IF @rowcount != 1     BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code		IF @rowcount = 0            RAISERROR('Warning. No records found for the specified criteria, while just 1 was expected.', 10, 1) 		ELSE            RAISERROR('Critical error. More than 1 record found for the specified criteria, while just 1 was expected.', 16, 1) 		RETURN 1    END     -- commit changes and return 0 code indicating successful completion    COMMIT TRANSACTION    RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.1.2]
enabled=1
caption=Get
export=1
body=IF object_id('[$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$]') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types,keys)$)ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT    -- search and return records    SELECT $COLUMNS(vertical)$     FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]    WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$     -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR	IF @error != 0    BEGIN		-- report error and exit with non-zero exit code        RAISERROR('Unable to retrieve records. See previous message for details.', 16, 1) 		RETURN @error    END    IF @rowcount = 0    BEGIN		-- report error and exit with non-zero exit code        RAISERROR('Critical error. No records found for the specified criteria.', 16, 1) 		RETURN 1    END     IF @rowcount > 1     BEGIN		-- report error and exit with non-zero exit code        RAISERROR('Warning. More than 1 record found for the specified criteria, while just 1 is expected.', 10, 1) 		RETURN 1    END     -- commit changes and return 0 code indicating successful completion	RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.1.3]
enabled=1
caption=Save
export=1
body=IF object_id('[$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$]') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types)$" = NULL")ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT, @id INT    -- start transaction	BEGIN TRANSACTION    -- check if the specified record already exists, if yes, update it, if no, create it    IF EXISTS     (             SELECT *          FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    )    BEGIN          -- insert new record         INSERT INTO [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             @$COLUMNS(vertical,updatable)$         )    END     ELSE    BEGIN         -- update existing record         UPDATE [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         SET $COLUMNS(vertical,updatable)$ = @$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    END    -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR,           @id = SCOPE_IDENTITY()	IF @error != 0    BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR('Unable to update or insert new record. See previous message for details.', 16, 1) 		RETURN @error    END    IF @rowcount != 1     BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR('Critical error. More than 1 record found for the specified criteria, just 1 is expected.', 16, 1) 		RETURN 1    END     -- commit changes and return 0 code indicating successful completion    COMMIT TRANSACTION	-- if operation type 'Add record', return result set with the last inserted column value     IF @id IS NOT NULL        SELECT @id AS NewRecordID    RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.2]
enabled=1
caption=Oracle CRUD Procedures Template
export=1
count=3
dbType=0
stopOnError=0
saveLog=0
logFile=

[bulks.2.1]
enabled=1
caption=Delete
export=1
body=CREATE OR REPLACE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,type_classes,keys)$)IS/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/    PRAGMA AUTONOMOUS_TRANSACTION;    v_rowcount INT;BEGIN    -- delete record using the specified criteria, 1 record deletion is expected    DELETE FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"    WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    -- get number of inserted/updated records    v_rowcount := SQL%ROWCOUNT;    -- check and report errors, if any, raise exception and rollback transaction    IF v_rowcount = 0 THEN        RAISE_APPLICATION_ERROR (-2022, 'Warning. No records found for the specified criteria, while just 1 was expected.');    ELSIF v_rowcount > 1 THEN        RAISE_APPLICATION_ERROR (-2021, 'Critical error. More than 1 record found for the specified criteria, while just 1 was expected.');     END IF;    -- commit transaction, if we've got here, the specified record has been deleted    COMMIT;EXCEPTION  	WHEN OTHERS THEN   	BEGIN  	    -- write debug message  	    dbms_output.put_line('An exception occurred in "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$": ' || to_char(SQLCODE) || ' - ' || SQLERRM);  	    -- undo changes  	    ROLLBACK;  	    -- re-throw exception  	    RAISE;	END;END;/-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$" TO "some user or role here"-- /

[bulks.2.2]
enabled=1
caption=Get
export=1
body=CREATE OR REPLACE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,type_classes,keys)$    , a_ResultSet OUT SYS_REFCURSOR )IS/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$**                        a_ResultSet - output parameter*                        is used to pass the result back* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/BEGIN    -- Open cursor for the result set. In case of NO_DATA_FOUND     -- an exception will be raised automatically    OPEN a_ResultSet FOR        SELECT $COLUMNS(vertical)$         FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"        WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;EXCEPTION  	WHEN OTHERS THEN   	BEGIN  	    -- write debug message  	    dbms_output.put_line('An exception occurred in "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$": ' || to_char(SQLCODE) || ' - ' || SQLERRM);  	    -- re-throw exception  	    RAISE;	END;END;/-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$" TO "some user or role here"-- /

[bulks.2.3]
enabled=1
caption=Save
export=1
body=CREATE OR REPLACE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,type_classes)$" DEFAULT NULL")IS/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/    PRAGMA AUTONOMOUS_TRANSACTION;    v_rowcount INT;BEGIN    -- check if the specified record already exists, if yes, update it, if no, create it    SELECT count(*) INTO v_rowcount    FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"    WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    IF v_rowcount = 0 THEN          -- insert new record         INSERT INTO "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             a_$COLUMNS(vertical,updatable)$         );    ELSIF v_rowcount = 1 THEN         -- update existing record         UPDATE "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         SET $COLUMNS(vertical,updatable)$ = a_$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;         -- get number of updated records         v_rowcount := SQL%ROWCOUNT;         -- check and report errors, if any, raise exception and rollback transaction         IF v_rowcount = 0 THEN -- this should never happen, but better safe than sorry            RAISE_APPLICATION_ERROR (-2022, 'Critical error. No records updated.');         END IF;    ELSE        RAISE_APPLICATION_ERROR (-2021, 'Critical error. More than 1 record found for the specified criteria, while just 1 was expected.');     END IF;    -- commit transaction, if we've got here, the specified record has been inserted/updated    COMMIT;EXCEPTION  	WHEN OTHERS THEN    BEGIN   	    -- write debug message  	    dbms_output.put_line('An exception occurred in "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$": ' || to_char(SQLCODE) || ' - ' || SQLERRM);  	    -- undo changes  	    ROLLBACK;  	    -- re-throw exception  	    RAISE;	END;END;/-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$" TO "some user or role here"-- /

[bulks.3]
enabled=1
caption=DB2 UDB CRUD Procedures Template
export=1
count=3
dbType=3
stopOnError=0
saveLog=0
logFile=

[bulks.3.1]
enabled=1
caption=Delete
export=1
body=$$ SELECT DISTINCT 'DROP PROCEDURE "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$";' || CHR(10) || CHR(13) || CHR(36) || CHR(36) || CHR(36)FROM   syscat.routinesWHERE  routineschema = '$OBJECT(ins_schema, table)$'       AND routinename = 'p_Delete$OBJECT(ins_object, table)$'       AND routinetype = 'P' $$CREATE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$"/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types,keys)$)LANGUAGE SQLMODIFIES SQL DATABEGIN    -- delete record using the specified criteria, 1 record deletion is expected    DELETE FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"    WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;END$$$-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$" TO "some user or role here" ;

[bulks.3.2]
enabled=1
caption=Get
export=1
body=$$ SELECT DISTINCT 'DROP PROCEDURE "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$";' || CHR(10) || CHR(13) || CHR(36) || CHR(36) || CHR(36)FROM   syscat.routinesWHERE  routineschema = '$OBJECT(ins_schema, table)$'       AND routinename = 'p_Get$OBJECT(ins_object, table)$'       AND routinetype = 'P' $$CREATE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$"/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types,keys)$)RESULT SETS 1LANGUAGE SQLREADS SQL DATABEGIN    -- open cursor for the specified crirteria    DECLARE c CURSOR FOR      SELECT $COLUMNS(vertical,keys)$       FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"      WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    OPEN c;END$$$-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$" TO "some user or role here" ;

[bulks.3.3]
enabled=1
caption=Save
export=1
body=$$ SELECT DISTINCT 'DROP PROCEDURE "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$";' || CHR(10) || CHR(13) || CHR(36) || CHR(36) || CHR(36)FROM   syscat.routinesWHERE  routineschema = '$OBJECT(ins_schema, table)$'       AND routinename = 'p_Save$OBJECT(ins_object, table)$'       AND routinetype = 'P'$$CREATE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$"/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types)$)LANGUAGE SQLMODIFIES SQL DATABEGIN    -- check if the specified record already exists, if yes, update it, if no, create it    IF EXISTS     (             SELECT *          FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$    )    THEN          -- insert new record         INSERT INTO "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             a_$COLUMNS(vertical,updatable)$         ) ;    ELSE         -- update existing record         UPDATE "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         SET $COLUMNS(vertical,updatable)$ = a_$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    END IF;END$$$-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$" TO "some user or role here" ;

[bulks.4]
enabled=1
caption=MySQL CRUD Procedures Template
export=1
count=3
dbType=2
stopOnError=0
saveLog=0
logFile=

[bulks.4.1]
enabled=1
caption=Delete
export=1
body=DROP PROCEDURE IF EXISTS `$OBJECT(ins_schema, table)$`.`p_Delete$OBJECT(ins_object, table)$` $$$CREATE PROCEDURE `$OBJECT(ins_schema, table)$`.`p_Delete$OBJECT(ins_object, table)$`/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types,keys)$)MODIFIES SQL DATABEGIN    -- declare exception handlers    DECLARE no_records_found CONDITION FOR SQLSTATE '99001';    DECLARE too_many_records_found CONDITION FOR SQLSTATE '99002';    DECLARE EXIT HANDLER FOR SQLEXCEPTION ROLLBACK; -- handler to rollback transaction in case of an error    -- open transaction    START TRANSACTION;    -- delete record using the specified criteria, 1 record deletion is expected    DELETE FROM `$OBJECT(ins_schema, table)$`.`$OBJECT(ins_object, table)$`    WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    -- check for rows updated and raise an exception if the value is not 1    IF ROW_COUNT() = 0 THEN        SIGNAL no_records_found SET MESSAGE_TEST='Warning. No records found for the specified criteria, while just 1 was expected.';    ELSE IF ROW_COUNT() > 1 THEN        SIGNAL too_many_records_found SET MESSAGE_TEST='Critical error. More than 1 record found for the specified criteria, while just 1 was expected.';    ELSE        -- commit transaction        COMMIT;    END IF;END$$$-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON `$OBJECT(ins_schema, table)$`.`p_Delete$OBJECT(ins_object, table)$` TO `some user or role here` ;-- $$$

[bulks.4.2]
enabled=1
caption=Get
export=1
body=DROP PROCEDURE IF EXISTS `$OBJECT(ins_schema, table)$`.`p_Get$OBJECT(ins_object, table)$`$$$CREATE PROCEDURE `$OBJECT(ins_schema, table)$`.`p_Get$OBJECT(ins_object, table)$`/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types,keys)$)READS SQL DATABEGIN    -- declare exception handlers    DECLARE no_records_found CONDITION FOR SQLSTATE '99001';    DECLARE too_many_records_found CONDITION FOR SQLSTATE '99002';	-- search and return records    SELECT $COLUMNS(vertical,keys)$     FROM `$OBJECT(ins_schema, table)$`.`$OBJECT(ins_object, table)$`    WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    -- check for rows retrieved and raise an exception if the value is not 1    IF FOUND_ROWS() = 0 THEN        SIGNAL no_records_found SET MESSAGE_TEST='Warning. No records found for the specified criteria, while just 1 was expected.';    ELSE IF FOUND_ROWS() > 1 THEN        SIGNAL too_many_records_found SET MESSAGE_TEST='Critical error. More than 1 record found for the specified criteria, while just 1 was expected.';    END IF;END$$$-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON `$OBJECT(ins_schema, table)$`.`p_Get$OBJECT(ins_object, table)$` TO `some user or role here` ;-- $$$

[bulks.4.3]
enabled=1
caption=Save
export=1
body=DROP PROCEDURE IF EXISTS `$OBJECT(ins_schema, table)$`.`p_Save$OBJECT(ins_object, table)$`$$$CREATE PROCEDURE `$OBJECT(ins_schema, table)$`.`p_Save$OBJECT(ins_object, table)$`/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types)$)MODIFIES SQL DATABEGIN    -- declare exception handlers    DECLARE no_records_found CONDITION FOR SQLSTATE '99001';    DECLARE too_many_records_found CONDITION FOR SQLSTATE '99002';    DECLARE EXIT HANDLER FOR SQLEXCEPTION ROLLBACK; -- handler to rollback transaction in case of an error    -- open transaction    START TRANSACTION;    -- check if the specified record already exists, if yes, update it, if no, create it    IF EXISTS     (             SELECT *          FROM `$OBJECT(ins_schema, table)$`.`$OBJECT(ins_object, table)$`         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$    )    THEN          -- insert new record         INSERT INTO `$OBJECT(ins_schema, table)$`.`$OBJECT(ins_object, table)$`         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             a_$COLUMNS(vertical,updatable)$         );    ELSE         -- update existing record         UPDATE `$OBJECT(ins_schema, table)$`.`$OBJECT(ins_object, table)$`         SET $COLUMNS(vertical,updatable)$ = a_$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    END IF;    -- check for rows updated and raise an exception if the value is not 1    IF ROW_COUNT() = 0 THEN        SIGNAL no_records_found SET MESSAGE_TEST='Critical error. No records updated.';    ELSE IF ROW_COUNT() > 1 THEN        SIGNAL too_many_records_found SET MESSAGE_TEST='Critical error. More than 1 record found for the specified criteria, while just 1 was expected.';    ELSE        -- commit transaction        COMMIT;    END IF;END$$$-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON `$OBJECT(ins_schema, table)$`.`p_Save$OBJECT(ins_object, table)$` TO `some user or role here` ;-- $$$

[bulks.5]
enabled=1
caption=PostgreSQL CRUD Procedures Template
export=1
count=3
dbType=7
stopOnError=0
saveLog=0
logFile=

[bulks.5.1]
enabled=1
caption=Delete
export=1
body=CREATE OR REPLACE FUNCTION "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,types,keys)$)RETURN void AS $body$/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/DECLARE     v_rowcount INT;BEGIN    -- delete record    DELETE FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"    WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;	GET DIAGNOSTICS v_rowcount := ROW_COUNT;    -- check and report errors, if any, raise exception and rollback transaction    IF v_rowcount = 0 THEN        RAISE NOTICE '%', 'Warning. No records found for the specified criteria, no records deleted.';    END IF;    IF v_rowcount > 1 THEN        RAISE EXCEPTION '%', 'Critical error. More than 1 record found for the specified criteria, while just 1 was expected.';     END IF;END;$body$ LANGUAGE plpgsql;-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$" TO "some user or role here";

[bulks.5.2]
enabled=1
caption=Get
export=1
body=CREATE OR REPLACE FUNCTION "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,types,keys)$)RETURNS REFCURSOR  AS $body$/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$**                        Reference cursor is used to return                          the result* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/DECLARE    ref REFCURSOR;BEGIN    -- Open cursor for the result set. In case of NO_DATA_FOUND     -- an exception will be raised automatically    OPEN ref FOR         SELECT $COLUMNS(vertical,keys)$         FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"        WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    RETURN ref;END;$body$ LANGUAGE plpgsql;-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$" TO "some user or role here";

[bulks.5.3]
enabled=1
caption=Save
export=1
body=CREATE OR REPLACE FUNCTION "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,types)$" DEFAULT NULL")RETURN void AS $body$/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/DECLARE     v_rowcount INT;BEGIN    IF EXISTS     (             SELECT *          FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         WHERE "AND "$COLUMN_KEYS_V$" = a_"$COLUMN_KEYS_V$    )    THEN          INSERT INTO "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             a_$COLUMNS(vertical,updatable)$         );    ELSE         UPDATE "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         SET $COLUMNS(vertical,updatable)$ = a_$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    END IF;    GET DIAGNOSTICS v_rowcount := ROW_COUNT;    -- check and report errors, if any, raise exception and rollback transaction    IF v_rowcount = 0 THEN        RAISE EXCEPTION '%', 'Critical error. No records updated.';    END IF;    IF v_rowcount > 1 THEN        RAISE EXCEPTION '%', 'Critical error. More than 1 record found for the specified criteria, while just 1 was expected.';     END IF;END;$body$ LANGUAGE plpgsql;-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$" TO "some user or role here";

[bulks.6]
enabled=1
caption=Sybase ASA CRUD Procedures Template
export=1
count=3
dbType=5
stopOnError=0
saveLog=0
logFile=

[bulks.6.1]
enabled=1
caption=Delete
export=1
body=IF object_id('$OBJECT(ins_schema, table)$.p_Delete$OBJECT(ins_object, table)$') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types,keys)$)ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT    -- start transaction	BEGIN TRANSACTION    -- delete record using the specified criteria, 1 record deletion is expected    DELETE FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]    WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR    -- check for errors	IF @error != 0    BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR 99999, 'Unable to delete record. See previous message for details.'		RETURN @error    END    -- check for rows updated    IF @rowcount != 1     BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code		IF @rowcount = 0            RAISERROR 99999, 'Warning. No records found for the specified criteria, while just 1 was expected.'		ELSE            RAISERROR 99999, 'Critical error. More than 1 record found for the specified criteria, while just 1 was expected.'		RETURN 1    END     -- commit changes and return 0 code indicating successful completion    COMMIT TRANSACTION    RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.6.2]
enabled=1
caption=Get
export=1
body=IF object_id('$OBJECT(ins_schema, table)$.p_Get$OBJECT(ins_object, table)$') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types,keys)$)ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT    -- search and return records    SELECT $COLUMNS(vertical)$     FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]    WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$     -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR	IF @error != 0    BEGIN		-- report error and exit with non-zero exit code        RAISERROR 99999, 'Unable to retrieve records. See previous message for details.'		RETURN @error    END    IF @rowcount = 0    BEGIN		-- report error and exit with non-zero exit code        RAISERROR 99999, 'Critical error. No records found for the specified criteria.'		RETURN 1    END     IF @rowcount > 1     BEGIN		-- report error and exit with non-zero exit code        RAISERROR 99999, 'Warning. More than 1 record found for the specified criteria, while just 1 is expected.'		RETURN 1    END     -- commit changes and return 0 code indicating successful completion	RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.6.3]
enabled=1
caption=Save
export=1
body=IF object_id('$OBJECT(ins_schema, table)$.p_Save$OBJECT(ins_object, table)$') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types)$" = NULL")ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT    -- start transaction	BEGIN TRANSACTION    -- check if the specified record already exists, if yes, update it, if no, create it    IF EXISTS     (             SELECT *          FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    )    BEGIN          -- insert new record         INSERT INTO [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             @$COLUMNS(vertical,updatable)$         )    END     ELSE    BEGIN         -- update existing record         UPDATE [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         SET $COLUMNS(vertical,updatable)$ = @$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    END    -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR	IF @error != 0    BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR 99999, 'Unable to update or insert new record. See previous message for details.'		RETURN @error    END    IF @rowcount != 1     BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR 99999, 'Critical error. More than 1 record found for the specified criteria, just 1 is expected.'		RETURN 1    END     -- commit changes and return 0 code indicating successful completion    COMMIT TRANSACTION    RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.7]
enabled=1
caption=Sybase ASE CRUD Procedures Template
export=1
count=3
dbType=4
stopOnError=0
saveLog=0
logFile=

[bulks.7.1]
enabled=1
caption=Delete
export=1
body=IF object_id('[$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$]') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types,keys)$)ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT    -- start transaction	BEGIN TRANSACTION    -- delete record using the specified criteria, 1 record deletion is expected    DELETE FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]    WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR    -- check for errors	IF @error != 0    BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR('Unable to delete record. See previous message for details.', 16, 1) 		RETURN @error    END    -- check for rows updated    IF @rowcount != 1     BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code		IF @rowcount = 0            RAISERROR('Warning. No records found for the specified criteria, while just 1 was expected.', 10, 1) 		ELSE            RAISERROR('Critical error. More than 1 record found for the specified criteria, while just 1 was expected.', 16, 1) 		RETURN 1    END     -- commit changes and return 0 code indicating successful completion    COMMIT TRANSACTION    RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Delete$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.7.2]
enabled=1
caption=Get
export=1
body=IF object_id('[$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$]') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types,keys)$)ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT    -- search and return records    SELECT $COLUMNS(vertical)$     FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]    WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$     -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR	IF @error != 0    BEGIN		-- report error and exit with non-zero exit code        RAISERROR('Unable to retrieve records. See previous message for details.', 16, 1) 		RETURN @error    END    IF @rowcount = 0    BEGIN		-- report error and exit with non-zero exit code        RAISERROR('Critical error. No records found for the specified criteria.', 16, 1) 		RETURN 1    END     IF @rowcount > 1     BEGIN		-- report error and exit with non-zero exit code        RAISERROR('Warning. More than 1 record found for the specified criteria, while just 1 is expected.', 10, 1) 		RETURN 1    END     -- commit changes and return 0 code indicating successful completion	RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Get$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.7.3]
enabled=1
caption=Save
export=1
body=IF object_id('[$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$]') IS NOT NULL   DROP PROCEDURE [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$]GOCREATE PROCEDURE [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$]/************************************************************ Code generated by SoftTree SQL Assistant ?v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    @$COLUMNS(vertical,types)$" = NULL")ASBEGIN    SET NOCOUNT ON    DECLARE @rowcount INT, @error INT    -- start transaction	BEGIN TRANSACTION    -- check if the specified record already exists, if yes, update it, if no, create it    IF EXISTS     (             SELECT *          FROM [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    )    BEGIN          -- insert new record         INSERT INTO [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             @$COLUMNS(vertical,updatable)$         )    END     ELSE    BEGIN         -- update existing record         UPDATE [$OBJECT(ins_schema, table)$].[$OBJECT(ins_object, table)$]         SET $COLUMNS(vertical,updatable)$ = @$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = @"$COLUMNS(vertical,keys)$    END    -- capture operation completion code and number of records affected	SELECT @rowcount = @@ROWCOUNT,            @error = @@ERROR	IF @error != 0    BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR('Unable to update or insert new record. See previous message for details.', 16, 1) 		RETURN @error    END    IF @rowcount != 1     BEGIN        -- cancel transaction, undo changes        ROLLBACK TRANSACTION		-- report error and exit with non-zero exit code        RAISERROR('Critical error. More than 1 record found for the specified criteria, just 1 is expected.', 16, 1) 		RETURN 1    END     -- commit changes and return 0 code indicating successful completion    COMMIT TRANSACTION    RETURN 0ENDGO-- uncomment the following 2 lines if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON [$OBJECT(ins_schema, table)$].[p_Save$OBJECT(ins_object, table)$] TO [some user or role here]-- GO

[bulks.8]
enabled=1
caption=Greenplum CRUD Procedures Template
export=1
count=3
dbType=12
stopOnError=0
saveLog=0
logFile=

[bulks.8.1]
enabled=1
caption=Delete
export=1
body=CREATE OR REPLACE FUNCTION "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,types,keys)$)RETURNS void AS $^body$^/************************************************************ Code generated by SoftTree SQL Assistant © v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/DECLARE     v_rowcount INT;BEGIN    -- delete record    DELETE FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"    WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;	GET DIAGNOSTICS v_rowcount := ROW_COUNT;    -- check and report errors, if any, raise exception and rollback transaction    IF v_rowcount = 0 THEN        RAISE NOTICE '%', 'Warning. No records found for the specified criteria, no records deleted.';    END IF;    IF v_rowcount > 1 THEN        RAISE EXCEPTION '%', 'Critical error. More than 1 record found for the specified criteria, while just 1 was expected.';     END IF;END;$^body$^ LANGUAGE plpgsql;-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$" TO "some user or role here";

[bulks.8.2]
enabled=1
caption=Get
export=1
body=CREATE OR REPLACE FUNCTION "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,types,keys)$)RETURNS REFCURSOR  AS $^body$^/************************************************************ Code generated by SoftTree SQL Assistant © v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$**                        Reference cursor is used to return                          the result* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/DECLARE    ref REFCURSOR;BEGIN    -- Open cursor for the result set. In case of NO_DATA_FOUND     -- an exception will be raised automatically    OPEN ref FOR         SELECT $COLUMNS(vertical,keys)$         FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"        WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    RETURN ref;END;$^body$^ LANGUAGE plpgsql;-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$" TO "some user or role here";

[bulks.8.3]
enabled=1
caption=Save
export=1
body=CREATE OR REPLACE FUNCTION "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$"(    a_$COLUMNS(vertical,types)$" DEFAULT NULL")RETURNS void AS $^body$^/************************************************************ Code generated by SoftTree SQL Assistant © v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/DECLARE     v_rowcount INT;BEGIN    IF NOT EXISTS     (             SELECT *          FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         WHERE "AND "$COLUMN_KEYS_V$" = a_"$COLUMN_KEYS_V$    )    THEN          INSERT INTO "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             a_$COLUMNS(vertical,updatable)$         );    ELSE         UPDATE "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         SET $COLUMNS(vertical,updatable)$ = a_$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    END IF;    GET DIAGNOSTICS v_rowcount := ROW_COUNT;    -- check and report errors, if any, raise exception and rollback transaction    IF v_rowcount = 0 THEN        RAISE EXCEPTION '%', 'Critical error. No records updated.';    END IF;    IF v_rowcount > 1 THEN        RAISE EXCEPTION '%', 'Critical error. More than 1 record found for the specified criteria, while just 1 was expected.';     END IF;END;$^body$^ LANGUAGE plpgsql;-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$" TO "some user or role here";

[bulks.9]
enabled=1
caption=Teradata CRUD Procedures Template
export=1
count=3
dbType=11
stopOnError=0
saveLog=0
logFile=

[bulks.9.1]
enabled=1
caption=Delete
export=1
body=$$ SELECT DISTINCT 'DROP PROCEDURE "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$";' || CHR(10) || CHR(13) || CHR(36) || CHR(36) || CHR(36)FROM   syscat.routinesWHERE  routineschema = '$OBJECT(ins_schema, table)$'       AND routinename = 'p_Delete$OBJECT(ins_object, table)$'       AND routinetype = 'P' $$CREATE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$"/************************************************************ Code generated by SoftTree SQL Assistant © v$SA_VERSION$** Procedure description: This procedure is used for *                        deleting records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types,keys)$)BEGIN    -- delete record using the specified criteria, 1 record deletion is expected    DELETE FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"    WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;END$$$-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Delete$OBJECT(ins_object, table)$" TO "some user or role here" ;

[bulks.9.2]
enabled=1
caption=Get
export=1
body=$$ SELECT DISTINCT 'DROP PROCEDURE "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$";' || CHR(10) || CHR(13) || CHR(36) || CHR(36) || CHR(36)FROM   syscat.routinesWHERE  routineschema = '$OBJECT(ins_schema, table)$'       AND routinename = 'p_Get$OBJECT(ins_object, table)$'       AND routinetype = 'P' $$CREATE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$"/************************************************************ Code generated by SoftTree SQL Assistant © v$SA_VERSION$** Procedure description: This procedure is used for *                        retrieving records from table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types,keys)$)BEGIN    -- open cursor for the specified criteria    DECLARE c CURSOR FOR      SELECT $COLUMNS(vertical,keys)$       FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"      WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    OPEN c;END$$$-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Get$OBJECT(ins_object, table)$" TO "some user or role here" ;

[bulks.9.3]
enabled=1
caption=Save
export=1
body=$$ SELECT DISTINCT 'DROP PROCEDURE "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$";' || CHR(10) || CHR(13) || CHR(36) || CHR(36) || CHR(36)FROM   syscat.routinesWHERE  routineschema = '$OBJECT(ins_schema, table)$'       AND routinename = 'p_Save$OBJECT(ins_object, table)$'       AND routinetype = 'P'$$CREATE PROCEDURE "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$"/************************************************************ Code generated by SoftTree SQL Assistant © v$SA_VERSION$** Procedure description: This procedure is used for adding *                        and updating records in table *                        $OBJECT(ins_qualobject, table)$* Date:   $DATE$ * Author: $OSUSER$** Changes* Date        Modified By            Comments************************************************************* $DATE$  $OSUSER$     Initial version************************************************************/(    a_$COLUMNS(vertical,types)$)BEGIN    -- check if the specified record already exists, if yes, update it, if no, create it    IF NOT EXISTS     (             SELECT *          FROM "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$    )    THEN          -- insert new record         INSERT INTO "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         (             $COLUMNS(vertical,updatable)$         )         VALUES          (             a_$COLUMNS(vertical,updatable)$         ) ;    ELSE         -- update existing record         UPDATE "$OBJECT(ins_schema, table)$"."$OBJECT(ins_object, table)$"         SET $COLUMNS(vertical,updatable)$ = a_$COLUMNS(vertical,updatable)$         WHERE "AND "$COLUMNS(vertical,keys)$" = a_"$COLUMNS(vertical,keys)$ ;    END IF;END$$$-- uncomment the following line if you want to grant procedure permissions to some other user or role-- GRANT EXECUTE ON "$OBJECT(ins_schema, table)$"."p_Save$OBJECT(ins_object, table)$" TO "some user or role here" ;

[schemaCmp]
enabled=1
caption=
export=1
count=13

[schemaCmp.1]
enabled=1
caption=SQL Server
export=1
count=156
dbType=1
useCache=0
objTypes=User	Default database	Default language	Is OS Name	Is policy checked	Is expiration checkedRoleApplication Role|RoleAssembly	Content	-FilenamePartition FunctionPartition Scheme|Partition FunctionTable	Data spaceViewProcedureFunctionSynonymData Type|Type	Type	NullableTable Type|Type	-NullableSequence	Type    -Start value    Increment    Min value    Max value    Cycling    CachedXML CollectionAggregate|Function	Assembly    Assembly class    ReturnAssembly Function|Function	Assembly    Assembly class       Assembly method    ReturnAssembly Table Function|Function	Assembly    Assembly class       Assembly methodAssembly Procedure|Procedure	Assembly    Assembly class       Assembly method-PermissionDDL TriggerDefaultRuleColumn	Type    Nullable    Collate    Rowguidcol    Filestream    Sparse    -Not for replication	PositionPrimary Key	-Fill factor	Pad index	Ignore dup key	Statistics norecompute	Allow row locks	Allow page locksUnique Key	-Fill factor	Pad index	Ignore dup key	Statistics norecompute	Allow row locks	Allow page locksForeign Key	On delete    On update    Not for replicationCheck Constraint    Not for replicationDefault Constraint|DefaultDML Trigger|DDL TriggerIndex	-Fill factor	Pad index	Ignore dup key	Statistics norecompute	Allow row locks	Allow page locksProperty

[schemaCmp.1.1]
enabled=1
caption=Databases
export=1
qType=1
oType=Server
query=SELECT 	[name] 		AS [Database name],     'Database'	AS [Target type] FROM master.dbo.sysdatabases WITH (NOLOCK) WHERE status & 33760 = 0ORDER BY [name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=Database

[schemaCmp.1.2]
enabled=1
caption=Partition Functions
export=1
qType=1
oType=Database
query=SELECT 	pf.name AS [Partition function name],     'Partition Function' AS [Target type],     (pf.type_desc + CASE WHEN pf.boundary_value_on_right = 1 THEN ' RIGHT' ELSE ' LEFT' END) AS [Function type],    t.name    + CASE    WHEN t.name IN ('varchar', 'char', 'binary', 'varbinary')      THEN '(' + CASE pp.max_length when -1 THEN 'max' ELSE convert(VARCHAR, pp.max_length) END + ')'    WHEN t.name IN ('nvarchar', 'nchar')      THEN '(' + CASE pp.max_length WHEN -1 THEN 'max' ELSE convert(VARCHAR, pp.max_length / 2) END + ')'    WHEN t.name IN ('decimal', 'numeric')      THEN '(' + convert(VARCHAR, pp.[precision]) + ',' + convert(VARCHAR, pp.scale) + ')'    ELSE ''    END +    CASE WHEN pp.collation_name IS NULL THEN '' ELSE ' COLLATE ' + pp.collation_name END AS [Parameter]FROM sys.partition_functions AS pf WITH (NOLOCK)    JOIN sys.partition_parameters AS pp WITH (NOLOCK)     	ON pf.function_id = pp.function_id    JOIN sys.types AS t WITH (NOLOCK)     	ON t.system_type_id = pp.system_type_idORDER BY pf.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=Partition Function

[schemaCmp.1.3]
enabled=1
caption=Partition Function Boundary Values
export=1
qType=1
oType=Partition Function
query=SELECT 	pf.name AS [Partition function name],     CASE      WHEN t2.name IN ('datetime', 'datetime2', 'datetimeoffset', 'smalldatetime')         THEN '''' + CONVERT(VARCHAR, prg.[value], 126) + '''' -- ISO8601    WHEN t2.name = 'date'         THEN '''' + CONVERT(VARCHAR, prg.[value], 112) + '''' -- ISO    WHEN t2.name = 'time'         THEN '''' + CONVERT(VARCHAR, prg.[value], 8) + ''''     WHEN t2.name IN ('varbinary', 'varchar', 'char', 'binary', 'nvarchar', 'nchar')         THEN '''' + cast(prg.[value] AS VARCHAR) + ''''    ELSE prg.[value]    END AS [Partition range Value Name],     'Partition Range Value' AS [Target type]FROM sys.partition_range_values AS prg WITH (NOLOCK)    JOIN sys.partition_functions AS pf WITH (NOLOCK)     	ON pf.function_id = prg.function_id    JOIN sys.partition_parameters AS pp WITH (NOLOCK)     	ON pp.parameter_id = prg.parameter_id AND pp.function_id = pf.function_id    JOIN sys.types AS t2 WITH (NOLOCK)     	ON t2.user_type_id = pp.system_type_idORDER BY prg.boundary_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Partition Range Value

[schemaCmp.1.4]
enabled=1
caption=Partition Function Boundary Values
export=1
qType=1
oType=Partition Function
query=SELECT 	pf.name AS [Partition function name],     CASE      WHEN t2.name IN ('datetime', 'datetime2', 'datetimeoffset', 'smalldatetime')         THEN '''' + CONVERT(VARCHAR, prg.[value], 126) + '''' -- ISO8601    WHEN t2.name = 'date'         THEN '''' + CONVERT(VARCHAR, prg.[value], 112) + '''' -- ISO    WHEN t2.name = 'time'         THEN '''' + CONVERT(VARCHAR, prg.[value], 8) + ''''     WHEN t2.name IN ('varbinary', 'varchar', 'char', 'binary', 'nvarchar', 'nchar')         THEN '''' + cast(prg.[value] AS VARCHAR) + ''''    ELSE prg.[value]    END AS [Partition range Value Name],     'Partition Range Value' AS [Target type]FROM sys.partition_range_values AS prg WITH (NOLOCK)    JOIN sys.partition_functions AS pf WITH (NOLOCK)     	ON pf.function_id = prg.function_id    JOIN sys.partition_parameters AS pp WITH (NOLOCK)     	ON pp.parameter_id = prg.parameter_id AND pp.function_id = pf.function_id    JOIN sys.types AS t WITH (NOLOCK)     	ON t.user_type_id = pp.user_type_id    JOIN sys.types AS t2 WITH (NOLOCK)     	ON t.system_type_id = t2.user_type_idORDER BY prg.boundary_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Partition Range Value

[schemaCmp.1.5]
enabled=1
caption=Partition Scheme
export=1
qType=1
oType=Partition Function
query=SELECT 	pf.name AS [Partition function name],     ps.name AS [Partition scheme name],     'Partition Scheme' AS [Target type]FROM sys.partition_functions AS pf WITH (NOLOCK)	JOIN sys.partition_schemes AS ps WITH (NOLOCK)     	ON ps.function_id = pf.function_idORDER BY ps.name 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Partition Scheme

[schemaCmp.1.6]
enabled=1
caption=Partition Spaces
export=1
qType=1
oType=Partition Scheme
query=SELECT 	pf.name AS [Partition function name],     ps.name AS [Partition scheme name],     'Partition ' + cast(dds.destination_id AS VARCHAR) AS [Partition space name],     'Partition Space' AS [Target type],     ds.name AS [File group name]FROM sys.destination_data_spaces AS dds WITH (NOLOCK)    JOIN sys.data_spaces AS ds WITH (NOLOCK)     	ON ds.data_space_id = dds.data_space_id    JOIN sys.filegroups AS fg WITH (NOLOCK)     	ON fg.data_space_id = dds.data_space_id    JOIN sys.partition_schemes AS ps WITH (NOLOCK)     	ON ps.data_space_id = dds.partition_scheme_id    JOIN sys.partition_functions AS pf WITH (NOLOCK)     	ON pf.function_id = ps.function_idORDER BY dds.destination_id
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Partition Space

[schemaCmp.1.7]
enabled=1
caption=Assembly
export=1
qType=1
oType=Database
query=SELECT 	a.name 			AS [Assembly name],     'Assembly' 		AS [Target type],     dp.name 		AS [Authorization],     af.[content] 	AS [Content],     af.name 		AS [Filename],    CASE a.[permission_set]     	WHEN 2 THEN 'EXTERNAL_ACCESS'    	WHEN 3 THEN 'UNSAFE'    	ELSE 'SAFE'    END 			AS [Permission set]FROM sys.assemblies a WITH (NOLOCK)	LEFT JOIN sys.database_principals dp WITH (NOLOCK)     	ON a.principal_id = dp.principal_id	LEFT JOIN sys.assembly_files af WITH (NOLOCK)     	ON af.assembly_id = a.assembly_idORDER BY a.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=Assembly

[schemaCmp.1.8]
enabled=1
caption=Assembly
export=1
qType=1
oType=Database
query=SELECT 	a.name 			AS [Assembly name],     'Assembly' 		AS [Target type],     dp.name 		AS [Authorization],     af.[content] 	AS [Content],     af.name 		AS [Filename],    CASE a.[permission_set]     	WHEN 2 THEN 'EXTERNAL_ACCESS'    	WHEN 3 THEN 'UNSAFE'    	ELSE 'SAFE'    END 			AS [Permission set],    CASE WHEN a.is_user_defined = 0 THEN 1 ELSE 0 END AS [IsSystemObject__HIDDEN]FROM sys.assemblies a WITH (NOLOCK)	LEFT JOIN sys.database_principals dp WITH (NOLOCK)     	ON a.principal_id = dp.principal_id	LEFT JOIN sys.assembly_files af WITH (NOLOCK)     	ON af.assembly_id = a.assembly_idORDER BY a.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Assembly

[schemaCmp.1.9]
enabled=1
caption=Schemas
export=1
qType=1
oType=Database
query=SELECT 	[name] AS [Schema name],     'Schema' AS [Target type]FROM sys.schemas WITH (NOLOCK)WHERE schema_id < 16384ORDER BY [name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=Schema

[schemaCmp.1.10]
enabled=1
caption=DDL Triggers
export=1
qType=1
oType=Database
query=SELECT 	t.[name] 			AS [Trigger name],     'DDL Trigger' 		AS [Target type],     t.parent_class_desc AS [Parent class],     s.definition 		AS [DDL]FROM sys.triggers t WITH (NOLOCK)	LEFT JOIN sys.sql_modules s WITH (NOLOCK) 		ON t.[object_id] = s.[object_id]WHERE t.parent_id = 0ORDER BY t.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=DDL Trigger

[schemaCmp.1.11]
enabled=1
caption=Data Types
export=1
qType=1
oType=
query=SELECT 	s.[name] 	AS [Schema name],      t.[name] 	AS [Type name],     'Data Type' AS [Target type],     bt.[name] +     CASE     	WHEN bt.name IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE t.max_length WHEN -1 THEN 'max' ELSE convert(VARCHAR, t.max_length) END + ')'    	WHEN bt.name IN ('nvarchar', 'nchar')       		THEN '(' + CASE t.max_length WHEN -1 THEN 'max' ELSE convert(VARCHAR, t.max_length / 2) END + ')'     	WHEN bt.name IN ('decimal', 'numeric')      		THEN '(' + convert(VARCHAR, t.[precision]) + ',' + convert(VARCHAR, t.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN t.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable] FROM sys.types AS t WITH (NOLOCK)	JOIN sys.types AS bt WITH (NOLOCK)     	ON bt.user_type_id = t.system_type_id	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE t.is_user_defined = 1 	AND t.is_assembly_type = 0	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY t.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Data Type

[schemaCmp.1.12]
enabled=1
caption=Data Types
export=1
qType=1
oType=
query=SELECT 	s.[name] 	AS [Schema name],      t.[name] 	AS [Type name],     'Data Type' AS [Target type],     bt.[name] +     CASE     	WHEN bt.name IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE t.max_length WHEN -1 THEN 'max' ELSE convert(VARCHAR, t.max_length) END + ')'    	WHEN bt.name IN ('nvarchar', 'nchar')       		THEN '(' + CASE t.max_length WHEN -1 THEN 'max' ELSE convert(VARCHAR, t.max_length / 2) END + ')'     	WHEN bt.name IN ('decimal', 'numeric')      		THEN '(' + convert(VARCHAR, t.[precision]) + ',' + convert(VARCHAR, t.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN t.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable] FROM sys.types AS t WITH (NOLOCK)	JOIN sys.types AS bt WITH (NOLOCK)     	ON bt.user_type_id = t.system_type_id	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE t.is_user_defined = 1 	AND t.is_table_type = 0     AND t.is_assembly_type = 0	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY t.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Data Type

[schemaCmp.1.13]
enabled=1
caption=Table Types
export=1
qType=1
oType=
query=SELECT 	s.[name] 		AS [Schema name],      t.[name] 		AS [Type name],     'Table Type'	AS [Target type],    CASE     	WHEN t.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END 			AS [Nullable] FROM sys.table_types t WITH (NOLOCK)	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE t.is_user_defined = 1    	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY t.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Table Type

[schemaCmp.1.14]
enabled=1
caption=Default
export=1
qType=1
oType=
query=SELECT 	s2.[name] 	AS [Schema name],     o.[name] 	AS [Default name],     'Default' 	AS [Target type],     s.[text] 	AS [DDL] FROM sys.syscomments AS s WITH (NOLOCK)	JOIN sys.objects AS o WITH (NOLOCK)     	ON s.id = o.[object_id]	JOIN sys.schemas AS s2 WITH (NOLOCK)     	ON s2.[schema_id] = o.[schema_id]WHERE o.[type] = 'D' 	AND o.parent_object_id = 0	AND ('$SCHEMA_NAME$' = '' OR s2.name = '$SCHEMA_NAME$')ORDER BY s.colid
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Default

[schemaCmp.1.15]
enabled=1
caption=Rule
export=1
qType=1
oType=
query=SELECT 	s2.[name] 	AS [Schema name],     o.[name] 	AS [Rule name],     'Rule' 		AS [Target type],     s.[text] 	AS [DDL] FROM sys.syscomments AS s WITH (NOLOCK)	JOIN sys.objects AS o WITH (NOLOCK)     	ON s.id = o.[object_id]	JOIN sys.schemas AS s2 WITH (NOLOCK)     	ON s2.[schema_id] = o.[schema_id]WHERE o.[type] = 'R' AND 	('$SCHEMA_NAME$' = '' OR s2.[name] = '$SCHEMA_NAME$')ORDER BY s.colid
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Rule

[schemaCmp.1.16]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT 	s.[name] AS [Schema name],     o.[name] AS [Table name], 	CASE o.[type]     	WHEN 'S' THEN 'System Table'         ELSE 'Table'     END AS [Target type], 	CASE     	WHEN EXISTS(SELECT 1 FROM sys.[columns] c WHERE c.[object_id]=o.[object_id] AND c.is_identity = 1) THEN 1         ELSE 0 	END AS [HasIdentity__DONT_COMPARE__HIDDEN]FROM sys.objects AS o WITH (NOLOCK)	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] WHERE o.[type] IN ('U', 'S') 	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY o.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=System Table,Table

[schemaCmp.1.17]
enabled=1
caption=Code Objects
export=1
qType=1
oType=
query=SELECT	s.[name] AS [Schema name],	o.[name] AS [Object name],	CASE  		WHEN o.[type] = 'V' THEN 'View'		WHEN o.[type] IN ('P', 'X', 'RF') THEN 'Procedure'		WHEN o.[type] IN ('FN','TF','IF') THEN 'Function'	END AS [Target type],	c.text AS [DDL]FROM sys.objects o WITH (NOLOCK)	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]	JOIN dbo.syscomments c WITH (NOLOCK)     	ON c.id = o.[object_id]WHERE o.[type] IN ('V', 'P', 'X', 'RF', 'FN','TF','IF')	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY o.[name], c.colid
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=View,Procedure,Function

[schemaCmp.1.18]
enabled=1
caption=Synonyms
export=1
qType=1
oType=
query=SELECT 	s.[name] 			AS [Schema name],     o.[name]			AS [Synonym name],     'Synonym' 			AS [Target type],     o.base_object_name 	AS [Base object name__NAME_REFERENCE]FROM sys.synonyms o WITH (NOLOCK)	JOIN sys.schemas s WITH (NOLOCK)     	ON s.schema_id = o.schema_idWHERE ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY o.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Synonym

[schemaCmp.1.19]
enabled=1
caption=XML Collections
export=1
qType=1
oType=
query=SELECT 	s.[name] 			AS [Schema name],     xc.[name] 			AS [XML Collection name],     'XML Collection' 	AS [Target type],     xml_schema_namespace(s.[name], xc.[name]) AS XSD FROM sys.xml_schema_collections xc WITH (NOLOCK) 	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = xc.[schema_id] WHERE (xc.xml_collection_id <> 1)  	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY xc.[name]
linkByVal=0
hasValue=1
templType=Objects
hidden=0
noCompare=0
minVer=589824
condition=Yes
pathNameCnt=1
loadedObj=XML Collection

[schemaCmp.1.20]
enabled=1
caption=Sequences
export=1
qType=1
oType=
query=SELECT 	sh.name 		AS [Schema name],     s.name 			AS [Sequence name],     'Sequence' 		AS [Target type],	t.name 			AS [Type], 	s.start_value	AS [Start value], 	s.increment		AS [Increment], 	s.minimum_value AS [Min value],	s.maximum_value AS [Max value],    CASE     	WHEN s.is_cycling = 1 THEN 'CYCLE'         ELSE 'NO CYCLE'     END AS [Cycling],    CASE     	WHEN s.is_cached = 1 THEN 'CACHE' + COALESCE(' ' + cast(s.cache_size AS VARCHAR(MAX)), '')         ELSE 'NO CACHE'     END AS [Cached]FROM sys.sequences AS s WITH (NOLOCK)	JOIN sys.schemas AS sh WITH (NOLOCK)     	ON sh.[schema_id] = s.[schema_id]	JOIN sys.types AS t WITH (NOLOCK)     	ON t.user_type_id = s.user_type_idWHERE ('$SCHEMA_NAME$' = '' OR sh.[name] = '$SCHEMA_NAME$')ORDER BY s.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Sequence

[schemaCmp.1.21]
enabled=1
caption=Assembly Functions
export=1
qType=1
oType=
query=SELECT 	s.[name] 			AS [Schema name],     o.[name] 			AS [Object name],      CASE o.[type]     	WHEN 'AF' THEN 'Aggregate'    	WHEN 'FT' THEN 'Assembly Table Function'		WHEN 'PC' THEN 'Assembly Procedure'    	ELSE 'Assembly Function'    END 				AS [Target type],    a.name 				AS [Assembly],     am.assembly_class 	AS [Assembly class],    am.assembly_method	AS [Assembly method],    t.name +     CASE    	WHEN t.name IN ('varchar', 'char', 'binary', 'varbinary')         	THEN '(' + CASE c.length WHEN -1 THEN 'max' ELSE convert(VARCHAR, c.length) END + ')'    	WHEN t.name IN ('nvarchar', 'nchar')         	THEN '(' + CASE c.length WHEN -1 THEN 'max' ELSE convert(VARCHAR, c.length / 2) END + ')'    	WHEN t.name IN ('decimal', 'numeric')        	THEN '(' + convert(VARCHAR, c.prec) + ',' + convert(VARCHAR, c.scale) + ')'    	ELSE ''    END AS [Return]FROM sys.objects o WITH (NOLOCK)	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]	JOIN sys.assembly_modules am WITH (NOLOCK)     	ON o.[object_id] = am.[object_id]	JOIN sys.assemblies a WITH (NOLOCK)     	ON a.assembly_id = am.assembly_id	LEFT JOIN dbo.syscolumns c WITH (NOLOCK)     	ON c.id = o.[object_id] AND c.name = ''	LEFT JOIN dbo.systypes t WITH (NOLOCK)     	ON c.xtype = t.xtype AND t.xusertype = c.xusertypeWHERE o.[type] IN ('AF', 'FT', 'FS', 'PC') 	AND ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$')ORDER BY o.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Aggregate,Assembly Table Function,Assembly Procedure,Assembly Function

[schemaCmp.1.22]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT    s.[name] 	AS [Schema name],     o.[name] 	AS [Table name],     c.[name] 	AS [Column name],     'Column' 	AS [Target type],     t.name +	CASE     	WHEN t.[name] IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length) END + ')'    	WHEN t.[name] IN ('nvarchar', 'nchar')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length / 2) END + ')'     	WHEN t.[name] IN ('decimal', 'numeric')      		THEN '(' + CONVERT(VARCHAR, c.[precision]) + ',' + CONVERT(VARCHAR, c.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN c.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable],     (    	SELECT ' IDENTITY (' + CAST(ic.seed_value AS VARCHAR) + ', ' + CAST(ic.increment_value AS VARCHAR) + ')'        FROM sys.identity_columns AS ic        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    ) AS [Identity],    (    	SELECT CASE WHEN ic.is_not_for_replication = 1 THEN ' NOT FOR REPLICATION' ELSE '' END          FROM sys.identity_columns AS ic        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    ) AS [Not for replication],    (    	SELECT cc.definition         FROM sys.computed_columns AS cc        WHERE cc.[object_id] = c.[object_id] AND cc.column_id = c.column_id    ) AS [Computed],    CASE WHEN t.is_user_defined <> 1 THEN c.collation_name END AS [Collate],    CASE     	WHEN c.is_rowguidcol = 1 THEN ' ROWGUIDCOL'         ELSE ''     END AS [Rowguidcol],     CASE     	WHEN c.is_filestream = 1 THEN ' FILESTREAM'         ELSE ''     END AS [Filestream],     CASE     	WHEN (c.is_computed | c.is_rowguidcol = 1) or (t.name = 'TIMESTAMP') or (t.name = 'ROWVERSION') THEN 1         ELSE 0     END AS [Auto],    CAST(c.is_computed as tinyint) as [is_computed__HIDDEN],	c.column_id as [Position]  FROM sys.[columns] c WITH (NOLOCK)	JOIN sys.types t WITH (NOLOCK)     	ON c.user_type_id = t.user_type_id	JOIN sys.objects o WITH (NOLOCK)     	ON o.[object_id] = c.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] WHERE o.type IN ('U', 'S') AND 	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY c.column_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.1.23]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT    s.[name] 	AS [Schema name],     o.[name] 	AS [Table name],     c.[name] 	AS [Column name],     'Column' 	AS [Target type],     t.name +	CASE     	WHEN t.[name] IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length) END + ')'    	WHEN t.[name] IN ('nvarchar', 'nchar')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length / 2) END + ')'     	WHEN t.[name] IN ('decimal', 'numeric')      		THEN '(' + CONVERT(VARCHAR, c.[precision]) + ',' + CONVERT(VARCHAR, c.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN c.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable],     (    	SELECT ' IDENTITY (' + CAST(ic.seed_value AS VARCHAR) + ', ' + CAST(ic.increment_value AS VARCHAR) + ')'        FROM sys.identity_columns AS ic        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    ) AS [Identity],    (    	SELECT CASE WHEN ic.is_not_for_replication = 1 THEN ' NOT FOR REPLICATION' ELSE '' END          FROM sys.identity_columns AS ic        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    ) AS [Not for replication],    (    	SELECT cc.definition         FROM sys.computed_columns AS cc        WHERE cc.[object_id] = c.[object_id] AND cc.column_id = c.column_id    ) AS [Computed],    CASE WHEN t.is_user_defined <> 1 THEN c.collation_name END AS [Collate],    CASE     	WHEN c.is_rowguidcol = 1 THEN ' ROWGUIDCOL'         ELSE ''     END AS [Rowguidcol],     CASE     	WHEN c.is_filestream = 1 THEN ' FILESTREAM'         ELSE ''     END AS [Filestream],     CASE     	WHEN (c.is_computed | c.is_rowguidcol = 1) or (t.name = 'TIMESTAMP') or (t.name = 'ROWVERSION') THEN 1         ELSE 0     END AS [Auto],    CASE     	WHEN c.is_sparse = 1 THEN ' SPARSE'         ELSE ''     END AS [Sparse],     cast(c.is_computed as tinyint) as [is_computed__HIDDEN],	c.column_id as [Position] FROM sys.[columns] c WITH (NOLOCK)	JOIN sys.types t WITH (NOLOCK)     	ON c.user_type_id = t.user_type_id	JOIN sys.objects o WITH (NOLOCK)     	ON o.[object_id] = c.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] WHERE o.type IN ('U', 'S') AND 	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY c.column_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.1.24]
enabled=1
caption=Arguments
export=1
qType=1
oType=
query=SELECT    s.[name] AS [Schema name],     o.[name] AS [Function name],     p.[name] AS [Argument name],     'Argument' AS [Target type],    CASE WHEN st.[schema_id] <> 4 THEN '[' + st.name + ']' ELSE '' END +    '[' + t.[name] + ']' +    CASE        WHEN t.[name] IN ('varchar', 'char', 'binary', 'varbinary')             THEN '(' + CASE p.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, p.max_length) END + ')'        WHEN t.[name] IN ('nvarchar', 'nchar')             THEN '(' + case p.max_length when -1 then 'max' ELSE CONVERT(VARCHAR, p.max_length / 2) END + ')'        WHEN t.[name] IN ('decimal', 'numeric')            THEN '(' + CONVERT(VARCHAR, p.precision) + ',' + CONVERT(VARCHAR, p.scale) + ')'        ELSE ''    END +    CASE WHEN p.is_cursor_ref = 1 THEN ' VARYING' ELSE '' END +    CASE WHEN p.has_default_value = 1 THEN ' = ' + cast(p.default_value AS VARCHAR(MAX)) ELSE '' END +    CASE WHEN p.is_output = 1 THEN ' OUTPUT' ELSE '' END AS [Arument type]FROM sys.parameters p WITH (NOLOCK)    JOIN sys.objects o WITH (NOLOCK)         ON o.[object_id] = p.[object_id]    JOIN sys.schemas s WITH (NOLOCK)         ON s.[schema_id] = o.[schema_id]    JOIN sys.types t WITH (NOLOCK)         ON p.user_type_id = t.user_type_id    LEFT JOIN sys.schemas st WITH (NOLOCK)         ON st.[schema_id] = t.[schema_id]WHERE p.name <> '' AND     ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')	ORDER BY p.parameter_id
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Argument

[schemaCmp.1.25]
enabled=1
caption=Arguments
export=1
qType=1
oType=
query=SELECT    s.[name] 	AS [Schema name],     o.[name] 	AS [Function name],     p.[name] 	AS [Argument name],     'Argument' 	AS [Target type],    CASE WHEN st.[schema_id] <> 4 THEN '[' + st.name + ']' ELSE '' END +    '[' + t.[name] + ']' +    CASE        WHEN t.[name] IN ('varchar', 'char', 'binary', 'varbinary')             THEN '(' + CASE p.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, p.max_length) END + ')'        WHEN t.[name] IN ('nvarchar', 'nchar')             THEN '(' + case p.max_length when -1 then 'max' ELSE CONVERT(VARCHAR, p.max_length / 2) END + ')'        WHEN t.[name] IN ('decimal', 'numeric')            THEN '(' + CONVERT(VARCHAR, p.precision) + ',' + CONVERT(VARCHAR, p.scale) + ')'        ELSE ''    END +    CASE WHEN p.is_cursor_ref = 1 THEN ' VARYING' ELSE '' END +    CASE WHEN p.has_default_value = 1 THEN ' = ' + cast(p.default_value AS VARCHAR(MAX)) ELSE '' END +    CASE WHEN p.is_output = 1 THEN ' OUTPUT' ELSE '' END +    CASE WHEN p.is_readonly = 1 THEN ' READONLY' ELSE ''     END 		AS [Arument type]FROM sys.parameters p WITH (NOLOCK)	JOIN sys.objects o WITH (NOLOCK)     	ON o.[object_id] = p.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]	JOIN sys.types t WITH (NOLOCK)     	ON p.user_type_id = t.user_type_id	LEFT JOIN sys.schemas st WITH (NOLOCK)     	ON st.[schema_id] = t.[schema_id]WHERE p.name <> '' AND 	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')	ORDER BY p.parameter_id
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Argument

[schemaCmp.1.26]
enabled=1
caption=Primary/Unique Keys
export=1
qType=1
oType=
query=SELECT    s.name 	AS [Schema name],     o.name 	AS [Table name],     i.name 	AS [Key name],    CASE kc.[type]     	WHEN 'PK' THEN 'Primary Key'    	WHEN 'UQ' THEN 'Unique Key'    END 	AS [Target type],    CAST(kc.is_system_named AS TINYINT) AS [IsSystem__DONT_COMPARE],    i.type_desc AS [Type desc],    CASE WHEN i.fill_factor > 0 THEN i.fill_factor END AS [Fill factor],    CASE i.is_padded     	WHEN 0 THEN 'OFF'         ELSE 'ON'     END AS [Pad index],    CASE i.[ignore_dup_key]     	WHEN 0 THEN 'OFF'         ELSE 'ON'     END as [Ignore dup key],    CASE COALESCE((SELECT s.no_recompute FROM sys.[stats] s WHERE s.[object_id] = i.[object_id] AND s.stats_id = i.index_id), 0)     	WHEN 0 THEN 'OFF'         ELSE 'ON'     END as [Statistics norecompute],    CASE i.[allow_row_locks]     	WHEN 0 THEN 'OFF'         ELSE 'ON'     END AS [Allow row locks],    CASE i.[allow_page_locks]     	WHEN 0 THEN 'OFF'         ELSE 'ON'     END AS [Allow page locks]    FROM sys.key_constraints kc WITH (NOLOCK) 	JOIN sys.indexes i WITH (NOLOCK)     	ON i.[object_id] = kc.parent_object_id         	AND i.name = kc.name	JOIN sys.objects AS o WITH (NOLOCK)     	ON o.[object_id] = i.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Primary Key,Unique Key

[schemaCmp.1.27]
enabled=1
caption=Primary/Unique Key Columns
export=1
qType=0
oType=
query=SELECT	s.name AS [Schema name],	o.name AS [Table name],	idx.name AS [Index name],	'[' + c.name + ']' + CASE ic.is_descending_key WHEN 1 THEN ' DESC' ELSE ' ASC' END AS [Value__AGG]FROM sys.index_columns ic WITH (NOLOCK)	JOIN sys.indexes idx WITH (NOLOCK)		ON ic.index_id = idx.index_id 		AND ic.[object_id] = idx.[object_id]	JOIN sys.[columns] c WITH (NOLOCK)		ON c.[object_id] = idx.[object_id] 		AND ic.column_id = c.column_id	JOIN sys.objects AS o WITH (NOLOCK)		ON ic.[object_id] = o.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)		ON o.[schema_id] = s.[schema_id]WHERE idx.is_primary_key | idx.is_unique_constraint = 1	AND ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') 	AND ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY ic.key_ordinal
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Primary Key,Unique Key

[schemaCmp.1.28]
enabled=1
caption=Default Constraints
export=1
qType=1
oType=
query=SELECT 	s.name				AS [Schema name],     o.name				AS [Table name],     d.name				AS [Default name],     'Default Constraint' AS [Target type],    c.name				AS [Column name],    CAST(d.is_system_named AS TINYINT) AS [IsSystem__DONT_COMPARE],    d.definition		AS [Definition]FROM sys.default_constraints d WITH (NOLOCK)	JOIN sys.objects AS o WITH (NOLOCK)     	ON o.[object_id] = d.parent_object_id	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]	JOIN sys.[columns] AS c WITH (NOLOCK)     	ON c.[object_id] = o.[object_id]         	AND d.parent_column_id = c.column_idWHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Default Constraint

[schemaCmp.1.29]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT 	s.name AS [Schema name], 	o.name AS [Table name], 	i.name AS [Index name], 	'Index'	AS [Target type],	i.type_desc AS [Type desc], 	CASE WHEN (i.type_desc = 'XML') AND (xi.secondary_type IS NULL) THEN 'PRIMARY ' ELSE		CASE WHEN i.is_unique = 1 THEN 'UNIQUE ' END 	END AS [Unique],	CASE WHEN i.fill_factor > 0 THEN i.fill_factor END AS [Fill factor],	CASE i.is_padded 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Pad index],	CASE i.[ignore_dup_key] 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Ignore dup key],	CASE COALESCE((SELECT s.no_recompute FROM sys.[stats] s WITH (NOLOCK) WHERE s.[object_id] = i.[object_id] AND s.stats_id = i.index_id), 0) 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END as [Statistics norecompute],	CASE i.[allow_row_locks] 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Allow row locks],	CASE i.[allow_page_locks] 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Allow page locks]  FROM sys.indexes i WITH (NOLOCK)	JOIN sys.objects AS o WITH (NOLOCK) 		ON o.[object_id] = i.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK) 		ON s.[schema_id] = o.[schema_id]	LEFT JOIN sys.xml_indexes AS xi WITH (NOLOCK) 		ON xi.[object_id] = i.[object_id] AND xi.index_id = i.index_idWHERE i.is_primary_key | i.is_unique_constraint = 0 AND i.[type] <> 0 AND	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND 	('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.1.30]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT 	s.name AS [Schema name], 	o.name AS [Table name], 	i.name AS [Index name], 	'Index'	AS [Target type],	i.type_desc AS [Type desc], 	CASE WHEN (i.type_desc = 'XML') AND (xi.secondary_type IS NULL) THEN 'PRIMARY ' ELSE		CASE WHEN i.is_unique = 1 THEN 'UNIQUE ' END 	END AS [Unique],	CASE WHEN i.has_filter = 1 THEN i.filter_definition END AS [Filter],	CASE WHEN i.fill_factor > 0 THEN i.fill_factor END AS [Fill factor],	CASE i.is_padded 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Pad index],	CASE i.[ignore_dup_key] 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Ignore dup key],	CASE COALESCE((SELECT s.no_recompute FROM sys.[stats] s WHERE s.[object_id] = i.[object_id] AND s.stats_id = i.index_id), 0) 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END as [Statistics norecompute],	CASE i.[allow_row_locks] 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Allow row locks],	CASE i.[allow_page_locks] 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Allow page locks]  FROM sys.indexes i WITH (NOLOCK)	JOIN sys.objects AS o WITH (NOLOCK) 		ON o.[object_id] = i.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK) 		ON s.[schema_id] = o.[schema_id]	LEFT JOIN sys.xml_indexes AS xi WITH (NOLOCK) 		ON xi.[object_id] = i.[object_id] AND xi.index_id = i.index_idWHERE i.is_primary_key | i.is_unique_constraint = 0 AND i.[type] <> 0 AND	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND 	('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.1.31]
enabled=1
caption=Index columns
export=1
qType=0
oType=
query=SELECT	s.name AS [Schema name],	o.name AS [Table name],	idx.name AS [Index name],	c.name AS [Value__AGG],	CASE WHEN ic.is_included_column = 0 THEN		'[' + c.name + ']' +		CASE WHEN idx.type_desc <> 'XML' 			THEN CASE ic.is_descending_key WHEN 1 THEN ' DESC' ELSE ' ASC' END			ELSE ''	END	END AS [Columns__AGG],	CASE WHEN ic.is_included_column <> 0 THEN		'[' + c.name + ']'	END AS [Include columns__AGG]FROM sys.index_columns ic WITH (NOLOCK)	JOIN sys.indexes idx WITH (NOLOCK)		ON ic.index_id = idx.index_id 		AND ic.[object_id] = idx.[object_id]	JOIN sys.[columns] c WITH (NOLOCK)		ON c.[object_id] = idx.[object_id] 		AND ic.column_id = c.column_id	JOIN sys.objects AS o WITH (NOLOCK)		ON ic.[object_id] = o.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)		ON o.[schema_id] = s.[schema_id]WHERE idx.is_primary_key | idx.is_unique_constraint = 0  	AND ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') 	AND ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY ic.key_ordinal
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Index

[schemaCmp.1.32]
enabled=1
caption=XML Index Properties
export=1
qType=0
oType=
query=SELECT 	s.name AS [Schema name],	o.name AS [Table name],	xi.name AS [Index name],	ximain.name AS [Using index],	xi.secondary_type_desc AS [Secondary type],	xi.secondary_type_desc AS [Value__AGG] FROM sys.xml_indexes AS xi	JOIN sys.objects AS o 		ON o.[object_id] = xi.[object_id]	JOIN sys.schemas AS s		ON s.[schema_id] = o.[schema_id]	JOIN sys.xml_indexes AS ximain		ON xi.using_xml_index_id = ximain.index_id		AND xi.[object_id] = ximain.[object_id]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Index

[schemaCmp.1.33]
enabled=1
caption=Foreign Keys
export=1
qType=1
oType=
query=SELECT    s1.name 		AS [Schema name],     o1.name 		AS [Table name],     fk.name 		AS [Foreign key name],     'Foreign Key' 	AS [Target type],    CAST(fk.is_system_named AS TINYINT) AS [IsSystem__DONT_COMPARE],     '[' + s2.name + '].[' + o2.name + ']' AS [Refer table__NAME_REFERENCE],    CASE     	WHEN fk.delete_referential_action <> 0 THEN fk.delete_referential_action_desc     END AS [On delete],     CASE     	WHEN fk.update_referential_action <> 0 THEN fk.update_referential_action_desc      END AS [On update],     CAST(fk.is_not_for_replication AS INT) AS [Not for replication]FROM sys.foreign_keys fk WITH (NOLOCK)    JOIN sys.objects o1 WITH (NOLOCK)     	ON o1.[object_id] = fk.parent_object_id    JOIN sys.schemas s1 WITH (NOLOCK)     	ON s1.[schema_id] = o1.[schema_id]    JOIN sys.objects o2 WITH (NOLOCK)     	ON o2.[object_id] = fk.referenced_object_id    JOIN sys.schemas s2 WITH (NOLOCK)     	ON s2.[schema_id] = o2.[schema_id]WHERE   ('$SCHEMA_NAME$' = '' OR s1.name = '$SCHEMA_NAME$') 	AND ('$OBJECT_NAME$' = '' OR o1.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Foreign Key

[schemaCmp.1.34]
enabled=1
caption=Foreign Key Columns
export=1
qType=0
oType=
query=SELECT 	s.name AS [Schema name],	o.name AS [Table name],	fk.name AS [Index name],	'[' + c.name + ']' AS [Value__AGG],	'[' + cr.name + ']' AS [Refer columns__AGG]FROM sys.foreign_key_columns AS f WITH (NOLOCK) 	JOIN sys.[columns] c WITH (NOLOCK) 		ON c.[object_id] = f.parent_object_id 		AND c.column_id = f.parent_column_id	JOIN sys.foreign_keys AS fk WITH (NOLOCK)		ON fk.[object_id] = f.constraint_object_id	JOIN sys.objects AS o WITH (NOLOCK)		ON o.[object_id] = f.parent_object_id 	JOIN sys.schemas AS s WITH (NOLOCK)		ON o.[schema_id] = s.[schema_id]	JOIN sys.[columns] cr WITH (NOLOCK)		ON cr.[object_id] = f.referenced_object_id 		AND cr.column_id = f.referenced_column_id	JOIN sys.indexes AS i WITH (NOLOCK)		ON i.[object_id] = f.referenced_object_id		AND i.is_primary_key = 1	JOIN sys.index_columns ic WITH (NOLOCK)		ON ic.[object_id] = f.referenced_object_id		AND ic.column_id = f.referenced_column_id		AND ic.index_id = i.index_idORDER BY ic.key_ordinal
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Foreign Key

[schemaCmp.1.35]
enabled=1
caption=Check Constraints
export=1
qType=1
oType=
query=SELECT 	s.name 				AS [Schema name],     o.name 				AS [Table name],     c.name 				AS [Constraint name],     'Check Constraint' 	AS [Target type],    c.definition 		AS [Definition],     CAST(c.is_system_named AS TINYINT) 			AS [IsSystem__DONT_COMPARE],     CAST(c.is_not_for_replication AS TINYINT) 	AS [Not for replication] FROM sys.check_constraints c WITH (NOLOCK)JOIN sys.objects AS o WITH (NOLOCK) 	ON o.[object_id] = c.parent_object_idJOIN sys.schemas AS s WITH (NOLOCK) 	ON s.[schema_id] = o.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=1
templType=Attributes
hidden=0
noCompare=0
minVer=589824
condition=No
pathNameCnt=2
loadedObj=Check Constraint

[schemaCmp.1.36]
enabled=1
caption=Permissions
export=1
qType=1
oType=
query=SELECT      s.name 				AS [Schema name],     o.name 				AS [Object name],     p.state_desc COLLATE DATABASE_DEFAULT + ' ' + p.permission_name  COLLATE DATABASE_DEFAULT         + ' TO ' + u.name COLLATE DATABASE_DEFAULT AS [Linking name],    'Permission' 		AS [Target type],    p.state_desc 		AS [State desc],    p.permission_name 	AS [Permission name],    u.name 				AS [User] FROM sys.database_permissions p WITH (NOLOCK)	JOIN sys.objects o WITH (NOLOCK)     	ON p.major_id = o.object_id	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] 	JOIN sys.database_principals u WITH (NOLOCK)     	ON u.principal_id = p.grantee_principal_idWHERE p.class = 1 AND    ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.1.37]
enabled=1
caption=DML Triggers
export=1
qType=1
oType=
query=SELECT 	s.name 			AS [Schema name],     o.name 			AS [Table name],     t.name 			AS [Trigger name],     'DML Trigger' 	AS [Target type],     c.definition 	AS [DDL]FROM sys.triggers t WITH (NOLOCK)	LEFT JOIN sys.sql_modules c WITH (NOLOCK)     	ON t.[object_id] = c.[object_id]	JOIN sys.objects o WITH (NOLOCK)     	ON t.parent_id = o.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=DML Trigger

[schemaCmp.1.38]
enabled=1
caption=Column Dependencies
export=1
qType=1
oType=
query=SELECT  	TABLE_SCHEMA 	AS [Schema name],	TABLE_NAME		AS [Table name],    COLUMN_NAME		AS [Column name],    CONSTRAINT_NAME AS [Constraint name],   'Dependent'		AS [Target type],   'ALTER TABLE [' + TABLE_SCHEMA + '].[' + TABLE_NAME + '] DROP CONSTRAINT [' + CONSTRAINT_NAME + ']' AS [Drop DDL],   '$DB_NAME$.' + TABLE_SCHEMA + '.' + TABLE_NAME + '.'  + CONSTRAINT_NAME AS [Reference]FROM   INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE WITH (NOLOCK)WHERE ('$SCHEMA_NAME$' = '' OR TABLE_SCHEMA = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR TABLE_NAME = '$OBJECT_NAME$')UNION ALLSELECT 	s.name,     o.name,     c.name,     d.name,    'Dependent',    'ALTER TABLE [' + s.name + '].[' + o.name + '] DROP CONSTRAINT [' + d.name + ']' as [Drop DDL],    '$DB_NAME$.' + s.name + '.' + o.name + '.'  + d.name as [Reference]FROM sys.default_constraints d WITH (NOLOCK)	JOIN sys.columns c WITH (NOLOCK)        ON  c.column_id = d.parent_column_id AND            c.object_id = d.parent_object_id    JOIN sys.objects o WITH (NOLOCK)        ON  o.object_id = d.parent_object_id    JOIN sys.schemas s WITH (NOLOCK)        ON  o.schema_id = s.schema_idWHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')UNION ALLSELECT 	s.name,     o.name,     c.name,     i.name,    'Dependent',    'DROP INDEX ['+i.name+'] ON [' + s.name + '].[' + o.name + ']' as [Drop DDL],    '$DB_NAME$.' + s.name + '.' + o.name + '.'  + i.name as [Reference]FROM   sys.indexes i WITH (NOLOCK)    JOIN sys.index_columns ic WITH (NOLOCK)        ON  ic.index_id = i.index_id AND            ic.object_id = i.object_id    JOIN sys.columns c WITH (NOLOCK)        ON  c.column_id = ic.column_id AND            c.object_id = i.object_id    JOIN sys.objects o WITH (NOLOCK)        ON  o.object_id = i.object_id    JOIN sys.schemas s WITH (NOLOCK)        ON  o.schema_id = s.schema_idWHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$') AND      i.is_primary_key = 0 AND       i.is_unique_constraint = 0        UNION ALLSELECT 	s.name,     o.name,     c.name,     fk.name,     'Reference',     'ALTER TABLE [' + s1.name + '].[' + o1.name + '] DROP CONSTRAINT [' + fk.name + ']',    '$DB_NAME$.' + s1.name + '.' + o1.name + '.' + fk.name as [Reference]FROM sys.foreign_keys fk WITH (NOLOCK)    JOIN sys.foreign_key_columns fc WITH (NOLOCK)     	ON fc.constraint_object_id = fk.[object_id]    JOIN sys.objects o1 WITH (NOLOCK)     	ON o1.[object_id] = fc.parent_object_id    JOIN sys.schemas s1 WITH (NOLOCK)     	ON s1.[schema_id] = o1.[schema_id]    JOIN sys.columns c WITH (NOLOCK)     	ON c.[object_id] = fc.referenced_object_id         	AND c.column_id = fc.referenced_column_id    JOIN sys.objects o WITH (NOLOCK)     	ON o.[object_id] = fc.referenced_object_id    JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=1
noCompare=1
minVer=589824
condition=
pathNameCnt=3
loadedObj=Column

[schemaCmp.1.39]
enabled=1
caption=Table External References
export=1
qType=1
oType=
query=SELECT    s2.name 	AS [Schema name],     o2.name 	AS [Table name],     fk.name 	AS [Constraint name],     'Reference' AS [Target type],    'ALTER TABLE [' + s1.name + '].[' + o1.name + '] DROP CONSTRAINT [' + fk.name + ']' as [Drop DDL],    'ALTER TABLE [' + s1.name + '].[' + o1.name + '] ADD CONSTRAINT [' + fk.name + '] FOREIGN KEY ('+    replace(replace(replace((cast((        SELECT DISTINCT c.name AS X        FROM sys.foreign_key_columns AS f         	JOIN sys.[columns] c             	ON c.[object_id] = f.parent_object_id                 	AND c.column_id = f.parent_column_id        WHERE f.constraint_object_id = fk.[object_id]        FOR XML PATH('')    ) AS VARCHAR(MAX))), '</X><X>', ', '),'<X>', ''),'</X>','') +    ') REFERENCES [' + s2.name + '].[' + o2.name + '](' +    replace(replace(replace((cast((        SELECT DISTINCT c.name as X        FROM sys.foreign_key_columns AS f         	JOIN sys.[columns] c             	ON c.[object_id] = f.referenced_object_id                 	AND c.column_id = f.referenced_column_id        WHERE f.constraint_object_id = fk.[object_id]        FOR XML PATH('')    	) AS VARCHAR(MAX))), '</X><X>', ', '),'<X>', ''),'</X>','') +    ')'  +    CASE WHEN fk.delete_referential_action <> 0 THEN ' ON DELETE '  + (fk.delete_referential_action_desc COLLATE DATABASE_DEFAULT) ELSE '' END +    CASE WHEN fk.update_referential_action <> 0 THEN ' ON UPDATE ' + (fk.update_referential_action_desc COLLATE DATABASE_DEFAULT) ELSE '' END +    CASE WHEN fk.is_not_for_replication <> 0 THEN ' NOT FOR REPLICATION' ELSE '' END    AS [Create DDL],    '$DB_NAME$.' + s1.name + '.' + o1.name + '.' + fk.name AS [Reference]FROM sys.foreign_keys fk WITH (NOLOCK)	JOIN sys.foreign_key_columns AS fc WITH (NOLOCK)     	ON fc.constraint_object_id = fk.[object_id]	JOIN sys.objects o1 WITH (NOLOCK)     	ON o1.[object_id] = fc.parent_object_id    JOIN sys.schemas s1 WITH (NOLOCK)     	ON s1.[schema_id] = o1.[schema_id]    JOIN sys.objects o2 WITH (NOLOCK)     	ON o2.[object_id] = fc.referenced_object_id    JOIN sys.schemas s2 WITH (NOLOCK)     	ON s2.[schema_id] = o2.[schema_id]WHERE fc.constraint_column_id = 1 AND    (s2.name <> s1.name OR o2.name <> o1.name) AND    ('$SCHEMA_NAME$' = '' OR s1.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o1.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=1
noCompare=1
minVer=589824
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.1.40]
enabled=1
caption=(header)
export=1
qType=3
oType=
query=/****************************************************************** * Code generated by SoftTree SQL Assistant © v$SA_VERSION$ * using Schema Compare templates * Time: $DATE$ $TIME$   * Source: $SOURCE$ * Target: $TARGET$ * ================================================================ * VERY IMPORTANT: Before running this script please check a recent * database backup is available so that you can undo all changes in * case of errors or unexpected data loss. ******************************************************************/
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.41]
enabled=1
caption=XML Collection (CREATE)
export=1
qType=3
oType=XML Collection
query=CREATE XML SCHEMA COLLECTION [$SCHEMA_NAME$].[$NAME$] AS N'$VALUE$'
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.42]
enabled=1
caption=XML Collection (DROP)
export=1
qType=3
oType=XML Collection
query=DROP XML SCHEMA COLLECTION [$SCHEMA_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.43]
enabled=1
caption=Database (CREATE)
export=1
qType=3
oType=Database
query=CREATE DATABASE [$NAME$]GOUSE [$NAME$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.44]
enabled=1
caption=Database (DROP)
export=1
qType=3
oType=Database
query=DROP DATABASE [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.45]
enabled=1
caption=Database (ALTER)
export=1
qType=3
oType=Database
query=USE [$DB_NAME$]
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.46]
enabled=1
caption=Schema (CREATE)
export=1
qType=3
oType=Schema
query=CREATE SCHEMA [$NAME$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.47]
enabled=1
caption=Schema (DROP)
export=1
qType=3
oType=Schema
query=DROP SCHEMA [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.48]
enabled=1
caption=Column Definition
export=1
qType=3
oType=Column
query=  [$NAME$] $TYPE$$FILESTREAM$$ COLLATE {COLLATE}$$IDENTITY$$NOT FOR REPLICATION$ $NULLABLE$$ROWGUIDCOL$$SPARSE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=is_computed=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.49]
enabled=1
caption=Column Definition
export=1
qType=3
oType=Column
query=  [$NAME$] AS $COMPUTED$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=is_computed=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.50]
enabled=1
caption=Column Name
export=1
qType=3
oType=Column
query=[$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Auto=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.51]
enabled=1
caption=Column Name New
export=1
qType=3
oType=Column
query=[$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Auto=0 & Nullable=NOT NULL
pathNameCnt=0
loadedObj=

[schemaCmp.1.52]
enabled=1
caption=Column Value New
export=1
qType=3
oType=
query=/*{ Default value for $NAME$  }*/
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Nullable=NOT NULL
pathNameCnt=0
loadedObj=

[schemaCmp.1.53]
enabled=1
caption=Column Value New Warning
export=1
qType=3
oType=
query=-- WARNING: Do not forget to specify default value for column $NAME$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Nullable=NOT NULL
pathNameCnt=0
loadedObj=

[schemaCmp.1.54]
enabled=1
caption=Column Convert
export=1
qType=3
oType=Column
query=CONVERT($TYPE$, [$NAME$])
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*Type & Auto=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.55]
enabled=1
caption=Column Convert
export=1
qType=3
oType=Column
query=[$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Auto=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.56]
enabled=1
caption=Constraint Name
export=1
qType=3
oType=
query= CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=IsSystem=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.57]
enabled=1
caption=Column (CREATE)
export=1
qType=3
oType=Column
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=COLUMN DEFINITION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.58]
enabled=1
caption=Column (DROP)
export=1
qType=3
oType=Column
query=BEGIN TRY  BEGIN TRANSACTION 	$\n\n\t|		DEPENDENT=DROP DEPENDENT,		REFERENCE=DROP DEPENDENT$	ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP COLUMN [$NAME$]  COMMIT TRANSACTIONEND TRYBEGIN CATCH   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  DECLARE @ErrorState INT = ERROR_STATE();  PRINT @ErrorMessage  IF @@TRANCOUNT > 0 -- undo all changes    ROLLBACK TRANSACTION;  -- abort with an error  RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);END CATCH
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.59]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$]($,\n|COLUMN=COLUMN DEFINITION$)$ ON [{DATA SPACE}]$$({PARTITION COLUMN})$$GO{\nGO\n\n|	PRIMARY KEY,	UNIQUE KEY,	CHECK CONSTRAINT,	DEFAULT CONSTRAINT,	INDEX,DML TRIGGER,	FOREIGN KEY}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.60]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=BEGIN TRANSACTIONGO${\nGO\n\n|	REFERENCE.TARGET_ONLY=DROP DEPENDENT,	DML TRIGGER.TARGET_ONLY=DML TRIGGER (DROP)}GO$EXECUTE SP_RENAME N'[$SCHEMA_NAME$].[$OBJECT_NAME$]', N'TMP_$OBJECT_NAME$','OBJECT' GOCREATE TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$]($,\n|COLUMN.TARGET=COLUMN DEFINITION$)$ ON [{DATA SPACE}]$$({PARTITION COLUMN})$GOALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] SET (LOCK_ESCALATION =TABLE)GO${\nGO\n|DEFAULT CONSTRAINT.TARGET=DEFAULT CONSTRAINT (CREATE)}GO$${|=IDENTITY INSERT ON}GO$${\n|COLUMN.ONLY_NEW=Column Value New Warning}$IF EXISTS(SELECT * FROM [$SCHEMA_NAME$].[TMP_$OBJECT_NAME$])		EXEC('INSERT INTO [$SCHEMA_NAME$].[$OBJECT_NAME$] ($, |COLUMN.TARGET_OLD=COLUMN NAME,COLUMN.ONLY_NEW=COLUMN NAME NEW$)				SELECT $, |COLUMN.TARGET_OLD=COLUMN CONVERT,COLUMN.ONLY_NEW=COLUMN VALUE NEW$				FROM [$SCHEMA_NAME$].[TMP_$OBJECT_NAME$] WITH (HOLDLOCK TABLOCKX)')GO${|=IDENTITY INSERT OFF}GO$DROP TABLE [$SCHEMA_NAME$].[TMP_$OBJECT_NAME$]GO${\nGO\n\n|	PRIMARY KEY.TARGET=PRIMARY KEY (CREATE),	UNIQUE KEY.TARGET=UNIQUE KEY (CREATE),	CHECK CONSTRAINT.TARGET=CHECK (CREATE),	INDEX.TARGET=INDEX (CREATE),	FOREIGN KEY.TARGET=FOREIGN KEY (CREATE),	REFERENCE.TARGET_ONLY=CREATE DEPENDENT,	DML TRIGGER.TARGET=DML TRIGGER (CREATE)}GO$COMMIT
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.61]
enabled=1
caption=Table (DROP)
export=1
qType=3
oType=Table
query=BEGIN TRY  BEGIN TRANSACTION 	$\n\n\t|REFERENCE=DROP DEPENDENT$	DROP TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$]  COMMIT TRANSACTIONEND TRYBEGIN CATCH   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  DECLARE @ErrorState INT = ERROR_STATE();  PRINT @ErrorMessage  IF @@TRANCOUNT > 0 -- undo all changes    ROLLBACK TRANSACTION;  -- abort with an error  RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);END CATCH
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.62]
enabled=1
caption=Default Constraint (CREATE)
export=1
qType=3
oType=Default Constraint
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ DEFAULT $DEFINITION$ FOR [$VALUE$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.63]
enabled=1
caption=Default Constraint (DROP)
export=1
qType=3
oType=Default Constraint
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.64]
enabled=1
caption=Check (DROP)
export=1
qType=3
oType=Check Constraint
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.65]
enabled=1
caption=Check (CREATE)
export=1
qType=3
oType=Check Constraint
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ CHECK$|=NOT FOR REPLICATION$ $VALUE$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.66]
enabled=1
caption=Primary Key (DROP)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.67]
enabled=1
caption=Primary Key (CREATE)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ PRIMARY KEY $TYPE DESC$ (    $VALUE$)$|=INDEX OPTIONS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.68]
enabled=1
caption=Foreign Key (DROP)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.69]
enabled=1
caption=Foreign Key (CREATE)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ FOREIGN KEY ($VALUE$) REFERENCES $REFER TABLE$( $REFER COLUMNS$ ) $ ON DELETE {ON DELETE}$$ ON UPDATE {ON UPDATE}$$|=NOT FOR REPLICATION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.70]
enabled=1
caption=Index (DROP)
export=1
qType=3
oType=Index
query=DROP INDEX [$SCHEMA_NAME$].[$OBJECT_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.71]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE $UNIQUE$$TYPE DESC$ INDEX [$NAME$] ON [$SCHEMA_NAME$].[$OBJECT_NAME$] ($COLUMNS$)$INCLUDE ({INCLUDE COLUMNS})$$WHERE {FILTER}$$USING XML INDEX [{USING INDEX}]$$ FOR {SECONDARY TYPE}$$|=INDEX OPTIONS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.72]
enabled=1
caption=Unique Key (DROP)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.73]
enabled=1
caption=Unique Key (CREATE)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ UNIQUE $TYPE DESC$ (    $VALUE$)$|=INDEX OPTIONS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.74]
enabled=1
caption=Not For Replication
export=1
qType=3
oType=
query= NOT FOR REPLICATION
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=not for replication=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.75]
enabled=1
caption=Drop Dependent
export=1
qType=3
oType=
query=$DROP DDL$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.76]
enabled=1
caption=Create Dependent
export=1
qType=3
oType=
query=$CREATE DDL$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.77]
enabled=1
caption=Synonym (CREATE)
export=1
qType=3
oType=Synonym
query=CREATE SYNONYM [$SCHEMA_NAME$].[$NAME$] FOR $BASE OBJECT NAME$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.78]
enabled=1
caption=Synonym (DROP)
export=1
qType=3
oType=Synonym
query=DROP SYNONYM [$SCHEMA_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.79]
enabled=1
caption=Permission (CREATE)
export=1
qType=3
oType=Permission
query=$STATE DESC$ $PERMISSION NAME$ ON [$SCHEMA_NAME$].[$OBJECT_NAME$] TO [$USER$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.80]
enabled=1
caption=Permission (DROP)
export=1
qType=3
oType=Permission
query=REVOKE $PERMISSION NAME$ ON [$SCHEMA_NAME$].[$OBJECT_NAME$] TO [$USER$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.81]
enabled=1
caption=DML Trigger (DROP)
export=1
qType=3
oType=DML Trigger
query=DROP TRIGGER [$SCHEMA_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.82]
enabled=1
caption=DDL Trigger (DROP)
export=1
qType=3
oType=DDL Trigger
query=DROP TRIGGER [$NAME$] ON $PARENT CLASS;DATABASE$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.83]
enabled=1
caption=DML Trigger (CREATE)
export=1
qType=3
oType=DML Trigger
query=$DDL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.84]
enabled=1
caption=Index Options
export=1
qType=3
oType=
query=WITH(    PAD_INDEX = $PAD INDEX;OFF$,$    FILLFACTOR = {FILL FACTOR},$     IGNORE_DUP_KEY = $IGNORE DUP KEY;OFF$,     STATISTICS_NORECOMPUTE = $STATISTICS NORECOMPUTE;OFF$,    ALLOW_ROW_LOCKS = $ALLOW ROW LOCKS;ON$,     ALLOW_PAGE_LOCKS = $ALLOW PAGE LOCKS;ON$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.85]
enabled=1
caption=Table Object (RENAME)
export=1
qType=3
oType=Default Constraint,Primary Key,Unique Key,Check Constraint
query=EXEC sp_rename @objname = N'$SCHEMA_NAME$.$NAME.TRG$', @newname = N'$NAME.SRC$'
linkByVal=0
hasValue=0
templType=RENAME
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.86]
enabled=1
caption=Index (RENAME)
export=1
qType=3
oType=Index
query=EXEC sp_rename @objname = N'$SCHEMA_NAME$.$OBJECT_NAME$.$NAME.TRG$', @newname = N'$NAME.SRC$'
linkByVal=0
hasValue=0
templType=RENAME
hidden=0
noCompare=0
minVer=0
condition=IsConstraint=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.87]
enabled=1
caption=Object Dependencies
export=1
qType=1
oType=
query=SELECT DISTINCT	s.name AS [Schema name],	o.name AS [Object name],	'[' + s2.name + '].[' + o2.name + ']' AS [Depend on object],	'Depend' AS [Target type]FROM sys.sql_dependencies AS sd	JOIN sys.objects AS o		ON o.[object_id] = sd.[object_id]	JOIN sys.schemas AS s		ON s.[schema_id] = o.[schema_id]	JOIN sys.objects AS o2		ON o2.[object_id] = sd.referenced_major_id	JOIN sys.schemas AS s2		ON s2.[schema_id] = o2.[schema_id]WHERE (o.[type] IN ('V', 'TR') 	OR o.[type] IN ('FN', 'TF', 'P') 	AND o2.[type] IN ('FN', 'TF', 'P'))      AND ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$')     AND ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=1
noCompare=1
minVer=589824
condition=
pathNameCnt=2
loadedObj=View,DML Trigger,Procedure,Function

[schemaCmp.1.88]
enabled=1
caption=Columns for Table Types
export=1
qType=1
oType=
query=SELECT    s.name 		AS [Schema name],     o.name 		AS [Table type name],     c.name		AS [Column name],     'Column'    AS [Target type],    t.name +     CASE     	WHEN t.name IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length) END + ')'    	WHEN t.name IN ('nvarchar', 'nchar')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length / 2) END + ')'     	WHEN t.name IN ('decimal', 'numeric')      		THEN '(' + CONVERT(VARCHAR, c.[precision]) + ',' + CONVERT(VARCHAR, c.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN c.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable],     (    	SELECT ' IDENTITY (' + CAST(ic.seed_value AS VARCHAR) + ', ' + CAST(ic.increment_value AS VARCHAR) + ')' +        	CASE WHEN ic.is_not_for_replication = 1 THEN ' NOT FOR REPLICATION' ELSE '' END          FROM sys.identity_columns AS ic        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    )  AS [Identity],    (    	SELECT cc.definition         FROM sys.computed_columns AS cc        WHERE cc.[object_id] = c.[object_id]         	AND cc.column_id = c.column_id    ) AS [Computed],    CASE WHEN t.is_user_defined <> 1 THEN c.collation_name END AS [Collate],    CASE     	WHEN c.is_rowguidcol = 1 THEN ' ROWGUIDCOL'     END AS [Rowguidcol],     CAST(c.is_computed AS tinyint) AS [is_computed__HIDDEN],    dc.definition AS [Default] FROM sys.[columns] c WITH (NOLOCK)	JOIN sys.types t WITH (NOLOCK)     	on c.user_type_id = t.user_type_id	JOIN sys.table_types o WITH (NOLOCK)     	ON o.type_table_object_id = c.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]	LEFT JOIN sys.default_constraints dc WITH (NOLOCK)     	ON dc.parent_object_id = o.type_table_object_id         	AND dc.parent_column_id = c.column_id  WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY c.column_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Table Type

[schemaCmp.1.89]
enabled=1
caption=Check Constraints for Table Types
export=1
qType=1
oType=
query=SELECT 	s.name 				AS [Schema name],     t.name 				AS [Table type name],     c.name 				AS [Constraint name],     'Check Constraint' 	AS [Target type],    c.definition 		AS [Definition] FROM sys.check_constraints c WITH (NOLOCK)	JOIN sys.table_types t WITH (NOLOCK)     	ON t.type_table_object_id = c.parent_object_id	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR t.name = '$OBJECT_NAME$')
linkByVal=1
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Table Type

[schemaCmp.1.90]
enabled=1
caption=Primary/Unique Keys for Table Types
export=1
qType=1
oType=
query=SELECT    s.name AS [Schema name],     t.name AS [Table type name],     i.name AS [Key name],    CASE kc.[type]     	WHEN 'PK' THEN 'Primary Key'    	WHEN 'UQ' THEN 'Unique Key'    END AS [Target type],    replace(replace(replace(cast((    	SELECT        	('[' + c.name + '] ' + CASE ic.is_descending_key WHEN 1 THEN ' DESC' ELSE ' ASC' END) AS [X]        FROM sys.index_columns ic        	LEFT JOIN sys.indexes idx ON ic.index_id = idx.index_id AND ic.[object_id] = idx.[object_id]        	LEFT JOIN sys.[columns] c ON c.[object_id] = idx.[object_id] AND ic.column_id = c.column_id        WHERE idx.[object_id] = i.[object_id]         	AND idx.index_id = i.index_id             AND ic.is_included_column = 0        ORDER BY ic.index_column_id        FOR XML PATH('')) AS VARCHAR(MAX)),        '</X><X>', ', '),'<X>', ''),'</X>',''    ) AS [Columns],    i.type_desc AS [Type desc],    CASE i.[ignore_dup_key] WHEN 0 THEN 'OFF' ELSE 'ON' END AS [Ignore dup key]FROM sys.key_constraints kc WITH (NOLOCK) 	JOIN sys.indexes i WITH (NOLOCK)     	ON i.[object_id] = kc.parent_object_id         	AND i.name = kc.name	JOIN sys.table_types t WITH (NOLOCK)     	ON t.type_table_object_id = i.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR t.name = '$OBJECT_NAME$')
linkByVal=1
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Table Type

[schemaCmp.1.91]
enabled=1
caption=Type (DROP)
export=1
qType=3
oType=Data Type,Table Type
query=DROP TYPE [$SCHEMA_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.92]
enabled=1
caption=Data Type (CREATE)
export=1
qType=3
oType=Data Type
query=CREATE TYPE [$SCHEMA_NAME$].[$NAME$] FROM $TYPE$ $NULLABLE$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.93]
enabled=1
caption=Table Type (CREATE)
export=1
qType=3
oType=Table Type
query=CREATE TYPE [$SCHEMA_NAME$].[$NAME$] AS TABLE(	$,\n\t|		COLUMN=COLUMN DEFINITION FOR TABLE TYPE,		PRIMARY KEY=PRIMARY KEY FOR TABLE TYPE,		UNIQUE KEY=UNIQUE KEY FOR TABLE TYPE,		CHECK CONSTRAINT=CHECK FOR TABLE TYPE$)
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.94]
enabled=1
caption=Column Definition for Table Type
export=1
qType=3
oType=Column
query=[$NAME$] $TYPE$$ COLLATE {COLLATE}$ $NULLABLE$$ DEFAULT {DEFAULT}$$IDENTITY$$ROWGUIDCOL$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=is_computed=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.95]
enabled=1
caption=Column Definition for Table Type
export=1
qType=3
oType=Column
query=[$NAME$] AS $COMPUTED$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=is_computed=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.96]
enabled=1
caption=Check for Table Type
export=1
qType=3
oType=Check Constraint
query=CHECK $VALUE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.97]
enabled=1
caption=Primary Key for Table Type
export=1
qType=3
oType=Primary Key
query=PRIMARY KEY $TYPE DESC$ ( $VALUE$ ) WITH (IGNORE_DUP_KEY=$IGNORE DUP KEY;OFF$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.98]
enabled=1
caption=Unique Key for Table Type
export=1
qType=3
oType=Primary Key
query=UNIQUE $TYPE DESC$ ( $VALUE$ ) WITH (IGNORE_DUP_KEY=$IGNORE DUP KEY;OFF$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.99]
enabled=1
caption=Role (CREATE)
export=1
qType=3
oType=Role
query=CREATE ROLE [$NAME$] AUTHORIZATION [$OWNER$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.100]
enabled=1
caption=Role (DROP)
export=1
qType=3
oType=Role
query=DROP ROLE [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.101]
enabled=1
caption=User Windows (CREATE)
export=1
qType=3
oType=User
query=CREATE LOGIN [$NAME$] FROM WINDOWS$ DEFAULT_DATABASE = [{DEFAULT DATABASE}]$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=Is OS Name=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.102]
enabled=1
caption=User (DROP)
export=1
qType=3
oType=User
query=DROP LOGIN [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.103]
enabled=1
caption=Sequence (CREATE)
export=1
qType=3
oType=Sequence
query=CREATE SEQUENCE [$SCHEMA_NAME$].[$NAME$]    AS $TYPE;int$    START WITH $START VALUE;1$    INCREMENT BY $INCREMENT;1$    $MINVALUE {MIN VALUE};NO MINVALUE$    $MAXVALUE {MAX VALUE};NO MAXVALUE$    $CYCLING$    $CACHED$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.104]
enabled=1
caption=Sequence (DROP)
export=1
qType=3
oType=Sequence
query=DROP SEQUENCE [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.105]
enabled=1
caption=Aggregate (CREATE)
export=1
qType=3
oType=Aggregate
query=CREATE AGGREGATE [$SCHEMA_NAME$].[$OBJECT_NAME$](	$,\n\t|ARGUMENT=ARGUMENT DEFINITION$) RETURNS $RETURN$EXTERNAL NAME [$ASSEMBLY$].[$ASSEMBLY CLASS$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.106]
enabled=1
caption=Aggregate (DROP)
export=1
qType=3
oType=Aggregate
query=DROP AGGREGATE [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.107]
enabled=1
caption=Assembly Function (CREATE)
export=1
qType=3
oType=Assembly Function
query=CREATE FUNCTION [$SCHEMA_NAME$].[$OBJECT_NAME$](	$,\n\t|ARGUMENT=ARGUMENT DEFINITION$) RETURNS $RETURN$EXTERNAL NAME [$ASSEMBLY$].[$ASSEMBLY CLASS$].[$ASSEMBLY METHOD$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.108]
enabled=1
caption=Argument Definition
export=1
qType=3
oType=
query=$NAME$ $VALUE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.109]
enabled=1
caption=Assembly Table Function (CREATE)
export=1
qType=3
oType=Assembly Table Function
query=CREATE FUNCTION [$SCHEMA_NAME$].[$OBJECT_NAME$](	$,\n\t|ARGUMENT=ARGUMENT DEFINITION$) RETURNS TABLE(	$,\n\t|	COLUMN=COLUMN DEFINITION FOR TABLE TYPE,	PRIMARY KEY=PRIMARY KEY FOR TABLE TYPE,	UNIQUE KEY=UNIQUE KEY FOR TABLE TYPE,	CHECK CONSTRAINT=CHECK FOR TABLE TYPE$)EXTERNAL NAME [$ASSEMBLY$].[$ASSEMBLY CLASS$].[$ASSEMBLY METHOD$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.110]
enabled=1
caption=Table Return
export=1
qType=3
oType=
query=TABLE(	$,\n\t|		COLUMN=COLUMN DEFINITION FOR TABLE TYPE,		PRIMARY KEY=PRIMARY KEY FOR TABLE TYPE,		UNIQUE KEY=UNIQUE KEY FOR TABLE TYPE,		CHECK CONSTRAINT=CHECK FOR TABLE TYPE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.111]
enabled=1
caption=Columns For ATF
export=1
qType=1
oType=
query=SELECT    s.name 		AS [Schema name],     o.name 		AS [Function name],     c.name 		AS [Column name],     'Column' 	AS [Target type],     t.name +    CASE     	WHEN t.name IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length) END + ')'    	WHEN t.name IN ('nvarchar', 'nchar')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length / 2) END + ')'     	WHEN t.name IN ('decimal', 'numeric')      		THEN '(' + CONVERT(VARCHAR, c.[precision]) + ',' + CONVERT(VARCHAR, c.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN c.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable],     (    	SELECT ' IDENTITY (' + CAST(ic.seed_value AS VARCHAR) + ', ' + CAST(ic.increment_value AS VARCHAR) + ')' +        CASE WHEN ic.is_not_for_replication = 1 THEN ' NOT FOR REPLICATION' ELSE '' END          FROM sys.identity_columns AS ic        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    )  AS [Identity],    (    	SELECT cc.definition         FROM sys.computed_columns AS cc        WHERE cc.[object_id] = c.[object_id] AND cc.column_id = c.column_id    ) AS [Computed],    c.collation_name AS [Collate],    CASE     	WHEN c.is_rowguidcol = 1 THEN ' ROWGUIDCOL'     END AS [Rowguidcol],     CAST(c.is_computed AS tinyint) AS [is_computed__HIDDEN],    dc.definition AS [Default] FROM sys.[columns] c WITH (NOLOCK)	JOIN sys.types t WITH (NOLOCK)     	ON c.user_type_id = t.user_type_id	JOIN sys.objects o WITH (NOLOCK)     	ON o.object_id = c.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]	LEFT JOIN sys.default_constraints dc WITH (NOLOCK)     	ON dc.parent_object_id = o.object_id         	AND dc.parent_column_id = c.column_id  WHERE o.[type] = 'FT' AND	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY c.column_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Assembly Table Function

[schemaCmp.1.112]
enabled=1
caption=Check Constraints for ATF
export=1
qType=1
oType=
query=SELECT 	s.name 				AS [Schema name],     t.name 				AS [Function name],     c.name 				AS [Constraint name],     'Check Constraint' 	AS [Target type],    c.definition 		AS [Definition] FROM sys.check_constraints c WITH (NOLOCK)	JOIN sys.objects t WITH (NOLOCK)     	ON t.[object_id] = c.parent_object_id	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE t.[type] = 'FT' AND  	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR t.name = '$OBJECT_NAME$')
linkByVal=1
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Assembly Table Function

[schemaCmp.1.113]
enabled=1
caption=Primary/Unique Keys for ATF
export=1
qType=1
oType=
query=SELECT    s.name AS [Schema name],     t.name AS [Function name],     i.name AS [Key name],    CASE kc.[type]     	WHEN 'PK' THEN 'Primary Key'    	WHEN 'UQ' THEN 'Unique Key'    END AS [Target type],    replace(replace(replace(cast((    	SELECT        	('[' + c.name + '] ' + CASE ic.is_descending_key WHEN 1 THEN ' DESC' ELSE ' ASC' END) AS [X]        FROM sys.index_columns ic        	LEFT JOIN sys.indexes idx             	ON ic.index_id = idx.index_id                 	AND ic.[object_id] = idx.[object_id]        	LEFT JOIN sys.[columns] c             	ON c.[object_id] = idx.[object_id]                 	AND ic.column_id = c.column_id        WHERE idx.[object_id] = i.[object_id]         	AND idx.index_id = i.index_id             AND ic.is_included_column = 0        ORDER BY ic.index_column_id        for xml path('')) AS VARCHAR(MAX)), '</X><X>', ', '),'<X>', ''),'</X>',''    ) AS [Columns],    i.type_desc AS [Type desc],    CASE i.[ignore_dup_key]     	WHEN 0 THEN 'OFF'         ELSE 'ON'     END as [Ignore dup key]FROM sys.key_constraints kc WITH (NOLOCK) 	JOIN sys.indexes i WITH (NOLOCK)     	ON i.[object_id] = kc.parent_object_id         	AND i.name = kc.name	JOIN sys.objects t WITH (NOLOCK)     	ON t.object_id = i.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE t.[type] = 'FT' AND 	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR t.name = '$OBJECT_NAME$')
linkByVal=1
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Assembly Table Function

[schemaCmp.1.114]
enabled=1
caption=Function (DROP)
export=1
qType=3
oType=Assembly Function,Assembly Table Function,Function
query=DROP FUNCTION [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.115]
enabled=1
caption=Procedure (DROP)
export=1
qType=3
oType=Procedure,Assembly Procedure
query=DROP PROCEDURE [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.116]
enabled=1
caption=View (DROP)
export=1
qType=3
oType=View
query=DROP VIEW [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.117]
enabled=1
caption=Application Role (CREATE)
export=1
qType=3
oType=Application Role
query=CREATE APPLICATION ROLE $NAME$    WITH PASSWORD = '/*{password}*/', DEFAULT_SCHEMA = $OWNER;dbo$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.118]
enabled=1
caption=Application Role (DROP)
export=1
qType=3
oType=Application Role
query=DROP APPLICATION ROLE $NAME$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.119]
enabled=1
caption=Assembly (CREATE)
export=1
qType=3
oType=Assembly
query=CREATE ASSEMBLY [$NAME$] AUTHORIZATION $AUTHORIZATION$ FROM $CONTENT$WITH PERMISSION_SET = $PERMISSION SET$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.120]
enabled=1
caption=Assembly (DROP)
export=1
qType=3
oType=Assembly
query=DROP ASSEMBLY $NAME$ WITH NO DEPENDENTS
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.121]
enabled=1
caption=Partition Function (CREATE)
export=1
qType=3
oType=Partition Function
query=CREATE PARTITION FUNCTION [$NAME$] ( $PARAMETER$ )AS $FUNCTION TYPE$ FOR VALUES ( $, |PARTITION RANGE VALUE=NAME UNDELIMITED$ )
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.122]
enabled=1
caption=Partition Function (DROP)
export=1
qType=3
oType=Partition Function
query=DROP PARTITION FUNCTION [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.123]
enabled=1
caption=Name Undelimited
export=1
qType=3
oType=
query=$NAME$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.124]
enabled=1
caption=Partition Scheme (CREATE)
export=1
qType=3
oType=Partition Scheme
query=CREATE PARTITION SCHEME [$NAME$]AS PARTITION [$SCHEMA_NAME$]TO ( $, |PARTITION SPACE=VALUE DELIMITED$ )
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.125]
enabled=1
caption=Value Delimited
export=1
qType=3
oType=
query=[$VALUE$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.126]
enabled=1
caption=Partition Scheme (DROP)
export=1
qType=3
oType=Partition Scheme
query=DROP PARTITION SCHEME [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.127]
enabled=1
caption=Table Partition Attributes
export=1
qType=0
oType=
query=SELECT 	s.name AS [Schema name],     t.name AS [Table name],     ds.name AS [Data space],     (     	SELECT TOP 1 c.name        FROM sys.index_columns ic        JOIN sys.columns c         	ON  c.object_id = t.object_id             	AND c.column_id = ic.column_id    	WHERE ic.partition_ordinal > 0         	AND ic.index_id = p.index_id            AND ic.object_id = t.object_id      ) AS [Partition column] FROM sys.tables t WITH (NOLOCK)	JOIN sys.schemas s WITH (NOLOCK)          	ON s.[schema_id] = t.[schema_id]	JOIN sys.partitions p WITH (NOLOCK)       	ON p.[object_id] = t.[object_id]         	AND p.partition_number = 1	JOIN sys.indexes i WITH (NOLOCK)          	ON i.[object_id] = t.[object_id]         	AND i.index_id = p.index_id	JOIN sys.data_spaces ds WITH (NOLOCK)     	ON ds.data_space_id = i.data_space_idWHERE ds.data_space_id > 1
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.1.128]
enabled=1
caption=Default (CREATE)
export=1
qType=3
oType=Default
query=$DDL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.129]
enabled=1
caption=Default (DROP)
export=1
qType=3
oType=Default
query=DROP DEFAULT [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.130]
enabled=1
caption=Rule (CREATE)
export=1
qType=3
oType=Rule
query=$DDL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.131]
enabled=1
caption=Rule (DROP)
export=1
qType=3
oType=Rule
query=DROP DEFAULT [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.132]
enabled=1
caption=Properties - Level 0
export=1
qType=1
oType=Database
query=SELECT 	name 		AS [Property name],     'Property' 	AS [Target type],     value       AS [Property value],	objtype 	AS [obj_type__HIDDEN],	0 			AS [level__HIDDEN]  FROM fn_listextendedproperty(DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=Property

[schemaCmp.1.133]
enabled=1
caption=Properties - Level 1
export=1
qType=1
oType=
query=SELECT 	objname 	AS [Object name],     name		AS [Property name],     'Property' 	AS [Target type],     value		AS [Property value], 	objtype 	AS [obj_type__HIDDEN],	1 			AS [level__HIDDEN]  FROM fn_listextendedproperty(DEFAULT, 'SCHEMA', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)UNION ALLSELECT 	objname 	AS [Object name],     name		AS [Property name],     'Property' 	AS [Target type],     value		AS [Property value], 	objtype 	AS [obj_type__HIDDEN],	1 			AS [level__HIDDEN]  FROM fn_listextendedproperty(DEFAULT, 'ASSEMBLY', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)UNION ALLSELECT 	objname 	AS [Object name],     name		AS [Property name],     'Property' 	AS [Target type],     value		AS [Property value], 	objtype 	AS [obj_type__HIDDEN],	1 			AS [level__HIDDEN]  FROM fn_listextendedproperty(DEFAULT, 'PARTITION FUNCTION', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)UNION ALLSELECT 	objname 	AS [Object name],     name		AS [Property name],     'Property' 	AS [Target type],     value		AS [Property value], 	objtype 	AS [obj_type__HIDDEN],	1 			AS [level__HIDDEN]  FROM fn_listextendedproperty(DEFAULT, 'PARTITION SCHEME', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)UNION ALLSELECT 	objname 	AS [Object name],     name		AS [Property name],     'Property' 	AS [Target type],     value		AS [Property value], 	objtype 	AS [obj_type__HIDDEN],	1 			AS [level__HIDDEN]  FROM fn_listextendedproperty(DEFAULT, 'TRIGGER', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT)
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Property

[schemaCmp.1.134]
enabled=1
caption=Properties - Level 2
export=1
qType=1
oType=
query=CREATE TABLE #props(	sch_name SYSNAME NULL,	obj_name SYSNAME NULL,	obj_type SYSNAME NULL,	prop_name SYSNAME NULL,	VALUE SQL_VARIANT NULL)DECLARE @sch_name SYSNAMEDECLARE sch_cursor CURSOR LOCAL READ_ONLYFOR    SELECT name    FROM sys.schemasOPEN sch_cursorFETCH NEXT FROM sch_cursor INTO @sch_nameWHILE @@FETCH_STATUS = 0BEGIN 	INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'TABLE', DEFAULT, DEFAULT, DEFAULT)		INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'AGGREGATE', DEFAULT, DEFAULT, DEFAULT)	 	INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'DEFAULT', DEFAULT, DEFAULT, DEFAULT) 	 	INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'FUNCTION', DEFAULT, DEFAULT, DEFAULT)		INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'PROCEDURE', DEFAULT, DEFAULT, DEFAULT)		INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'RULE', DEFAULT, DEFAULT, DEFAULT)	 	INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'SYNONYM', DEFAULT, DEFAULT, DEFAULT) 		INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'TYPE', DEFAULT, DEFAULT, DEFAULT)		INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'VIEW', DEFAULT, DEFAULT, DEFAULT)		INSERT INTO #props	SELECT @sch_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'XML SCHEMA COLLECTION', DEFAULT, DEFAULT, DEFAULT)     FETCH NEXT FROM sch_cursor 	INTO @sch_nameEND CLOSE sch_cursorDEALLOCATE sch_cursorSELECT 	p.sch_name	AS [Schema name],     p.obj_name	AS [Object name],     p.prop_name AS [Property name],     'Property'	AS [Target type],     p.[VALUE]	AS [Property value],	p.obj_type 	AS [obj_type__HIDDEN],	2 			AS [level__HIDDEN]  FROM #props pDROP TABLE #props
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Property

[schemaCmp.1.135]
enabled=1
caption=Properties - Level 3
export=1
qType=1
oType=
query=CREATE TABLE #props(	sch_name SYSNAME NULL,	tbl_name SYSNAME NULL,	obj_name SYSNAME NULL,	obj_type SYSNAME NULL,	prop_name SYSNAME NULL,	VALUE SQL_VARIANT NULL)DECLARE @sch_name SYSNAMEDECLARE @tbl_name SYSNAMEDECLARE sch_cursor CURSOR LOCAL READ_ONLYFOR    SELECT s.name, t.name    FROM sys.tables AS t    JOIN sys.schemas AS s ON s.[schema_id] = t.[schema_id]OPEN sch_cursorFETCH NEXT FROM sch_cursor INTO @sch_name, @tbl_nameWHILE @@FETCH_STATUS = 0BEGIN 	INSERT INTO #props	SELECT @sch_name, @tbl_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'TABLE', @tbl_name, 'COLUMN', DEFAULT)	INSERT INTO #props	SELECT @sch_name, @tbl_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'TABLE', @tbl_name, 'CONSTRAINT', DEFAULT)	INSERT INTO #props	SELECT @sch_name, @tbl_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'TABLE', @tbl_name, 'INDEX', DEFAULT)	INSERT INTO #props	SELECT @sch_name, @tbl_name, objname, objtype, NAME, VALUE     	FROM fn_listextendedproperty(default, 'SCHEMA', @sch_name, 'TABLE', @tbl_name, 'TRIGGER', DEFAULT)    FETCH NEXT FROM sch_cursor     INTO @sch_name, @tbl_nameEND CLOSE sch_cursorDEALLOCATE sch_cursorSELECT 	p.sch_name	AS [Schema name],     p.tbl_name	AS [Table name],     p.obj_name	AS [Subobject name],     p.prop_name	AS [Property name],     'Property'	AS [Target type],     p.[VALUE]	AS [Property value],	p.obj_type 	AS [obj_type__HIDDEN],	3 			AS [level__HIDDEN]  FROM #props pDROP TABLE #props
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Property

[schemaCmp.1.136]
enabled=1
caption=Database Roles
export=1
qType=1
oType=
query=SELECT 	p1.[name] AS [Role name], 	CASE     	WHEN p1.[type] = 'A' THEN 'Application Role'         ELSE 'Role'     END AS [Target type],     p2.[name] AS [Owner]FROM   sys.database_principals p1 WITH (NOLOCK)	LEFT JOIN sys.database_principals AS p2 WITH (NOLOCK)     	ON p1.owning_principal_id = p2.principal_idWHERE  p1.is_fixed_role = 0  	AND p1.principal_id <> 0    AND p1.[type] IN ('A', 'R')ORDER BY p1.name      
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=589824
condition=9
pathNameCnt=0
loadedObj=Role,Application Role

[schemaCmp.1.137]
enabled=1
caption=Database Users
export=1
qType=1
oType=Database
query=SELECT 	s.name AS [User name],    'User' AS [Target type], 	s.default_database_name AS [Default database], 	s.default_language_name AS [Default language],	CASE WHEN l.principal_id IS NULL THEN 1 ELSE 0 END AS [Is OS Name],	CASE l.is_policy_checked WHEN 0 THEN 'OFF' WHEN 1 THEN 'ON' END AS [Is policy checked],	CASE l.is_expiration_checked WHEN 0 THEN 'OFF' WHEN 1 THEN 'ON' END AS [Is expiration checked]FROM master.sys.server_principals s	LEFT JOIN master.sys.sql_logins l		ON l.principal_id = s.principal_idWHERE  s.[type] IN ('G','U','S')ORDER BY s.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=User

[schemaCmp.1.138]
enabled=1
caption=Property Level 0 (DROP)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_dropextendedproperty @name = $NAME.STRING$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=level=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.139]
enabled=1
caption=Property Level 0 (CREATE)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_addextendedproperty @name = $NAME.STRING$, @value = $VALUE.STRING$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=level=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.140]
enabled=1
caption=Property Level 0 (ALTER)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_updateextendedproperty @name = $NAME.STRING$, @value = $VALUE.STRING$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=level=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.141]
enabled=1
caption=Property Level 1 (DROP)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_dropextendedproperty @name = $NAME.STRING$ 	,@level0type = $OBJ_TYPE.STRING$, @level0name = N'$SCHEMA_NAME$'
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=level=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.142]
enabled=1
caption=Property Level 1 (CREATE)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_addextendedproperty @name = $NAME.STRING$, @value = $VALUE.STRING$	,@level0type = $OBJ_TYPE.STRING$, @level0name = N'$SCHEMA_NAME$'
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=level=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.143]
enabled=1
caption=Property Level 1 (ALTER)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_updateextendedproperty @name = $NAME.STRING$, @value = $VALUE.STRING$	,@level0type = $OBJ_TYPE.STRING$, @level0name = N'$SCHEMA_NAME$'
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=level=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.144]
enabled=1
caption=Property Level 2 (DROP)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_dropextendedproperty @name = $NAME.STRING$ 	,@level0type = N'SCHEMA', @level0name = N'$SCHEMA_NAME$'	,@level1type = $OBJ_TYPE.STRING$, @level1name = N'$OBJECT_NAME$'
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=level=2
pathNameCnt=0
loadedObj=

[schemaCmp.1.145]
enabled=1
caption=Property Level 2 (ALTER)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_updateextendedproperty @name = $NAME.STRING$, @value = $VALUE.STRING$	,@level0type = N'SCHEMA', @level0name = N'$SCHEMA_NAME$'	,@level1type = $OBJ_TYPE.STRING$, @level1name = N'$OBJECT_NAME$'
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=level=2
pathNameCnt=0
loadedObj=

[schemaCmp.1.146]
enabled=1
caption=Property Level 2 (CREATE)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_addextendedproperty @name = $NAME.STRING$, @value = $VALUE.STRING$	,@level0type = N'SCHEMA', @level0name = N'$SCHEMA_NAME$'	,@level1type = $OBJ_TYPE.STRING$, @level1name = N'$OBJECT_NAME$'
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=level=2
pathNameCnt=0
loadedObj=

[schemaCmp.1.147]
enabled=1
caption=Property Level 3 (DROP)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_dropextendedproperty @name = $NAME.STRING$ 	,@level0type = N'SCHEMA', @level0name = N'$SCHEMA_NAME$'	,@level1type = N'TABLE', @level1name = N'$OBJECT_NAME$'	,@level2type = $OBJ_TYPE.STRING$, @level2name = N'$SUBOBJ_NAME$'
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=level=3
pathNameCnt=0
loadedObj=

[schemaCmp.1.148]
enabled=1
caption=Property Level 3 (ALTER)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_updateextendedproperty @name = $NAME.STRING$, @value = $VALUE.STRING$	,@level0type = N'SCHEMA', @level0name = N'$SCHEMA_NAME$'	,@level1type = N'TABLE', @level1name = N'$OBJECT_NAME$'	,@level2type = $OBJ_TYPE.STRING$, @level2name = N'$SUBOBJ_NAME$'
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=level=3
pathNameCnt=0
loadedObj=

[schemaCmp.1.149]
enabled=1
caption=Property Level 3 (CREATE)
export=1
qType=3
oType=Property
query=EXECUTE sys.sp_addextendedproperty @name = $NAME.STRING$, @value = $VALUE.STRING$	,@level0type = N'SCHEMA', @level0name = N'$SCHEMA_NAME$'	,@level1type = N'TABLE', @level1name = N'$OBJECT_NAME$'	,@level2type = $OBJ_TYPE.STRING$, @level2name = N'$SUBOBJ_NAME$'
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=level=3
pathNameCnt=0
loadedObj=

[schemaCmp.1.150]
enabled=1
caption=Identity Insert OFF
export=1
qType=3
oType=
query=SET IDENTITY_INSERT [$SCHEMA_NAME$].[$OBJECT_NAME$] OFF
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=HasIdentity=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.151]
enabled=1
caption=Identity Insert ON
export=1
qType=3
oType=
query=SET IDENTITY_INSERT [$SCHEMA_NAME$].[$OBJECT_NAME$] ON
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=HasIdentity=1
pathNameCnt=0
loadedObj=

[schemaCmp.1.152]
enabled=1
caption=Assembly Procedure (CREATE)
export=1
qType=3
oType=Assembly Procedure
query=CREATE PROCEDURE [$SCHEMA_NAME$].[$OBJECT_NAME$]$(	{,\n\t|ARGUMENT=ARGUMENT DEFINITION})$  AS EXTERNAL NAME [$ASSEMBLY$].[$ASSEMBLY CLASS$].[$ASSEMBLY METHOD$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.153]
enabled=1
caption=Column Definition
export=1
qType=3
oType=Column
query=  [$NAME$] $TYPE$$FILESTREAM$$ COLLATE {COLLATE}$$IDENTITY$$NOT FOR REPLICATION$ $NULLABLE$$ROWGUIDCOL$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=is_computed=0
pathNameCnt=0
loadedObj=

[schemaCmp.1.154]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE $UNIQUE$$TYPE DESC$ INDEX [$NAME$] ON [$SCHEMA_NAME$].[$OBJECT_NAME$] ($COLUMNS$)$INCLUDE ({INCLUDE COLUMNS})$$|=INDEX OPTIONS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.155]
enabled=1
caption=View (CREATE)
export=1
qType=3
oType=View
query=$DDL$$GO{\nGO\n\n|Index}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.1.156]
enabled=1
caption=User Server (CREATE)
export=1
qType=3
oType=User
query=CREATE LOGIN [$NAME$]  WITH PASSWORD = '/*{ password }*/'	DEFAULT_DATABASE = [$DEFAULT DATABASE$],	DEFAULT_LANGUAGE = [$DEFAULT LANGUAGE$],	CHECK_POLICY = $IS POLICY CHECKED$,	CHECK_EXPIRATION = $IS EXPIRATION CHECKED$ 
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=Is OS Name=0
pathNameCnt=0
loadedObj=

[schemaCmp.2]
enabled=1
caption=Windows Azure
export=1
count=98
dbType=1
useCache=0
objTypes=User	Default schemaRoleTable	Data spaceViewProcedureFunctionSynonymData Type|Type	Type	NullableTable Type|Type	-Nullable-PermissionDDL TriggerColumn	Type    Nullable    Collate    Rowguidcol    Filestream    Sparse	PositionPrimary Key	Ignore dup key	Statistics norecomputeUnique Key	Ignore dup key	Statistics norecomputeForeign Key	On delete    On update    Not for replicationCheck Constraint    Not for replicationDefault ConstraintDML Trigger|DDL TriggerIndex	Ignore dup key	Statistics norecompute

[schemaCmp.2.1]
enabled=1
caption=Databases
export=1
qType=1
oType=Server
query=SELECT 	name		AS [Database name],     'Database'	AS [Target type] FROM dbo.sysdatabases WITH (NOLOCK) WHERE status & 33760 = 0ORDER BY name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Database

[schemaCmp.2.2]
enabled=1
caption=Schemas
export=1
qType=1
oType=Database
query=SELECT 	name	 AS [Schema name],     'Schema' AS [Target type]FROM sys.schemas WITH (NOLOCK)WHERE schema_id < 16384ORDER BY name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Schema

[schemaCmp.2.3]
enabled=1
caption=Database Roles
export=1
qType=1
oType=Database
query=SELECT 	p1.NAME AS [Role name], 	'Role'	AS [Target type],     p2.name AS [Owner]FROM sys.database_principals p1 WITH (NOLOCK)	LEFT JOIN sys.database_principals AS p2 WITH (NOLOCK)     	ON p1.owning_principal_id = p2.principal_idWHERE  p1.is_fixed_role = 0  	AND p1.principal_id <> 0    AND p1.[type] = 'R'ORDER BY p1.name      
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Role

[schemaCmp.2.4]
enabled=1
caption=Database Users
export=1
qType=1
oType=Database
query=SELECT 	name				AS [User name],     'User'				AS [Target type],     default_schema_name AS [Default schema]FROM sys.database_principals WITH (NOLOCK)WHERE  [type] IN ('U', 'S')	AND NAME NOT IN ('dbo', 'guest', 'INFORMATION_SCHEMA', 'sys')ORDER BY name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=User

[schemaCmp.2.5]
enabled=1
caption=DDL Triggers
export=1
qType=1
oType=Database
query=SELECT 	t.name				 AS [Trigger name],     'DDL Trigger'		 AS [Target type],     t.parent_class_desc	 AS [Parent class],     s.definition 		 AS [DDL]FROM sys.triggers t WITH (NOLOCK)	LEFT JOIN sys.sql_modules s WITH (NOLOCK) 		ON t.[object_id] = s.[object_id]WHERE t.parent_id = 0ORDER BY t.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=DDL Trigger

[schemaCmp.2.6]
enabled=1
caption=Data Types
export=1
qType=1
oType=
query=SELECT 	s.[name] 	AS [Schema name],      t.[name] 	AS [Type name],     'Data Type' AS [Target type],     bt.[name] +     CASE     	WHEN bt.name IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE t.max_length WHEN -1 THEN 'max' ELSE convert(VARCHAR, t.max_length) END + ')'    	WHEN bt.name IN ('nvarchar', 'nchar')       		THEN '(' + CASE t.max_length WHEN -1 THEN 'max' ELSE convert(VARCHAR, t.max_length / 2) END + ')'     	WHEN bt.name IN ('decimal', 'numeric')      		THEN '(' + convert(VARCHAR, t.[precision]) + ',' + convert(VARCHAR, t.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN t.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable] FROM sys.types AS t WITH (NOLOCK)	JOIN sys.types AS bt WITH (NOLOCK)     	ON bt.user_type_id = t.system_type_id	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE t.is_user_defined = 1 	AND t.is_assembly_type = 0	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY t.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Data Type

[schemaCmp.2.7]
enabled=1
caption=Table Types
export=1
qType=1
oType=
query=SELECT 	s.[name] 		AS [Schema name],      t.[name] 		AS [Type name],     'Table Type'	AS [Target type],    CASE     	WHEN t.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END 			AS [Nullable] FROM sys.table_types t WITH (NOLOCK)	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE t.is_user_defined = 1    	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY t.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Table Type

[schemaCmp.2.8]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT 	s.[name] AS [Schema name],     o.[name] AS [Table name], 	CASE o.[type]     	WHEN 'S' THEN 'System Table'         ELSE 'Table'     END AS [Target type], 	CASE     	WHEN EXISTS(SELECT 1 FROM sys.[columns] c WHERE c.[object_id]=o.[object_id] AND c.is_identity = 1) THEN 1         ELSE 0 	END AS [HasIdentity__DONT_COMPARE__HIDDEN]FROM sys.objects AS o WITH (NOLOCK)	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] WHERE o.[type] IN ('U', 'S') 	AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY o.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=System Table,Table

[schemaCmp.2.9]
enabled=1
caption=Code Objects
export=1
qType=1
oType=
query=SELECT    s.[name] AS [Schema name],    o.[name] AS [Object name],    CASE         WHEN o.[type] = 'V' THEN 'View'        WHEN o.[type] IN ('P', 'X', 'RF') THEN 'Procedure'        WHEN o.[type] IN ('FN','TF','IF') THEN 'Function'    END AS [Target type],    c.definition AS [DDL]FROM sys.objects o WITH (NOLOCK)    JOIN sys.schemas s WITH (NOLOCK)         ON s.[schema_id] = o.[schema_id]    JOIN sys.sql_modules c WITH (NOLOCK)         ON c.[object_id] = o.[object_id]WHERE o.[type] IN ('V', 'P', 'X', 'RF', 'FN','TF','IF')    AND ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY o.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=View,Procedure,Function

[schemaCmp.2.10]
enabled=1
caption=Synonyms
export=1
qType=1
oType=
query=SELECT 	s.[name] 			AS [Schema name],     o.[name]			AS [Synonym name],     'Synonym' 			AS [Target type],     o.base_object_name 	AS [Base object name__NAME_REFERENCE]FROM sys.synonyms o WITH (NOLOCK)	JOIN sys.schemas s WITH (NOLOCK)     	ON s.schema_id = o.schema_idWHERE ('$SCHEMA_NAME$' = '' OR s.[name] = '$SCHEMA_NAME$')ORDER BY o.[name]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Synonym

[schemaCmp.2.11]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT    s.[name] 	AS [Schema name],     o.[name] 	AS [Table name],     c.[name] 	AS [Column name],     'Column' 	AS [Target type],     t.name +	CASE     	WHEN t.[name] IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length) END + ')'    	WHEN t.[name] IN ('nvarchar', 'nchar')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length / 2) END + ')'     	WHEN t.[name] IN ('decimal', 'numeric')      		THEN '(' + CONVERT(VARCHAR, c.[precision]) + ',' + CONVERT(VARCHAR, c.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN c.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable],     (    	SELECT ' IDENTITY (' + CAST(ic.seed_value AS VARCHAR) + ', ' + CAST(ic.increment_value AS VARCHAR) + ')'        FROM sys.identity_columns AS ic        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    ) AS [Identity],    (    	SELECT CASE WHEN ic.is_not_for_replication = 1 THEN ' NOT FOR REPLICATION' ELSE '' END          FROM sys.identity_columns AS ic        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    ) AS [Not for replication],    (    	SELECT cc.definition         FROM sys.computed_columns AS cc        WHERE cc.[object_id] = c.[object_id] AND cc.column_id = c.column_id    ) AS [Computed],    CASE WHEN t.is_user_defined <> 1 THEN c.collation_name END AS [Collate],    CASE     	WHEN c.is_rowguidcol = 1 THEN ' ROWGUIDCOL'     END AS [Rowguidcol],     CASE     	WHEN c.is_filestream = 1 THEN ' FILESTREAM'     END AS [Filestream],     CASE     	WHEN (c.is_computed | c.is_rowguidcol = 1) or (t.name = 'TIMESTAMP') or (t.name = 'ROWVERSION') THEN 1         ELSE 0     END AS [Auto],    CASE     	WHEN c.is_sparse = 1 THEN ' SPARSE'     END AS [Sparse],     cast(c.is_computed as tinyint) as [is_computed__HIDDEN],	c.column_id as [Position]   FROM sys.[columns] c WITH (NOLOCK)	JOIN sys.types t WITH (NOLOCK)     	ON c.user_type_id = t.user_type_id	JOIN sys.objects o WITH (NOLOCK)     	ON o.[object_id] = c.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] WHERE o.type IN ('U', 'S') AND 	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY c.column_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.2.12]
enabled=1
caption=Primary/Unique Keys
export=1
qType=1
oType=
query=SELECT    s.name 	AS [Schema name],     o.name 	AS [Table name],     i.name 	AS [Key name],    CASE kc.[type]     	WHEN 'PK' THEN 'Primary Key'    	WHEN 'UQ' THEN 'Unique Key'    END 	AS [Target type],    CAST(kc.is_system_named AS TINYINT) AS [IsSystem__DONT_COMPARE],    i.type_desc AS [Type desc],    CASE i.[ignore_dup_key]     	WHEN 0 THEN 'OFF'         ELSE 'ON'     END as [Ignore dup key],    CASE COALESCE((SELECT s.no_recompute FROM sys.[stats] s WHERE s.[object_id] = i.[object_id] AND s.stats_id = i.index_id), 0)     	WHEN 0 THEN 'OFF'         ELSE 'ON'     END as [Statistics norecompute]FROM sys.key_constraints kc WITH (NOLOCK) 	JOIN sys.indexes i WITH (NOLOCK)     	ON i.[object_id] = kc.parent_object_id         	AND i.name = kc.name	JOIN sys.objects AS o WITH (NOLOCK)     	ON o.[object_id] = i.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Primary Key,Unique Key

[schemaCmp.2.13]
enabled=1
caption=Primary/Unique Key Columns
export=1
qType=0
oType=
query=SELECT	s.name AS [Schema name],	o.name AS [Table name],	idx.name AS [Index name],	'[' + c.name + ']' + CASE ic.is_descending_key WHEN 1 THEN ' DESC' ELSE ' ASC' END AS [Value__AGG]FROM sys.index_columns ic WITH (NOLOCK)	JOIN sys.indexes idx WITH (NOLOCK)		ON ic.index_id = idx.index_id 		AND ic.[object_id] = idx.[object_id]	JOIN sys.[columns] c WITH (NOLOCK)		ON c.[object_id] = idx.[object_id] 		AND ic.column_id = c.column_id	JOIN sys.objects AS o WITH (NOLOCK)		ON ic.[object_id] = o.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)		ON o.[schema_id] = s.[schema_id]WHERE idx.is_primary_key | idx.is_unique_constraint = 1	AND ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') 	AND ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY ic.key_ordinal
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Primary Key,Unique Key

[schemaCmp.2.14]
enabled=1
caption=Default Constraints
export=1
qType=1
oType=
query=SELECT 	s.name				AS [Schema name],     o.name				AS [Table name],     d.name				AS [Default name],     'Default Constraint' AS [Target type],    c.name				AS [Column name],    CAST(d.is_system_named AS TINYINT) AS [IsSystem__DONT_COMPARE],    d.definition		AS [Definition]FROM sys.default_constraints d WITH (NOLOCK)	JOIN sys.objects AS o WITH (NOLOCK)     	ON o.[object_id] = d.parent_object_id	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]	JOIN sys.[columns] AS c WITH (NOLOCK)     	ON c.[object_id] = o.[object_id]         	AND d.parent_column_id = c.column_idWHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=1
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Default Constraint

[schemaCmp.2.15]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT 	s.name AS [Schema name], 	o.name AS [Table name], 	i.name AS [Index name], 	'Index'	AS [Target type],	i.type_desc AS [Type desc], 	CASE WHEN i.is_unique = 1 THEN 'UNIQUE ' ELSE '' END AS [Unique],	CASE WHEN i.has_filter = 1 THEN i.filter_definition END AS [Filter],	CASE i.[ignore_dup_key] 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END AS [Ignore dup key],	CASE COALESCE((SELECT s.no_recompute FROM sys.[stats] s WHERE s.[object_id] = i.[object_id] AND s.stats_id = i.index_id), 0) 		WHEN 0 THEN 'OFF' 		ELSE 'ON' 	END as [Statistics norecompute]FROM sys.indexes i WITH (NOLOCK)	JOIN sys.objects AS o WITH (NOLOCK) 		ON o.[object_id] = i.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK) 		ON s.[schema_id] = o.[schema_id]WHERE i.is_primary_key | i.is_unique_constraint = 0 AND i.[type] <> 0 AND	('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND 	('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.2.16]
enabled=1
caption=Index columns
export=1
qType=0
oType=
query=SELECT	s.name AS [Schema name],	o.name AS [Table name],	idx.name AS [Index name],	c.name AS [Value__AGG],	CASE WHEN ic.is_included_column = 0 THEN		'[' + c.name + ']' + CASE ic.is_descending_key WHEN 1 THEN ' DESC' ELSE ' ASC' END	END AS [Columns__AGG],	CASE WHEN ic.is_included_column <> 0 THEN		'[' + c.name + ']'	END AS [Include columns__AGG]FROM sys.index_columns ic WITH (NOLOCK)	JOIN sys.indexes idx WITH (NOLOCK)		ON ic.index_id = idx.index_id 		AND ic.[object_id] = idx.[object_id]	JOIN sys.[columns] c WITH (NOLOCK)		ON c.[object_id] = idx.[object_id] 		AND ic.column_id = c.column_id	JOIN sys.objects AS o WITH (NOLOCK)		ON ic.[object_id] = o.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)		ON o.[schema_id] = s.[schema_id]WHERE idx.is_primary_key | idx.is_unique_constraint = 0  	AND ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') 	AND ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY ic.key_ordinal
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Index

[schemaCmp.2.17]
enabled=1
caption=Foreign Keys
export=1
qType=1
oType=
query=SELECT    s1.name 		AS [Schema name],     o1.name 		AS [Table name],     fk.name 		AS [Foreign key name],     'Foreign Key' 	AS [Target type],    CAST(fk.is_system_named AS TINYINT) AS [IsSystem__DONT_COMPARE],     '[' + s2.name + '].[' + o2.name + ']' AS [Refer table__NAME_REFERENCE],    CASE     	WHEN fk.delete_referential_action <> 0 THEN fk.delete_referential_action_desc     END AS [On delete],     CASE     	WHEN fk.update_referential_action <> 0 THEN fk.update_referential_action_desc      END AS [On update],     CAST(fk.is_not_for_replication AS INT) AS [Not for replication]FROM sys.foreign_keys fk WITH (NOLOCK)    JOIN sys.objects o1 WITH (NOLOCK)     	ON o1.[object_id] = fk.parent_object_id    JOIN sys.schemas s1 WITH (NOLOCK)     	ON s1.[schema_id] = o1.[schema_id]    JOIN sys.objects o2 WITH (NOLOCK)     	ON o2.[object_id] = fk.referenced_object_id    JOIN sys.schemas s2 WITH (NOLOCK)     	ON s2.[schema_id] = o2.[schema_id]WHERE   ('$SCHEMA_NAME$' = '' OR s1.name = '$SCHEMA_NAME$') 	AND ('$OBJECT_NAME$' = '' OR o1.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Foreign Key

[schemaCmp.2.18]
enabled=1
caption=Foreign Key Columns
export=1
qType=0
oType=
query=SELECT 	s.name AS [Schema name],	o.name AS [Table name],	fk.name AS [Index name],	'[' + c.name + ']' AS [Value__AGG],	'[' + cr.name + ']' AS [Refer columns__AGG]FROM sys.foreign_key_columns AS f WITH (NOLOCK) 	JOIN sys.[columns] c WITH (NOLOCK) 		ON c.[object_id] = f.parent_object_id 		AND c.column_id = f.parent_column_id	JOIN sys.foreign_keys AS fk WITH (NOLOCK)		ON fk.[object_id] = f.constraint_object_id	JOIN sys.objects AS o WITH (NOLOCK)		ON o.[object_id] = f.parent_object_id 	JOIN sys.schemas AS s WITH (NOLOCK)		ON o.[schema_id] = s.[schema_id]	JOIN sys.[columns] cr WITH (NOLOCK)		ON cr.[object_id] = f.referenced_object_id 		AND cr.column_id = f.referenced_column_id	JOIN sys.indexes AS i WITH (NOLOCK)		ON i.[object_id] = f.referenced_object_id		AND i.is_primary_key = 1	JOIN sys.index_columns ic WITH (NOLOCK)		ON ic.[object_id] = f.referenced_object_id		AND ic.column_id = f.referenced_column_id		AND ic.index_id = i.index_idWHERE   ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') 	AND ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY ic.key_ordinal
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Foreign Key

[schemaCmp.2.19]
enabled=1
caption=Check Constraints
export=1
qType=1
oType=
query=SELECT 	s.name 				AS [Schema name],     o.name 				AS [Table name],     c.name 				AS [Constraint name],     'Check Constraint' 	AS [Target type],    c.definition 		AS [Definition],     CAST(c.is_system_named AS TINYINT) 			AS [IsSystem__DONT_COMPARE],     CAST(c.is_not_for_replication AS TINYINT) 	AS [Not for replication] FROM sys.check_constraints c WITH (NOLOCK)JOIN sys.objects AS o WITH (NOLOCK) 	ON o.[object_id] = c.parent_object_idJOIN sys.schemas AS s WITH (NOLOCK) 	ON s.[schema_id] = o.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=2
hasValue=1
templType=Attributes
hidden=0
noCompare=0
minVer=0
condition=No
pathNameCnt=2
loadedObj=Check Constraint

[schemaCmp.2.20]
enabled=1
caption=Permissions
export=1
qType=1
oType=
query=SELECT      s.name 				AS [Schema name],     o.name 				AS [Object name],     p.state_desc COLLATE DATABASE_DEFAULT + ' ' + p.permission_name  COLLATE DATABASE_DEFAULT         + ' TO ' + u.name COLLATE DATABASE_DEFAULT AS [Linking name],    'Permission' 		AS [Target type],    p.state_desc 		AS [State desc],    p.permission_name 	AS [Permission name],    u.name 				AS [User] FROM sys.database_permissions p WITH (NOLOCK)	JOIN sys.objects o WITH (NOLOCK)     	ON p.major_id = o.object_id	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] 	JOIN sys.database_principals u WITH (NOLOCK)     	ON u.principal_id = p.grantee_principal_idWHERE p.class = 1 AND    ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.2.21]
enabled=1
caption=DML Triggers
export=1
qType=1
oType=
query=SELECT 	s.name 			AS [Schema name],     o.name 			AS [Table name],     t.name 			AS [Trigger name],     'DML Trigger' 	AS [Target type],     c.definition 	AS [DDL]FROM sys.triggers t WITH (NOLOCK)	LEFT JOIN sys.sql_modules c WITH (NOLOCK)     	ON t.[object_id] = c.[object_id]	JOIN sys.objects o WITH (NOLOCK)     	ON t.parent_id = o.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id] WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=DML Trigger

[schemaCmp.2.22]
enabled=1
caption=Column Dependencies
export=1
qType=1
oType=
query=SELECT  	TABLE_SCHEMA 	AS [Schema name],	TABLE_NAME		AS [Table name],    COLUMN_NAME		AS [Column name],    CONSTRAINT_NAME AS [Constraint name],   'Dependent'		AS [Target type],   'ALTER TABLE [' + TABLE_SCHEMA + '].[' + TABLE_NAME + '] DROP CONSTRAINT [' + CONSTRAINT_NAME + ']' AS [Drop DDL],   '$DB_NAME$.' + TABLE_SCHEMA + '.' + TABLE_NAME + '.'  + CONSTRAINT_NAME AS [Reference]FROM   INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE WITH (NOLOCK)WHERE ('$SCHEMA_NAME$' = '' OR TABLE_SCHEMA = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR TABLE_NAME = '$OBJECT_NAME$')UNION ALLSELECT 	s.name,     o.name,     c.name,     d.name,    'Dependent',    'ALTER TABLE [' + s.name + '].[' + o.name + '] DROP CONSTRAINT [' + d.name + ']' as [Drop DDL],    '$DB_NAME$.' + s.name + '.' + o.name + '.'  + d.name as [Reference]FROM sys.default_constraints d WITH (NOLOCK)	JOIN sys.columns c WITH (NOLOCK)        ON  c.column_id = d.parent_column_id AND            c.object_id = d.parent_object_id    JOIN sys.objects o WITH (NOLOCK)        ON  o.object_id = d.parent_object_id    JOIN sys.schemas s WITH (NOLOCK)        ON  o.schema_id = s.schema_idWHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')UNION ALLSELECT 	s.name,     o.name,     c.name,     i.name,    'Dependent',    'DROP INDEX ['+i.name+'] ON [' + s.name + '].[' + o.name + ']' as [Drop DDL],    '$DB_NAME$.' + s.name + '.' + o.name + '.'  + i.name as [Reference]FROM   sys.indexes i WITH (NOLOCK)    JOIN sys.index_columns ic WITH (NOLOCK)        ON  ic.index_id = i.index_id AND            ic.object_id = i.object_id    JOIN sys.columns c WITH (NOLOCK)        ON  c.column_id = ic.column_id AND            c.object_id = i.object_id    JOIN sys.objects o WITH (NOLOCK)        ON  o.object_id = i.object_id    JOIN sys.schemas s WITH (NOLOCK)        ON  o.schema_id = s.schema_idWHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$') AND      i.is_primary_key = 0 AND       i.is_unique_constraint = 0        UNION ALLSELECT 	s.name,     o.name,     c.name,     fk.name,     'Reference',     'ALTER TABLE [' + s1.name + '].[' + o1.name + '] DROP CONSTRAINT [' + fk.name + ']',    '$DB_NAME$.' + s1.name + '.' + o1.name + '.' + fk.name as [Reference]FROM sys.foreign_keys fk WITH (NOLOCK)    JOIN sys.foreign_key_columns fc WITH (NOLOCK)     	ON fc.constraint_object_id = fk.[object_id]    JOIN sys.objects o1 WITH (NOLOCK)     	ON o1.[object_id] = fc.parent_object_id    JOIN sys.schemas s1 WITH (NOLOCK)     	ON s1.[schema_id] = o1.[schema_id]    JOIN sys.columns c WITH (NOLOCK)     	ON c.[object_id] = fc.referenced_object_id         	AND c.column_id = fc.referenced_column_id    JOIN sys.objects o WITH (NOLOCK)    	ON o.[object_id] = fc.referenced_object_id    JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND       ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=1
noCompare=1
minVer=0
condition=
pathNameCnt=3
loadedObj=Column

[schemaCmp.2.23]
enabled=1
caption=Table External References
export=1
qType=1
oType=
query=SELECT    s2.name 	AS [Schema name],     o2.name 	AS [Table name],     fk.name 	AS [Constraint name],     'Reference' AS [Target type],    'ALTER TABLE [' + s1.name + '].[' + o1.name + '] DROP CONSTRAINT [' + fk.name + ']' as [Drop DDL],    'ALTER TABLE [' + s1.name + '].[' + o1.name + '] ADD CONSTRAINT [' + fk.name + '] FOREIGN KEY ('+    replace(replace(replace((cast((        SELECT DISTINCT c.name AS X        FROM sys.foreign_key_columns AS f WITH (NOLOCK)         	JOIN sys.[columns] c WITH (NOLOCK)             	ON c.[object_id] = f.parent_object_id                 	AND c.column_id = f.parent_column_id        WHERE f.constraint_object_id = fk.[object_id]        FOR XML PATH('')    ) AS VARCHAR(MAX))), '</X><X>', ', '),'<X>', ''),'</X>','') +    ') REFERENCES [' + s2.name + '].[' + o2.name + '](' +    replace(replace(replace((cast((        SELECT DISTINCT c.name as X        FROM sys.foreign_key_columns AS f WITH (NOLOCK)         	JOIN sys.[columns] c WITH (NOLOCK)             	ON c.[object_id] = f.referenced_object_id                 	AND c.column_id = f.referenced_column_id        WHERE f.constraint_object_id = fk.[object_id]        FOR XML PATH('')    	) AS VARCHAR(MAX))), '</X><X>', ', '),'<X>', ''),'</X>','') +    ')'  +    CASE WHEN fk.delete_referential_action <> 0 THEN ' ON DELETE '  + (fk.delete_referential_action_desc COLLATE DATABASE_DEFAULT) ELSE '' END +    CASE WHEN fk.update_referential_action <> 0 THEN ' ON UPDATE ' + (fk.update_referential_action_desc COLLATE DATABASE_DEFAULT) ELSE '' END +    CASE WHEN fk.is_not_for_replication <> 0 THEN ' NOT FOR REPLICATION' ELSE '' END    AS [Create DDL],    '$DB_NAME$.' + s1.name + '.' + o1.name + '.' + fk.name AS [Reference]FROM sys.foreign_keys fk WITH (NOLOCK)	JOIN sys.foreign_key_columns AS fc WITH (NOLOCK)     	ON fc.constraint_object_id = fk.[object_id]	JOIN sys.objects o1 WITH (NOLOCK)     	ON o1.[object_id] = fc.parent_object_id    JOIN sys.schemas s1 WITH (NOLOCK)     	ON s1.[schema_id] = o1.[schema_id]    JOIN sys.objects o2 WITH (NOLOCK)     	ON o2.[object_id] = fc.referenced_object_id    JOIN sys.schemas s2 WITH (NOLOCK)     	ON s2.[schema_id] = o2.[schema_id]WHERE fc.constraint_column_id = 1 AND    (s2.name <> s1.name OR o2.name <> o1.name) AND    ('$SCHEMA_NAME$' = '' OR s1.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o1.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=1
noCompare=1
minVer=0
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.2.24]
enabled=1
caption=(header)
export=1
qType=3
oType=
query=/****************************************************************** * Code generated by SoftTree SQL Assistant © v$SA_VERSION$ * using Schema Compare templates * Time: $DATE$ $TIME$   * Source: $SOURCE$ * Target: $TARGET$ * ================================================================ * VERY IMPORTANT: Before running this script please check a recent * database backup is available so that you can undo all changes in * case of errors or unexpected data loss. ******************************************************************/
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.25]
enabled=1
caption=Database (CREATE)
export=1
qType=3
oType=Database
query=CREATE DATABASE [$NAME$]GOUSE [$NAME$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.26]
enabled=1
caption=Database (DROP)
export=1
qType=3
oType=Database
query=DROP DATABASE [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.27]
enabled=1
caption=Database (ALTER)
export=1
qType=3
oType=Database
query=USE [$DB_NAME$]
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.28]
enabled=1
caption=Schema (CREATE)
export=1
qType=3
oType=Schema
query=CREATE SCHEMA [$NAME$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.29]
enabled=1
caption=Schema (DROP)
export=1
qType=3
oType=Schema
query=DROP SCHEMA [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.30]
enabled=1
caption=Column Definition
export=1
qType=3
oType=Column
query=  [$NAME$] $TYPE$$FILESTREAM$$ COLLATE {COLLATE}$ $NULLABLE$$IDENTITY$$ROWGUIDCOL$$SPARSE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=is_computed=0
pathNameCnt=0
loadedObj=

[schemaCmp.2.31]
enabled=1
caption=Column Definition
export=1
qType=3
oType=Column
query=  [$NAME$] AS $COMPUTED$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=is_computed=1
pathNameCnt=0
loadedObj=

[schemaCmp.2.32]
enabled=1
caption=Column Name
export=1
qType=3
oType=Column
query=[$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Auto=0
pathNameCnt=0
loadedObj=

[schemaCmp.2.33]
enabled=1
caption=Column Name New
export=1
qType=3
oType=Column
query=[$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Auto=0 & Nullable=NOT NULL
pathNameCnt=0
loadedObj=

[schemaCmp.2.34]
enabled=1
caption=Column Value New
export=1
qType=3
oType=
query='' $NAME$  ''
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Nullable=NOT NULL
pathNameCnt=0
loadedObj=

[schemaCmp.2.35]
enabled=1
caption=Column Value New Warning
export=1
qType=3
oType=
query=-- WARNING: Do not forget to specify default value for column $NAME$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Nullable=NOT NULL
pathNameCnt=0
loadedObj=

[schemaCmp.2.36]
enabled=1
caption=Column Convert
export=1
qType=3
oType=Column
query=CONVERT($TYPE$, [$NAME$])
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*Type & Auto=0
pathNameCnt=0
loadedObj=

[schemaCmp.2.37]
enabled=1
caption=Column Convert
export=1
qType=3
oType=Column
query=[$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Auto=0
pathNameCnt=0
loadedObj=

[schemaCmp.2.38]
enabled=1
caption=Constraint Name
export=1
qType=3
oType=
query= CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=IsSystem=0
pathNameCnt=0
loadedObj=

[schemaCmp.2.39]
enabled=1
caption=Column (CREATE)
export=1
qType=3
oType=Column
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=COLUMN DEFINITION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.40]
enabled=1
caption=Column (DROP)
export=1
qType=3
oType=Column
query=BEGIN TRY	BEGIN TRANSACTION 	$\n\n\t|		DEPENDENT=DROP DEPENDENT,		REFERENCE=DROP DEPENDENT$	ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP COLUMN [$NAME$]	COMMIT TRANSACTIONEND TRYBEGIN CATCH   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  DECLARE @ErrorState INT = ERROR_STATE();  PRINT @ErrorMessage  IF @@TRANCOUNT > 0 -- undo all changes    ROLLBACK TRANSACTION;  -- abort with an error  RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);END CATCH
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.41]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$]($,\n|COLUMN=COLUMN DEFINITION$)$DATA SPACE$$PARTITION COLUMN$GO${\nGO\n\n|	PRIMARY KEY,	UNIQUE KEY,	CHECK CONSTRAINT,	DEFAULT CONSTRAINT,	INDEX,	DML TRIGGER,	FOREIGN KEY}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.42]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=BEGIN TRANSACTIONGO${\nGO\n\n|	REFERENCE.TARGET_ONLY=DROP DEPENDENT,	DML TRIGGER.TARGET_ONLY=DML TRIGGER (DROP)}$EXECUTE SP_RENAME N'[$SCHEMA_NAME$].[$OBJECT_NAME$]', N'TMP_$OBJECT_NAME$','OBJECT' GOCREATE TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$]($,\n|COLUMN.TARGET=COLUMN DEFINITION$)$DATA SPACE$$PARTITION COLUMN$GOALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] SET (LOCK_ESCALATION =TABLE)GO${|=IDENTITY INSERT ON}GO$${\n|COLUMN.ONLY_NEW=COLUMN VALUE NEW WARNING}$IF EXISTS(SELECT * FROM [$SCHEMA_NAME$].[TMP_$OBJECT_NAME$])         EXEC('INSERT INTO [$SCHEMA_NAME$].[$OBJECT_NAME$] ($,|COLUMN.TARGET_OLD=COLUMN NAME,COLUMN.ONLY_NEW=COLUMN NAME NEW$)                SELECT $,|COLUMN.TARGET_OLD=COLUMN CONVERT,COLUMN.ONLY_NEW=COLUMN VALUE NEW$ FROM [$SCHEMA_NAME$].[TMP_$OBJECT_NAME$] WITH (HOLDLOCK TABLOCKX)')GO${|=IDENTITY INSERT OFF}GO$DROP TABLE [$SCHEMA_NAME$].[TMP_$OBJECT_NAME$]GO${\nGO\n\n|	PRIMARY KEY.TARGET=PRIMARY KEY (CREATE),	UNIQUE KEY.TARGET=UNIQUE KEY (CREATE),	CHECK CONSTRAINT.TARGET=CHECK (CREATE),	DEFAULT CONSTRAINT.TARGET=DEFAULT CONSTRAINT (CREATE),	INDEX.TARGET=INDEX (CREATE),	FOREIGN KEY.TARGET=FOREIGN KEY (CREATE),	REFERENCE.TARGET_ONLY=CREATE DEPENDENT,	DML TRIGGER.TARGET=DML TRIGGER (CREATE)}GO$COMMIT
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.43]
enabled=1
caption=Table (DROP)
export=1
qType=3
oType=Table
query=BEGIN TRY  BEGIN TRANSACTION 	$\n\n\t|REFERENCE=DROP DEPENDENT$	DROP TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$]  COMMIT TRANSACTIONEND TRYBEGIN CATCH   DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();  DECLARE @ErrorSeverity INT = ERROR_SEVERITY();  DECLARE @ErrorState INT = ERROR_STATE();  PRINT @ErrorMessage  IF @@TRANCOUNT > 0 -- undo all changes    ROLLBACK TRANSACTION;  -- abort with an error  RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);END CATCH
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.44]
enabled=1
caption=Default Constraint (CREATE)
export=1
qType=3
oType=Default Constraint
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ DEFAULT $DEFINITION$ FOR [$VALUE$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.45]
enabled=1
caption=Default Constraint (DROP)
export=1
qType=3
oType=Default Constraint
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.46]
enabled=1
caption=Check (DROP)
export=1
qType=3
oType=Check Constraint
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.47]
enabled=1
caption=Check (CREATE)
export=1
qType=3
oType=Check Constraint
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ CHECK$|=NOT FOR REPLICATION$ $VALUE$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.48]
enabled=1
caption=Primary Key (DROP)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.49]
enabled=1
caption=Primary Key (CREATE)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ PRIMARY KEY $TYPE DESC$ (    $VALUE$)$|=INDEX OPTIONS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.50]
enabled=1
caption=Foreign Key (DROP)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.51]
enabled=1
caption=Foreign Key (CREATE)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ FOREIGN KEY ($VALUE$) REFERENCES $REFER TABLE$( $REFER COLUMNS$ ) $ ON DELETE {ON DELETE}$$ ON UPDATE {ON UPDATE}$$|=NOT FOR REPLICATION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.52]
enabled=1
caption=Index (DROP)
export=1
qType=3
oType=Index
query=DROP INDEX [$SCHEMA_NAME$].[$OBJECT_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.53]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE $UNIQUE$$TYPE DESC$ INDEX [$NAME$] ON [$SCHEMA_NAME$].[$OBJECT_NAME$] ($COLUMNS$)$INCLUDE ({INCLUDE COLUMNS})$$WHERE {FILTER}$$|=INDEX OPTIONS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.54]
enabled=1
caption=Unique Key (DROP)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] DROP CONSTRAINT [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.55]
enabled=1
caption=Unique Key (CREATE)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD$|=CONSTRAINT NAME$ UNIQUE $TYPE_DESC$ (    $VALUE$)$|=INDEX OPTIONS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.56]
enabled=1
caption=Not For Replication
export=1
qType=3
oType=
query= NOT FOR REPLICATION
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=not for replication=1
pathNameCnt=0
loadedObj=

[schemaCmp.2.57]
enabled=1
caption=Drop Dependent
export=1
qType=3
oType=
query=$DROP DDL$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.58]
enabled=1
caption=Create Dependent
export=1
qType=3
oType=
query=$CREATE DDL$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.59]
enabled=1
caption=Synonym (CREATE)
export=1
qType=3
oType=Synonym
query=CREATE SYNONYM [$SCHEMA_NAME$].[$NAME$] FOR $BASE OBJECT NAME$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.60]
enabled=1
caption=Synonym (DROP)
export=1
qType=3
oType=Synonym
query=DROP SYNONYM [$SCHEMA_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.61]
enabled=1
caption=Permission (CREATE)
export=1
qType=3
oType=Permission
query=$STATE DESC$ $PERMISSION NAME$ ON [$SCHEMA_NAME$].[$OBJECT_NAME$] TO [$USER$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.62]
enabled=1
caption=Permission (DROP)
export=1
qType=3
oType=Permission
query=REVOKE $PERMISSION NAME$ ON [$SCHEMA_NAME$].[$OBJECT_NAME$] TO [$USER$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.63]
enabled=1
caption=DML Trigger (DROP)
export=1
qType=3
oType=DML Trigger
query=DROP TRIGGER [$SCHEMA_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.64]
enabled=1
caption=DDL Trigger (DROP)
export=1
qType=3
oType=DDL Trigger
query=DROP TRIGGER [$NAME$] ON $PARENT CLASS$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.65]
enabled=1
caption=DML Trigger (CREATE)
export=1
qType=3
oType=DML Trigger
query=$DDL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.66]
enabled=1
caption=Index Options
export=1
qType=3
oType=
query=WITH(    IGNORE_DUP_KEY = $IGNORE DUP KEY;OFF$,     STATISTICS_NORECOMPUTE = $STATISTICS NORECOMPUTE;OFF$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.67]
enabled=1
caption=Table Object Rename
export=1
qType=3
oType=Default Constraint,Primary Key,Unique Key,Check Constraint
query=EXEC sp_rename @objname = N'$SCHEMA_NAME$.$NAME.TRG$', @newname = N'$NAME.SRC$'
linkByVal=0
hasValue=0
templType=RENAME
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.68]
enabled=1
caption=Index Rename
export=1
qType=3
oType=Index
query=EXEC sp_rename @objname = N'$SCHEMA_NAME$.$OBJECT_NAME$.$NAME.TRG$', @newname = N'$NAME.SRC$'
linkByVal=0
hasValue=0
templType=RENAME
hidden=0
noCompare=0
minVer=0
condition=IsConstraint=0
pathNameCnt=0
loadedObj=

[schemaCmp.2.69]
enabled=1
caption=Object Dependencies
export=1
qType=1
oType=
query=SELECT DISTINCT	s.name AS [Schema name],	o.name AS [Object name],	'[' + s2.name + '].[' + o2.name + ']' AS [Depend on object],	'Depend' AS [Target type]FROM sys.sql_dependencies AS sd	JOIN sys.objects AS o		ON o.[object_id] = sd.[object_id]	JOIN sys.schemas AS s		ON s.[schema_id] = o.[schema_id]	JOIN sys.objects AS o2		ON o2.[object_id] = sd.referenced_major_id	JOIN sys.schemas AS s2		ON s2.[schema_id] = o2.[schema_id]WHERE (o.[type] IN ('V', 'TR') 	OR o.[type] IN ('FN', 'TF', 'P') 	AND o2.[type] IN ('FN', 'TF', 'P'))      AND ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$')     AND ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=1
noCompare=1
minVer=0
condition=
pathNameCnt=2
loadedObj=View,DML Trigger,Procedure,Function

[schemaCmp.2.70]
enabled=1
caption=Columns for Table Types
export=1
qType=1
oType=
query=SELECT    s.name 		AS [Schema name],     o.name 		AS [Table type name],     c.name		AS [Column name],     'Column'    AS [Target type],    t.name +     CASE     	WHEN t.name IN ('varchar', 'char', 'binary', 'varbinary')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length) END + ')'    	WHEN t.name IN ('nvarchar', 'nchar')       		THEN '(' + CASE c.max_length WHEN -1 THEN 'max' ELSE CONVERT(VARCHAR, c.max_length / 2) END + ')'     	WHEN t.name IN ('decimal', 'numeric')      		THEN '(' + CONVERT(VARCHAR, c.[precision]) + ',' + CONVERT(VARCHAR, c.scale) + ')'    	ELSE ''    END AS [Type],    CASE     	WHEN c.is_nullable = 1 THEN 'NULL'         ELSE 'NOT NULL'     END AS [Nullable],     (    	SELECT ' IDENTITY (' + CAST(ic.seed_value AS VARCHAR) + ', ' + CAST(ic.increment_value AS VARCHAR) + ')' +        	CASE WHEN ic.is_not_for_replication = 1 THEN ' NOT FOR REPLICATION' ELSE '' END          FROM sys.identity_columns AS ic WITH (NOLOCK)        WHERE ic.[object_id] = c.[object_id]         	AND ic.column_id = c.column_id    )  AS [Identity],    (    	SELECT cc.definition         FROM sys.computed_columns AS cc WITH (NOLOCK)        WHERE cc.[object_id] = c.[object_id]         	AND cc.column_id = c.column_id    ) AS [Computed],    CASE WHEN t.is_user_defined <> 1 THEN c.collation_name END AS [Collate],    CASE     	WHEN c.is_rowguidcol = 1 THEN ' ROWGUIDCOL'         ELSE ''     END AS [Rowguidcol],     CAST(c.is_computed AS tinyint) AS [is_computed__HIDDEN],    dc.definition AS [Default] FROM sys.[columns] c WITH (NOLOCK)	JOIN sys.types t WITH (NOLOCK)     	on c.user_type_id = t.user_type_id	JOIN sys.table_types o WITH (NOLOCK)     	ON o.type_table_object_id = c.[object_id]	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = o.[schema_id]	LEFT JOIN sys.default_constraints dc WITH (NOLOCK)     	ON dc.parent_object_id = o.type_table_object_id         	AND dc.parent_column_id = c.column_id  WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR o.name = '$OBJECT_NAME$')ORDER BY c.column_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Table Type

[schemaCmp.2.71]
enabled=1
caption=Check Constraints for Table Types
export=1
qType=1
oType=
query=SELECT 	s.name 				AS [Schema name],     t.name 				AS [Table type name],     c.name 				AS [Constraint name],     'Check Constraint' 	AS [Target type],    c.definition 		AS [Definition] FROM sys.check_constraints c WITH (NOLOCK)	JOIN sys.table_types t WITH (NOLOCK)     	ON t.type_table_object_id = c.parent_object_id	JOIN sys.schemas s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR t.name = '$OBJECT_NAME$')
linkByVal=1
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Table Type

[schemaCmp.2.72]
enabled=1
caption=Primary/Unique Keys for Table Types
export=1
qType=1
oType=
query=SELECT    s.name AS [Schema name],     t.name AS [Table type name],     i.name AS [Key name],    CASE kc.[type]     	WHEN 'PK' THEN 'Primary Key'    	WHEN 'UQ' THEN 'Unique Key'    END AS [Target type],    replace(replace(replace(cast((    	SELECT        	('[' + c.name + '] ' + CASE ic.is_descending_key WHEN 1 THEN ' DESC' ELSE ' ASC' END) AS [X]        FROM sys.index_columns ic WITH (NOLOCK)        	LEFT JOIN sys.indexes idx WITH (NOLOCK) ON ic.index_id = idx.index_id AND ic.[object_id] = idx.[object_id]        	LEFT JOIN sys.[columns] c WITH (NOLOCK) ON c.[object_id] = idx.[object_id] AND ic.column_id = c.column_id        WHERE idx.[object_id] = i.[object_id]         	AND idx.index_id = i.index_id             AND ic.is_included_column = 0        ORDER BY ic.index_column_id        FOR XML PATH('')) AS VARCHAR(MAX)),        '</X><X>', ', '),'<X>', ''),'</X>',''    ) AS [Columns],    i.type_desc AS [Type desc],    CASE i.[ignore_dup_key] WHEN 0 THEN 'OFF' ELSE 'ON' END AS [Ignore dup key]FROM sys.key_constraints kc WITH (NOLOCK) 	JOIN sys.indexes i WITH (NOLOCK)     	ON i.[object_id] = kc.parent_object_id         	AND i.name = kc.name	JOIN sys.table_types t WITH (NOLOCK)     	ON t.type_table_object_id = i.[object_id]	JOIN sys.schemas AS s WITH (NOLOCK)     	ON s.[schema_id] = t.[schema_id]WHERE ('$SCHEMA_NAME$' = '' OR s.name = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR t.name = '$OBJECT_NAME$')
linkByVal=1
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Table Type

[schemaCmp.2.73]
enabled=1
caption=Type (DROP)
export=1
qType=3
oType=Data Type,Table Type
query=DROP TYPE [$SCHEMA_NAME$].[$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.74]
enabled=1
caption=Data Type (CREATE)
export=1
qType=3
oType=Data Type
query=CREATE TYPE [$SCHEMA_NAME$].[$NAME$] FROM $TYPE$ $NULLABLE$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.75]
enabled=1
caption=Table Type (CREATE)
export=1
qType=3
oType=Table Type
query=CREATE TYPE [$SCHEMA_NAME$].[$NAME$] AS TABLE(	$,\n\t|		COLUMN=COLUMN DEFINITION FOR TABLE TYPE,		PRIMARY KEY=PRIMARY KEY FOR TABLE TYPE,		UNIQUE KEY=UNIQUE KEY FOR TABLE TYPE,		CHECK CONSTRAINT=CHECK FOR TABLE TYPE$)
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.76]
enabled=1
caption=Column Definition for Table Type
export=1
qType=3
oType=Column
query=[$NAME$] $TYPE$$ COLLATE {COLLATE}$ $NULLABLE$$ DEFAULT {DEFAULT}$$IDENTITY$$ROWGUIDCOL$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=is_computed=0
pathNameCnt=0
loadedObj=

[schemaCmp.2.77]
enabled=1
caption=Column Definition for Table Type
export=1
qType=3
oType=Column
query=[$NAME$] AS $COMPUTED$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=is_computed=1
pathNameCnt=0
loadedObj=

[schemaCmp.2.78]
enabled=1
caption=Check for Table Type
export=1
qType=3
oType=Check Constraint
query=CHECK $VALUE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.79]
enabled=1
caption=Primary Key for Table Type
export=1
qType=3
oType=Primary Key
query=PRIMARY KEY $TYPE DESC$ ( $VALUE$ ) WITH (IGNORE_DUP_KEY=$IGNORE DUP KEY;OFF$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.80]
enabled=1
caption=Unique Key for Table Type
export=1
qType=3
oType=Primary Key
query=UNIQUE $TYPE_DESC$ ( $VALUE$ ) WITH (IGNORE_DUP_KEY=$IGNORE DUP KEY;OFF$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.81]
enabled=1
caption=Role (CREATE)
export=1
qType=3
oType=Role
query=CREATE ROLE [$NAME$] AUTHORIZATION [$OWNER$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.82]
enabled=1
caption=Role (DROP)
export=1
qType=3
oType=Role
query=DROP ROLE [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.83]
enabled=1
caption=User (CREATE)
export=1
qType=3
oType=User
query=CREATE USER [$NAME$]$|=USER DEFAULT SCHEMA$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.84]
enabled=1
caption=User (DROP)
export=1
qType=3
oType=User
query=DROP USER [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.85]
enabled=1
caption=User Default Schema
export=1
qType=3
oType=
query= WITH DEFAULT SCHEMA [$DEFAULT SCHEMA$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=DefaultSchema<>
pathNameCnt=0
loadedObj=

[schemaCmp.2.86]
enabled=1
caption=Table Return
export=1
qType=3
oType=
query=TABLE(	$,\n\t|		COLUMN=COLUMN DEFINITION FOR TABLE TYPE,		PRIMARY KEY=PRIMARY KEY FOR TABLE TYPE,		UNIQUE KEY=UNIQUE KEY FOR TABLE TYPE,		CHECK CONSTRAINT=CHECK FOR TABLE TYPE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.87]
enabled=1
caption=Function (DROP)
export=1
qType=3
oType=Assembly Function,Assembly Table Function,Function
query=DROP FUNCTION [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.88]
enabled=1
caption=Procedure (DROP)
export=1
qType=3
oType=Procedure
query=DROP PROCEDURE [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.89]
enabled=1
caption=View (DROP)
export=1
qType=3
oType=View
query=DROP VIEW [$SCHEMA_NAME$].[$OBJECT_NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.90]
enabled=1
caption=Partition Function (CREATE)
export=1
qType=3
oType=Partition Function
query=CREATE PARTITION FUNCTION [$NAME$] ( $PARAMETER$ )AS $FUNCTION TYPE$ FOR VALUES ( $, |PARTITION RANGE VALUE=NAME UNDELIMITED$ ) 
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.91]
enabled=1
caption=Partition Function (DROP)
export=1
qType=3
oType=Partition Function
query=DROP PARTITION FUNCTION [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.92]
enabled=1
caption=Name Undelimited
export=1
qType=3
oType=
query=$NAME$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.93]
enabled=1
caption=Partition Scheme (CREATE)
export=1
qType=3
oType=Partition Scheme
query=CREATE PARTITION SCHEME [$NAME$]AS PARTITION [$SCHEMA_NAME$]TO ( $, |PARTITION SPACE=VALUE DELIMITED$ )
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.94]
enabled=1
caption=Value Delimited
export=1
qType=3
oType=
query=[$VALUE$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.95]
enabled=1
caption=Partition Scheme (DROP)
export=1
qType=3
oType=Partition Scheme
query=DROP PARTITION SCHEME [$NAME$]
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.2.96]
enabled=1
caption=Identity Insert OFF
export=1
qType=3
oType=
query=SET IDENTITY_INSERT [$SCHEMA_NAME$].[$OBJECT_NAME$] OFF
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=HasIdentity=1
pathNameCnt=0
loadedObj=

[schemaCmp.2.97]
enabled=1
caption=Identity Insert ON
export=1
qType=3
oType=
query=SET IDENTITY_INSERT [$SCHEMA_NAME$].[$OBJECT_NAME$] ON
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=HasIdentity=1
pathNameCnt=0
loadedObj=

[schemaCmp.2.98]
enabled=1
caption=View (CREATE)
export=1
qType=3
oType=View
query=$DDL$$GO{\nGO\n\n|Index}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3]
enabled=1
caption=SQLite
export=1
count=13
dbType=9
useCache=1
objTypes=TableView^Materialized view

[schemaCmp.3.1]
enabled=1
caption=Column (CREATE)
export=1
qType=3
oType=Column
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] ADD COLUMN $|=COLUMN DEFINITION$; 
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.2]
enabled=1
caption=Column Definition
export=1
qType=3
oType=
query=[$NAME$] $TYPE$ $NULLABLE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.3]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=$DDL$;$\n|INDEX=INDEX (CREATE)$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.4]
enabled=1
caption=Table (DROP)
export=1
qType=3
oType=Table
query=DROP TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$];
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.5]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=ALTER TABLE [$SCHEMA_NAME$].[$OBJECT_NAME$] RENAME TO [TMP_$OBJECT_NAME$];$|=TABLE (CREATE)$INSERT INTO [$SCHEMA_NAME$].[$OBJECT_NAME$] ($,|COLUMN.TARGET_OLD=COLUMN NAME$)	SELECT $,|COLUMN.TARGET_OLD=COLUMN NAME$ 	FROM [$SCHEMA_NAME$].[TMP_$OBJECT_NAME$]; DROP TABLE [$SCHEMA_NAME$].[TMP_$OBJECT_NAME$];
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.6]
enabled=1
caption=View (CREATE)
export=1
qType=3
oType=View
query=$DDL$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.7]
enabled=1
caption=View (DROP)
export=1
qType=3
oType=View
query=DROP VIEW [$SCHEMA_NAME$].[$OBJECT_NAME$];
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.8]
enabled=1
caption=View (ALTER)
export=1
qType=3
oType=View
query=DROP VIEW [$SCHEMA_NAME$].[$OBJECT_NAME$];$DDL$;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.9]
enabled=1
caption=Index DDL
export=1
qType=0
oType=
query=SELECT 	'main'	 AS [Schema name],     tbl_name AS [Table name],     name	 AS [Index name],     sql 	 AS [DDL] FROM sqlite_masterWHERE type = 'index' AND sql <> ''
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=

[schemaCmp.3.10]
enabled=1
caption=Object DDL
export=1
qType=0
oType=
query=SELECT 	'main' AS [Schema name],     name   AS [Object name],     sql    AS [DDL] FROM sqlite_masterWHERE type = 'table'
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=

[schemaCmp.3.11]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=$DDL$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.12]
enabled=1
caption=Column Name
export=1
qType=3
oType=
query=[$NAME$]
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.3.13]
enabled=1
caption=(header)
export=1
qType=3
oType=
query=/****************************************************************** * Code generated by SoftTree SQL Assistant © v$SA_VERSION$ * using Schema Compare templates * Time: $DATE$ $TIME$   * Source: $SOURCE$ * Target: $TARGET$ * ================================================================ * VERY IMPORTANT: Before running this script please check a recent * database backup is available so that you can undo all changes in * case of errors or unexpected data loss. ******************************************************************/
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4]
enabled=1
caption=MySQL
export=1
count=42
dbType=2
useCache=0
objTypes=Schema	Default character set 	Default collationUser Function|Function	DLLTable	Definer    Engine    Comment    -Auto increment    -Avg row length    Collation    Checksum    Row format    Temporary    -Create optionsView	Definer    Security type    Check optionProcedure	Definer    Security_type    SQL data access    CommentFunction	Definer    Security type    SQL data access    CommentDML Trigger|DDL Trigger	DefinerColumn	Type    Nullable    Default    Auto increment    Character set    Collation    Comment	PositionPrimary KeyUnique KeyForeign Key	On update	On delete	Match option

[schemaCmp.4.1]
enabled=1
caption=Schemas
export=1
qType=1
oType=Database
query=select	SCHEMA_NAME	AS `Schema name`,     'Schema'	AS `Target type`,     DEFAULT_CHARACTER_SET_NAME AS `Default character set`,     DEFAULT_COLLATION_NAME	   AS `Default collation`	from	information_schema.SCHEMATAORDER BY SCHEMA_NAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Schema

[schemaCmp.4.2]
enabled=1
caption=View (CREATE)
export=1
qType=3
oType=View
query=CREATE OR REPLACE DEFINER=$DEFINER$ SQL SECURITY $SECURITY_TYPE$ VIEW `$SCHEMA_NAME$`.`$OBJECT_NAME$` AS$DEFINITION$$WITH {CHECK OPTION} CHECK OPTION$; 
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.3]
enabled=1
caption=Views
export=1
qType=1
oType=
query=SELECT 	TABLE_SCHEMA AS `Schema name`,     TABLE_NAME	 AS `View name`,     'View'		 AS `Target type`, 	concat('''',REPLACE(`DEFINER`, '@', '''@'''),'''') AS `Definer`,	SECURITY_TYPE AS `Security type`, 	IF(CHECK_OPTION = 'NONE', '', CHECK_OPTION) AS `Check option`, 	VIEW_DEFINITION AS `Definition__NAME_REFERENCE`FROM	information_schema.VIEWSWHERE 	('$SCHEMA_NAME$' = '' OR TABLE_SCHEMA = '$SCHEMA_NAME$')ORDER BY TABLE_NAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=View

[schemaCmp.4.4]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT	t.TABLE_SCHEMA  AS `Schema name`,     t.TABLE_NAME    AS `Table name`,     'Table'		    AS `Target type`,     t.ENGINE	    AS `Engine`,	t.AUTO_INCREMENT AS `Auto increment`, 	IF(t.AVG_ROW_LENGTH > 0, t.AVG_ROW_LENGTH, NULL) AS `Avg row length`, 	t.TABLE_COMMENT as `Comment`,	IF(t.TABLE_COLLATION <> s.DEFAULT_COLLATION_NAME, t.TABLE_COLLATION, NULL) AS `Collation`,	IF(t.`CHECKSUM` IS NOT NULL, '1 ', NULL) AS `Checksum`, 	UPPER(t.`ROW_FORMAT`) AS `Row format`, 	IF(t.TABLE_TYPE = 'TEMPORARY', ' TEMPORARY ', NULL) AS `Temporary`, 	t.CREATE_OPTIONS as `Check options`FROM 	information_schema.TABLES tJOIN 	information_schema.SCHEMATA s ON t.TABLE_SCHEMA = s.SCHEMA_NAME	WHERE 	t.TABLE_TYPE IN ('BASE TABLE', 'TEMPORARY')	AND ('$SCHEMA_NAME$' = '' OR t.TABLE_SCHEMA = '$SCHEMA_NAME$')ORDER BY t.TABLE_NAME	
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.4.5]
enabled=1
caption=View (DROP)
export=1
qType=3
oType=View
query=DROP VIEW `$SCHEMA_NAME$`.`$OBJECT_NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.6]
enabled=1
caption=Schema (CREATE)
export=1
qType=3
oType=Schema
query=CREATE SCHEMA `$SCHEMA_NAME$` 	DEFAULT CHARACTER SET = $DEFAULT CHARACTER SET$  	DEFAULT COLLATE = $DEFAULT COLLATION$; 
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.7]
enabled=1
caption=Schema (DROP)
export=1
qType=3
oType=Schema
query=DROP SCHEMA `$SCHEMA_NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.8]
enabled=1
caption=Procedures and Functions
export=1
qType=1
oType=
query=SELECT	db   AS `Schema name`,     name AS `Function name`,		CASE TYPE     	WHEN 'FUNCTION' THEN 'Function'         ELSE 'Procedure'     END, 	CONCAT('''',REPLACE(`DEFINER`, '@', '''@'''),'''') AS `Definer`,	param_list AS `Param list`,	returns AS `Returns`,	REPLACE(sql_data_access, '_', ' ') AS `SQL data access`,	SECURITY_TYPE AS `Security type`,	comment AS `Comment`,	body AS `Body`FROM	mysql.procWHERE 	('$SCHEMA_NAME$' = '' OR db = '$SCHEMA_NAME$')ORDER BY name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Function,Procedure

[schemaCmp.4.9]
enabled=1
caption=Triggers
export=1
qType=1
oType=
query=SELECT	EVENT_OBJECT_SCHEMA AS `Schema name`,     EVENT_OBJECT_TABLE  AS `Table name`,     TRIGGER_NAME		AS `Trigger name`,     'DML Trigger'		AS `Target type`, 	concat('''',REPLACE(`DEFINER`, '@', '''@'''),'''') AS `Definer`,	concat('`',TRIGGER_SCHEMA, '`.`', TRIGGER_NAME, '`') AS `Qualified name__NAME_REFERENCE`,	ACTION_TIMING AS `Action timing`,	EVENT_MANIPULATION AS `Event manipulation`,	ACTION_STATEMENT AS `Action statement`FROM	information_schema.TRIGGERSWHERE 	('$SCHEMA_NAME$' = '' OR EVENT_OBJECT_SCHEMA = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR EVENT_OBJECT_TABLE = '$OBJECT_NAME$')ORDER BY TRIGGER_NAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=

[schemaCmp.4.10]
enabled=1
caption=User Functions
export=1
qType=1
oType=Database
query=SELECT	name AS `Function name`,     'User Function' AS `Target type`,	UPPER(type) AS `Type`,	CASE ret     	WHEN 0 THEN 'STRING'         WHEN 1 THEN 'REAL'         ELSE 'INTEGER'     END AS `Returns`, 	dl AS `DLL`FROM	mysql.funcORDER BY NAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=User Function

[schemaCmp.4.11]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT	TABLE_SCHEMA AS `Schema name`,     TABLE_NAME   AS `Table name`,     COLUMN_NAME  AS `Column name`,     'Column'	 AS `Target type`, 	COLUMN_TYPE  AS `Type`,  	IF(IS_NULLABLE = 'YES', 'NULL', 'NOT NULL') AS `Nullable`,  	COLUMN_DEFAULT AS `Default`,  	IF(extra = 'auto_increment', 'AUTO_INCREMENT', '') AS `Auto increment`,	CHARACTER_SET_NAME AS `Character set`,	COLLATION_NAME AS `Collation`,	COLUMN_COMMENT AS `Comment`,	ORDINAL_POSITION AS `Position`FROM	information_schema.COLUMNSWHERE 	('$SCHEMA_NAME$' = '' OR TABLE_SCHEMA = '$SCHEMA_NAME$') and     ('$OBJECT_NAME$' = '' OR TABLE_NAME = '$OBJECT_NAME$')ORDER BY ORDINAL_POSITION
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.4.12]
enabled=1
caption=Trigger (CREATE)
export=1
qType=3
oType=DML Trigger
query=CREATE DEFINER=$DEFINER$TRIGGER $QUALIFIED NAME$ $ACTION TIMING$ $EVENT MANIPULATION$ ON `$SCHEMA_NAME$`.`$OBJECT_NAME$` FOR EACH ROW $ACTION STATEMENT$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.13]
enabled=1
caption=Function (CREATE)
export=1
qType=3
oType=Function
query=CREATE DEFINER=$DEFINER$ FUNCTION `$SCHEMA_NAME$`.`$OBJECT_NAME$` ($PARAM LIST$)	RETURNS $RETURNS$	${SQL DATA ACCESS} $$DETERMINISTIC$$	SQL SECURITY {SECURITY TYPE}$$    COMMENT '{COMMENT}'$$BODY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.14]
enabled=1
caption=Procedure (CREATE)
export=1
qType=3
oType=Procedure
query=CREATE DEFINER=$DEFINER$ PROCEDURE `$SCHEMA_NAME$`.`$OBJECT_NAME$` ($PARAM LIST$)	${SQL DATA ACCESS} $$DETERMINISTIC$$	SQL SECURITY {SECURITY TYPE}$$    COMMENT '{COMMENT}'$$BODY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.15]
enabled=1
caption=User Function (CREATE)
export=1
qType=3
oType=User Function
query=CREATE $TYPE$ FUNCTION `$NAME$` RETURNS $RETURNS$SONAME "$DLL$"
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.16]
enabled=1
caption=User Function (DROP)
export=1
qType=3
oType=
query=DROP FUNCTION `$NAME$`;
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.17]
enabled=1
caption=Table (DROP)
export=1
qType=3
oType=Table
query=DROP TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.18]
enabled=1
caption=Function (DROP)
export=1
qType=3
oType=Function
query=DROP FUNCTION `$SCHEMA_NAME$`.`$OBJECT_NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.19]
enabled=1
caption=Procedure (DROP)
export=1
qType=3
oType=Procedure
query=DROP PROCEDURE `$SCHEMA_NAME$`.`$OBJECT_NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.20]
enabled=1
caption=Trigger (DROP)
export=1
qType=3
oType=Trigger
query=DROP TRIGGER `$SCHEMA_NAME$`.`$OBJECT_NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.21]
enabled=1
caption=Column Definition
export=1
qType=3
oType=
query=`$NAME$` $TYPE$$ CHARACTER SET {CHARACTER SET}$$ COLLATE {COLLATE}$ $NULLABLE$$ DEFAULT '{DEFAULT}'$$ {AUTO INCREMENT}$$ COMMENT '{COMMENT}'$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.22]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE $TEMPORARY$TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$`(	$,\n\t|COLUMN=COLUMN DEFINITION,PRIMARY KEY=PRIMARY KEY DEFINITION,UNIQUE KEY=UNIQUE KEY DEFINITION,FOREIGN KEY=FOREIGN KEY DEFINITION$)$ENGINE {ENGINE}$$  AUTO_INCREMENT = {AUTO INCREMENT}$$  AVG_ROW_LENGTH = {AVG ROW LENGTH}$$  COMMENT = {COMMENT.STRING}$$  COLLATE = {COLLATION}$$  CHECKSUM = {CHECKSUM}$$  ROW_FORMAT = {ROW FORMAT}$$  {TEMPORARY}$$  {CREATE OPTIONS}$;$\n\n|DML TRIGGER=TRIGGER (CREATE)$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.23]
enabled=1
caption=Constraints
export=1
qType=1
oType=
query=SELECT 	tc.TABLE_SCHEMA 	AS `Schema name`, 	tc.TABLE_NAME		AS `Table name`, 	tc.CONSTRAINT_NAME	AS `Constraint name`,     CASE tc.CONSTRAINT_TYPE    	WHEN 'PRIMARY KEY' THEN 'Primary Key'    	WHEN 'UNIQUE' THEN 'Unique Key'    	WHEN 'FOREIGN KEY' THEN 'Foreign Key'     END AS `Target type`,    group_concat(concat('`', kcu.COLUMN_NAME, '`')) AS `Columns`,    group_concat(concat('`', kcu.REFERENCED_COLUMN_NAME, '`')) AS `Refer columns`FROM information_schema.TABLE_CONSTRAINTS AS tc	JOIN information_schema.KEY_COLUMN_USAGE kcu		ON kcu.CONSTRAINT_SCHEMA = tc.CONSTRAINT_SCHEMA AND 			kcu.CONSTRAINT_NAME = tc.CONSTRAINT_NAME  AND 			kcu.TABLE_NAME = tc.TABLE_NAMEWHERE 	('$SCHEMA_NAME$' = '' OR tc.TABLE_SCHEMA = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR tc.TABLE_NAME = '$OBJECT_NAME$')GROUP BY tc.TABLE_SCHEMA, tc.TABLE_NAME, tc.CONSTRAINT_NAMEORDER BY kcu.ORDINAL_POSITION
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Primary Key,Unique Key,Foreign Key

[schemaCmp.4.24]
enabled=1
caption=Foreign Key Attributes
export=1
qType=0
oType=
query=SELECT	rc.CONSTRAINT_SCHEMA AS `Schema name`,     rc.TABLE_NAME		 AS `Table name`,     rc.CONSTRAINT_NAME	 AS `Foreign key name`, 	concat('`', rc.UNIQUE_CONSTRAINT_SCHEMA, '`.`', rc.REFERENCED_TABLE_NAME, '`') AS `Refer table`, 	if(rc.MATCH_OPTION <> 'NONE', rc.MATCH_OPTION, '') AS `Match option`,	rc.UPDATE_RULE AS `On delete`, 	rc.DELETE_RULE AS `On update`FROM information_schema.REFERENTIAL_CONSTRAINTS AS rcWHERE	('$SCHEMA_NAME$' = '' OR rc.CONSTRAINT_SCHEMA = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR rc.TABLE_NAME = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=327681
condition=
pathNameCnt=3
loadedObj=Foreign Key

[schemaCmp.4.25]
enabled=1
caption=Foreign Key Definition
export=1
qType=3
oType=
query=FOREIGN KEY `$NAME$` ($COLUMNS$) REFERENCES $REFER TABLE$ ($REFER COLUMNS$) $MATCH OPTION$ ON DELETE $ON DELETE$ ON UPDATE $ON UPDATE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.26]
enabled=1
caption=Primary Key Definition
export=1
qType=3
oType=
query=PRIMARY KEY ($COLUMNS$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.27]
enabled=1
caption=Unique Key Definition
export=1
qType=3
oType=
query=UNIQUE ($COLUMNS$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.28]
enabled=1
caption=Trigger (ALTER)
export=1
qType=3
oType=DML Trigger
query=$|=TRIGGER (DROP)$$|=TRIGGER (CREATE)$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.29]
enabled=0
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=RENAME TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` TO `$SCHEMA_NAME$`.`TMP_$OBJECT_NAME$`;$|=TABLE (CREATE)$INSERT INTO `$SCHEMA_NAME$`.`$OBJECT_NAME$` ($,|COLUMN.TARGET_OLD=COLUMN NAME$)SELECT $,|COLUMN.TARGET_OLD=COLUMN CONVERT$ FROM `$SCHEMA_NAME$`.`TMP_$OBJECT_NAME$`;DROP TABLE `$SCHEMA_NAME$`.`TMP_$OBJECT_NAME$`;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.30]
enabled=1
caption=Column Name
export=1
qType=3
oType=
query=`$NAME$`
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=AUTO INCREMENT=
pathNameCnt=0
loadedObj=

[schemaCmp.4.31]
enabled=1
caption=Column Convert
export=1
qType=3
oType=
query=CONVERT(`$NAME$`, $TYPE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*Type & AUTO INCREMENT=
pathNameCnt=0
loadedObj=

[schemaCmp.4.32]
enabled=1
caption=Column Convert
export=1
qType=3
oType=
query=`$NAME$`
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition==Type & AUTO INCREMENT=
pathNameCnt=0
loadedObj=

[schemaCmp.4.33]
enabled=1
caption=Column (ALTER)
export=1
qType=3
oType=Column
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` MODIFY COLUMN $|=COLUMN DEFINITION$;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.34]
enabled=1
caption=Column (CREATE)
export=1
qType=3
oType=Column
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` ADD COLUMN $|=COLUMN DEFINITION$ $AFTER `{NAME.PREV}`;FIRST$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.35]
enabled=1
caption=Column (DROP)
export=1
qType=3
oType=Column
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` DROP COLUMN $NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.36]
enabled=1
caption=Primary Key (CREATE)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` ADD $|=PRIMARY KEY DEFINITION$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.37]
enabled=1
caption=Primary Key (DROP)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` DROP PRIMARY KEY;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.38]
enabled=1
caption=Unique Key (CREATE)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` ADD $|=UNIQUE KEY DEFINITION$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.39]
enabled=1
caption=Unique Key (DROP)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` DROP KEY `$NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.40]
enabled=1
caption=Foreign Key (CREATE)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` ADD $|=FOREIGN KEY DEFINITION$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.41]
enabled=1
caption=Foreign Key (DROP)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE `$SCHEMA_NAME$`.`$OBJECT_NAME$` DROP FOREIGN KEY `$NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.4.42]
enabled=1
caption=(header)
export=1
qType=3
oType=
query=/****************************************************************** * Code generated by SoftTree SQL Assistant © v$SA_VERSION$ * using Schema Compare templates * Time: $DATE$ $TIME$   * Source: $SOURCE$ * Target: $TARGET$ * ================================================================ * VERY IMPORTANT: Before running this script please check a recent * database backup is available so that you can undo all changes in * case of errors or unexpected data loss. ******************************************************************/
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5]
enabled=1
caption=PostgreSQL
export=1
count=160
dbType=7
useCache=0
objTypes=Role	Superuser    Create DB    Create role    Inherit    Can login    Replication    Connection limit    ValidRole member|UserTableViewMaterialized View	Tablespace	PopulatedFunctionAggregate|FunctionCast|ConstantConversion|CursorSequence	Increment    Minimum value    Maximum value    -Start value    CycleOperator	Procedure	Left operand	Right operand	Commutator	Negator	Restrict	Join	Hashes 	Merges	Left type	Right typeAccess method,Operator family,Operator class|Index typeOperator familyOperator classCollation	LC Collate    LC CTypeColumn	Nullable    Type	Default    Collate	PositionPrimary KeyUnique KeyForeign KeyIndex	MethodRuleComment|PropertyEvent Trigger|DDL TriggerPermissionData Types,Type,Enum type,Range Type,Composite type,Domain|FolderDomain|Type	Base type    Collation    Default    Nullable    Check constraintType	Input	Output	Receive      Send      Type modifier input      Type modifier output      Analyze      Length      By value      Alignment      Storage      Default      Element      Delimiter     Category Enum type|TypeRange Type|Type	Subtype    Collation    Subtype operator class    Canonical function    Subtype diff functionComposite type,Type Column|TypeType Column|Column	Type    CollationForeign Data,Foreign Data Wrapper,Foreign Server,Foreign Table,User Mapping|FolderForeign Data WrapperForeign ServerForeign TableUser Mapping

[schemaCmp.5.1]
enabled=1
caption=Databases
export=1
qType=1
oType=Server
query=SELECT 	d.datname		AS "Database name", 	'Database'		AS "Target type",	pg_get_userbyid(d.datdba) AS "Owner",	pg_encoding_to_char(d."encoding") AS "Encoding"FROM pg_catalog.pg_database AS dWHERE NOT d.datistemplateORDER BY d.datname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=0
loadedObj=Database

[schemaCmp.5.2]
enabled=1
caption=Databases
export=1
qType=1
oType=Server
query=SELECT 	d.datname		AS "Database name", 	'Database'		AS "Target type",	d.datconnlimit 	AS "Connection limit",	t.spcname		AS "Table space",	pg_get_userbyid(d.datdba) AS "Owner",	pg_encoding_to_char(d."encoding") AS "Encoding"FROM pg_catalog.pg_database AS d	JOIN pg_catalog.pg_tablespace AS t     	ON d.dattablespace = t.oidWHERE NOT d.datistemplateORDER BY d.datname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524289
condition=
pathNameCnt=0
loadedObj=Database

[schemaCmp.5.3]
enabled=1
caption=Databases
export=1
qType=1
oType=Server
query=SELECT 	d.datname		AS "Database name", 	'Database'		AS "Target type",	d.datconnlimit 	AS "Connection limit",	t.spcname		AS "Table space",	pg_get_userbyid(d.datdba) AS "Owner",	pg_encoding_to_char(d."encoding") AS "Encoding",	d.datcollate 	AS "LC_Collate",	d.datctype		AS "LC_CType"FROM pg_catalog.pg_database AS d	JOIN pg_catalog.pg_tablespace AS t     	ON d.dattablespace = t.oidWHERE NOT d.datistemplateORDER BY d.datname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=Database

[schemaCmp.5.4]
enabled=1
caption=Schemas
export=1
qType=1
oType=Database
query=SELECT	schema_name  AS "Schema name",     'Schema'     AS "Target type",    schema_owner AS "Owner"FROM	information_schema.schemataWHERE schema_name NOT LIKE 'pg%'    OR substring(schema_name, 3, 1) != '_'    OR schema_name = 'pg_catalog'ORDER BY schema_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Schema

[schemaCmp.5.5]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT    pn.nspname AS "Schema name",     pc.relname AS "Table name",     'Table'	   AS "Target type",    CASE WHEN pc.relhasoids THEN 'TRUE' ELSE 'FALSE' END AS "Has OIDs",	pg_get_userbyid(pc.relowner) AS "Owner"FROM pg_catalog.pg_class AS pc	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pc.relnamespace WHERE pc.relkind = 'r'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pc.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458754
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.5.6]
enabled=1
caption=Views
export=1
qType=1
oType=
query=SELECT    pn.nspname AS "Schema name",     pc.relname AS "Table name",     'View'	   AS "Target type",     pg_get_viewdef(pc.oid) AS "Definition__NAME_REFERENCE",	pg_get_userbyid(pc.relowner) AS "Owner"FROM pg_catalog.pg_class AS pc	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pc.relnamespaceWHERE pc.relkind = 'v'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pc.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=View

[schemaCmp.5.7]
enabled=1
caption=Functions
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	pp.proname || '(' || array_to_string(ARRAY(		SELECT replace(format_type(pp.proargtypes[k], 'character varying', 'varchar'), NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Function specific name",	'Function' AS "Target type",	replace(format_type(pp.prorettype, null), 'character varying', 'varchar') AS "Returns",	pp.proname AS "Function name__HIDDEN",	pg_get_userbyid(pp.proowner) AS "Owner",	pl.lanname AS "Language",	pp.prosrc  AS "Definition__NAME_REFERENCE__SQL"FROM pg_catalog.pg_proc AS pp	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pp.pronamespace	JOIN pg_catalog.pg_language AS pl		ON pl.oid = pp.prolang AND pl.lanname IN ('sql', 'plpgsql','plpythonu')	WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pp.proname
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=1
loadedObj=Function

[schemaCmp.5.8]
enabled=1
caption=Functions
export=1
qType=1
oType=
query=SELECT  pn.nspname AS "Schema name",  pp.proname || '(' || replace(pg_catalog.pg_get_function_identity_arguments(pp.oid), 'character varying', 'varchar') || ')' AS "Function specific name",  'Function' AS "Target type",  replace(pg_catalog.pg_get_function_result(pp.oid), 'character varying', 'varchar') AS "Returns",  pp.proname AS "Function name__HIDDEN",  pg_get_userbyid(pp.proowner) AS "Owner",  pl.lanname AS "Language",  pp.prosrc AS "Definition__NAME_REFERENCE__SQL",  CASE pp.provolatile WHEN 'i' THEN 'IMMUTABLE' WHEN 's' THEN 'STABLE' ELSE 'VOLATILE' END AS "Volatility",  pp.procost AS "Estimated cost",  CASE WHEN pp.prorows <> 0 THEN pp.prorows END AS "Estimated rows",  CASE pp.proiswindow WHEN TRUE THEN 'WINDOW' END AS "Is window function",  CASE pp.prosecdef WHEN TRUE THEN 'DEFINER' ELSE 'INVOKER' END AS "Security",  CASE pp.proisstrict WHEN TRUE THEN 'RETURNS NULL' ELSE 'CALLED' END AS "On NULL input",  pp.proisagg AS "Is aggregate function",  pp.proretset AS "Returns Set"--pp.proleakproof AS "Is memorry leak proof"FROM pg_catalog.pg_proc AS pp    JOIN pg_catalog.pg_namespace AS pn        ON pn.oid = pp.pronamespace    JOIN pg_catalog.pg_language AS pl        ON pl.oid = pp.prolang AND pl.lanname IN ('sql', 'plpgsql','plpythonu')WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pp.proname
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=1
loadedObj=Function

[schemaCmp.5.9]
enabled=1
caption=Aggregate Functions
export=1
qType=1
oType=
query=SELECT 	pn.nspname 	AS "Schema name", 	pp.proname || '(' || array_to_string(ARRAY(		SELECT replace(format_type(pp.proargtypes[k], 'character varying', 'varchar'), NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Aggregate specific name",	'Aggregate'	AS "Target type",	pp.proname	AS "Aggregate name__HIDDEN",	pp2.proname AS "Transition function",	replace(pt.typname, 'character varying', 'varchar')	AS "Transition data type",	pp3.proname AS "Final function",	pa.agginitval AS "Initial condition",	po.oprname  AS "Sort operator"FROM pg_catalog.pg_aggregate AS pa	JOIN pg_catalog.pg_proc AS pp     	ON pp.oid = pa.aggfnoid	JOIN pg_catalog.pg_namespace AS pn     	ON pp.pronamespace = pn.oid	JOIN pg_catalog.pg_proc AS pp2     	ON pa.aggtransfn = pp2.oid	JOIN pg_catalog.pg_type AS pt     	ON pa.aggtranstype = pt.oid	LEFT JOIN pg_catalog.pg_proc AS pp3     	ON pa.aggfinalfn = pp3.oid	LEFT JOIN pg_catalog.pg_operator AS po     	ON pa.aggsortop = po.oidWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pp.proname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=1
loadedObj=Aggregate

[schemaCmp.5.10]
enabled=1
caption=Aggregate Functions
export=1
qType=1
oType=
query=SELECT 	pn.nspname 	AS "Schema name", 	pp.proname || '(' || replace(pg_catalog.pg_get_function_identity_arguments(pp.oid), 'character varying', 'varchar') || ')' AS "Aggregate specific name",	'Aggregate'	AS "Target type",	pp.proname	AS "Aggregate name__HIDDEN",	pp2.proname AS "Transition function",	replace(pt.typname, 'character varying', 'varchar')	AS "Transition data type",	pp3.proname AS "Final function",	pa.agginitval AS "Initial condition",	po.oprname  AS "Sort operator"FROM pg_catalog.pg_aggregate AS pa	JOIN pg_catalog.pg_proc AS pp     	ON pp.oid = pa.aggfnoid	JOIN pg_catalog.pg_namespace AS pn     	ON pp.pronamespace = pn.oid	JOIN pg_catalog.pg_proc AS pp2     	ON pa.aggtransfn = pp2.oid	JOIN pg_catalog.pg_type AS pt     	ON pa.aggtranstype = pt.oid	LEFT JOIN pg_catalog.pg_proc AS pp3     	ON pa.aggfinalfn = pp3.oid	LEFT JOIN pg_catalog.pg_operator AS po     	ON pa.aggsortop = po.oidWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pp.proname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=1
loadedObj=Aggregate

[schemaCmp.5.11]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT	table_schema	AS "Schema name",     table_name		AS "Table name",     column_name		AS "Column name",     'Column'		AS "Target type",	CASE upper(is_nullable)        WHEN 'YES' THEN 'NULL'         ELSE 'NOT NULL'     END 			AS "Nullable",	REPLACE(CASE WHEN character_maximum_length IS NOT NULL THEN replace(data_type, 'character varying', 'varchar') || '(' || character_maximum_length || ')'		WHEN data_type = 'numeric' AND numeric_precision IS NOT NULL THEN data_type || '(' || numeric_precision || ',' || numeric_scale || ')'   		ELSE replace(data_type, 'character varying', 'varchar')		END, '"', ''    ) AS "Type", 	column_default AS "Default",	collation_name AS "Collate",	CASE     	WHEN column_default LIKE 'nextval(%' THEN 1         ELSE 0     END AS "Auto",    ordinal_position AS "Position"FROM 	information_schema.columnsWHERE 	('$SCHEMA_NAME$' = '' OR table_schema = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR table_name = '$OBJECT_NAME$')ORDER BY	ordinal_position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.5.12]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN=COLUMN DEFINITION$) WITH (	OIDS=$HAS OIDS$);ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;$\n|PRIMARY KEY,UNIQUE KEY,CHECK CONSTRAINT,INDEX,DML TRIGGER,FOREIGN KEY,COMMENT,PERMISSION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.13]
enabled=1
caption=Column Definition
export=1
qType=3
oType=
query="$NAME$" $TYPE$$ COLLATE {COLLATE}$ $NULLABLE$$ DEFAULT {DEFAULT}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.14]
enabled=1
caption=Table (DROP)
export=1
qType=3
oType=Table
query=DROP TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.15]
enabled=1
caption=View (CREATE)
export=1
qType=3
oType=View
query=CREATE VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$" ($, |COLUMN=COLUMN NAME$) AS$DEFINITION$;ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;$|COMMENT$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.16]
enabled=1
caption=View (DROP)
export=1
qType=3
oType=View
query=DROP VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.17]
enabled=1
caption=Column Name
export=1
qType=3
oType=
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.18]
enabled=1
caption=Schema (CREATE)
export=1
qType=3
oType=Schema
query=CREATE SCHEMA "$SCHEMA_NAME$" AUTHORIZATION $OWNER$;${\n|PERMISSION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.19]
enabled=1
caption=Schema (DROP)
export=1
qType=3
oType=Schema
query=DROP SCHEMA "$SCHEMA_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.20]
enabled=1
caption=Argument Definition
export=1
qType=3
oType=
query=${MODE} $${PARAMETER NAME} $$TYPE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.21]
enabled=1
caption=Function (CREATE)
export=1
qType=3
oType=Function
query=CREATE FUNCTION "$SCHEMA_NAME$"."$FUNCTION NAME$" ($, |ARGUMENT=ARGUMENT DEFINITION$)RETURNS $VALUE$AS $^$^ $DEFINITION$$^$^ LANGUAGE $LANGUAGE$${IS WINDOW FUNCTION}$${VOLATILITY}$${ON NULL INPUT} ON NULL INPUT$$SECURITY {SECURITY}$$COST {ESTIMATED COST}$$ROWS {ESTIMATED ROWS}$;ALTER FUNCTION "$SCHEMA_NAME$"."$VALUE$" ($, |ARGUMENT=ARGUMENT DEFINITION$)	OWNER TO "$OWNER$";$\n|PERMISSION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.22]
enabled=1
caption=Function (DROP)
export=1
qType=3
oType=Function
query=DROP FUNCTION "$SCHEMA_NAME$"."$VALUE$" ($, |ARGUMENT=ARGUMENT DEFINITION$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.23]
enabled=1
caption=Arguments
export=1
qType=1
oType=
query=SELECT	r.routine_schema AS "Schema name", 	pp.proname || '(' || array_to_string(ARRAY(		SELECT replace(format_type(pp.proargtypes[k], 'character varying', 'varchar'), NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Function specific name",	COALESCE(p.parameter_name, 'unnamed parameter ' || p.ordinal_position) AS "Parameter display name",	'Argument' AS "Target type",	p."parameter_name" AS "Parameter name",    REPLACE(REPLACE(p.data_type, 'character varying', 'varchar'), '"', '') AS "Type",    CASE WHEN p.parameter_mode <> 'IN' THEN p."parameter_mode" END AS "Mode"FROM information_schema.parameters p	JOIN information_schema.routines r    	ON p.specific_schema = r.specific_schema      		AND p.specific_name = r.specific_name      JOIN pg_catalog.pg_proc AS pp    	ON pp.oid = substring(r.specific_name, '_([^_]*?)$^')::oidWHERE 	('$SCHEMA_NAME$' = '' OR r.routine_schema = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR r.routine_name = '$OBJECT_NAME$')ORDER BY p.ordinal_position
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=1
minVer=458752
condition=
pathNameCnt=2
loadedObj=Argument

[schemaCmp.5.24]
enabled=1
caption=Arguments
export=1
qType=1
oType=
query=SELECT	r.routine_schema AS "Schema name", 	pp.proname || '(' || replace(pg_catalog.pg_get_function_identity_arguments(pp.oid), 'character varying', 'varchar') || ')' AS "Function specific name",	COALESCE(p.parameter_name, 'unnamed parameter ' || p.ordinal_position) AS "Parameter display name",	'Argument' AS "Target type",	p."parameter_name" AS "Parameter name",    REPLACE(REPLACE(p.data_type, 'character varying', 'varchar'), '"', '') AS "Type",    CASE WHEN p.parameter_mode <> 'IN' THEN p."parameter_mode" END AS "Mode"FROM information_schema.parameters p	JOIN information_schema.routines r    	ON p.specific_schema = r.specific_schema      		AND p.specific_name = r.specific_name      JOIN pg_catalog.pg_proc AS pp    	ON pp.oid = substring(r.specific_name, '_([^_]*?)$^')::oidWHERE 	('$SCHEMA_NAME$' = '' OR r.routine_schema = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR r.routine_name = '$OBJECT_NAME$')ORDER BY p.ordinal_position
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=1
minVer=524292
condition=
pathNameCnt=2
loadedObj=Argument

[schemaCmp.5.25]
enabled=1
caption=Check Constraints
export=1
qType=1
oType=
query=SELECT 	tc.table_schema 	AS "Schema name",     tc.table_name		AS "Table name",	     cc.constraint_name	AS "Constraint name", 	'Check Constraint'	AS "Target type", 	cc.check_clause 	AS "Definition" FROM information_schema.check_constraints AS cc 	JOIN information_schema.table_constraints AS tc     	ON tc."constraint_schema" = cc."constraint_schema"         	AND tc."constraint_name" = cc."constraint_name"WHERE not cc.check_clause LIKE '% IS NOT NULL' 	AND ('$SCHEMA_NAME$' = '' OR tc.table_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR tc.table_name = '$OBJECT_NAME$')ORDER BY cc.constraint_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Check Constraint

[schemaCmp.5.26]
enabled=1
caption=Keys
export=1
qType=1
oType=
query=SELECT    tc.table_schema		AS "Schema name",     tc.table_name		AS "Table name",     tc.constraint_name	AS "Constraint name",     CASE tc.constraint_type     	WHEN 'PRIMARY KEY' THEN 'Primary Key'    	WHEN 'UNIQUE' THEN 'Unique Key'    END AS "Target type",    array_to_string(ARRAY(       	SELECT ccu."column_name"::varchar       	FROM information_schema.key_column_usage AS ccu        	WHERE tc."constraint_schema" = ccu."constraint_schema"        		AND tc."constraint_name" = ccu."constraint_name"		ORDER BY ccu.ordinal_position     ), ', ') AS "Columns"FROM information_schema.table_constraints tcWHERE tc.constraint_type IN ('PRIMARY KEY', 'UNIQUE')	AND ('$SCHEMA_NAME$' = '' OR tc.table_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR tc.table_name = '$OBJECT_NAME$')ORDER BY tc.constraint_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Primary Key,Unique Key

[schemaCmp.5.27]
enabled=1
caption=Foreign Keys
export=1
qType=1
oType=
query=SELECT    tc.table_schema		AS "Schema name",     tc.table_name		AS "Table name",     tc.constraint_name	AS "Constraint name",    'Foreign Key'		AS "Target type",     array_to_string(ARRAY(       	SELECT kc."column_name"::varchar       	FROM information_schema.key_column_usage AS kc        	WHERE tc."constraint_schema" = kc."constraint_schema"         	AND tc."constraint_name" = kc."constraint_name"       	ORDER BY kc.ordinal_position        	), ', ') AS "Columns",     '"' || ctu.table_schema || '"."' || ctu."table_name" || '"' AS "Refer table",    array_to_string(ARRAY(       	SELECT kc."column_name"::varchar       	FROM information_schema.constraint_column_usage AS kc        	WHERE tc."constraint_schema" = kc."constraint_schema"        		AND tc."constraint_name" = kc."constraint_name"       ), ', ') AS "Refer columns"FROM information_schema.table_constraints tc	JOIN information_schema.constraint_table_usage AS ctu     	ON ctu."constraint_schema" = tc."constraint_schema"         	AND ctu."constraint_name" = tc."constraint_name"WHERE tc.constraint_type = 'FOREIGN KEY'	AND ('$SCHEMA_NAME$' = '' OR tc.table_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR tc.table_name = '$OBJECT_NAME$')ORDER BY tc.constraint_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Foreign Key

[schemaCmp.5.28]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT 	n.nspname AS "Schema name",     c.relname AS "Table name",     i.relname AS "Index name",     'Index'	  AS "Target type",     array_to_string(ARRAY(       SELECT pg_get_indexdef(x.indexrelid, k + 1, true)       FROM generate_series(array_lower(x.indkey, 1), array_upper(x.indkey, 1)) as k       ORDER BY k       ), ', ') AS "Columns",    CASE WHEN x.indisunique THEN 'UNIQUE' END AS "Unique",    CASE WHEN p.amname <> 'btree' THEN p.amname END AS "Method"FROM pg_index x     JOIN pg_class c     	ON c.oid = x.indrelid     JOIN pg_class i     	ON i.oid = x.indexrelid    JOIN pg_namespace n     	ON n.oid = c.relnamespace     JOIN pg_opclass o     	ON o.oid = x.indclass[0]    JOIN pg_am p     	ON o.opcmethod = p.oidWHERE (c.relkind = 'r'::"char") AND 	(i.relkind = 'i'::"char") AND 	(NOT EXISTS (		SELECT 1 FROM information_schema.table_constraints AS tc 		WHERE tc.table_schema = n.nspname 			AND tc."table_name" = c.relname			AND tc."constraint_name" = i.relname 	))	AND ('$SCHEMA_NAME$' = '' OR n.nspname = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR c.relname = '$OBJECT_NAME$')ORDER BY i.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.5.29]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT 	n.nspname AS "Schema name",     c.relname AS "Table name",     i.relname AS "Index name",     'Index'	  AS "Target type",     array_to_string(ARRAY(       SELECT pg_get_indexdef(x.indexrelid, k + 1, true)       FROM generate_series(array_lower(x.indkey, 1), array_upper(x.indkey, 1)) as k       ORDER BY k       ), ', ') AS "Columns",    CASE WHEN x.indisunique THEN 'UNIQUE' END AS "Unique",    CASE WHEN p.amname <> 'btree' THEN p.amname END AS "Method"FROM pg_index x     JOIN pg_class c     	ON c.oid = x.indrelid     JOIN pg_class i     	ON i.oid = x.indexrelid    JOIN pg_namespace n     	ON n.oid = c.relnamespace     JOIN pg_opclass o     	ON o.oid = x.indclass[0]    JOIN pg_am p     	ON o.opcamid = p.oidWHERE (c.relkind = 'r'::"char") AND 	(i.relkind = 'i'::"char") AND 	(NOT EXISTS (		SELECT 1 FROM information_schema.table_constraints AS tc 		WHERE tc.table_schema = n.nspname 			AND tc."table_name" = c.relname			AND tc."constraint_name" = i.relname 	))	AND ('$SCHEMA_NAME$' = '' OR n.nspname = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR c.relname = '$OBJECT_NAME$')ORDER BY i.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.5.30]
enabled=1
caption=Primary Key (CREATE)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD CONSTRAINT "$NAME$" PRIMARY KEY ($COLUMNS$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.31]
enabled=1
caption=Unique Key (CREATE)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD CONSTRAINT "$NAME$" UNIQUE ($COLUMNS$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.32]
enabled=1
caption=Constraint (DROP)
export=1
qType=3
oType=Primary Key,Unique Key,Check Constraint,Foreign Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP CONSTRAINT "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.33]
enabled=1
caption=Column (CREATE)
export=1
qType=3
oType=Column
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD COLUMN $|=COLUMN DEFINITION$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.34]
enabled=1
caption=Column (DROP)
export=1
qType=3
oType=Column
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP COLUMN "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.35]
enabled=1
caption=Foreign Key (CREATE)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD CONSTRAINT "$NAME$" FOREIGN KEY ($COLUMNS$) REFERENCES $REFER TABLE$ ($REFER COLUMNS$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.36]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE ${UNIQUE} $INDEX "$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$" $USING {METHOD}$($COLUMNS$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.37]
enabled=1
caption=Index (DROP)
export=1
qType=3
oType=Index
query=DROP INDEX "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.38]
enabled=1
caption=(header)
export=1
qType=3
oType=
query=/****************************************************************** * Code generated by SoftTree SQL Assistant © v$SA_VERSION$ * using Schema Compare templates * Time: $DATE$ $TIME$   * Source: $SOURCE$ * Target: $TARGET$ * ================================================================ * VERY IMPORTANT: Before running this script please check a recent * database backup is available so that you can undo all changes in * case of errors or unexpected data loss. ******************************************************************/
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.39]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" RENAME TO "TMP_$OBJECT_NAME$";CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN.TARGET=COLUMN DEFINITION$) WITH (	OIDS=$HAS OIDS$);ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;$\n|PRIMARY KEY.TARGET=PRIMARY KEY (CREATE),UNIQUE KEY.TARGET=UNIQUE KEY (CREATE),CHECK CONSTRAINT.TARGET=CHECK CONSTRAINT (CREATE),INDEX.TARGET=INDEX (CREATE),DML TRIGGER.TARGET=TRIGGER (CREATE),FOREIGN KEY.TARGET=FOREIGN KEY (CREATE),COMMENT=COMMENT (CREATE),PERMISSION=PERMISSION (CREATE)$INSERT INTO "$SCHEMA_NAME$"."$OBJECT_NAME$" ($,|COLUMN.TARGET_OLD=COLUMN NAME$)SELECT $,|COLUMN.TARGET_OLD=COLUMN CONVERT$ FROM "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$";DROP TABLE "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.40]
enabled=1
caption=Trigger (CREATE)
export=1
qType=3
oType=DML Trigger
query=CREATE TRIGGER "$NAME$" $ACTION TIMING$ $EVENT MANIPULATION$ ON "$SCHEMA_NAME$"."$OBJECT_NAME$" FOR EACH $ACTION ORIENTATION$ $ACTION STATEMENT$;	
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.41]
enabled=1
caption=Trigger (DROP)
export=1
qType=3
oType=Trigger
query=DROP TRIGGER "$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.42]
enabled=1
caption=Column Convert
export=1
qType=3
oType=
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition==Type
pathNameCnt=0
loadedObj=

[schemaCmp.5.43]
enabled=1
caption=Column Convert
export=1
qType=3
oType=
query=CONVERT(`$NAME$`, $TYPE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*Type
pathNameCnt=0
loadedObj=

[schemaCmp.5.44]
enabled=1
caption=Check Constraint (CREATE)
export=1
qType=3
oType=Check Constraint
query=ALTER TABLE ONLY "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD CONSTRAINT "$NAME$" CHECK($DEFINITION$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.45]
enabled=1
caption=Database (CREATE)
export=1
qType=3
oType=Database
query=CREATE DATABASE "$NAME$" WITH     OWNER = $OWNER$$    ENCODING = {ENCODING.STRING}$$    LC_COLLATE = {LC_COLLATE.STRING}$$    LC_CTYPE = {LC_CTYPE.STRING}$$    TABLESPACE = {TABLESPACE}$$    CONNECTION LIMIT = {CONNECTION LIMIT}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.46]
enabled=1
caption=Database (DROP)
export=1
qType=3
oType=Database
query=DROP DATABASE "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.47]
enabled=1
caption=Triggers
export=1
qType=1
oType=
query=SELECT 	event_object_schema AS "Schema name", 	event_object_table	AS "Table name", 	"trigger_name"		AS "Trigger name",	'DML Trigger'		AS "Target type", 	string_agg(event_manipulation, ' OR ')	AS "Event manipulation",	action_timing       AS "Action timing",	action_statement	AS "Action statement",	action_orientation  AS "Action orientation"FROM 	information_schema.triggersWHERE ('$SCHEMA_NAME$' = '' OR event_object_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR event_object_table = '$OBJECT_NAME$')GROUP BY	event_object_schema, 	event_object_table, 	"trigger_name",      action_timing,	action_statement,     action_orientation,	event_manipulationORDER BY "trigger_name" 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=2
loadedObj=DML Trigger

[schemaCmp.5.48]
enabled=1
caption=Triggers
export=1
qType=1
oType=
query=SELECT DISTINCT	event_object_schema AS "Schema name", 	event_object_table	AS "Table name", 	"trigger_name"		AS "Trigger name",	'DML Trigger'		AS "Target type", 	array_to_string(ARRAY(		SELECT event_manipulation::CHAR VARYING FROM information_schema.triggers t1		WHERE t1."trigger_schema" = t."trigger_schema" AND t1."trigger_name" = t."trigger_name" 		ORDER BY event_manipulation 	), ' OR ')			AS "Event manipulation",	condition_timing    AS "Action timing",	action_statement	AS "Action statement",	action_orientation  AS "Action orientation"FROM 	information_schema.triggers tWHERE ('$SCHEMA_NAME$' = '' OR event_object_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR event_object_table = '$OBJECT_NAME$')ORDER BY "trigger_name"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=2
loadedObj=DML Trigger

[schemaCmp.5.49]
enabled=1
caption=Sequences
export=1
qType=1
oType=
query=SELECT 	s.sequence_schema	AS "Schema name", 	s.sequence_name		AS "Sequence name",	'Sequence'			AS "Target type", 	s."increment"		AS "Increment", 	s.minimum_value		AS "Minimum value",    s.maximum_value		AS "Maximum value",     CASE s.cycle_option    	WHEN 'YES' THEN 'CYCLE'    	WHEN 'NO'  THEN 'NO CYCLE'    END 				AS "Cycle"FROM information_schema.sequences AS sWHERE ('$SCHEMA_NAME$' = '' OR s.sequence_schema = '$SCHEMA_NAME$')ORDER BY s.sequence_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524290
condition=
pathNameCnt=1
loadedObj=Sequence

[schemaCmp.5.50]
enabled=1
caption=Sequences
export=1
qType=1
oType=
query=SELECT 	s.sequence_schema	AS "Schema name", 	s.sequence_name		AS "Sequence name",	'Sequence'			AS "Target type", 	s."increment"		AS "Increment", 	s.minimum_value		AS "Minimum value",    s.maximum_value		AS "Maximum value",     s.start_value		AS "Start value",     CASE s.cycle_option    	WHEN 'YES' THEN 'CYCLE'    	WHEN 'NO'  THEN 'NO CYCLE'    END 				AS "Cycle"FROM information_schema.sequences AS sWHERE ('$SCHEMA_NAME$' = '' OR s.sequence_schema = '$SCHEMA_NAME$')ORDER BY s.sequence_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=1
loadedObj=Sequence

[schemaCmp.5.51]
enabled=1
caption=Sequence (CREATE)
export=1
qType=3
oType=Sequence
query=CREATE SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$"$ 	INCREMENT BY {INCREMENT}$$    MINVALUE {MINIMUM VALUE}$$     MAXVALUE {MAXIMUM VALUE}$$    {CYCLE}$;${\n|PERMISSION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524290
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.52]
enabled=1
caption=Sequence (DROP)
export=1
qType=3
oType=Sequence
query=DROP SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.53]
enabled=1
caption=Aggregate (CREATE)
export=1
qType=3
oType=Aggregate
query=CREATE AGGREGATE "$SCHEMA_NAME$"."$AGGREGATE NAME$" ($, |ARGUMENT=ARGUMENT DEFINITION$) (    SFUNC = $TRANSITION FUNCTION$,    STYPE = $TRANSITION DATA TYPE$$,	FINALFUNC = {FINAL FUNCTION}$$,	INITCOND = {INITIAL CONDITION.STRING}$$,	SORTOP = {SORT OPERATOR}$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.54]
enabled=1
caption=Aggregate (DROP)
export=1
qType=3
oType=Aggregate
query=DROP AGGREGATE "$SCHEMA_NAME$"."$AGGREGATE NAME$" ($, |ARGUMENT=ARGUMENT DEFINITION$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.55]
enabled=1
caption=Casts
export=1
qType=1
oType=Database
query=SELECT 	ts.typname || ' AS ' || tt.typname AS "Cast name",	'Cast' 		AS "Target type",	ts.typname  AS "Source data type",	tt.typname  AS "Target data type",	CASE pc.castcontext 		WHEN 'e' THEN ''		WHEN 'a' THEN 'AS ASSIGNMENT'		WHEN 'i' THEN 'AS IMPLICIT'	END	AS "Context"FROM pg_catalog.pg_cast AS pc	JOIN pg_catalog.pg_type AS ts     	ON pc.castsource = ts.oid	JOIN pg_catalog.pg_type AS tt     	ON pc.casttarget = tt.oid	LEFT JOIN pg_catalog.pg_proc AS pp     	ON pc.castfunc = pp.oid	LEFT JOIN pg_catalog.pg_namespace AS pn     	ON pp.pronamespace = pn.oid	LEFT JOIN pg_catalog.pg_type AS pt     	ON pp.proargtypes[0] = pt.oidORDER BY ts.typname 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458755
condition=
pathNameCnt=0
loadedObj=Cast

[schemaCmp.5.56]
enabled=1
caption=Cast (CREATE)
export=1
qType=3
oType=Cast
query=CREATE CAST ($SOURCE DATA TYPE$ AS $TARGET DATA TYPE$) $CONTEXT$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=458755
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.57]
enabled=1
caption=Cast (DROP)
export=1
qType=3
oType=Cast
query=DROP CAST ($SOURCE DATA TYPE$ AS $TARGET DATA TYPE$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.58]
enabled=1
caption=Casts
export=1
qType=1
oType=Database
query=SELECT 	ts.typname || ' AS ' || tt.typname AS "Cast name",	'Cast' 		AS "Target type",	ts.typname  AS "Source data type",	tt.typname  AS "Target data type",	CASE pc.castmethod		WHEN 'f' THEN 'WITH FUNCTION "' || pn.nspname || '"."' || pp.proname || '"(' || pt.typname || ')' 		WHEN 'i' THEN 'WITH INOUT'		WHEN 'b' THEN 'WITHOUT FUNCTION' 	END AS "Cast method",	CASE pc.castcontext 		WHEN 'e' THEN ''		WHEN 'a' THEN 'AS ASSIGNMENT'		WHEN 'i' THEN 'AS IMPLICIT'	END	AS "Context"FROM pg_catalog.pg_cast AS pc	JOIN pg_catalog.pg_type AS ts     	ON pc.castsource = ts.oid	JOIN pg_catalog.pg_type AS tt     	ON pc.casttarget = tt.oid	LEFT JOIN pg_catalog.pg_proc AS pp     	ON pc.castfunc = pp.oid	LEFT JOIN pg_catalog.pg_namespace AS pn     	ON pp.pronamespace = pn.oid	LEFT JOIN pg_catalog.pg_type AS pt     	ON pp.proargtypes[0] = pt.oidORDER BY ts.typname  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=Cast

[schemaCmp.5.59]
enabled=1
caption=Conversions
export=1
qType=1
oType=
query=SELECT 	pn.nspname   AS "Schema name", 	pc.conname   AS "Conversion name",	'Conversion' AS "Target type",	CASE WHEN pc.condefault THEN 'DEFAULT' END 	     AS "Default",	pg_encoding_to_char(pc.conforencoding) 			 AS "Source encoding",	pg_encoding_to_char(pc.contoencoding) 			 AS "Target encoding",	'"' || pn2.nspname || '"."' || pp.proname || '"' AS "Function"FROM pg_catalog.pg_conversion AS pc	JOIN pg_catalog.pg_namespace AS pn 		ON pn.oid = pc.connamespace	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pc.conproc	JOIN pg_catalog.pg_namespace AS pn2		ON pn2.oid = pp.pronamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pc.conname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458756
condition=
pathNameCnt=1
loadedObj=Conversion

[schemaCmp.5.60]
enabled=1
caption=Conversion (CREATE)
export=1
qType=3
oType=Conversion
query=CREATE$ {DEFAULT}$ CONVERSION "$SCHEMA_NAME$"."$OBJECT_NAME$"    FOR '$SOURCE ENCODING$' TO '$TARGET ENCODING$' FROM $FUNCTION$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=458756
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.61]
enabled=1
caption=Conversion (DROP)
export=1
qType=3
oType=Conversion
query=DROP CONVERSION "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.62]
enabled=1
caption=Domains
export=1
qType=1
oType=
query=SELECT 	pn.nspname    AS "Schema name",	pt.typname    AS "Domain name",	'Domain'   	  AS "Target type",	pt2.typname   AS "Base type",	pt.typdefault AS "Default",	CASE WHEN pt.typnotnull THEN 'NOT NULL' ELSE 'NULL' END AS "Nullable",	pc2.consrc    AS "Check constraint"FROM pg_catalog.pg_type AS pt	JOIN pg_catalog.pg_namespace AS pn 		ON pn.oid = pt.typnamespace	JOIN pg_catalog.pg_type AS pt2 		ON pt2.oid = pt.typbasetype 	LEFT JOIN pg_catalog.pg_constraint AS pc2		ON pc2.contypid = pt.oid	WHERE pt.typtype = 'd'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pt.typname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458755
condition=
pathNameCnt=1
loadedObj=Domain

[schemaCmp.5.63]
enabled=1
caption=Domain (CREATE)
export=1
qType=3
oType=Domain
query=CREATE DOMAIN "$SCHEMA_NAME$"."$OBJECT_NAME$" AS $BASE TYPE$$COLLATE {COLLATE}$$DEFAULT {DEFAULT}$$NULLABLE$$CHECK {CHECK CONSTRAINT}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.64]
enabled=1
caption=Domain (DROP)
export=1
qType=3
oType=Domain
query=DROP DOMAIN "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.65]
enabled=1
caption=Domains
export=1
qType=1
oType=
query=SELECT 	pn.nspname    AS "Schema name",	pt.typname    AS "Domain name",	'Domain'   	  AS "Target type",	pt2.typname   AS "Base type",	pc.collname   AS "Collation",	pt.typdefault AS "Default",	CASE WHEN pt.typnotnull THEN 'NOT NULL' ELSE 'NULL' END AS "Nullable",	pc2.consrc    AS "Check constraint"FROM pg_catalog.pg_type AS pt	JOIN pg_catalog.pg_namespace AS pn 		ON pn.oid = pt.typnamespace	JOIN pg_catalog.pg_type AS pt2 		ON pt2.oid = pt.typbasetype 	LEFT JOIN pg_catalog.pg_collation AS pc		ON pc.oid = pt.typcollation 			AND pc.collname <> 'default' 	LEFT JOIN pg_catalog.pg_constraint AS pc2		ON pc2.contypid = pt.oid	WHERE pt.typtype = 'd'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pt.typname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=1
loadedObj=Domain

[schemaCmp.5.66]
enabled=1
caption=Operators
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name", 	po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') || ',' || COALESCE(ptr.typname, 'NONE') || ')' AS "Operator specific name",	'Operator' AS "Target type",	pp.proname AS "Procedure",	po.oprname AS "Operator",	ptl.typname AS "Left operand",	ptr.typname AS "Right operand",	po2.oprname AS "Commutator",	po3.oprname AS "Negator",	pp1.proname AS "Restrict",	pp2.proname AS "Join",	CASE WHEN po.oprcanhash THEN 'HASHES' END AS "Hashes", 	CASE WHEN po.oprcanmerge THEN 'MERGES' END AS "Merges"FROM pg_catalog.pg_operator AS po	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.oprnamespace 	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = po.oprcode 	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = po.oprleft	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = po.oprright	LEFT JOIN pg_catalog.pg_operator AS po2		ON po2.oid = po.oprcom		LEFT JOIN pg_catalog.pg_operator AS po3		ON po3.oid = po.oprnegate 	LEFT JOIN pg_catalog.pg_proc AS pp1		ON pp1.oid = po.oprrest 	LEFT JOIN pg_catalog.pg_proc AS pp2		ON pp2.oid = po.oprjoinWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY po.oprname
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=1
loadedObj=Operator

[schemaCmp.5.67]
enabled=1
caption=Operators
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name", 	po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') || ',' || COALESCE(ptr.typname, 'NONE') || ')' AS "Operator specific name",	'Operator' AS "Target type",	pp.proname AS "Procedure",	po.oprname AS "Operator",	ptl.typname AS "Left operand",	ptr.typname AS "Right operand",	po2.oprname AS "Commutator",	po3.oprname AS "Negator",	pp1.proname AS "Restrict",	pp2.proname AS "Join",	CASE WHEN po.oprcanhash THEN 'HASHES' END AS "Hashes"FROM pg_catalog.pg_operator AS po	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.oprnamespace 	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = po.oprcode 	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = po.oprleft	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = po.oprright	LEFT JOIN pg_catalog.pg_operator AS po2		ON po2.oid = po.oprcom		LEFT JOIN pg_catalog.pg_operator AS po3		ON po3.oid = po.oprnegate 	LEFT JOIN pg_catalog.pg_proc AS pp1		ON pp1.oid = po.oprrest 	LEFT JOIN pg_catalog.pg_proc AS pp2		ON pp2.oid = po.oprjoinWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY po.oprname
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=458753
condition=
pathNameCnt=1
loadedObj=Operator

[schemaCmp.5.68]
enabled=1
caption=Operator (CREATE)
export=1
qType=3
oType=Operator
query=CREATE OPERATOR "$SCHEMA_NAME$".$OPERATOR$ (    PROCEDURE = $VALUE$$,    LEFTARG = {LEFT OPERAND}$$,    RIGHTARG = {RIGHT OPERAND}$$,    COMMUTATOR = {COMMUTATOR}$$,    NEGATOR = {NEGATOR}$$,    RESTRICT = {RESTRICT}$$,    JOIN = {JOIN}$$,    {HASHES}$$,    {MERGES}$)
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.69]
enabled=1
caption=Operator (DROP)
export=1
qType=3
oType=Operator
query=DROP OPERATOR "$SCHEMA_NAME$".$OBJECT_NAME$ ($LEFT OPERAND;NONE$, $RIGHT OPERAND;NONE$)
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.70]
enabled=1
caption=Access Methods
export=1
qType=1
oType=
query=SELECT	pn.nspname 		AS "Schema name",	pa.amname 		AS "Access method name",	'Access method' AS "Target type"FROM pg_catalog.pg_opfamily AS pf	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pf.opfnamespace	JOIN pg_catalog.pg_am AS pa		ON pa.oid = pf.opfmethodGROUP BY pn.nspname, pa.amname ORDER BY pa.amname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=1
loadedObj=Access method

[schemaCmp.5.71]
enabled=1
caption=Operator Families
export=1
qType=1
oType=
query=SELECT	pn.nspname 			AS "Schema name",	pa.amname 			AS "Access method name", 	pof.opfname 		AS "Operator family name",	'Operator family' 	AS "Target type"FROM pg_catalog.pg_opfamily AS pof	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pof.opfnamespace  	JOIN pg_catalog.pg_am AS pa		ON pa.oid = pof.opfmethod ORDER BY pof.opfname		
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=2
loadedObj=Operator family

[schemaCmp.5.72]
enabled=1
caption=Operator Classes
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	pa.amname  AS "Access method name", 	pf.opfname AS "Operator family name",	po.opcname AS "Operator class name",	'Operator class' AS "Target type",	CASE WHEN po.opcdefault THEN 'DEFAULT' END AS "Default",	pt.typname AS "Data type"FROM pg_catalog.pg_opclass AS po	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.opcnamespace	JOIN pg_catalog.pg_type AS pt		ON pt.oid = po.opcintype	JOIN pg_catalog.pg_am AS pa		ON pa.oid = po.opcmethod	LEFT JOIN pg_catalog.pg_opfamily AS pf		ON pf.oid = po.opcfamilyWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY po.opcname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=3
loadedObj=Operator class

[schemaCmp.5.73]
enabled=1
caption=Operator Class (CREATE)
export=1
qType=3
oType=Operator Class
query=CREATE OPERATOR CLASS "$SCHEMA_NAME$"."$NAME$" ${DEFAULT} $FOR TYPE $DATA TYPE$USING $OBJECT_NAME$ FAMILY $SUBOBJ_NAME$ AS	$,\n\t|CLASS OPERATOR=OPERATOR CLASS OPERATOR,CLASS FUNCTION=OPERATOR CLASS FUNCTION$    
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.74]
enabled=1
caption=Operator Family (CREATE)
export=1
qType=3
oType=Operator Family
query=CREATE OPERATOR FAMILY "$SCHEMA_NAME$"."$NAME$" USING $OBJECT_NAME$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.75]
enabled=1
caption=Operator Family (DROP)
export=1
qType=3
oType=Operator Family
query=DROP OPERATOR FAMILY "$SCHEMA_NAME$"."$NAME$" USING $OBJECT_NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.76]
enabled=1
caption=Operator Class (DROP)
export=1
qType=3
oType=Operator Class
query=DROP OPERATOR CLASS "$SCHEMA_NAME$"."$NAME$" USING $OBJECT_NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.77]
enabled=1
caption=Class Operators
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	pam.amname AS "Access method",	pf.opfname AS "Operatory family name",	po.opcname AS "Operator class name", 	pop.oprname AS "Operator name",	'Class operator' AS "Target type",	pa.amopstrategy AS "Strategy",	CASE WHEN po.opcintype <> pa.amoplefttype OR po.opcintype <> pa.amoprighttype THEN		'(' || COALESCE(ptl.typname, 'NONE') || ', ' || COALESCE(ptr.typname, 'NONE') || ')'	END AS "Operand types"FROM pg_catalog.pg_opclass AS po	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.opcnamespace	JOIN pg_catalog.pg_opfamily AS pf		ON pf.oid = po.opcfamily	JOIN pg_catalog.pg_am AS pam		ON pam.oid = pf.opfmethod			JOIN pg_catalog.pg_amop AS pa		ON pa.amopfamily = po.opcfamily	JOIN pg_catalog.pg_operator AS pop		ON pop.oid = pa.amopopr 	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = pa.amoplefttype 	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = pa.amoprighttypeWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pa.amopstrategy 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=4
loadedObj=Class operator

[schemaCmp.5.78]
enabled=1
caption=Class Operators
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	pam.amname AS "Access method",	pf.opfname AS "Operatory family name",	po.opcname AS "Operator class name", 	pop.oprname AS "Operator name",	'Class operator' AS "Target type",	pa.amopstrategy AS "Strategy",	CASE WHEN po.opcintype <> pa.amoplefttype OR po.opcintype <> pa.amoprighttype THEN		'(' || COALESCE(ptl.typname, 'NONE') || ', ' || COALESCE(ptr.typname, 'NONE') || ')'	END AS "Operand types",	CASE WHEN pa.amoppurpose = 'o' THEN pfs.opfname END AS "Purpose"FROM pg_catalog.pg_opclass AS po	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.opcnamespace	JOIN pg_catalog.pg_opfamily AS pf		ON pf.oid = po.opcfamily	JOIN pg_catalog.pg_am AS pam		ON pam.oid = pf.opfmethod			JOIN pg_catalog.pg_amop AS pa		ON pa.amopfamily = po.opcfamily	JOIN pg_catalog.pg_operator AS pop		ON pop.oid = pa.amopopr 	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = pa.amoplefttype 	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = pa.amoprighttype	LEFT JOIN pg_catalog.pg_opfamily AS pfs		ON pfs.oid = pa.amopsortfamily WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pa.amopstrategy 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=4
loadedObj=Class operator

[schemaCmp.5.79]
enabled=1
caption=Operator Class Operator
export=1
qType=3
oType=
query=OPERATOR $STRATEGY$ $NAME$$ {OPERAND TYPES}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.80]
enabled=1
caption=Class Functions
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	pam.amname AS "Access method",	pf.opfname AS "Operatory family name",	po.opcname AS "Operator class name", 	pp.proname AS "Function name",	'Class function' AS "Target type",	pa.amprocnum AS "Support number",	CASE WHEN po.opcintype <> pa.amproclefttype OR po.opcintype <> pa.amprocrighttype THEN		'(' || COALESCE(ptl.typname, 'NONE') || ', ' || COALESCE(ptr.typname, 'NONE') || ')'	END AS "Operand types",	array_to_string(ARRAY(		SELECT format_type(pp.proargtypes[k], NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') AS "Arguments"FROM pg_catalog.pg_opclass AS po	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.opcnamespace	JOIN pg_catalog.pg_opfamily AS pf		ON pf.oid = po.opcfamily	JOIN pg_catalog.pg_am AS pam		ON pam.oid = pf.opfmethod			JOIN pg_catalog.pg_amproc AS pa		ON pa.amprocfamily = po.opcfamily			AND pa.amproclefttype = po.opcintype 	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = pa.amproclefttype 	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = pa.amprocrighttype	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pa.amproc 	JOIN pg_catalog.pg_type AS pt		ON pt.oid = po.opcintype	WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pa.amprocnum 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=4
loadedObj=Class function

[schemaCmp.5.81]
enabled=1
caption=Operator Class Function
export=1
qType=3
oType=
query=FUNCTION $SUPPORT NUMBER$ $OPERAND TYPES$ $NAME$($ARGUMENTS$) 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.82]
enabled=1
caption=Roles
export=1
qType=1
oType=Server
query=SELECT 	rolname AS "Role name",	'Role'	AS "Target type",	CASE 		WHEN rolsuper THEN 'SUPERUSER' 		ELSE 'NOSUPERUSER' 	END AS "Superuser",	CASE 		WHEN rolcreatedb THEN 'CREATEDB' 		ELSE 'NOCREATEDB' 	END AS "Create DB",	CASE 		WHEN rolcreaterole THEN 'CREATEROLE' 		ELSE 'NOCREATEROLE' 	END AS "Create role",	CASE 		WHEN rolinherit THEN 'INHERIT' 		ELSE 'NOINHERIT' 	END AS "Inherit",	CASE 		WHEN rolcanlogin THEN 'LOGIN' 		ELSE 'NOLOGIN' 	END AS "Can login",	rolconnlimit AS "Connection limit",	rolvaliduntil AS "Valid"FROM pg_catalog.pg_authidORDER BY rolname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524289
condition=
pathNameCnt=0
loadedObj=Role

[schemaCmp.5.83]
enabled=1
caption=Roles
export=1
qType=1
oType=Server
query=SELECT 	rolname AS "Role name",	'Role'	AS "Target type",	CASE 		WHEN rolsuper THEN 'SUPERUSER' 		ELSE 'NOSUPERUSER' 	END AS "Superuser",	CASE 		WHEN rolcreatedb THEN 'CREATEDB' 		ELSE 'NOCREATEDB' 	END AS "Create DB",	CASE 		WHEN rolcreaterole THEN 'CREATEROLE' 		ELSE 'NOCREATEROLE' 	END AS "Create role",	CASE 		WHEN rolinherit THEN 'INHERIT' 		ELSE 'NOINHERIT' 	END AS "Inherit",	CASE 		WHEN rolcanlogin THEN 'LOGIN' 		ELSE 'NOLOGIN' 	END AS "Can login",	CASE 		WHEN rolreplication THEN 'REPLICATION' 		ELSE 'NOREPLICATION' 	END AS "Replication",	rolconnlimit AS "Connection limit",	rolvaliduntil AS "Valid"FROM pg_catalog.pg_authidORDER BY rolname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=Role

[schemaCmp.5.84]
enabled=1
caption=Role (CREATE)
export=1
qType=3
oType=Role
query=CREATE ROLE "$NAME$" WITH 	$SUPERUSER$    $CREATE DB$    $CREATE ROLE$    $INHERIT$    $CAN LOGIN$    CONNECTION LIMIT $CONNECTION LIMIT;-1$$    VALID UNTIL '{VALID}'$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524289
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.85]
enabled=1
caption=Role members
export=1
qType=1
oType=Role
query=SELECT 	am.rolname 	  AS "Member",		'Role member' AS "Target type"FROM pg_catalog.pg_auth_members m	JOIN pg_catalog.pg_authid ap  		ON ap.oid = m.roleid	JOIN pg_catalog.pg_authid am  		ON am.oid = m."member"WHERE ap.rolname = '$DB_NAME$'ORDER BY am.rolname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524289
condition=
pathNameCnt=0
loadedObj=Role member

[schemaCmp.5.86]
enabled=1
caption=Role (DROP)
export=1
qType=3
oType=Role
query=DROP ROLE $NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.87]
enabled=1
caption=Role member (CREATE)
export=1
qType=3
oType=Role member
query=GRANT $SCHEMA_NAME$ TO $NAME$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524289
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.88]
enabled=1
caption=Role member (DROP)
export=1
qType=3
oType=Role member
query=REVOKE $SCHEMA_NAME$ FROM $NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.89]
enabled=1
caption=Rules
export=1
qType=1
oType=
query=SELECT 	schemaname 	AS "Schema name", 	tablename 	AS "Table name", 	rulename 	AS "Rule name",	'Rule'		AS "Target type", 	definition 	AS "DDL"FROM pg_catalog.pg_rulesORDER BY rulename
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Rule

[schemaCmp.5.90]
enabled=1
caption=Rule (CREATE)
export=1
qType=3
oType=Rule
query=$DDL$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.91]
enabled=1
caption=Rule (DROP)
export=1
qType=3
oType=Rule
query=DROP RULE "$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$"; 
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.92]
enabled=1
caption=Composite Types
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	t.typname AS "Type name",	'Composite type' AS "Target type"FROM pg_catalog.pg_type AS t	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = t.typnamespace 	JOIN pg_catalog.pg_class AS c		ON c.oid = t.typrelidWHERE t.typtype = 'c' AND c.relkind = 'c'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY t.typname  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Composite type

[schemaCmp.5.93]
enabled=1
caption=Composite Type Columns
export=1
qType=1
oType=
query=SELECT 	pn.nspname    AS "Schema name",	c.relname     AS "Type name",	pa.attname    AS "Column name",	'Type column' AS "Target type",	replace(pt.typname, 'character varying', 'varchar')    AS "Type"FROM pg_catalog.pg_attribute AS pa	JOIN pg_catalog.pg_class AS c		ON c.oid = pa.attrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace	JOIN pg_catalog.pg_type AS pt		ON pt.oid = pa.atttypid WHERE c.relkind = 'c'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pa.attnum
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=2
loadedObj=Type column

[schemaCmp.5.94]
enabled=1
caption=Composite Type Columns
export=1
qType=1
oType=
query=SELECT 	pn.nspname    AS "Schema name",	c.relname     AS "Type name",	pa.attname    AS "Column name",	'Type column' AS "Target type",	replace(pt.typname, 'character varying', 'varchar')    AS "Type",	pc.collname   AS "Collation"FROM pg_catalog.pg_attribute AS pa	JOIN pg_catalog.pg_class AS c		ON c.oid = pa.attrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace	JOIN pg_catalog.pg_type AS pt		ON pt.oid = pa.atttypid 	LEFT JOIN pg_catalog.pg_collation AS pc		ON pc.oid = pa.attcollation AND pc.collname <> 'default'	WHERE c.relkind = 'c'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pa.attnum  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=2
loadedObj=Type column

[schemaCmp.5.95]
enabled=1
caption=Type Composite (CREATE)
export=1
qType=3
oType=Composite type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" AS (	$,\n\t|TYPE COLUMN=TYPE COLUMN$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.96]
enabled=1
caption=Type Column
export=1
qType=3
oType=
query=$NAME$ $TYPE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.97]
enabled=1
caption=Enum Types
export=1
qType=1
oType=
query=SELECT 	pn.nspname  AS "Schema name",	t.typname   AS "Type name",	'Enum type' AS "Target type", 	array_to_string(ARRAY(		SELECT '''' || e.enumlabel || '''' FROM pg_catalog.pg_enum e WHERE e.enumtypid = t.oid ), ', '	) AS "Labels"FROM pg_catalog.pg_type AS t	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = t.typnamespaceWHERE t.typtype = 'e'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY t.typname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=1
loadedObj=Enum type

[schemaCmp.5.98]
enabled=1
caption=Type (DROP)
export=1
qType=3
oType=Type,Composite type,Enum type,Range type
query=DROP TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.99]
enabled=1
caption=Type Enum (CREATE)
export=1
qType=3
oType=Enum type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" AS ENUM ($LABELS$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.100]
enabled=1
caption=Types
export=1
qType=1
oType=
query=SELECT 	pn.nspname  AS "Schema name",	t.typname   AS "Type name",	'Type' 	    AS "Target type",	t.typinput  AS "Input",	t.typoutput AS "Output",	CASE WHEN t.typlen >= 0     THEN t.typlen        END AS "Length",	CASE WHEN t.typbyval        THEN 'PASSEDBYVALUE' END AS "By value",	CASE t.typalign		WHEN 'c' THEN 'char'		WHEN 's' THEN 'int2'		WHEN 'd' THEN 'double'		ELSE NULL -- 'int4'	END AS "Alignment",	CASE t.typstorage 		WHEN 'e' THEN 'external'		WHEN 'm' THEN 'main'		WHEN 'x' THEN 'extended'		ELSE NULL -- 'plain'	END AS "Storage",	t.typdefault  AS "Default",	pe.typname    AS "Element",	pg_get_userbyid(t.typowner) AS "Owner"FROM pg_catalog.pg_type AS t	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = t.typnamespace	LEFT JOIN pg_catalog.pg_type AS pe		ON pe.oid = t.typelemWHERE t.typtype = 'b'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY t.typname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.5.101]
enabled=1
caption=Types
export=1
qType=1
oType=
query=SELECT 	pn.nspname  AS "Schema name",	t.typname   AS "Type name",	'Type' 	    AS "Target type",	t.typinput  AS "Input",	t.typoutput AS "Output",	CASE WHEN t.typreceive <> 0 THEN t.typreceive    END AS "Receive",	CASE WHEN t.typsend <> 0    THEN t.typsend       END AS "Send",	CASE WHEN t.typanalyze <> 0 THEN t.typanalyze    END AS "Analyze",	CASE WHEN t.typlen >= 0     THEN t.typlen        END AS "Length",	CASE WHEN t.typbyval        THEN 'PASSEDBYVALUE' END AS "By value",	CASE t.typalign		WHEN 'c' THEN 'char'		WHEN 's' THEN 'int2'		WHEN 'd' THEN 'double'		ELSE NULL -- 'int4'	END AS "Alignment",	CASE t.typstorage 		WHEN 'e' THEN 'external'		WHEN 'm' THEN 'main'		WHEN 'x' THEN 'extended'		ELSE NULL -- 'plain'	END AS "Storage",	t.typdefault  AS "Default",	pe.typname    AS "Element",    t.typdelim    AS "Delimiter",	pg_get_userbyid(t.typowner) AS "Owner"FROM pg_catalog.pg_type AS t	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = t.typnamespace	LEFT JOIN pg_catalog.pg_type AS pe		ON pe.oid = t.typelemWHERE t.typtype = 'b'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY t.typname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.5.102]
enabled=1
caption=Types
export=1
qType=1
oType=
query=SELECT 	pn.nspname  AS "Schema name",	t.typname   AS "Type name",	'Type' 	    AS "Target type",	t.typinput  AS "Input",	t.typoutput AS "Output",	CASE WHEN t.typreceive <> 0 THEN t.typreceive    END AS "Receive",	CASE WHEN t.typsend <> 0    THEN t.typsend       END AS "Send",	CASE WHEN t.typmodin <> 0   THEN t.typmodin      END AS "Type modifier input",	CASE WHEN t.typmodout <> 0  THEN t.typmodout     END AS "Type modifier output",	CASE WHEN t.typanalyze <> 0 THEN t.typanalyze    END AS "Analyze",	CASE WHEN t.typlen >= 0     THEN t.typlen        END AS "Length",	CASE WHEN t.typbyval        THEN 'PASSEDBYVALUE' END AS "By value",	CASE t.typalign		WHEN 'c' THEN 'char'		WHEN 's' THEN 'int2'		WHEN 'd' THEN 'double'		ELSE NULL -- 'int4'	END AS "Alignment",	CASE t.typstorage 		WHEN 'e' THEN 'external'		WHEN 'm' THEN 'main'		WHEN 'x' THEN 'extended'		ELSE NULL -- 'plain'	END AS "Storage",	t.typdefault  AS "Default",	pe.typname    AS "Element",    t.typdelim    AS "Delimiter",	pg_get_userbyid(t.typowner) AS "Owner"FROM pg_catalog.pg_type AS t	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = t.typnamespace	LEFT JOIN pg_catalog.pg_type AS pe		ON pe.oid = t.typelemWHERE t.typtype = 'b'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY t.typname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.5.103]
enabled=1
caption=Types
export=1
qType=1
oType=
query=SELECT 	pn.nspname  AS "Schema name",	t.typname   AS "Type name",	'Type' 	    AS "Target type",	t.typinput  AS "Input",	t.typoutput AS "Output",	CASE WHEN t.typreceive <> 0 THEN t.typreceive    END AS "Receive",	CASE WHEN t.typsend <> 0    THEN t.typsend       END AS "Send",	CASE WHEN t.typmodin <> 0   THEN t.typmodin      END AS "Type modifier input",	CASE WHEN t.typmodout <> 0  THEN t.typmodout     END AS "Type modifier output",	CASE WHEN t.typanalyze <> 0 THEN t.typanalyze    END AS "Analyze",	CASE WHEN t.typlen >= 0     THEN t.typlen        END AS "Length",	CASE WHEN t.typbyval        THEN 'PASSEDBYVALUE' END AS "By value",	CASE t.typalign		WHEN 'c' THEN 'char'		WHEN 's' THEN 'int2'		WHEN 'd' THEN 'double'		ELSE NULL -- 'int4'	END AS "Alignment",	CASE t.typstorage 		WHEN 'e' THEN 'external'		WHEN 'm' THEN 'main'		WHEN 'x' THEN 'extended'		ELSE NULL -- 'plain'	END AS "Storage",	t.typcategory AS "Category",	t.typdefault  AS "Default",	pe.typname    AS "Element",    t.typdelim    AS "Delimiter",	pg_get_userbyid(t.typowner) AS "Owner"FROM pg_catalog.pg_type AS t	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = t.typnamespace	LEFT JOIN pg_catalog.pg_type AS pe		ON pe.oid = t.typelemWHERE t.typtype = 'b'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY t.typname  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.5.104]
enabled=1
caption=Type (CREATE)
export=1
qType=3
oType=Type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" (    INPUT = $INPUT$,    OUTPUT = $OUTPUT$$,    INTERNALLENGTH = {LENGTH}$$,    {BY VALUE}$$,    ALIGNMENT = {ALIGNMENT}$$,    STORAGE = {STORAGE}$$,    DEFAULT = {DEFAULT}$$,    ELEMENT = {ELEMENT}$);ALTER TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.105]
enabled=1
caption=Meterialized Views
export=1
qType=1
oType=
query=SELECT 	n.nspname AS "Schema name",    c.relname AS "View name",    'Materialized View' AS "Target type",    pg_get_userbyid(c.relowner) AS "Owner",    t.spcname AS "Tablespace",    CASE WHEN NOT c.relispopulated THEN 'NO' END AS "Populated",    pg_get_viewdef(c.oid) AS "Definition__NAME_REFERENCE"FROM pg_class c	JOIN pg_namespace n 		ON n.oid = c.relnamespace    LEFT JOIN pg_tablespace t     	ON t.oid = c.reltablespaceWHERE c.relkind = 'm'	AND ('$SCHEMA_NAME$' = '' OR n.nspname = '$SCHEMA_NAME$')ORDER BY c.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589827
condition=
pathNameCnt=1
loadedObj=Materialized View

[schemaCmp.5.106]
enabled=1
caption=Materialized View (CREATE)
export=1
qType=3
oType=Materialized View
query=CREATE MATERIALIZED VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$"  (	$,\n\t|COLUMN=COLUMN NAME$)$ TABLESPACE "{TABLESPACE}"$ AS$DEFINITION$WITH$ {POPULATED}$ DATA;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589827
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.107]
enabled=1
caption=Materialized View (DROP)
export=1
qType=3
oType=Materialized View
query=DROP MATERIALIZED VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.108]
enabled=1
caption=Range Types
export=1
qType=1
oType=
query=SELECT		pn.nspname AS "Schema name",	pt.typname AS "Type name",	'Range Type' AS "Target type",	ps.typname AS "Subtype",	pc.collname AS "Collation",	po.opcname AS "Subtype operator class",	CASE WHEN pr.rngcanonical <> 0 THEN pr.rngcanonical END AS "Canonical function",	CASE WHEN pr.rngsubdiff <> 0 THEN pr.rngsubdiff END AS "Subtype diff function"FROM pg_catalog.pg_range AS pr	JOIN pg_catalog.pg_type AS pt		ON pt.oid = pr.rngtypid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pt.typnamespace	JOIN pg_catalog.pg_type AS ps		ON ps.oid = pr.rngsubtype	LEFT JOIN pg_catalog.pg_collation AS pc		ON pc.oid = pr.rngcollation	LEFT JOIN pg_catalog.pg_opclass AS po		ON po.oid = pr.rngsubopcWHERE pt.typtype = 'r'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pt.typname  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589826
condition=
pathNameCnt=1
loadedObj=Range Type

[schemaCmp.5.109]
enabled=1
caption=Collations
export=1
qType=0
oType=
query=SELECT	pn.nspname    AS "Schema name",	c.collname    AS "Collation name",	'Collation'	  AS "Target type",	c.collcollate AS "LC Collate",	c.collctype   AS "LC CType"FROM pg_catalog.pg_collation AS c	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.collnamespaceWHERE c.collname <> 'default'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY c.collname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=Collation

[schemaCmp.5.110]
enabled=1
caption=Comments (Role)
export=1
qType=1
oType=Role
query=SELECT	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'ROLE "' || pa.rolname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_shdescription AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_authid'	JOIN pg_catalog.pg_authid AS pa		ON pa.oid = pd.objoidWHERE pa.rolname = '$DB_NAME$'
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524289
condition=
pathNameCnt=0
loadedObj=Comment

[schemaCmp.5.111]
enabled=1
caption=Comments (Database)
export=1
qType=1
oType=Database
query=SELECT	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'DATABASE "' || d.datname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_shdescription AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_database'	JOIN pg_catalog.pg_database AS d		ON d.oid = pd.objoid WHERE d.datname = '$DB_NAME$'
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524290
condition=
pathNameCnt=0
loadedObj=Comment

[schemaCmp.5.112]
enabled=1
caption=Comments (Level 1)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'SCHEMA "' || pn.nspname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_namespace'	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pd.objoidWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')	UNION ALLSELECT	ptl.typname || ' AS ' || ptr.typname AS "Cast name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'CAST(' || ptl.typname || ' AS ' || ptr.typname || ')' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_cast'	JOIN pg_catalog.pg_cast AS c		ON c.oid = pd.objoid 	JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = c.castsource	JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = c.casttargetWHERE ('$SCHEMA_NAME$' = '')
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=458755
condition=
pathNameCnt=1
loadedObj=Comment

[schemaCmp.5.113]
enabled=1
caption=Comments (Level 2)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	pp.proname || '(' || array_to_string(ARRAY(		SELECT format_type(pp.proargtypes[k], NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Function specific name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'FUNCTION "' || pn.nspname || '"."' || pp.proname || '" (' ||		array_to_string(ARRAY(		SELECT format_type(pp.proargtypes[k], NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_proc'	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pp.pronamespaceWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname AS "Table name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	CASE c.relkind 		WHEN 'r' THEN 'TABLE'		WHEN 's' THEN 'SEQUENCE'		WHEN 'v' THEN 'VIEW'		WHEN 'm' THEN 'MATERIALIZED VIEW'	END || ' "' || pn.nspname || '"."' || c.relname || '"' AS "CmtObject__HIDDEN" 	   FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_class'	JOIN pg_catalog.pg_class AS c		ON c.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE pd.objsubid = 0 AND c.relkind IN ('r', 's', 'v', 'm')	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') || 		',' || COALESCE(ptr.typname, 'NONE') || ')' AS "Operator specific name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'OPERATOR "' || pn.nspname || '".' || po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') ||			',' || COALESCE(ptr.typname, 'NONE') || ')' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_operator'	JOIN pg_catalog.pg_operator AS po		ON po.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.oprnamespace	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = po.oprleft	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = po.oprrightWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	pt.typname AS "Type name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	CASE WHEN pt.typtype = 'd' THEN 'DOMAIN' ELSE 'TYPE' END || ' "' || 		pn.nspname || '"."' || pt.typname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_type'	JOIN pg_catalog.pg_type AS pt		ON pt.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pt.typnamespaceWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	c.conname  AS "Conversion name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'CONVERSION "' || pn.nspname || '"."' || c.conname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_conversion'	JOIN pg_catalog.pg_conversion AS c		ON c.oid = pd.objoid 	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.connamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=2
loadedObj=Comment

[schemaCmp.5.114]
enabled=1
caption=Comments (Level 2)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	pp.proname || '(' || array_to_string(ARRAY(		SELECT format_type(pp.proargtypes[k], NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Function specific name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'FUNCTION "' || pn.nspname || '"."' || pp.proname || '" (' ||		array_to_string(ARRAY(		SELECT format_type(pp.proargtypes[k], NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_proc'	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pp.pronamespaceWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname AS "Table name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	CASE c.relkind 		WHEN 'r' THEN 'TABLE'		WHEN 's' THEN 'SEQUENCE'		WHEN 'v' THEN 'VIEW'		WHEN 'm' THEN 'MATERIALIZED VIEW'	END || ' "' || pn.nspname || '"."' || c.relname || '"' AS "CmtObject__HIDDEN" 	   FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_class'	JOIN pg_catalog.pg_class AS c		ON c.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE pd.objsubid = 0 AND c.relkind IN ('r', 's', 'v', 'm')	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') || 		',' || COALESCE(ptr.typname, 'NONE') || ')' AS "Operator specific name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'OPERATOR "' || pn.nspname || '".' || po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') ||			',' || COALESCE(ptr.typname, 'NONE') || ')' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_operator'	JOIN pg_catalog.pg_operator AS po		ON po.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.oprnamespace	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = po.oprleft	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = po.oprrightWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	pt.typname AS "Type name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	CASE WHEN pt.typtype = 'd' THEN 'DOMAIN' ELSE 'TYPE' END || ' "' || 		pn.nspname || '"."' || pt.typname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_type'	JOIN pg_catalog.pg_type AS pt		ON pt.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pt.typnamespaceWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	c.collname AS "Collation name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'COLLATION "' || pn.nspname || '"."' || c.collname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_collation'	JOIN pg_catalog.pg_collation AS c		ON c.oid = pd.objoid 	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.collnamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	c.conname  AS "Conversion name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'CONVERSION "' || pn.nspname || '"."' || c.conname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_conversion'	JOIN pg_catalog.pg_conversion AS c		ON c.oid = pd.objoid 	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.connamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=2
loadedObj=Comment

[schemaCmp.5.115]
enabled=1
caption=Comment (CREATE)
export=1
qType=3
oType=Comment
query=COMMENT ON $CMTOBJECT$ IS $VALUE.STRING$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.116]
enabled=1
caption=Comment (ALTER)
export=1
qType=3
oType=Comment
query=COMMENT ON $CMTOBJECT$ IS $VALUE.STRING$;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.117]
enabled=1
caption=Comment (DROP)
export=1
qType=3
oType=Comment
query=COMMENT ON $CMTOBJECT$ IS '';
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.118]
enabled=1
caption=Collation (CREATE)
export=1
qType=3
oType=Collation
query=CREATE COLLATION "$SCHEMA_NAME$"."$NAME$" (    LC_COLLATE = $LC COLLATE.STRING$,     LC_CTYPE = $LC CTYPE.STRING$ );
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.119]
enabled=1
caption=Collation (DROP)
export=1
qType=3
oType=Collation
query=DROP COLLATION "$SCHEMA_NAME$"."$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.120]
enabled=1
caption=Comments (Level 3)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pa.attname AS "Column name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'COLUMN "' || pn.nspname || '"."' || c.relname || '"."' || pa.attname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid         	AND pc.relname = 'pg_class'	JOIN pg_catalog.pg_class AS c		ON c.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace	JOIN pg_catalog.pg_attribute AS pa		ON pa.attrelid = c.oid 			AND pa.attnum = pd.objsubidWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	cn.conname AS "Constraint name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'CONSTRAINT "' || cn.conname || '" ON "' || pn.nspname || '"."' || c.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_constraint'	JOIN pg_catalog.pg_constraint AS cn		ON cn.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = cn.conrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALL        SELECT	pn.nspname AS "Schema name",	ct.relname AS "Table name", 	ci.relname AS "Index name", 	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'INDEX "' || pn.nspname || '"."' || ci.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_index AS pi	JOIN pg_catalog.pg_class ci 		ON ci.oid = pi.indexrelid 	JOIN pg_catalog.pg_class ct 		ON ct.oid = pi.indrelid 	JOIN pg_catalog.pg_namespace pn 		ON pn.oid = ct.relnamespace	JOIN pg_catalog.pg_description AS pd 		ON pd.objoid = ci.oid 	JOIN pg_catalog.pg_class dc 		ON dc.oid = pd.classoid 			AND dc.relname = 'pg_class'WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pr.rulename AS "Constraint name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'RULE "' || pr.rulename || '" ON "' || pn.nspname || '"."' || c.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_rewrite'	JOIN pg_catalog.pg_rewrite AS pr		ON pr.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = pr.ev_class	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALL        SELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pt.tgname  AS "Trigger name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'TRIGGER "' || pt.tgname || '" ON "' || pn.nspname || '"."' || c.relname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_trigger'	JOIN pg_catalog.pg_trigger AS pt		ON pt.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = pt.tgrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')        
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=3
loadedObj=Comment

[schemaCmp.5.121]
enabled=1
caption=Comments (Level 3)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pa.attname AS "Column name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'COLUMN "' || pn.nspname || '"."' || c.relname || '"."' || pa.attname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid         	AND pc.relname = 'pg_class'	JOIN pg_catalog.pg_class AS c		ON c.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace	JOIN pg_catalog.pg_attribute AS pa		ON pa.attrelid = c.oid 			AND pa.attnum = pd.objsubidWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	cn.conname AS "Constraint name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'CONSTRAINT "' || cn.conname || '" ON "' || pn.nspname || '"."' || c.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_constraint'	JOIN pg_catalog.pg_constraint AS cn		ON cn.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = cn.conrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALL        SELECT	pn.nspname AS "Schema name",	ct.relname AS "Table name", 	ci.relname AS "Index name", 	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'INDEX "' || pn.nspname || '"."' || ci.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_index AS pi	JOIN pg_catalog.pg_class ci 		ON ci.oid = pi.indexrelid 	JOIN pg_catalog.pg_class ct 		ON ct.oid = pi.indrelid 	JOIN pg_catalog.pg_namespace pn 		ON pn.oid = ct.relnamespace	JOIN pg_catalog.pg_description AS pd 		ON pd.objoid = ci.oid 	JOIN pg_catalog.pg_class dc 		ON dc.oid = pd.classoid 			AND dc.relname = 'pg_class'WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pr.rulename AS "Constraint name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'RULE "' || pr.rulename || '" ON "' || pn.nspname || '"."' || c.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_rewrite'	JOIN pg_catalog.pg_rewrite AS pr		ON pr.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = pr.ev_class	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALL        SELECT	pn.nspname AS "Schema name",	pa.amname  AS "Access method",	fo.opfname AS "Operator family name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'OPERATOR FAMILY "'|| pn.nspname || '"."' || fo.opfname || '" USING ' || pa.amname AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_opfamily'	JOIN pg_catalog.pg_opfamily AS fo		ON fo.oid = pd.objoid	JOIN pg_catalog.pg_am AS pa		ON pa.oid = fo.opfmethod	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = fo.opfnamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALL        SELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pt.tgname  AS "Trigger name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'TRIGGER "' || pt.tgname || '" ON "' || pn.nspname || '"."' || c.relname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_trigger'	JOIN pg_catalog.pg_trigger AS pt		ON pt.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = pt.tgrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')        
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=3
loadedObj=Comment

[schemaCmp.5.122]
enabled=1
caption=Comments (Level 4)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	pa.amname  AS "Access method",	pf.opfname AS "Operator family name",	oc.opcname AS "Operator class name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'OPERATOR CLASS "'|| pn.nspname || '"."' || oc.opcname || '" USING ' || pa.amname AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_opclass'	JOIN pg_catalog.pg_opclass AS oc		ON oc.oid = pd.objoid	JOIN pg_catalog.pg_am AS pa		ON pa.oid = oc.opcmethod	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = oc.opcnamespace	LEFT JOIN pg_catalog.pg_opfamily AS pf		ON pf.oid = oc.opcfamily
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=4
loadedObj=Comment

[schemaCmp.5.123]
enabled=1
caption=Event Triggers
export=1
qType=1
oType=Database
query=SELECT    pe.evtname AS "Trigger name",     'Event Trigger' AS "Target type",    pe.evtevent AS "Event",    '"' || pn.nspname || '"."' ||  pp.proname || '"(' || pg_get_function_arguments(pp.oid) || ')' AS "Function",	pg_get_userbyid(pe.evtowner) AS "Owner"FROM pg_catalog.pg_event_trigger AS pe	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pe.evtfoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pp.pronamespaceORDER BY pe.evtname  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589827
condition=
pathNameCnt=0
loadedObj=Event Trigger

[schemaCmp.5.124]
enabled=1
caption=Event Trigger (CREATE)
export=1
qType=3
oType=Event Trigger
query=CREATE EVENT TRIGGER "$NAME$" ON $EVENT$  EXECUTE PROCEDURE $FUNCTION$;ALTER TABLE EVENT TRIGGER "$NAME$" OWNER TO "$OWNER$";
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589827
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.125]
enabled=1
caption=Event Trigger (DROP)
export=1
qType=3
oType=Event Trigger
query=DROP EVENT TRIGGER "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.126]
enabled=1
caption=Foreign Data Wrappers
export=1
qType=1
oType=Database
query=SELECT	pd.fdwname AS "Wrapper name",	'Foreign Data Wrapper' AS "Target type",    p1.proname AS "Handler",    p2.proname AS "Validator",	pg_get_userbyid(pd.fdwowner) AS "Owner",	array_to_string(ARRAY(		SELECT REPLACE(pd.fdwoptions[k], '=', ' ''') || ''''		FROM generate_subscripts(pd.fdwoptions, 1) k 	), ', ') AS "Options"FROM pg_catalog.pg_foreign_data_wrapper AS pd	LEFT JOIN pg_catalog.pg_proc AS p1		ON p1.oid = pd.fdwhandler	LEFT JOIN pg_catalog.pg_proc AS p2		ON p2.oid = pd.fdwvalidatorORDER BY pd.fdwname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=Foreign Data Wrapper

[schemaCmp.5.127]
enabled=1
caption=Foreign Data Wrapper (CREATE)
export=1
qType=3
oType=Foreign Data Wrapper
query=CREATE FOREIGN DATA WRAPPER $NAME$$	HANDLER {HANDLER}$$	VALIDATOR {VALIDATOR}$$	OPTIONS ( {OPTIONS} )$;ALTER FOREIGN DATA WRAPPER $NAME$ OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.128]
enabled=1
caption=Foreign Data Wrapper (DROP)
export=1
qType=3
oType=Foreign Data Wrapper
query=DROP FOREIGN DATA WRAPPER $NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.129]
enabled=1
caption=Foreign Servers
export=1
qType=1
oType=Database
query=SELECT 	ps.srvname AS "Server name",	'Foreign Server' AS "Target type",	ps.srvtype AS "Server type",	ps.srvversion AS "Server version",	pw.fdwname AS "Wrapper name",	pg_get_userbyid(ps.srvowner) AS "Owner",	array_to_string(ARRAY(		SELECT REPLACE(pw.fdwoptions[k], '=', ' ''') || ''''		FROM generate_subscripts(pw.fdwoptions, 1) k 	), ', ') AS "Options"FROM pg_catalog.pg_foreign_server AS ps	JOIN pg_catalog.pg_foreign_data_wrapper AS pw		ON pw.oid = ps.srvfdwORDER BY ps.srvname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=Foreign Server

[schemaCmp.5.130]
enabled=1
caption=Foreign Server (CREATE)
export=1
qType=3
oType=Foreign Server
query=CREATE SERVER $NAME$$ TYPE {SERVER TYPE.STRING}$$ VERSION {SERVER VERSION.STRING}$	FOREIGN DATA WRAPPER $WRAPPER NAME$$	OPTIONS ( {OPTIONS} )$;ALTER SERVER $NAME$ OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.131]
enabled=1
caption=Foreign Server (DROP)
export=1
qType=3
oType=Foreign Server
query=DROP SERVER $NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.132]
enabled=1
caption=Foreign Tables
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	pc.relname AS "Table name",	'Foreign Table' AS "Target type",	pg_get_userbyid(pc.relowner) AS "Owner",	ps.srvname AS "Server",	array_to_string(ARRAY(		SELECT REPLACE(pt.ftoptions[k], '=', ' ''') || ''''		FROM generate_subscripts(pt.ftoptions, 1) k 	), ', ') AS "Options"FROM pg_catalog.pg_foreign_table AS pt 	JOIN pg_catalog.pg_foreign_server AS ps		ON ps.oid = pt.ftserver	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pt.ftrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pc.relnamespaceORDER BY pc.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=1
loadedObj=Foreign Table

[schemaCmp.5.133]
enabled=1
caption=Foreign Table (CREATE)
export=1
qType=3
oType=Foreign Table
query=CREATE FOREIGN TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN=COLUMN DEFINITION$)SERVER $SERVER$$OPTIONS ( {OPTIONS} )$;ALTER FOREIGN TABLE $NAME$ OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.134]
enabled=1
caption=Foreign Table (DROP)
export=1
qType=3
oType=Foreign Table
query=DROP FOREIGN TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.135]
enabled=1
caption=User Mappings
export=1
qType=1
oType=Foreign Server
query=SELECT             	pm.srvname AS "Server",	pm.usename AS "User",	'User Mapping' AS "Target type",	array_to_string(ARRAY(		SELECT REPLACE(pm.umoptions[k], '=', ' ''') || ''''		FROM generate_subscripts(pm.umoptions, 1) k 	), ', ') AS "Options"FROM pg_catalog.pg_user_mappings AS pmORDER BY pm.usename	
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=User Mapping

[schemaCmp.5.136]
enabled=1
caption=Permissions (tables)
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	pc.relname AS "Table name",	a.privilege_type || ' TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Permission",	'Permission' AS "Target type",	CASE pc.relkind WHEN 'S' THEN 'SEQUENCE "' ELSE 'TABLE "' END || pc.relname || '"' AS "Object Name__HIDDEN__DC",	a.privilege_type AS "Privilege Type",	CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Grantee",	CASE WHEN a.is_grantable THEN 'WITH GRANT OPTION' ELSE '' END AS "Grantable",	0 AS "IsRevoke__HIDDEN"FROM 	pg_catalog.pg_class AS pc,	pg_catalog.pg_namespace AS pn, 	pg_catalog.aclexplode(pc.relacl) AS aWHERE 	pn.oid = pc.relnamespace	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR pc.relname = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.5.137]
enabled=1
caption=User Mapping (CREATE)
export=1
qType=3
oType=User mapping
query=CREATE USER MAPPING FOR $NAME$    SERVER $SCHEMA_NAME$$    OPTIONS ( {OPTIONS} )$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.138]
enabled=1
caption=User Mapping (DROP)
export=1
qType=3
oType=User mapping
query=CREATE USER MAPPING FOR $NAME$    SERVER $SCHEMA_NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.139]
enabled=1
caption=Database (CREATE)
export=1
qType=3
oType=Database
query=CREATE DATABASE "$NAME$" WITH     OWNER = $OWNER$$    ENCODING = {ENCODING.STRING}$$    TABLESPACE = {TABLESPACE}$$    CONNECTION LIMIT = {CONNECTION LIMIT}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524289
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.140]
enabled=1
caption=Database (CREATE)
export=1
qType=3
oType=Database
query=CREATE DATABASE "$NAME$" WITH     OWNER = $OWNER$$    ENCODING = {ENCODING.STRING}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=458752
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.141]
enabled=1
caption=Sequence (CREATE)
export=1
qType=3
oType=Sequence
query=CREATE SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$"$ 	INCREMENT BY {INCREMENT}$$    MINVALUE {MINIMUM VALUE}$$     MAXVALUE {MAXIMUM VALUE}$$    START WITH {START VALUE}$$     {CYCLE}$;${\n|PERMISSION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.142]
enabled=1
caption=Cast (CREATE)
export=1
qType=3
oType=Cast
query=CREATE CAST ($SOURCE DATA TYPE$ AS $TARGET DATA TYPE$)$ {CAST METHOD}$ $CONTEXT$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.143]
enabled=1
caption=Domain (CREATE)
export=1
qType=3
oType=Domain
query=CREATE DOMAIN "$SCHEMA_NAME$"."$OBJECT_NAME$" AS $BASE TYPE$$DEFAULT {DEFAULT}$$NULLABLE$$CHECK {CHECK CONSTRAINT}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=458755
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.144]
enabled=1
caption=Operator Class Operator
export=1
qType=3
oType=
query=OPERATOR $STRATEGY$ $NAME$$ {OPERAND TYPES}$$ FOR ORDER BY {PURPOSE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.145]
enabled=1
caption=Role (CREATE)
export=1
qType=3
oType=Role
query=CREATE ROLE "$NAME$" WITH 	$SUPERUSER$    $CREATE DB$    $CREATE ROLE$    $INHERIT$    $CAN LOGIN$$    {REPLICATION}$    CONNECTION LIMIT $CONNECTION LIMIT;-1$$    VALID UNTIL '{VALID}'$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.146]
enabled=1
caption=Type Column
export=1
qType=3
oType=
query=$NAME$ $TYPE$$ COLLATE {COLLATION}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.147]
enabled=1
caption=Type (CREATE)
export=1
qType=3
oType=Type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" (    INPUT = $INPUT$,    OUTPUT = $OUTPUT$$,    RECEIVE = {RECEIVE}$$,    SEND = {SEND}$$,    ANALYZE = {ANALYZE}$$,    INTERNALLENGTH = {LENGTH}$$,    {BY VALUE}$$,    ALIGNMENT = {ALIGNMENT}$$,    STORAGE = {STORAGE}$$,    DEFAULT = {DEFAULT}$$,    ELEMENT = {ELEMENT}$$,    DELIMITER = {DELIMITER.STRING}$);ALTER TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.148]
enabled=1
caption=Type (CREATE)
export=1
qType=3
oType=Type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" (    INPUT = $INPUT$,    OUTPUT = $OUTPUT$$,    RECEIVE = {RECEIVE}$$,    SEND = {SEND}$$,    TYPMOD_IN = {TYPE MODIFIER INPUT}$$,    TYPMOD_OUT = {TYPE MODIFIER OUTPUT}$$,    ANALYZE = {ANALYZE}$$,    INTERNALLENGTH = {LENGTH}$$,    {BY VALUE}$$,    ALIGNMENT = {ALIGNMENT}$$,    STORAGE = {STORAGE}$$,    DEFAULT = {DEFAULT}$$,    ELEMENT = {ELEMENT}$$,    DELIMITER = {DELIMITER.STRING}$);ALTER TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524291
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.149]
enabled=1
caption=Type (CREATE)
export=1
qType=3
oType=Type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" (    INPUT = $INPUT$,    OUTPUT = $OUTPUT$$,    RECEIVE = {RECEIVE}$$,    SEND = {SEND}$$,    TYPMOD_IN = {TYPE MODIFIER INPUT}$$,    TYPMOD_OUT = {TYPE MODIFIER OUTPUT}$$,    ANALYZE = {ANALYZE}$$,    INTERNALLENGTH = {LENGTH}$$,    {BY VALUE}$$,    ALIGNMENT = {ALIGNMENT}$$,    STORAGE = {STORAGE}$$,    CATEGORY = {CATEGORY}$$,    DEFAULT = {DEFAULT}$$,    ELEMENT = {ELEMENT}$$,    DELIMITER = {DELIMITER.STRING}$);ALTER TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.150]
enabled=1
caption=Type Range (CREATE)
export=1
qType=3
oType=Range type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" AS RANGE (    SUBTYPE = $SUBTYPE$$,    SUBTYPE_OPCLASS = {SUBTYPE OPERATOR CLASS}$$,    COLLATION = {COLLATION}$$,    CANONICAL = {CANONICAL FUNCTION}$$,    SUBTYPE_DIFF = {SUBTYPE DIFF FUNCTION}$);ALTER TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589826
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.5.151]
enabled=1
caption=Permission (CREATE)
export=1
qType=3
oType=Permission
query=GRANT $PRIVILEGE TYPE$$ ({COLUMN})$ ON $OBJECT NAME$ TO $GRANTEE$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=IsRevoke=0
pathNameCnt=0
loadedObj=

[schemaCmp.5.152]
enabled=1
caption=Permission (DROP)
export=1
qType=3
oType=Permission
query=REVOKE $PRIVILEGE TYPE$$ ({COLUMN})$ ON $OBJECT NAME$ FROM $GRANTEE$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=IsRevoke=0
pathNameCnt=0
loadedObj=

[schemaCmp.5.153]
enabled=1
caption=Permissions (functions)
export=1
qType=1
oType=
query=SELECT     pn.nspname AS "Schema name",     pp.proname || '(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' AS "Function specific name",     a.privilege_type || ' TO "' ||    	CASE WHEN a.grantee = 0 THEN 'public' ELSE pg_get_userbyid(a.grantee)     	END || '"' AS "Permission", 	'Permission' AS "Target type",	'FUNCTION ' || pp.proname || '(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' AS "Object Name__HIDDEN__DC",	a.privilege_type AS "Privilege Type",	CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Grantee",	CASE WHEN a.is_grantable THEN 'WITH GRANT OPTION' ELSE '' END AS "Grantable",	0 AS "IsRevoke__HIDDEN"FROM 	pg_catalog.pg_proc AS pp, 	pg_catalog.aclexplode(pp.proacl) AS a,    pg_catalog.pg_namespace AS pn WHERE 	pn.oid = pp.pronamespace	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.5.154]
enabled=1
caption=Permissions revoke (functions)
export=1
qType=1
oType=
query=SELECT     pn.nspname AS "Schema name",     pp.proname || '(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' AS "Function specific name",    'REVOKE ALL FROM public' AS "Permission", 	'Permission' AS "Target type",	'FUNCTION ' || pp.proname || '(' || pg_catalog.pg_get_function_identity_arguments(pp.oid) || ')' AS "Object Name__HIDDEN__DC",	1 AS "IsRevoke__HIDDEN"FROM 	pg_catalog.pg_proc AS pp,     pg_catalog.pg_namespace AS pn WHERE 	pn.oid = pp.pronamespace	AND pp.proacl IS NOT NULL	AND NOT EXISTS (SELECT 1 FROM pg_catalog.aclexplode(pp.proacl) as a WHERE a.grantee = 0)	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.5.155]
enabled=1
caption=Permission-Revoke (CREATE)
export=1
qType=3
oType=Permission
query=REVOKE ALL ON $OBJECT TYPE$ $OBJECT_NAME$ FROM public;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=IsRevoke=1
pathNameCnt=0
loadedObj=

[schemaCmp.5.156]
enabled=1
caption=Permissions (table columns)
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	pc.relname AS "Table name",	a.privilege_type || '() TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Permission",	'Permission' AS "Target type",	'TABLE "' || pc.relname || '"' AS "Object Name__HIDDEN__DC",	pa.attname AS "Column__AGG",	a.privilege_type AS "Privilege Type",	CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Grantee",	CASE WHEN a.is_grantable THEN 'WITH GRANT OPTION' ELSE '' END AS "Grantable",	0 AS "IsRevoke__HIDDEN"FROM 	pg_catalog.pg_class AS pc,	pg_catalog.pg_namespace AS pn,	pg_catalog.pg_attribute AS pa, 	pg_catalog.aclexplode(pa.attacl) AS aWHERE 	pn.oid = pc.relnamespace	AND pa.attrelid = pc.oid	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR pc.relname = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.5.157]
enabled=1
caption=Permissions (schema)
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	a.privilege_type || ' TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Permission",	'Permission' AS "Target type",	'SCHEMA "' || pn.nspname || '"'  AS "Object Name__HIDDEN__DC",	a.privilege_type AS "Privilege Type",	CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Grantee",	CASE WHEN a.is_grantable THEN 'WITH GRANT OPTION' ELSE '' END AS "Grantable",	0 AS "IsRevoke__HIDDEN"FROM 	pg_catalog.pg_namespace AS pn, 	pg_catalog.aclexplode(pn.nspacl) AS aWHERE 	('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=1
loadedObj=Permission

[schemaCmp.5.158]
enabled=1
caption=Permissions (database)
export=1
qType=1
oType=Database
query=SELECT 	a.privilege_type || ' TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Permission",	'Permission' AS "Target type",	'DATABASE "' || current_database() || '"' AS "Object Name__HIDDEN__DC",	a.privilege_type AS "Privilege Type",	CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Grantee",	CASE WHEN a.is_grantable THEN 'WITH GRANT OPTION' ELSE '' END AS "Grantable",	0 AS "IsRevoke__HIDDEN"FROM 	pg_catalog.pg_database AS pd, 	pg_catalog.aclexplode(pd.datacl) AS a
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=Permission

[schemaCmp.5.159]
enabled=1
caption=Permissions (fdw)
export=1
qType=1
oType=Foreign Data Wrapper
query=SELECT 	a.privilege_type || ' TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Permission",	'Permission' AS "Target type",	'FOREIGN DATA WRAPPER "' || pd.fdwname || '"' AS "Object Name__HIDDEN_DC",	a.privilege_type AS "Privilege Type",	CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Grantee",	CASE WHEN a.is_grantable THEN 'WITH GRANT OPTION' ELSE '' END AS "Grantable",	0 AS "IsRevoke__HIDDEN"FROM 	pg_catalog.pg_foreign_data_wrapper AS pd, 	pg_catalog.aclexplode(pd.fdwacl) AS a
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=Permission

[schemaCmp.5.160]
enabled=1
caption=Permissions (fs)
export=1
qType=1
oType=Foreign Server
query=SELECT 	a.privilege_type || ' TO ' || CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Permission",	'Permission' AS "Target type",	'FOREIGN SERVER "' || ps.srvname || '"' AS "Object Name__HIDDEN_DC",	a.privilege_type AS "Privilege Type",	CASE WHEN a.grantee = 0 THEN 'public' ELSE '"' || pg_get_userbyid(a.grantee) || '"' END AS "Grantee",	CASE WHEN a.is_grantable THEN 'WITH GRANT OPTION' ELSE '' END AS "Grantable",	0 AS "IsRevoke__HIDDEN"FROM 	pg_catalog.pg_foreign_server AS ps, 	pg_catalog.aclexplode(ps.srvacl) AS a
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524292
condition=
pathNameCnt=0
loadedObj=Permission

[schemaCmp.6]
enabled=1
caption=DB2
export=1
count=216
dbType=3
useCache=0
objTypes=SchemaTable	Data organization	Data capture	-Table space	Index table space	Long table space	Distribution	Row compression	Value compression	Drop rule	Encoding scheme	Security policyTemporary table|Table	On commit	On rollback	LoggedViewMaterialized viewColumn	Type	Type length	Type scale	Type ext	Type units	Nullable	Default	LOB Logged	LOB Compact	Scope table	Inline length	Compress defaults	Security label	Hidden	Generated	PositionCheck constraint	Enforced	Trusted	Query optimizationPrimary key	Enforced	Trusted	Query optimizationUnique key	Enforced	Trusted	Query optimizationForeign key	Enforced	Trusted	Query optimization	On delete	On updateIndex	Without overlaps	Unique	Include columns	NLS_STRING_UNITS	Cluster	Pct free	Level 2 pct free	Min pct used	Reverse scans	Page split	Statistics	Compression	Null keys	Index extension	Index extension args	XML Pattern	XML data type	XML invalid valuesDML Trigger|DDL TriggerProcedureFunctionType,Field,Method	Type	Type length	Type scale	Type ext	Type units	Rules	Array length	Index type	Instantiable	Final	Func accessField|Column	Type	Type length	Type scale	Type ext	Type unitsMethod|Function	Language	Deterministic	External action	Parameter CCSID	Data access	Null call	Special registers	Parameter style	Fenced	Scratchpad	Final call	Parallel	DB InfoSequence	Type	Increment	Min value	Max value	-Start	Cycle	Cache	OrderSynonymPackageModule,Module function,Module procedure|PackageModule function|FunctionModule procedure|FunctionVariable	Variable kind	DefaultComment|PropertyServer Scope,Audit Policy,Buffer pool,Event monitor,Database partition group,Tablespace,Storage group|FolderTablespace	DB Partition group	Page size	Extent size	Prefetch size	Buffer pool	Overhead	Transfer rate	Data tag	Drop recoveryStorage group|Flashback	Overhead	Device read rate	Data tagAudit Policy|Assembly	Audit status	Context status	Checking status	Validate status	SECMAINT status	OBJMAINT status	SYSADMIN status	Execute status	Execute with data	Error typeBuffer pool|Edition	Database partition group	Buffer size in pages	Page size	Number of block pages	Pages in blockDatabase partition group|PartitionEvent monitor|DDL Trigger	Write to	Events	Event tables	Target path	Max number of files	Max file size	Buffer size	IO Mode	Write mode	Auto start	DB Partition number	Scope-Security,Role,User,Permission|Folder-Permission-Role-User

[schemaCmp.6.1]
enabled=1
caption=Schema (CREATE)
export=1
qType=3
oType=Schema
query=CREATE SCHEMA "$NAME$" AUTHORIZATION "$OWNER$"
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.2]
enabled=1
caption=Views
export=1
qType=1
oType=
query=SELECT 	RTRIM(v.VIEWSCHEMA) AS "Schema name", 	RTRIM(v.VIEWNAME) AS "View name",	CASE WHEN t.TABNAME IS NOT NULL 		THEN 'Materialized view'		ELSE 'View'	END AS "Target type", 	v.TEXT AS "DDL"FROM SYSCAT.VIEWS AS v	LEFT JOIN SYSCAT."TABLES" AS t		ON t.TABSCHEMA = v.VIEWSCHEMA		AND t.TABNAME = v.VIEWNAME		AND t."TYPE" = 'S' WHERE	(COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(v.VIEWSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY v.VIEWNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=View,Materialized view

[schemaCmp.6.3]
enabled=1
caption=Materialized view props
export=1
qType=0
oType=
query=SELECT 	RTRIM(TABSCHEMA) AS "Schema name", 	RTRIM(TABNAME) AS "View name",	CASE STATUS		WHEN 'N' THEN 'Normal view'		WHEN 'C' THEN 'Check pending'		WHEN 'X' THEN 'Inoperative view'	END AS "Status",	CASE "REFRESH"		WHEN 'D' THEN 'Deferred'		WHEN 'I' THEN 'Immediate'		WHEN 'O' THEN 'Once'		END AS "Refresh"FROM SYSCAT."TABLES"WHERE "TYPE" = 'S'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Materialized view

[schemaCmp.6.4]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT  	RTRIM(TABSCHEMA) AS "Schema name", 	RTRIM(TABNAME) AS "Table name",	'Table' AS "Target type",	CASE 		WHEN SUBSTR(PROPERTY, 20, 1) = 'Y' THEN 'ORGANIZED BY COLUMN' 	END AS "Data organization",	CASE 		WHEN DATACAPTURE IN ('Y', 'L') THEN 'CHANGES' 	END AS "Data capture",	t.TBSPACE AS "Table space",	t.INDEX_TBSPACE AS "Index table space",	t.LONG_TBSPACE AS "Long table space",	CASE 		WHEN t."COMPRESSION" IN ('B', 'V') THEN 'VALUE COMPRESSION'	END AS "Value compression",	CASE 		WHEN t.DROPRULE = 'R' THEN 'WITH RESTRICT ON DROP'	END AS "Drop rule"FROM	SYSCAT.TABLES tWHERE 	"TYPE" = 'T'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY TABNAME
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.6.5]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT  	RTRIM(TABSCHEMA) AS "Schema name", 	RTRIM(TABNAME) AS "Table name",	'Table' AS "Target type",	CASE 		WHEN SUBSTR(PROPERTY, 20, 1) = 'Y' THEN 'ORGANIZED BY COLUMN' 	END AS "Data organization",	CASE 		WHEN DATACAPTURE IN ('Y', 'L') THEN 'CHANGES' 	END AS "Data capture",	t.TBSPACE AS "Table space",	t.INDEX_TBSPACE AS "Index table space",	t.LONG_TBSPACE AS "Long table space",	CASE PARTITION_MODE		WHEN 'H' THEN 'HASH'		WHEN 'R' THEN 'REPLICATION'	END "Distribution",	CASE 		WHEN t."COMPRESSION" IN ('B', 'V') THEN 'VALUE COMPRESSION'	END AS "Value compression",	CASE 		WHEN t.DROPRULE = 'R' THEN 'WITH RESTRICT ON DROP'	END AS "Drop rule",	CASE t.ENCODING_SCHEME		WHEN 'A' THEN 'ASCII' 		WHEN 'U' THEN 'UNICODE' 	END AS "Encoding scheme",	(		SELECT s.SECPOLICYNAME 		FROM SYSCAT.SECURITYPOLICIES AS s		WHERE s.SECPOLICYID = t.SECPOLICYID	) AS "Security policy"FROM	SYSCAT.TABLES tWHERE 	"TYPE" = 'T'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY TABNAME
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.6.6]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT  	RTRIM(TABSCHEMA) AS "Schema name", 	RTRIM(TABNAME) AS "Table name",	'Table' AS "Target type",	CASE 		WHEN SUBSTR(PROPERTY, 20, 1) = 'Y' THEN 'ORGANIZED BY COLUMN' 	END AS "Data organization",	CASE 		WHEN DATACAPTURE IN ('Y', 'L') THEN 'CHANGES' 	END AS "Data capture",	t.TBSPACE AS "Table space",	t.INDEX_TBSPACE AS "Index table space",	t.LONG_TBSPACE AS "Long table space",	CASE PARTITION_MODE		WHEN 'H' THEN 'HASH'		WHEN 'R' THEN 'REPLICATION'	END "Distribution",	CASE 		WHEN t."COMPRESSION" IN ('B', 'R') THEN 'COMPRESS YES' ||			CASE t.ROWCOMPMODE			WHEN 'A' THEN ' ADAPTIVE'			WHEN 'S' THEN ' STATIC'			END	END AS "Row compression",	CASE 		WHEN t."COMPRESSION" IN ('B', 'V') THEN 'VALUE COMPRESSION'	END AS "Value compression",	CASE 		WHEN t.DROPRULE = 'R' THEN 'WITH RESTRICT ON DROP'	END AS "Drop rule",	CASE t.ENCODING_SCHEME		WHEN 'A' THEN 'ASCII' 		WHEN 'U' THEN 'UNICODE' 	END AS "Encoding scheme",	(		SELECT s.SECPOLICYNAME 		FROM SYSCAT.SECURITYPOLICIES AS s		WHERE s.SECPOLICYID = t.SECPOLICYID	) AS "Security policy"FROM	SYSCAT.TABLES tWHERE 	"TYPE" = 'T'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY TABNAME
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.6.7]
enabled=1
caption=Table partition columns
export=1
qType=0
oType=
query=SELECT 	TABSCHEMA AS "Schema name",	TABNAME AS "Table name",	'"' || COLNAME || '"' AS "Hash columns__AGG"FROM SYSCAT.COLUSEWHERE "TYPE" = 'P'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY COLSEQ
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.6.8]
enabled=1
caption=Temporary tables
export=1
qType=1
oType=
query=SELECT  	RTRIM(TABSCHEMA) AS "Schema name", 	RTRIM(TABNAME) AS "Table name",	'Temporary table' AS "Target type",	CASE ONCOMMIT		WHEN 'D' THEN 'DELETE'		WHEN 'P' THEN 'PRESERVE'	END AS "On commit",	CASE "LOGGED"		WHEN 'N' THEN 'NOT LOGGED'		WHEN 'Y' THEN 'LOGGED'	END AS "Logged",	CASE WHEN "LOGGED" = 'N' THEN  		CASE ONROLLBACK			WHEN 'D' THEN 'DELETE'			WHEN 'P' THEN 'PRESERVE'		END              	END AS "On rollback"FROM	SYSCAT.TABLESWHERE 	"TYPE" = 'G'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY TABNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Temporary table

[schemaCmp.6.9]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT	RTRIM(c.TABSCHEMA) AS "Table schema",	RTRIM(c.TABNAME) AS "Table name",	RTRIM(c.COLNAME) AS "Column name",	'Column' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (c.CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	TYPESTRINGUNITS AS "Type units",  	RTRIM(CASE c."LOGGED"     		WHEN 'Y' THEN '' -- default 'LOGGED'		WHEN 'N' THEN 'NOT LOGGED'	END) AS "LOB Logged",	RTRIM(CASE c."COMPACT"		WHEN 'Y' THEN 'COMPACT'		WHEN 'N' THEN '' -- default 'NOT COMPACT'	END) AS "LOB Compact",	CASE WHEN c."NULLS" = 'N' THEN 'NOT NULL' END AS "Nullable",	CASE WHEN c."IDENTITY" = 'Y' OR c.ROWCHANGETIMESTAMP = 'Y' OR c.GENERATED = 'A'		THEN 1 ELSE 0 	END AS "IsAuto",	c."DEFAULT" AS "Default",	c.TEXT AS "Expression",	'"' || RTRIM(c.SCOPE_TABSCHEMA) || '"."' ||  RTRIM(c.SCOPE_TABSCHEMA) || '"' AS "Scope table",	CASE WHEN c.INLINE_LENGTH > 0 THEN c.INLINE_LENGTH END AS "Inline length",	RTRIM(CASE WHEN c."COMPRESS" = 'S' THEN 'COMPRESS' END) "Compress defaults",	c.SECLABELNAME AS "Security label",	RTRIM(CASE c.HIDDEN		WHEN 'I' THEN 'IMPLICITLY HIDDEN' 		ELSE ''	 -- default 'NOT HIDDEN'	END) AS "Hidden",	CASE WHEN c."GENERATED" IN ('A', 'D') THEN		'GENERATED ' || RTRIM(CASE WHEN c."GENERATED" = 'D' THEN 'BY DEFAULT ' ELSE '' END) || 		CASE 			WHEN c."IDENTITY" = 'Y' THEN 'AS IDENTITY (' || 				' START WITH ' || ci."START" ||				' INCREMENT BY ' || ci."INCREMENT" ||				COALESCE(' MINVALUE ' || ci."MINVALUE", '') ||				COALESCE(' MAXVALUE ' || ci."MAXVALUE", '') ||				CASE ci."CACHE" 					WHEN -1 THEN ''					WHEN 0 THEN ' NO CACHE'					ELSE ' CACHE ' || ci."CACHE"				END ||				CASE ci."ORDER"					WHEN 'Y' THEN ' ORDER'					WHEN 'N' THEN ' NO ORDER' 				END || ')'      			WHEN c.ROWCHANGETIMESTAMP = 'Y' THEN 'FOR EACH ROW ON UPDATE AS ROW CHANGE TIMESTAMP'			WHEN c.ROWBEGIN = 'Y' THEN 'AS ROW BEGIN'			WHEN c.ROWEND = 'Y' THEN 'AS ROW END'			WHEN c.TRANSACTIONSTARTID = 'Y' THEN 'AS TRANSACTION START ID'			ELSE 'AS ( ' || c.TEXT || ' )'		END 	END AS "Generated",	c.COLNO AS "Position"	FROM SYSCAT.COLUMNS AS c 	JOIN SYSCAT."TABLES" AS t 		ON t.TABSCHEMA = c.TABSCHEMA 		AND t.TABNAME = c.TABNAME  	LEFT JOIN SYSCAT.COLIDENTATTRIBUTES AS ci		ON ci.TABSCHEMA = c.TABSCHEMA		AND ci.TABNAME = c.TABNAME		AND ci.COLNAME = c.COLNAMEWHERE	t."TYPE" IN ('T', 'G')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY	c.COLNO
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.6.10]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN=COLUMN DEFINITION$)$	{DATA ORGANIZATION}$$	DATA CAPTURE {DATA CAPTURE}$$	IN {TABLE SPACE}$$	INDEX IN {INDEX TABLE SPACE}$$	LONG IN {LONG TABLE SPACE}$$	DISTRIBUTE BY {DISTRIBUTION}$$({HASH COLUMNS})$$	{ROW COMPRESSION}$$	{VALUE COMPRESSION}$$	{DROP RULE}$$	CCSID {ENCODING SCHEME}$$	SECURITY POLICY {SECURITY POLICY}$$^$^$^$\n| PRIMARY KEY, UNIQUE KEY, CHECK CONSTRAINT, FOREIGN KEY, INDEX, DML TRIGGER$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.11]
enabled=1
caption=Schema (DROP)
export=1
qType=3
oType=Schema
query=DROP SCHEMA "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.12]
enabled=1
caption=View (DROP)
export=1
qType=3
oType=View
query=DROP VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.13]
enabled=1
caption=Column Definition
export=1
qType=3
oType=
query="$NAME$" $|=DATA TYPE$$ {LOB LOGGED}$$ {LOB COMPACT}$$ {NULLABLE}$$ DEFAULT {DEFAULT}$$ {INLINE LENGTH}$$ {COMPRESS DEFAULTS} SYSTEM DEFAULT$$ SECURED WITH {SECURITY LABEL}$$ {HIDDEN}$$ {GENERATED}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.14]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT	RTRIM(c.TABSCHEMA) AS "Table schema",	RTRIM(c.TABNAME) AS "Table name",	RTRIM(c.COLNAME) AS "Column name",	'Column' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (c.CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	RTRIM(CASE c."LOGGED"     		WHEN 'Y' THEN '' -- default 'LOGGED'		WHEN 'N' THEN 'NOT LOGGED'	END) AS "LOB Logged",	RTRIM(CASE c."COMPACT"		WHEN 'Y' THEN 'COMPACT'		WHEN 'N' THEN '' -- default 'NOT COMPACT'	END) AS "LOB Compact",	CASE WHEN c."NULLS" = 'N' THEN 'NOT NULL' END AS "Nullable",	CASE WHEN c."IDENTITY" = 'Y' OR c.ROWCHANGETIMESTAMP = 'Y' OR c.GENERATED = 'A'		THEN 1 ELSE 0 	END AS "IsAuto",	c."DEFAULT" AS "Default",	c.TEXT AS "Expression",	'"' || RTRIM(c.SCOPE_TABSCHEMA) || '"."' ||  RTRIM(c.SCOPE_TABSCHEMA) || '"' AS "Scope table",	CASE WHEN c.INLINE_LENGTH > 0 THEN c.INLINE_LENGTH END AS "Inline length",	RTRIM(CASE WHEN c."COMPRESS" = 'S' THEN 'COMPRESS' END) "Compress defaults",	c.SECLABELNAME AS "Security label",	RTRIM(CASE c.HIDDEN		WHEN 'I' THEN 'IMPLICITLY HIDDEN' 		ELSE ''	 -- default 'NOT HIDDEN'	END) AS "Hidden",	CASE WHEN c."GENERATED" IN ('A', 'D') THEN		'GENERATED ' || RTRIM(CASE WHEN c."GENERATED" = 'D' THEN 'BY DEFAULT ' ELSE '' END) || 		CASE 			WHEN c."IDENTITY" = 'Y' THEN 'AS IDENTITY (' || 				' START WITH ' || ci."START" ||				' INCREMENT BY ' || ci."INCREMENT" ||				COALESCE(' MINVALUE ' || ci."MINVALUE", '') ||				COALESCE(' MAXVALUE ' || ci."MAXVALUE", '') ||				CASE ci."CACHE" 					WHEN -1 THEN ''					WHEN 0 THEN ' NO CACHE'					ELSE ' CACHE ' || ci."CACHE"				END ||				CASE ci."ORDER"					WHEN 'Y' THEN ' ORDER'					WHEN 'N' THEN ' NO ORDER' 				END || ')'      			WHEN c.ROWCHANGETIMESTAMP = 'Y' THEN 'FOR EACH ROW ON UPDATE AS ROW CHANGE TIMESTAMP'			WHEN c.ROWBEGIN = 'Y' THEN 'AS ROW BEGIN'			WHEN c.ROWEND = 'Y' THEN 'AS ROW END'			WHEN c.TRANSACTIONSTARTID = 'Y' THEN 'AS TRANSACTION START ID'			ELSE 'AS ( ' || c.TEXT || ' )'		END 	END AS "Generated",	c.COLNO AS "Position"	FROM SYSCAT.COLUMNS AS c 	JOIN SYSCAT."TABLES" AS t 		ON t.TABSCHEMA = c.TABSCHEMA 		AND t.TABNAME = c.TABNAME  	LEFT JOIN SYSCAT.COLIDENTATTRIBUTES AS ci		ON ci.TABSCHEMA = c.TABSCHEMA		AND ci.TABNAME = c.TABNAME		AND ci.COLNAME = c.COLNAMEWHERE	t."TYPE" IN ('T', 'G')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY	c.COLNO
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.6.15]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT	RTRIM(c.TABSCHEMA) AS "Table schema",	RTRIM(c.TABNAME) AS "Table name",	RTRIM(c.COLNAME) AS "Column name",	'Column' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (c.CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	RTRIM(CASE c."LOGGED"     		WHEN 'Y' THEN '' -- default 'LOGGED'		WHEN 'N' THEN 'NOT LOGGED'	END) AS "LOB Logged",	RTRIM(CASE c."COMPACT"		WHEN 'Y' THEN 'COMPACT'		WHEN 'N' THEN '' -- default 'NOT COMPACT'	END) AS "LOB Compact",	CASE WHEN c."NULLS" = 'N' THEN 'NOT NULL' END AS "Nullable",	CASE WHEN c."IDENTITY" = 'Y' OR c.ROWCHANGETIMESTAMP = 'Y' OR c.GENERATED = 'A'		THEN 1 ELSE 0 	END AS "IsAuto",	c."DEFAULT" AS "Default",	c.TEXT AS "Expression",	'"' || RTRIM(c.SCOPE_TABSCHEMA) || '"."' ||  RTRIM(c.SCOPE_TABSCHEMA) || '"' AS "Scope table",	CASE WHEN c.INLINE_LENGTH > 0 THEN c.INLINE_LENGTH END AS "Inline length",	RTRIM(CASE WHEN c."COMPRESS" = 'S' THEN 'COMPRESS' END) "Compress defaults",	c.SECLABELNAME AS "Security label",	RTRIM(CASE c.HIDDEN		WHEN 'I' THEN 'IMPLICITLY HIDDEN' 		ELSE ''	 -- default 'NOT HIDDEN'	END) AS "Hidden",	CASE WHEN c."GENERATED" IN ('A', 'D') THEN		'GENERATED ' || RTRIM(CASE WHEN c."GENERATED" = 'D' THEN 'BY DEFAULT ' ELSE '' END) || 		CASE 			WHEN c."IDENTITY" = 'Y' THEN 'AS IDENTITY (' || 				' START WITH ' || ci."START" ||				' INCREMENT BY ' || ci."INCREMENT" ||				COALESCE(' MINVALUE ' || ci."MINVALUE", '') ||				COALESCE(' MAXVALUE ' || ci."MAXVALUE", '') ||				CASE ci."CACHE" 					WHEN -1 THEN ''					WHEN 0 THEN ' NO CACHE'					ELSE ' CACHE ' || ci."CACHE"				END ||				CASE ci."ORDER"					WHEN 'Y' THEN ' ORDER'					WHEN 'N' THEN ' NO ORDER' 				END || ')'      			WHEN c.ROWCHANGETIMESTAMP = 'Y' THEN 'FOR EACH ROW ON UPDATE AS ROW CHANGE TIMESTAMP'			ELSE 'AS ( ' || c.TEXT || ' )'		END 	END AS "Generated",	c.COLNO AS "Position"	FROM SYSCAT.COLUMNS AS c 	JOIN SYSCAT."TABLES" AS t 		ON t.TABSCHEMA = c.TABSCHEMA 		AND t.TABNAME = c.TABNAME  	LEFT JOIN SYSCAT.COLIDENTATTRIBUTES AS ci		ON ci.TABSCHEMA = c.TABSCHEMA		AND ci.TABNAME = c.TABNAME		AND ci.COLNAME = c.COLNAMEWHERE	t."TYPE" IN ('T', 'G')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY	c.COLNO
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.6.16]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT	RTRIM(c.TABSCHEMA) AS "Table schema",	RTRIM(c.TABNAME) AS "Table name",	RTRIM(c.COLNAME) AS "Column name",	'Column' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (c.CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	RTRIM(CASE c."LOGGED"     		WHEN 'Y' THEN '' -- default 'LOGGED'		WHEN 'N' THEN 'NOT LOGGED'	END) AS "LOB Logged",	RTRIM(CASE c."COMPACT"		WHEN 'Y' THEN 'COMPACT'		WHEN 'N' THEN '' -- default 'NOT COMPACT'	END) AS "LOB Compact",	CASE WHEN c."NULLS" = 'N' THEN 'NOT NULL' END AS "Nullable",	CASE WHEN c."IDENTITY" = 'Y' OR c.GENERATED = 'A'		THEN 1 ELSE 0 	END AS "IsAuto",	c."DEFAULT" AS "Default",	c.TEXT AS "Expression",	'"' || RTRIM(c.SCOPE_TABSCHEMA) || '"."' ||  RTRIM(c.SCOPE_TABSCHEMA) || '"' AS "Scope table",	CASE WHEN c.INLINE_LENGTH > 0 THEN c.INLINE_LENGTH END AS "Inline length",	RTRIM(CASE WHEN c."COMPRESS" = 'S' THEN 'COMPRESS' END) "Compress defaults",	RTRIM(CASE c.HIDDEN		WHEN 'I' THEN 'IMPLICITLY HIDDEN' 		ELSE ''	 -- default 'NOT HIDDEN'	END) AS "Hidden",	CASE WHEN c."GENERATED" IN ('A', 'D') THEN		'GENERATED ' || RTRIM(CASE WHEN c."GENERATED" = 'D' THEN 'BY DEFAULT ' ELSE '' END) || 		CASE 			WHEN c."IDENTITY" = 'Y' THEN 'AS IDENTITY (' || 				' START WITH ' || ci."START" ||				' INCREMENT BY ' || ci."INCREMENT" ||				COALESCE(' MINVALUE ' || ci."MINVALUE", '') ||				COALESCE(' MAXVALUE ' || ci."MAXVALUE", '') ||				CASE ci."CACHE" 					WHEN -1 THEN ''					WHEN 0 THEN ' NO CACHE'					ELSE ' CACHE ' || ci."CACHE"				END ||				CASE ci."ORDER"					WHEN 'Y' THEN ' ORDER'					WHEN 'N' THEN ' NO ORDER' 				END || ')'      			ELSE 'AS ( ' || c.TEXT || ' )'		END 	END AS "Generated",	c.COLNO AS "Position"	FROM SYSCAT.COLUMNS AS c 	JOIN SYSCAT."TABLES" AS t 		ON t.TABSCHEMA = c.TABSCHEMA 		AND t.TABNAME = c.TABNAME  	LEFT JOIN SYSCAT.COLIDENTATTRIBUTES AS ci		ON ci.TABSCHEMA = c.TABSCHEMA		AND ci.TABNAME = c.TABNAME		AND ci.COLNAME = c.COLNAMEWHERE	t."TYPE" IN ('T', 'G')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY	c.COLNO
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.6.17]
enabled=1
caption=Check Constraints
export=1
qType=1
oType=
query=SELECT  	RTRIM(c.TABSCHEMA) AS "Schema name", 	RTRIM(c.TABNAME) AS "Table name",	RTRIM(c.CONSTNAME) AS "Constraint name",	'Check Constraint' AS "Target type",	c.TEXT AS "Expression",	CASE 		WHEN SUBSTR(c.CONSTNAME, 1, 3) = 'SQL' AND LENGTH(c.CONSTNAME) = 18 THEN 1 ELSE 0 	END AS "IsSystem",	CASE "ENFORCED"		WHEN 'N' THEN 'NOT ENFORCED' 		ELSE 'ENFORCED'	END AS "Enforced",	CASE "TRUSTED"		WHEN 'Y' THEN 'TRUSTED' 		WHEN 'N' THEN 'NOT TRUSTED' 	END AS "Trusted",	CASE t.ENABLEQUERYOPT		WHEN 'N' THEN 'DISABLE'	END AS "Query optimization"FROM	SYSCAT.CHECKS AS c	JOIN SYSCAT.TABCONST AS t		ON t.CONSTNAME = c.CONSTNAME		AND t.TABSCHEMA = c.TABSCHEMA		AND t.TABNAME = c.TABNAMEWHERE	    (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY c.CONSTNAME	
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=2
loadedObj=Check Constraint

[schemaCmp.6.18]
enabled=1
caption=Check Constraints
export=1
qType=1
oType=
query=SELECT  	RTRIM(c.TABSCHEMA) AS "Schema name", 	RTRIM(c.TABNAME) AS "Table name",	RTRIM(c.CONSTNAME) AS "Constraint name",	'Check Constraint' AS "Target type",	c.TEXT AS "Expression",	CASE 		WHEN SUBSTR(c.CONSTNAME, 1, 3) = 'SQL' AND LENGTH(c.CONSTNAME) = 18 THEN 1 ELSE 0 	END AS "IsSystem",	CASE "ENFORCED"		WHEN 'N' THEN 'NOT ENFORCED' 		ELSE 'ENFORCED'	END AS "Enforced",	CASE t.ENABLEQUERYOPT		WHEN 'N' THEN 'DISABLE'		ELSE 'ENABLE'	END AS "Query optimization"FROM	SYSCAT.CHECKS AS c	JOIN SYSCAT.TABCONST AS t		ON t.CONSTNAME = c.CONSTNAME		AND t.TABSCHEMA = c.TABSCHEMA		AND t.TABNAME = c.TABNAMEWHERE	    (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(c.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY c.CONSTNAME	
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=2
loadedObj=Check Constraint

[schemaCmp.6.19]
enabled=1
caption=Keys
export=1
qType=1
oType=
query=SELECT	RTRIM(TABSCHEMA) AS "Table schema",	RTRIM(TABNAME) AS "Table name",	RTRIM(CONSTNAME)	AS "Constraint name",	RTRIM(CASE "TYPE"		WHEN 'P' THEN 'Primary Key'		WHEN 'F' THEN 'Foreign Key'		WHEN 'U' THEN 'Unique Key'	END) AS "Target type",	CASE 		WHEN SUBSTR(CONSTNAME, 1, 3) = 'SQL' AND LENGTH(CONSTNAME) = 18 THEN 1 ELSE 0 	END AS "IsSystem",	CASE "ENFORCED"		WHEN 'N' THEN 'NOT ENFORCED' 		ELSE 'ENFORCED'	END AS "Enforced",	CASE "TRUSTED"		WHEN 'Y' THEN 'TRUSTED' 		WHEN 'N' THEN 'NOT TRUSTED' 		ELSE ''	END AS "Trusted",	CASE t.ENABLEQUERYOPT		WHEN 'N' THEN 'DISABLE'		ELSE 'ENABLE'	END AS "Query optimization"FROM SYSCAT.TABCONST AS tWHERE	TYPE IN ('F', 'P', 'U')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY CONSTNAME
linkByVal=1
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=2
loadedObj=Primary Key,Foreign Key,Unique Key

[schemaCmp.6.20]
enabled=1
caption=Keys
export=1
qType=1
oType=
query=SELECT	RTRIM(TABSCHEMA) AS "Table schema",	RTRIM(TABNAME) AS "Table name",	RTRIM(CONSTNAME)	AS "Constraint name",	RTRIM(CASE "TYPE"		WHEN 'P' THEN 'Primary Key'		WHEN 'F' THEN 'Foreign Key'		WHEN 'U' THEN 'Unique Key'	END) AS "Target type",	CASE 		WHEN SUBSTR(CONSTNAME, 1, 3) = 'SQL' AND LENGTH(CONSTNAME) = 18 THEN 1 ELSE 0 	END AS "IsSystem",	CASE "ENFORCED"		WHEN 'N' THEN 'NOT ENFORCED' 		ELSE 'ENFORCED'	END AS "Enforced",	CASE t.ENABLEQUERYOPT		WHEN 'N' THEN 'DISABLE'		ELSE 'ENABLE'	END AS "Query optimization"FROM SYSCAT.TABCONST AS tWHERE	TYPE IN ('F', 'P', 'U')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY CONSTNAME
linkByVal=1
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=2
loadedObj=Primary Key,Foreign Key,Unique Key

[schemaCmp.6.21]
enabled=1
caption=Key columns
export=1
qType=0
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name",	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.CONSTNAME) AS "Key name",	'"' || ic.COLNAME || '"' AS "value__AGG" FROM SYSCAT.KEYCOLUSE AS ic	JOIN SYSCAT.TABCONST AS i		ON i.TABSCHEMA = ic.TABSCHEMA		AND i.TABNAME = ic.TABNAME		AND i.CONSTNAME = ic.CONSTNAMEWHERE	    (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ic.COLSEQ
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Primary Key,Foreign Key,Unique Key

[schemaCmp.6.22]
enabled=1
caption=Unique Key (CREATE)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" 	ADD$|=CONSTRAINT NAME$ UNIQUE		($VALUE$)$	{|=CONSTRAINT PROPS}$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.23]
enabled=1
caption=Primary Key (CREATE)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" 	ADD$|=CONSTRAINT NAME$ PRIMARY KEY 		($VALUE$)$	{|=CONSTRAINT PROPS}$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.24]
enabled=1
caption=Key (DROP)
export=1
qType=3
oType=Primary Key,Unique Key,Foreign Key,Check Constraint
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP CONSTRAINT "$NAME$"$^$^$^
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.25]
enabled=1
caption=Check Constraint (CREATE)
export=1
qType=3
oType=Check Constraint
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"	ADD$|=CONSTRAINT NAME$ CHECK		($VALUE$)$	{|=CONSTRAINT PROPS}$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.26]
enabled=1
caption=Foreign Key (CREATE)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"	ADD$|=CONSTRAINT NAME$ FOREIGN KEY 		($VALUE$)	REFERENCES $REFER TABLE$		($REFER COLUMNS$)	ON DELETE $ON DELETE$	ON UPDATE $ON UPDATE$$	{|=CONSTRAINT PROPS}$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.27]
enabled=1
caption=Constraint Name
export=1
qType=3
oType=
query= CONSTRAINT "$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=IsSystem=0
pathNameCnt=0
loadedObj=

[schemaCmp.6.28]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=$SET NLS_STRING_UNITS {NLS_STRING_UNITS.STRING};;$CREATE$ {UNIQUE}$ INDEX "$SCHEMA_NAME$"."$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$"	($COLUMNS$$, BUSINESS_TIME {WITHOUT OVERLAPS}$)$	INCLUDE ({INCLUDE COLUMNS})$$ {CLUSTER}$$	EXTEND USING {INDEX EXTENSION}$$({INDEX EXTENSION ARGS})$$	GENERATE KEY USING XMLPATTERN {XML PATTERN.STRING}$$	AS SQL {XML DATA TYPE}$$ {XML INVALID VALUES} INVALID VALUES$$	PCTFREE {PERCENTAGE OF FREE}$$ 	LEVEL2 PCTFREE {LEVEL 2 PERCENTAGE OF FREE}$$ 	MINPCTUSED {MINIMUM USED PERCENTAGE}$$	{REVERSE SCANS} REVERSE SCANS$$	PAGE SPLIT {PAGE SPLIT}$$	COLLECT {STATISTICS}$$	COMPRESS {COMPRESSION}$$	{NULL KEYS} NULL KEYS$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.29]
enabled=1
caption=Foreign key references
export=1
qType=0
oType=
query=SELECT	RTRIM(TABSCHEMA) AS "Table schema", 	RTRIM(TABNAME) AS "Table name", 	RTRIM(CONSTNAME)	AS "Constraint name", 	'"' || RTRIM(REFTABSCHEMA) || '"."' || RTRIM(REFTABNAME) || '"' AS "Refer table__NAME_REFERENCE",	CASE DELETERULE 		WHEN 'C' THEN 'CASCADE'		WHEN 'N' THEN 'SET NULL'		WHEN 'R' THEN 'RESTRICT'		ELSE 'NO ACTION'	END AS "On delete",	CASE UPDATERULE		WHEN 'R' THEN 'RESTRICT'		ELSE 'NO ACTION'	END AS "On update"FROM 	SYSCAT."REFERENCES"WHERE	(COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Foreign Key

[schemaCmp.6.30]
enabled=1
caption=Foreign key columns
export=1
qType=0
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name",	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.CONSTNAME) AS "Key name",	'"' || ic.COLNAME || '"' AS "Refer columns__AGG"FROM SYSCAT.KEYCOLUSE AS ic	JOIN SYSCAT.REFERENCES AS i		ON i.REFTABSCHEMA = ic.TABSCHEMA		AND i.REFTABNAME = ic.TABNAME		AND i.REFKEYNAME = ic.CONSTNAMEWHERE	    (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ic.COLSEQ
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Foreign Key

[schemaCmp.6.31]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name", 	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.INDNAME) AS "Index name",	'Index' AS "Target type",	CASE WHEN i.UNIQUERULE <> 'U' THEN 'UNIQUE' END AS "Unique",	CASE WHEN i.MADE_WITHOUTOVERLAPS = 'Y' THEN 'WITHOUT OVERLAPS' END AS "Without overlaps",	i.ENVSTRINGUNITS AS "NLS_STRING_UNITS",	CASE WHEN i."CLUSTERFACTOR" <> -1 THEN 'CLUSTER' END AS "Cluster",	CASE WHEN i."PCTFREE" <> -1 THEN i."PCTFREE" END AS "Percentage of free",	CASE WHEN i.LEVEL2PCTFREE <> -1 THEN i.LEVEL2PCTFREE END AS "Level 2 percentage of free",	CASE WHEN i.MINPCTUSED > 0 THEN i.MINPCTUSED END AS "Minimum used percentage",	RTRIM(CASE i.REVERSE_SCANS 		WHEN 'Y' THEN 'ALLOW'		ELSE 'DISALLOW'	END) "Reverse scans",    	RTRIM(CASE i.PAGESPLIT		WHEN 'H' THEN 'HIGH'		WHEN 'L' THEN 'LOW'		WHEN 'S' THEN 'SYMMETRIC'	END) AS "Page split",	RTRIM(CASE i.COLLECTSTATISTCS		WHEN 'D' THEN 'UNSAMPLED DETAILED STATISTICS'		WHEN 'S' THEN 'SAMPLED DETAILED STATISTICS'		WHEN 'Y' THEN 'STATISTICS'  	END) AS "Statistics",	RTRIM(CASE i."COMPRESSION"		WHEN 'N' THEN 'NO'		WHEN 'Y' THEN 'YES'	END) AS "Compression",	RTRIM(CASE i.NULLKEYS		WHEN 'N' THEN 'EXCLUDE'		WHEN 'Y' THEN 'INCLUDE'	END) AS "Null keys",    '"' || RTRIM(i.IESCHEMA) || '"."' || RTRIM(i.IENAME) || '"' AS "Index extension",    i.IEARGUMENTS AS "Index extension args",	ip.PATTERN AS "XML Pattern",	ip.DATATYPE || 		CASE 			WHEN ip.DATATYPE = 'VARCHAR' THEN				RTRIM(CASE 					WHEN ip.HASHED = 'Y' THEN ' HASHED'					ELSE '(' || ip."LENGTH" || ')'				END)			WHEN ip.DATATYPE IN ('NUM', 'NUMERIC', 'DEC', 'DECIMAL') 				THEN '(' || ip."LENGTH" || ', ' || ip.SCALE || ')'		END AS "XML data type",	RTRIM(CASE ip.TYPEMODEL   		WHEN 'Q' THEN 'IGNORE'		WHEN 'R' THEN 'REJECT'	END) AS "XML invalid values"	FROM SYSCAT."INDEXES" AS i	LEFT JOIN SYSCAT.INDEXXMLPATTERNS AS ip		ON ip.INDSCHEMA = i.INDSCHEMA		AND ip.INDNAME = i.INDNAMEWHERE i.USER_DEFINED = 1	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY i.INDNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.6.32]
enabled=1
caption=Synonym (CREATE)
export=1
qType=3
oType=Synonym
query=CREATE ALIAS "$SCHEMA_NAME$"."$OBJECT_NAME$" FOR $OBJECT TYPE$ $BASE NAME$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.33]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name", 	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.INDNAME) AS "Index name",	'Index' AS "Target type",	CASE WHEN i.UNIQUERULE <> 'U' THEN 'UNIQUE' END AS "Unique",	CASE WHEN i.MADE_WITHOUTOVERLAPS = 'Y' THEN 'WITHOUT OVERLAPS' END AS "Without overlaps",	CASE WHEN i."CLUSTERFACTOR" <> -1 THEN 'CLUSTER' END AS "Cluster",	CASE WHEN i."PCTFREE" <> -1 THEN i."PCTFREE" END AS "Percentage of free",	CASE WHEN i.LEVEL2PCTFREE <> -1 THEN i.LEVEL2PCTFREE END AS "Level 2 percentage of free",	CASE WHEN i.MINPCTUSED > 0 THEN i.MINPCTUSED END AS "Minimum used percentage",	RTRIM(CASE i.REVERSE_SCANS 		WHEN 'Y' THEN 'ALLOW'		ELSE 'DISALLOW'	END) "Reverse scans",    	RTRIM(CASE i.PAGESPLIT		WHEN 'H' THEN 'HIGH'		WHEN 'L' THEN 'LOW'		WHEN 'S' THEN 'SYMMETRIC'	END) AS "Page split",	RTRIM(CASE i.COLLECTSTATISTCS		WHEN 'D' THEN 'UNSAMPLED DETAILED STATISTICS'		WHEN 'S' THEN 'SAMPLED DETAILED STATISTICS'		WHEN 'Y' THEN 'STATISTICS'  	END) AS "Statistics",	RTRIM(CASE i."COMPRESSION"		WHEN 'N' THEN 'NO'		WHEN 'Y' THEN 'YES'	END) AS "Compression",	RTRIM(CASE i.NULLKEYS		WHEN 'N' THEN 'EXCLUDE'		WHEN 'Y' THEN 'INCLUDE'	END) AS "Null keys",    '"' || RTRIM(i.IESCHEMA) || '"."' || RTRIM(i.IENAME) || '"' AS "Index extension",    i.IEARGUMENTS AS "Index extension args",	ip.PATTERN AS "XML Pattern",	ip.DATATYPE || 		CASE 			WHEN ip.DATATYPE = 'VARCHAR' THEN				RTRIM(CASE 					WHEN ip.HASHED = 'Y' THEN ' HASHED'					ELSE '(' || ip."LENGTH" || ')'				END)			WHEN ip.DATATYPE IN ('NUM', 'NUMERIC', 'DEC', 'DECIMAL') 				THEN '(' || ip."LENGTH" || ', ' || ip.SCALE || ')'		END AS "XML data type",	RTRIM(CASE ip.TYPEMODEL   		WHEN 'Q' THEN 'IGNORE'		WHEN 'R' THEN 'REJECT'	END) AS "XML invalid values"	FROM SYSCAT."INDEXES" AS i	LEFT JOIN SYSCAT.INDEXXMLPATTERNS AS ip		ON ip.INDSCHEMA = i.INDSCHEMA		AND ip.INDNAME = i.INDNAMEWHERE i.USER_DEFINED = 1	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY i.INDNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.6.34]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name", 	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.INDNAME) AS "Index name",	'Index' AS "Target type",	CASE WHEN i.UNIQUERULE <> 'U' THEN 'UNIQUE' END AS "Unique",	CASE WHEN i."CLUSTERFACTOR" <> -1 THEN 'CLUSTER' END AS "Cluster",	CASE WHEN i."PCTFREE" <> -1 THEN i."PCTFREE" END AS "Percentage of free",	CASE WHEN i.LEVEL2PCTFREE <> -1 THEN i.LEVEL2PCTFREE END AS "Level 2 percentage of free",	CASE WHEN i.MINPCTUSED > 0 THEN i.MINPCTUSED END AS "Minimum used percentage",	RTRIM(CASE i.REVERSE_SCANS 		WHEN 'Y' THEN 'ALLOW'		ELSE 'DISALLOW'	END) "Reverse scans",    	RTRIM(CASE i.PAGESPLIT		WHEN 'H' THEN 'HIGH'		WHEN 'L' THEN 'LOW'		WHEN 'S' THEN 'SYMMETRIC'	END) AS "Page split",	RTRIM(CASE i.COLLECTSTATISTCS		WHEN 'D' THEN 'UNSAMPLED DETAILED STATISTICS'		WHEN 'S' THEN 'SAMPLED DETAILED STATISTICS'		WHEN 'Y' THEN 'STATISTICS'  	END) AS "Statistics",	RTRIM(CASE i."COMPRESSION"		WHEN 'N' THEN 'NO'		WHEN 'Y' THEN 'YES'	END) AS "Compression",    '"' || RTRIM(i.IESCHEMA) || '"."' || RTRIM(i.IENAME) || '"' AS "Index extension",    i.IEARGUMENTS AS "Index extension args",	ip.PATTERN AS "XML Pattern",	ip.DATATYPE || 		CASE 			WHEN ip.DATATYPE = 'VARCHAR' THEN				RTRIM(CASE 					WHEN ip.HASHED = 'Y' THEN ' HASHED'					ELSE '(' || ip."LENGTH" || ')'				END)		END AS "XML data type",	RTRIM(CASE ip.TYPEMODEL   		WHEN 'Q' THEN 'IGNORE'		WHEN 'R' THEN 'REJECT'	END) AS "XML invalid values"	FROM SYSCAT."INDEXES" AS i	LEFT JOIN SYSCAT.INDEXXMLPATTERNS AS ip		ON ip.INDSCHEMA = i.INDSCHEMA		AND ip.INDNAME = i.INDNAMEWHERE i.USER_DEFINED = 1	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY i.INDNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589832
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.6.35]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name", 	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.INDNAME) AS "Index name",	'Index' AS "Target type",	CASE WHEN i.UNIQUERULE <> 'U' THEN 'UNIQUE' END AS "Unique",	CASE WHEN i."CLUSTERFACTOR" <> -1 THEN 'CLUSTER' END AS "Cluster",	CASE WHEN i."PCTFREE" <> -1 THEN i."PCTFREE" END AS "Percentage of free",	CASE WHEN i.LEVEL2PCTFREE <> -1 THEN i.LEVEL2PCTFREE END AS "Level 2 percentage of free",	CASE WHEN i.MINPCTUSED > 0 THEN i.MINPCTUSED END AS "Minimum used percentage",	RTRIM(CASE i.REVERSE_SCANS 		WHEN 'Y' THEN 'ALLOW'		ELSE 'DISALLOW'	END) "Reverse scans",    	RTRIM(CASE i.PAGESPLIT		WHEN 'H' THEN 'HIGH'		WHEN 'L' THEN 'LOW'		WHEN 'S' THEN 'SYMMETRIC'	END) AS "Page split",    '"' || RTRIM(i.IESCHEMA) || '"."' || RTRIM(i.IENAME) || '"' AS "Index extension",    i.IEARGUMENTS AS "Index extension args",	ip.PATTERN AS "XML Pattern",	ip.DATATYPE || 		CASE 			WHEN ip.DATATYPE = 'VARCHAR' THEN				RTRIM(CASE 					WHEN ip.HASHED = 'Y' THEN ' HASHED'					ELSE '(' || ip."LENGTH" || ')'				END)		END AS "XML data type",	RTRIM(CASE ip.TYPEMODEL   		WHEN 'Q' THEN 'IGNORE'	END) AS "XML invalid values"FROM SYSCAT."INDEXES" AS i	LEFT JOIN SYSCAT.INDEXXMLPATTERNS AS ip		ON ip.INDSCHEMA = i.INDSCHEMA		AND ip.INDNAME = i.INDNAMEWHERE i.USER_DEFINED = 1	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY i.INDNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.6.36]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name", 	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.INDNAME) AS "Index name",	'Index' AS "Target type",	CASE WHEN i.UNIQUERULE <> 'U' THEN 'UNIQUE' END AS "Unique",	CASE WHEN i."CLUSTERFACTOR" <> -1 THEN 'CLUSTER' END AS "Cluster",	CASE WHEN i."PCTFREE" <> -1 THEN i."PCTFREE" END AS "Percentage of free",	CASE WHEN i.MINPCTUSED > 0 THEN i.MINPCTUSED END AS "Minimum used percentage",	RTRIM(CASE i.REVERSE_SCANS 		WHEN 'Y' THEN 'ALLOW'		ELSE 'DISALLOW'	END) "Reverse scans",        '"' || RTRIM(i.IESCHEMA) || '"."' || RTRIM(i.IENAME) || '"' AS "Index extension",    i.IEARGUMENTS AS "Index extension args"FROM SYSCAT."INDEXES" AS iWHERE i.USER_DEFINED = 1	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY i.INDNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.6.37]
enabled=1
caption=Index columns
export=1
qType=0
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name",	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.INDNAME) AS "Index name",	CASE WHEN ic.COLORDER <> 'I' THEN 		'"' || RTRIM(ic.COLNAME) || '" ' ||		CASE ic.COLORDER 			WHEN 'A' THEN 'ASC'			WHEN 'D' THEN 'DESC'			WHEN 'R' THEN 'RANDOM'  		END 	END AS "Columns__AGG", 	CASE WHEN ic.COLORDER = 'I' THEN    		'"' || RTRIM(ic.COLNAME) || '"'  	END AS "Include columns__AGG"FROM SYSCAT.INDEXCOLUSE AS ic	JOIN SYSCAT."INDEXES" AS i		ON i.INDSCHEMA = ic.INDSCHEMA		AND i.INDNAME = ic.INDNAMEWHERE	    (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ic.COLSEQ
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Index

[schemaCmp.6.38]
enabled=1
caption=Triggers
export=1
qType=1
oType=
query=SELECT  	RTRIM(TABSCHEMA) AS "Schema name", 	RTRIM(TABNAME) AS "Table name",	RTRIM(TRIGNAME) AS "Trigger name",	'DML Trigger' AS "Target type", 	TEXT AS "DDL"FROM	SYSCAT.TRIGGERSWHERE	(COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY TRIGNAME
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=DML Trigger

[schemaCmp.6.39]
enabled=1
caption=Synonym (DROP)
export=1
qType=3
oType=Synonym
query=DROP ALIAS "$SCHEMA_NAME$"."$OBJECT_NAME$" FOR $OBJECT TYPE$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.40]
enabled=1
caption=DML Trigger (DROP)
export=1
qType=3
oType=DML Trigger
query=DROP TRIGGER "$SCHEMA_NAME$"."$NAME$"$^$^$^
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.41]
enabled=1
caption=Sequence
export=1
qType=1
oType=
query=SELECT 	RTRIM(SEQSCHEMA) AS "Sequence schema", 	RTRIM(SEQNAME) AS "Sequence name",	'Sequence' AS "Target type",	"START" AS "Start",	"MAXVALUE" AS "Max value", 	"MINVALUE" AS "Min value", 	CASE WHEN "CYCLE" = 'Y' THEN 'CYCLE' ELSE 'NO CYCLE' END AS "Cycle", 	"CACHE" AS "Cache", 	"ORDER" AS "Order",	d.TYPENAME AS "Type"FROM 	SYSCAT.SEQUENCES LEFT JOIN SYSCAT.DATATYPES AS d 	ON d.TYPEID = DATATYPEID WHERE 	SEQTYPE = 'S'	AND ORIGIN = 'U' 	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY SEQNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Sequence

[schemaCmp.6.42]
enabled=1
caption=Sequence (CREATE)
export=1
qType=3
oType=Sequence
query=CREATE SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$" AS $TYPE$$	START WITH {START}$$	INCREMENT BY {INCREMENT}$$	MINVALUE {MIN VALUE}$$	MAXVALUE {MAX VALUE}$$	CACHE {CACHE}$$	{CYCLE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.43]
enabled=1
caption=Sequence (DROP)
export=1
qType=3
oType=Sequence
query=DROP SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.44]
enabled=1
caption=Functions
export=1
qType=1
oType=
query=SELECT	RTRIM(ROUTINESCHEMA) AS "Schema name",	RTRIM(ROUTINENAME) ||	'(' || COALESCE((		SELECT LISTAGG(p.TYPENAME, ', ') WITHIN GROUP (ORDER BY p.ORDINAL) 		FROM SYSCAT.ROUTINEPARMS AS p		WHERE p.ROUTINESCHEMA = r.ROUTINESCHEMA			AND p.SPECIFICNAME = r.SPECIFICNAME 	), '') || ')' AS "Function name",	CASE ROUTINETYPE		WHEN 'F' THEN 'Function'		WHEN 'P' THEN 'Procedure'	END AS "Target type",	TEXT AS "DDL"FROM	SYSCAT.ROUTINES AS rWHERE	ROUTINETYPE IN ('F', 'P') AND TEXT IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(ROUTINESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY ROUTINENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589832
condition=
pathNameCnt=1
loadedObj=Function,Procedure

[schemaCmp.6.45]
enabled=1
caption=Code object (CREATE)
export=1
qType=3
oType=View,Function,Procedure,DML Trigger,Module function,Module procedure,Materialized view
query=$DDL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.46]
enabled=1
caption=Code object (ALTER)
export=1
qType=3
oType=View,Function,Procedure,DML Trigger,Materialized view
query=$ALTER DDL$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.47]
enabled=1
caption=Function (DROP)
export=1
qType=3
oType=Function
query=DROP FUNCTION "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.48]
enabled=1
caption=Procedure (DROP)
export=1
qType=3
oType=Procedure
query=DROP PROCEDURE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.49]
enabled=1
caption=(header)
export=1
qType=3
oType=
query=/****************************************************************** * Code generated by SoftTree SQL Assistant © v$SA_VERSION$ * using Schema Compare templates * Time: $DATE$ $TIME$   * Source: $SOURCE$ * Target: $TARGET$ * ================================================================ * VERY IMPORTANT: Before running this script please check a recent * database backup is available so that you can undo all changes in * case of errors or unexpected data loss. ******************************************************************/
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.50]
enabled=1
caption=Audit Policy (CREATE)
export=1
qType=3
oType=Audit Policy
query=CREATE AUDIT POLICY "$NAME$"	CATEGORIES$		AUDIT STATUS {AUDIT STATUS}$$		CHECKING STATUS {CHECKING STATUS}$$		CONTEXT STATUS {CONTEXT STATUS}$$		OBJMAINT STATUS {OBJMAINT STATUS}$$		SECMAINT STATUS {SECMAINT STATUS}$$		SYSADMIN STATUS {SYSADMIN STATUS}$$		VALIDATE STATUS {VALIDATE STATUS}$		EXECUTE $Execute with data$ STATUS $EXECUTE STATUS}$	ERROR TYPE $ERROR TYPE$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.51]
enabled=1
caption=Audit Policy (ALTER)
export=1
qType=3
oType=Audit Policy
query=ALTER AUDIT POLICY "$NAME$" 	CATEGORIES$		AUDIT STATUS {AUDIT STATUS}$$		CHECKING STATUS {CHECKING STATUS}$$		CONTEXT STATUS {CONTEXT STATUS}$$		OBJMAINT STATUS {OBJMAINT STATUS}$$		SECMAINT STATUS {SECMAINT STATUS}$$		SYSADMIN STATUS {SYSADMIN STATUS}$$		VALIDATE STATUS {VALIDATE STATUS}$		EXECUTE $Execute with data$ STATUS $EXECUTE STATUS}$	ERROR TYPE $ERROR TYPE$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.52]
enabled=1
caption=Audit Policy (DROP)
export=1
qType=3
oType=Audit Policy
query=DROP AUDIT POLICY "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.53]
enabled=1
caption=Functions
export=1
qType=1
oType=
query=SELECT	RTRIM(ROUTINESCHEMA) AS "Schema name",	RTRIM(ROUTINENAME) AS "Function name",	CASE ROUTINETYPE		WHEN 'F' THEN 'Function'		WHEN 'P' THEN 'Procedure'	END AS "Target type",	TEXT AS "DDL"FROM	SYSCAT.ROUTINES AS rWHERE	ROUTINETYPE IN ('F', 'P') 	AND TEXT IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(ROUTINESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY ROUTINENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=1
loadedObj=Function,Procedure

[schemaCmp.6.54]
enabled=1
caption=Comments (Level 0)
export=1
qType=1
oType=
query=SELECT 	RTRIM(AUDITPOLICYNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'AUDIT POLICY "' || AUDITPOLICYNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.AUDITPOLICIESWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(DBPGNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'DATABASE PARTITION GROUP "' || DBPGNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.DBPARTITIONGROUPSWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(EVMONNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'EVENT MONITOR "' || EVMONNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.EVENTMONITORSWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(SCHEMANAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SCHEMA "' || SCHEMANAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.SCHEMATAWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(ROLENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'ROLE "' || ROLENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.ROLESWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(TBSPACE) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TABLE SPACE "' || TBSPACE || '"' AS "Comment target__HIDDEN"FROM SYSCAT.TABLESPACESWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(SGNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'STOGROUP "' || SGNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.STOGROUPSWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')
linkByVal=0
hasValue=1
templType=Objects
hidden=0
noCompare=0
minVer=655361
condition=1
pathNameCnt=1
loadedObj=Comment

[schemaCmp.6.55]
enabled=1
caption=Comment (CREATE)
export=1
qType=3
oType=Comment
query=COMMENT ON $COMMENT TARGET$ IS $VALUE.STRING$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.56]
enabled=1
caption=Comment (DROP)
export=1
qType=3
oType=Comment
query=COMMENT ON $COMMENT TARGET$ IS ''
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.57]
enabled=1
caption=Comment (ALTER)
export=1
qType=3
oType=Comment
query=COMMENT ON $COMMENT TARGET$ IS $VALUE.STRING$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.58]
enabled=1
caption=Buffer pool (CREATE)
export=1
qType=3
oType=Buffer pool
query=CREATE BUFFERPOOL "$NAME$" 	$DATABASE PARTITION GROUP {DATABASE PARTITION GROUP};ALL DBPARTITIONNUMS$	SIZE $BUFFER SIZE IN PAGES$$	EXCEPT ON MEMBERS ({EXCEPT MEMBERS})$	NUMBLOCKPAGES $Number of block pages$ BLOCKSIZE $PAGES IN BLOCK$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589832
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.59]
enabled=1
caption=Buffer pool (DROP)
export=1
qType=3
oType=Buffer pool
query=DROP BUFFERPOOL "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.60]
enabled=1
caption=Database partition group (CREATE)
export=1
qType=3
oType=Database partition group
query=CREATE DATABASE PARTITION GROUP $NAME$	$ON DBPARTITIONNUMS ({VALUE});ON ALL DBPARTITIONNUMS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.61]
enabled=1
caption=Database partition group (DROP)
export=1
qType=3
oType=Database partition group
query=DROP DATABASE PARTITION GROUP $NAME$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.62]
enabled=1
caption=Event Monitor (CREATE)
export=1
qType=3
oType=Event monitor
query=CREATE EVENT MONITOR "$NAME$" 	FOR $EVENTS$	WRITE TO $WRITE TO$$ {TARGET PATH.STRING}$$		MAXFILES {MAX NUMBER OF FILES}$$		MAXFILESIZE {MAX FILE SIZE}$$		BUFFERSIZE {BUFFER SIZE}$$		{IO MODE}$$		{WRITE MODE}$$		{, |EVENT TABLE=EVENT TABLE ENTRY}$$	{AUTO START}$$	ON DBPARTITIONNUM {DB PARTITION NUMBER}$$	{SCOPE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.63]
enabled=1
caption=Event Monitor (DROP)
export=1
qType=3
oType=Event monitor
query=DROP EVENT MONITOR "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.64]
enabled=1
caption=Comments (Level 0)
export=1
qType=1
oType=
query=SELECT 	RTRIM(AUDITPOLICYNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'AUDIT POLICY "' || AUDITPOLICYNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.AUDITPOLICIESWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(DBPGNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'DATABASE PARTITION GROUP "' || DBPGNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.DBPARTITIONGROUPSWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(EVMONNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'EVENT MONITOR "' || EVMONNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.EVENTMONITORSWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(SCHEMANAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SCHEMA "' || SCHEMANAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.SCHEMATAWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(ROLENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'ROLE "' || ROLENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.ROLESWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(TBSPACE) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TABLE SPACE "' || TBSPACE || '"' AS "Comment target__HIDDEN"FROM SYSCAT.TABLESPACESWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')
linkByVal=0
hasValue=1
templType=Objects
hidden=0
noCompare=0
minVer=589829
condition=1
pathNameCnt=1
loadedObj=Comment

[schemaCmp.6.65]
enabled=1
caption=Comments (Level 0)
export=1
qType=1
oType=
query=SELECT 	RTRIM(DBPGNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'DATABASE PARTITION GROUP "' || DBPGNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.DBPARTITIONGROUPSWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(EVMONNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'EVENT MONITOR "' || EVMONNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.EVENTMONITORSWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(SCHEMANAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SCHEMA "' || SCHEMANAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.SCHEMATAWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')UNION ALLSELECT 	RTRIM(TBSPACE) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TABLE SPACE "' || TBSPACE || '"' AS "Comment target__HIDDEN"FROM SYSCAT.TABLESPACESWHERE REMARKS <> '' AND COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_')
linkByVal=0
hasValue=1
templType=Objects
hidden=0
noCompare=0
minVer=524288
condition=1
pathNameCnt=1
loadedObj=Comment

[schemaCmp.6.66]
enabled=1
caption=Comments (Level 1)
export=1
qType=1
oType=
query=SELECT 	RTRIM(TABSCHEMA) AS "Parent schema name",	RTRIM(TABNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TABLE "' || TABSCHEMA || '"."' || TABNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT."TABLES"WHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(SEQSCHEMA) AS "Parent schema name",	RTRIM(SEQNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SEQUENCE "' || SEQSCHEMA || '"."' || SEQNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.SEQUENCESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(ROUTINESCHEMA) AS "Parent schema name",	RTRIM(ROUTINENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SEQUENCE "' || ROUTINESCHEMA || '"."' || ROUTINENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.ROUTINESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(ROUTINESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(TYPESCHEMA) AS "Parent schema name",	RTRIM(TYPENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TYPE "' || TYPESCHEMA || '"."' || TYPENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.DATATYPESWHERE REMARKS <> ''		AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(MODULESCHEMA) AS "Parent schema name",	RTRIM(MODULENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'MODULE "' || MODULESCHEMA || '"."' || MODULENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.MODULESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(MODULESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(VARSCHEMA) AS "Parent schema name",	RTRIM(VARNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'VARIABLE "' || VARSCHEMA || '"."' || VARNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.VARIABLESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))
linkByVal=0
hasValue=1
templType=Objects
hidden=0
noCompare=0
minVer=589831
condition=1
pathNameCnt=2
loadedObj=Comment

[schemaCmp.6.67]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=RENAME TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" TO "TMP_$OBJECT_NAME$"$^$^$^CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN.TARGET=COLUMN DEFINITION$)$	{DATA ORGANIZATION}$$	DATA CAPTURE {DATA CAPTURE}$$	IN {TABLE SPACE}$$	INDEX IN {INDEX TABLE SPACE}$$	LONG IN {LONG TABLE SPACE}$$	DISTRIBUTE BY {DISTRIBUTION}$$	{ROW COMPRESSION}$$	{VALUE COMPRESSION}$$	{DROP RULE}$$	CCSID {ENCODING SCHEME}$$	SECURITY POLICY {SECURITY POLICY}$$^$^$^$\n|	PRIMARY KEY.TARGET=PRIMARY KEY (CREATE),	UNIQUE KEY.TARGET=UNIQUE KEY (CREATE),	CHECK CONSTRAINT.TARGET=CHECK CONSTRAINT (CREATE),	INDEX.TARGET=INDEX (CREATE),	DML TRIGGER.TARGET=CODE OBJECT (CREATE),	FOREIGN KEY.TARGET=FOREIGN KEY (CREATE)$INSERT INTO "$SCHEMA_NAME$"."$OBJECT_NAME$" ($,|COLUMN.TARGET_OLD=COLUMN NAME$)SELECT $,|COLUMN.TARGET_OLD=COLUMN CONVERT$ FROM "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$"$^$^$^DROP TABLE "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.68]
enabled=1
caption=Table (DROP)
export=1
qType=3
oType=Table,Temporary table
query=DROP TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.69]
enabled=1
caption=Comments (Level 1)
export=1
qType=1
oType=
query=SELECT 	RTRIM(TABSCHEMA) AS "Parent schema name",	RTRIM(TABNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TABLE "' || TABSCHEMA || '"."' || TABNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT."TABLES"WHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(SEQSCHEMA) AS "Parent schema name",	RTRIM(SEQNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SEQUENCE "' || SEQSCHEMA || '"."' || SEQNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.SEQUENCESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(ROUTINESCHEMA) AS "Parent schema name",	RTRIM(ROUTINENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SEQUENCE "' || ROUTINESCHEMA || '"."' || ROUTINENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.ROUTINESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(ROUTINESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(TYPESCHEMA) AS "Parent schema name",	RTRIM(TYPENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TYPE "' || TYPESCHEMA || '"."' || TYPENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.DATATYPESWHERE REMARKS <> ''		AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(VARSCHEMA) AS "Parent schema name",	RTRIM(VARNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'VARIABLE "' || VARSCHEMA || '"."' || VARNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.VARIABLESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))
linkByVal=0
hasValue=1
templType=Objects
hidden=0
noCompare=0
minVer=589829
condition=1
pathNameCnt=2
loadedObj=Comment

[schemaCmp.6.70]
enabled=1
caption=Comments (Level 1)
export=1
qType=1
oType=
query=SELECT 	RTRIM(TABSCHEMA) AS "Parent schema name",	RTRIM(TABNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TABLE "' || TABSCHEMA || '"."' || TABNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT."TABLES"WHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(SEQSCHEMA) AS "Parent schema name",	RTRIM(SEQNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SEQUENCE "' || SEQSCHEMA || '"."' || SEQNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.SEQUENCESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(ROUTINESCHEMA) AS "Parent schema name",	RTRIM(ROUTINENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'SEQUENCE "' || ROUTINESCHEMA || '"."' || ROUTINENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.ROUTINESWHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(ROUTINESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT 	RTRIM(TYPESCHEMA) AS "Parent schema name",	RTRIM(TYPENAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TYPE "' || TYPESCHEMA || '"."' || TYPENAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.DATATYPESWHERE REMARKS <> ''		AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))
linkByVal=0
hasValue=1
templType=Objects
hidden=0
noCompare=0
minVer=524288
condition=1
pathNameCnt=2
loadedObj=Comment

[schemaCmp.6.71]
enabled=1
caption=Comments (Level 2)
export=1
qType=1
oType=
query=SELECT 	RTRIM(TABSCHEMA) AS "Parent schema name",	RTRIM(TABNAME) AS "Parent table name",	RTRIM(COLNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'COLUMN "' || TABSCHEMA || '"."' || TABNAME || '"."' || COLNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT."COLUMNS"WHERE REMARKS <> ''	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT 	RTRIM(TABSCHEMA) AS "Parent schema name",	RTRIM(TABNAME) AS "Parent table name",	RTRIM(CONSTNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'CONSTRAINT "' || TABSCHEMA || '"."' || TABNAME || '"."' || CONSTNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.TABCONSTWHERE REMARKS <> ''	 	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT 	RTRIM(TABSCHEMA) AS "Parent schema name",	RTRIM(TABNAME) AS "Parent table name",	RTRIM(INDNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'INDEX "' || INDSCHEMA || '"."' || INDNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.INDEXESWHERE REMARKS <> ''	 	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT 	RTRIM(TABSCHEMA) AS "Parent schema name",	RTRIM(TABNAME) AS "Parent table name",	RTRIM(TRIGNAME) AS "Parent name",	'Comment' AS "Object name",	'Comment' AS "Target type",	REMARKS AS "Comment",	'TRIGGER "' || TRIGSCHEMA || '"."' || TRIGNAME || '"' AS "Comment target__HIDDEN"FROM SYSCAT.TRIGGERSWHERE REMARKS <> ''	 	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))
linkByVal=0
hasValue=1
templType=Objects
hidden=0
noCompare=0
minVer=0
condition=1
pathNameCnt=3
loadedObj=Comment

[schemaCmp.6.72]
enabled=1
caption=Types (distinct)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	dt.TYPESTRINGUNITS AS "Type units",	CASE 		WHEN dt.TYPERULES = 'W' THEN 			'WITH WEAK TYPE RULES' ||			CASE WHEN dt."NULLS" = 'N' THEN ' NOT NULL' ELSE '' END ||			COALESCE(' CHECK(' || dt.CONSTRAINT_TEXT || ')', '')	END AS "Rules",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE = 'T'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.73]
enabled=1
caption=Type - distinct (CREATE)
export=1
qType=3
oType=Type
query=$|=TYPE CREATE$ AS $|=DATA TYPE$$	{RULES}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589829
condition=METATYPE=T
pathNameCnt=0
loadedObj=

[schemaCmp.6.74]
enabled=1
caption=Type (DROP)
export=1
qType=3
oType=Type
query=DROP TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.75]
enabled=1
caption=Types (distinct)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	CASE 		WHEN dt.TYPERULES = 'W' THEN 			'WITH WEAK TYPE RULES' ||			CASE WHEN dt."NULLS" = 'N' THEN ' NOT NULL' ELSE '' END ||			COALESCE(' CHECK(' || dt.CONSTRAINT_TEXT || ')', '')	END AS "Rules",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE = 'T'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.76]
enabled=1
caption=Types (distinct)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	'WITH COMPARISONS' AS "Rules",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE = 'T'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.77]
enabled=1
caption=Types (distinct)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	'WITH COMPARISONS' AS "Rules",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE = 'T'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.78]
enabled=1
caption=Types (cursor)
export=1
qType=1
oType=
query=SELECT DISTINCT	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	'Cursor' AS "Type kind",	dt.METATYPE AS "METATYPE__HIDDEN",	'"' || RTRIM(dp.BSCHEMA) || '"."' || RTRIM(dp.BNAME) || '"' AS "Base name__NAME_REFERENCE",	CASE WHEN dp.BTYPE <> 'R' THEN 'ANCHOR ROW' END AS "Anchor",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPEDEP AS dp		ON dp.TYPESCHEMA = dt.TYPESCHEMA 			AND dp.TYPENAME = dt.TYPENAMEWHERE dt.METATYPE = 'C'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY RTRIM(dt.TYPENAME)
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.79]
enabled=1
caption=Type - cursor (CREATE)
export=1
qType=3
oType=Type
query=$|=TYPE CREATE$ AS ${ANCHOR} $${BASE NAME} $CURSOR
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589831
condition=METATYPE=C
pathNameCnt=0
loadedObj=

[schemaCmp.6.80]
enabled=1
caption=Types (array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	dt.TYPESTRINGUNITS AS "Type units",	CASE WHEN dt.ARRAY_LENGTH <> 2147483647 THEN dt.ARRAY_LENGTH END AS "Array length",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'A'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.81]
enabled=1
caption=Types (array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	CASE WHEN dt.ARRAY_LENGTH <> 2147483647 THEN dt.ARRAY_LENGTH END AS "Array length",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'A'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.82]
enabled=1
caption=Types (array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	CASE WHEN dt.ARRAY_LENGTH <> 2147483647 THEN dt.ARRAY_LENGTH END AS "Array length",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'A'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.83]
enabled=1
caption=Type - array (CREATE)
export=1
qType=3
oType=Type
query=$|=TYPE CREATE$ AS $|=DATA TYPE$ ARRAY[$ARRAY LENGTH$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589829
condition=METATYPE=A
pathNameCnt=0
loadedObj=

[schemaCmp.6.84]
enabled=1
caption=Type - ass. array (CREATE)
export=1
qType=3
oType=Type
query=$|=TYPE CREATE$ AS $|=DATA TYPE$ ARRAY[$INDEX TYPE$]
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589831
condition=METATYPE=L
pathNameCnt=0
loadedObj=

[schemaCmp.6.85]
enabled=1
caption=Types (ass. array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	dt.TYPESTRINGUNITS AS "Type units",	CASE WHEN dt.ARRAYINDEXTYPESCHEMA <> 'SYSIBM' THEN '"' || RTRIM(dt.ARRAYINDEXTYPESCHEMA) || '".' ELSE '' END ||		RTRIM(dt.ARRAYINDEXTYPENAME) || 		RTRIM(CASE 			WHEN RTRIM(dt.ARRAYINDEXTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING')				THEN '(' || RTRIM(CHAR(dt.ARRAYINDEXTYPELENGTH)) || COALESCE(' ' || dt.ARRAYINDEXTYPE_STRINGUNITS, '') || ')'			ELSE ''	END) AS "Index type",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'L'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.86]
enabled=1
caption=Types (ass. array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	CASE WHEN dt.ARRAYINDEXTYPESCHEMA <> 'SYSIBM' THEN '"' || RTRIM(dt.ARRAYINDEXTYPESCHEMA) || '".' ELSE '' END ||		RTRIM(dt.ARRAYINDEXTYPENAME) || 		RTRIM(CASE 			WHEN RTRIM(dt.ARRAYINDEXTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING')				THEN '(' || RTRIM(CHAR(dt.ARRAYINDEXTYPELENGTH)) || ')'			ELSE ''	END) AS "Index type",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'L'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.87]
enabled=1
caption=Types (row)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	'Row' AS "Type kind",	dt.METATYPE AS "METATYPE__HIDDEN",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dtWHERE dt.METATYPE IN 'F'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.88]
enabled=1
caption=Types (structure)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	'Structure' AS "Type kind",	dt.METATYPE AS "METATYPE__HIDDEN",	CASE dt."INSTANTIABLE" 		WHEN 'Y' THEN 'INSTANTIABLE'		WHEN 'N' THEN 'NOT INSTANTIABLE'	END AS "Instantiable",	CASE WHEN dt."FINAL" = 'N' THEN 'NOT FINAL' END AS "Final",	CASE WHEN dt.WITH_FUNC_ACCESS = 'Y' THEN 'WITH FUNCTION ACCESS' END AS "Func access",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dtWHERE dt.METATYPE IN 'R'	AND dt.TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.89]
enabled=1
caption=Types (structure)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	'Structure' AS "Type kind",	dt.METATYPE AS "METATYPE__HIDDEN",	CASE dt."INSTANTIABLE" 		WHEN 'Y' THEN 'INSTANTIABLE'		WHEN 'N' THEN 'NOT INSTANTIABLE'	END AS "Instantiable",	CASE WHEN dt."FINAL" = 'N' THEN 'NOT FINAL' END AS "Final",	CASE WHEN dt.WITH_FUNC_ACCESS = 'Y' THEN 'WITH FUNCTION ACCESS' END AS "Func access",	0 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dtWHERE dt.METATYPE IN 'R'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.6.90]
enabled=1
caption=Type row fields
export=1
qType=1
oType=
query=SELECT	RTRIM(TYPESCHEMA) AS "Schema name",	RTRIM(TYPENAME) AS "Type name",	RTRIM(FIELDNAME) AS "Field name",	'Field' AS "Target type",	RTRIM(FIELDTYPENAME) AS "Type",	CASE		WHEN RTRIM(FIELDTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(FIELDTYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(FIELDTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	TYPESTRINGUNITS AS "Type units"FROM	SYSCAT.ROWFIELDSWHERE	TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=2
loadedObj=Field

[schemaCmp.6.91]
enabled=1
caption=Type row fields
export=1
qType=1
oType=
query=SELECT	RTRIM(TYPESCHEMA) AS "Schema name",	RTRIM(TYPENAME) AS "Type name",	RTRIM(FIELDNAME) AS "Field name",	'Field' AS "Target type",	RTRIM(FIELDTYPENAME) AS "Type",	CASE		WHEN RTRIM(FIELDTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(FIELDTYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(FIELDTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext"FROM	SYSCAT.ROWFIELDSWHERE	TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Field

[schemaCmp.6.92]
enabled=1
caption=Type structure attributes
export=1
qType=1
oType=
query=SELECT	RTRIM(TYPESCHEMA) AS "Schema name",	RTRIM(TYPENAME) AS "Type name",	RTRIM(ATTR_NAME) AS "Field name",	'Field' AS "Target type",	RTRIM(ATTR_TYPENAME) AS "Type",	CASE		WHEN RTRIM(ATTR_TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(ATTR_TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(ATTR_TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	TYPESTRINGUNITS AS "Type units"FROM	SYSCAT."ATTRIBUTES"WHERE	TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=2
loadedObj=Field

[schemaCmp.6.93]
enabled=1
caption=Type structure attributes
export=1
qType=1
oType=
query=SELECT	RTRIM(TYPESCHEMA) AS "Schema name",	RTRIM(TYPENAME) AS "Type name",	RTRIM(ATTR_NAME) AS "Field name",	'Field' AS "Target type",	RTRIM(ATTR_TYPENAME) AS "Type",	CASE		WHEN RTRIM(ATTR_TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(ATTR_TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(ATTR_TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext"FROM	SYSCAT."ATTRIBUTES"WHERE	TYPEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Field

[schemaCmp.6.94]
enabled=1
caption=Type structure attributes
export=1
qType=1
oType=
query=SELECT	RTRIM(TYPESCHEMA) AS "Schema name",	RTRIM(TYPENAME) AS "Type name",	RTRIM(ATTR_NAME) AS "Field name",	'Field' AS "Target type",	RTRIM(ATTR_TYPENAME) AS "Type",	CASE		WHEN RTRIM(ATTR_TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(ATTR_TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(ATTR_TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext"FROM	SYSCAT."ATTRIBUTES"WHERE	    (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=2
loadedObj=Field

[schemaCmp.6.95]
enabled=1
caption=Type methods
export=1
qType=1
oType=
query=SELECT	RTRIM(SUBJECT_TYPESCHEMA) AS "Schema name",	RTRIM(SUBJECT_TYPENAME) AS "Type name",	RTRIM(ROUTINENAME) AS "Field name",	'Method' AS "Target type",	TEXT AS "DDL",	"LANGUAGE" AS "Language",	CASE "DETERMINISTIC" WHEN 'N' THEN 'NO' END AS "Deterministic",	CASE EXTERNAL_ACTION WHEN 'N' THEN 'NO' END AS "External action",	RTRIM(ENCODING_SCHEME) AS "Parameter CCSID",	CASE 		WHEN SQL_DATA_ACCESS IN ('C', 'M') THEN 'CONTAINS SQL' 		WHEN SQL_DATA_ACCESS = 'N' THEN 'NO SQL' 		WHEN SQL_DATA_ACCESS = 'R' THEN 'READS SQL DATA' 	END AS "Data access",	CASE NULLCALL		WHEN 'N' THEN 'RETURNS NULL ON NULL INPUT'		WHEN 'Y' THEN 'CALLED ON NULL INPUT' 	END AS "Null call",	CASE WHEN SPEC_REG = 'I' THEN 'INHERIT' END AS "Special registers",	RTRIM(PARAMETER_STYLE) AS "Parameter style",	CASE WHEN ORIGIN = 'E' THEN		CASE WHEN "FENCED" = 'Y' THEN '' ELSE 'NOT ' END || 'FENCED ' ||		CASE WHEN "THREADSAFE" = 'Y' THEN '' ELSE 'NOT ' END || 'THREADSAFE' 	END AS "Fenced",	CASE WHEN "SCRATCHPAD" = 'Y' THEN 'SCRATCHPAD ' || SCRATCHPAD_LENGTH END AS "Scratchpad",	CASE WHEN FINALCALL = 'Y' THEN 'FINAL CALL' END AS "Final call",	CASE "PARALLEL" 		WHEN 'N' THEN 'DISALLOW' 		WHEN 'Y' THEN 'ALLOW' 	END AS "Parallel",	CASE WHEN "DBINFO" = 'Y' THEN 'DBINFO' END AS "DB Info",	CASE WHEN TEXT IS NULL THEN 0 ELSE 1 END "HASDDL__HIDDEN"FROM	SYSCAT.ROUTINES WHERE	ROUTINETYPE = 'M' 	AND ORIGIN IN ('Q','E')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SUBJECT_TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(SUBJECT_TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ROUTINENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=2
loadedObj=Method

[schemaCmp.6.96]
enabled=1
caption=Type methods
export=1
qType=1
oType=
query=SELECT	RTRIM(SUBJECT_TYPESCHEMA) AS "Schema name",	RTRIM(SUBJECT_TYPENAME) AS "Type name",	RTRIM(ROUTINENAME) AS "Field name",	'Method' AS "Target type",	TEXT AS "DDL",	"LANGUAGE" AS "Language",	CASE "DETERMINISTIC" WHEN 'N' THEN 'NO' END AS "Deterministic",	CASE EXTERNAL_ACTION WHEN 'N' THEN 'NO' END AS "External action",	CASE 		WHEN SQL_DATA_ACCESS IN ('C', 'M') THEN 'CONTAINS SQL' 		WHEN SQL_DATA_ACCESS = 'N' THEN 'NO SQL' 		WHEN SQL_DATA_ACCESS = 'R' THEN 'READS SQL DATA' 	END AS "Data access",	CASE NULLCALL		WHEN 'N' THEN 'RETURNS NULL ON NULL INPUT'		WHEN 'Y' THEN 'CALLED ON NULL INPUT' 	END AS "Null call",	CASE WHEN SPEC_REG = 'I' THEN 'INHERIT' END AS "Special registers",	RTRIM(PARAMETER_STYLE) AS "Parameter style",	CASE WHEN ORIGIN = 'E' THEN		CASE WHEN "FENCED" = 'Y' THEN '' ELSE 'NOT ' END || 'FENCED ' ||		CASE WHEN "THREADSAFE" = 'Y' THEN '' ELSE 'NOT ' END || 'THREADSAFE' 	END AS "Fenced",	CASE WHEN "SCRATCHPAD" = 'Y' THEN 'SCRATCHPAD ' || SCRATCHPAD_LENGTH END AS "Scratchpad",	CASE WHEN FINALCALL = 'Y' THEN 'FINAL CALL' END AS "Final call",	CASE "PARALLEL" 		WHEN 'N' THEN 'DISALLOW' 		WHEN 'Y' THEN 'ALLOW' 	END AS "Parallel",	CASE WHEN "DBINFO" = 'Y' THEN 'DBINFO' END AS "DB Info",	CASE WHEN TEXT IS NULL THEN 0 ELSE 1 END "HASDDL__HIDDEN"FROM	SYSCAT.ROUTINES WHERE	ROUTINETYPE = 'M' 	AND ORIGIN IN ('Q','E')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SUBJECT_TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(SUBJECT_TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ROUTINENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=2
loadedObj=Method

[schemaCmp.6.97]
enabled=1
caption=Type method params
export=1
qType=1
oType=
query=SELECT	RTRIM(r.SUBJECT_TYPESCHEMA) AS "Schema name",	RTRIM(r.SUBJECT_TYPENAME) AS "Type name",	RTRIM(r.ROUTINENAME) AS "Method name",	CASE p.ORDINAL		WHEN 0 THEN 'RETURNS'		ELSE COALESCE(RTRIM(p.PARMNAME), 'unnamed ' || p.ORDINAL)	END AS "Parameter name",	CASE p.ORDINAL 		WHEN 0 THEN 'Return'		ELSE 'Parameter'	END AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (p.CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	TYPESTRINGUNITS AS "Type units",  	CASE p.ORDINAL		WHEN 0 THEN 'RETURNS'		ELSE p.PARMNAME	END AS "PARNAME__HIDDEN",	CASE p.ROWTYPE		WHEN 'P' THEN 'IN'		WHEN 'O' THEN 'OUT'		WHEN 'B' THEN 'INOUT'	END AS "IO Type"FROM SYSCAT.ROUTINEPARMS AS p	JOIN SYSCAT.ROUTINES AS r		ON r.ROUTINESCHEMA = p.ROUTINESCHEMA 		AND r.SPECIFICNAME = p.SPECIFICNAMEWHERE 	r.ROUTINETYPE = 'M'	AND r.ORIGIN IN ('Q','E')	AND COALESCE(p.PARMNAME, '_') <> 'SELF'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(r.SUBJECT_TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(r.SUBJECT_TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY	p.ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=3
loadedObj=Method

[schemaCmp.6.98]
enabled=1
caption=Type - row (CREATE)
export=1
qType=3
oType=Type
query=$|=TYPE CREATE$ AS ROW (	$,\n\t|FIELD=TYPE FIELD$)
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589831
condition=METATYPE=F
pathNameCnt=0
loadedObj=

[schemaCmp.6.99]
enabled=1
caption=Type field
export=1
qType=3
oType=
query=$NAME$ $|=DATA TYPE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.100]
enabled=1
caption=Type - structure (CREATE)
export=1
qType=3
oType=Type
query=$|=TYPE CREATE$ AS (	$,\n\t|FIELD=TYPE FIELD$)	MODE DB2SQL$	{INSTANTIABLE}$$	{FINAL}$$	{FUNC ACCES}$	$\n|METHOD=TYPE METHOD DECLARE$$^$^$^$\n|METHOD=TYPE METHOD DEFINE$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=METATYPE=R
pathNameCnt=0
loadedObj=

[schemaCmp.6.101]
enabled=1
caption=Type method declare
export=1
qType=3
oType=
query=	METHOD $NAME$($, |PARAMETER=METHOD PARAMETER$)	$|RETURN=METHOD PARAMETER$	LANGUAGE $LANGUAGE$$	PARAMETER STYLE {PARAMETER STYLE}$$	PARAMETER CCSID {PARAMETER CCSID}$$	{DETERMINISTIC} DETERMINISTIC$$	{EXTERNAL ACTION} EXTERNAL ACTION$$	{DATA ACCESS}$$	{NULL CALL}$$	{SPECIAL REGISTERS} SPECIAL REGISTERS$$	{FENCED}$$	{SCRATCHPAD}$$	{PARALLEL} PARALLEL$$	{DB INFO}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.102]
enabled=1
caption=Type method define
export=1
qType=3
oType=
query=$DDL$$^$^$^
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=HASDDL=1
pathNameCnt=0
loadedObj=

[schemaCmp.6.103]
enabled=1
caption=Method parameter
export=1
qType=3
oType=
query=${IO TYPE} $${PARNAME} $$|=DATA TYPE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.104]
enabled=1
caption=Type method params
export=1
qType=1
oType=
query=SELECT	RTRIM(r.SUBJECT_TYPESCHEMA) AS "Schema name",	RTRIM(r.SUBJECT_TYPENAME) AS "Type name",	RTRIM(r.ROUTINENAME) AS "Method name",	CASE p.ORDINAL		WHEN 0 THEN 'RETURNS'		ELSE COALESCE(RTRIM(p.PARMNAME), 'unnamed ' || p.ORDINAL)	END AS "Parameter name",	CASE p.ORDINAL 		WHEN 0 THEN 'Return'		ELSE 'Parameter'	END AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (p.CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	CASE p.ORDINAL		WHEN 0 THEN 'RETURNS'		ELSE p.PARMNAME	END AS "PARNAME__HIDDEN",	CASE p.ROWTYPE		WHEN 'P' THEN 'IN'		WHEN 'O' THEN 'OUT'		WHEN 'B' THEN 'INOUT'	END AS "IO Type"FROM SYSCAT.ROUTINEPARMS AS p	JOIN SYSCAT.ROUTINES AS r		ON r.ROUTINESCHEMA = p.ROUTINESCHEMA 		AND r.SPECIFICNAME = p.SPECIFICNAMEWHERE 	r.ROUTINETYPE = 'M'	AND r.ORIGIN IN ('Q','E')	AND COALESCE(p.PARMNAME, '_') <> 'SELF'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(r.SUBJECT_TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(r.SUBJECT_TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY	p.ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=3
loadedObj=Method

[schemaCmp.6.105]
enabled=1
caption=Packages
export=1
qType=1
oType=
query=SELECT 	RTRIM(MODULESCHEMA) AS "Schema name",	RTRIM(MODULENAME) AS "Module name",	'Package' AS "Target type",	SOURCEHEADER AS "Header",	SOURCEBODY AS "Body"FROM SYSIBM.SYSMODULESWHERE MODULETYPE = 'P'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(MODULESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY MODULENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Package

[schemaCmp.6.106]
enabled=1
caption=Modules
export=1
qType=1
oType=
query=SELECT 	RTRIM(MODULESCHEMA) AS "Schema name",	RTRIM(MODULENAME) AS "Module name",	'Module' AS "Target type",	9 AS "SyncConfig__HIDDEN"FROM SYSCAT.MODULESWHERE MODULETYPE = 'M'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(MODULESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY MODULENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Module

[schemaCmp.6.107]
enabled=1
caption=Module functions
export=1
qType=1
oType=
query=SELECT	RTRIM(ROUTINESCHEMA) AS "Schema name",	RTRIM(ROUTINEMODULENAME) AS "Module name",	RTRIM(ROUTINENAME) AS "Function name",	CASE ROUTINETYPE		WHEN 'F' THEN 'Module function'		WHEN 'P' THEN 'Module procedure'	END AS "Target type",	TEXT AS "DDL"FROM	SYSCAT.ROUTINESWHERE	ROUTINETYPE IN ('F', 'P') AND TEXT IS NOT NULL	AND ROUTINEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(ROUTINESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY ROUTINENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Module function,Module procedure

[schemaCmp.6.108]
enabled=1
caption=Module (CREATE)
export=1
qType=3
oType=Module
query=CREATE MODULE "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.109]
enabled=1
caption=Module (DROP)
export=1
qType=3
oType=Module
query=DROP MODULE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.110]
enabled=1
caption=Module function (DROP)
export=1
qType=3
oType=Module function
query=ALTER MODULE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP FUNCTION "$NAME$"($, |PARAMETER=METHOD PARAMETER$)
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.111]
enabled=1
caption=Module function params
export=1
qType=1
oType=
query=SELECT	RTRIM(r.ROUTINESCHEMA) AS "Schema name",	RTRIM(r.ROUTINEMODULENAME) AS "Type name",	RTRIM(r.ROUTINENAME) AS "Method name",	COALESCE(RTRIM(p.PARMNAME), 'unnamed ' || p.ORDINAL) AS "Parameter name",	'Parameter' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (p.CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	TYPESTRINGUNITS AS "Type units",  	p.PARMNAME AS "PARNAME__HIDDEN",	CASE p.ROWTYPE		WHEN 'P' THEN 'IN'		WHEN 'O' THEN 'OUT'		WHEN 'B' THEN 'INOUT'	END AS "IO Type"FROM SYSCAT.ROUTINEPARMS AS p	JOIN SYSCAT.ROUTINES AS r		ON r.ROUTINESCHEMA = p.ROUTINESCHEMA 		AND r.SPECIFICNAME = p.SPECIFICNAMEWHERE  	r.ORIGIN IN ('Q','E')	AND COALESCE(p.PARMNAME, '_') <> 'SELF'	AND r.ROUTINEMODULENAME IS NOT NULL	AND p.ORDINAL > 0	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(r.ROUTINESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(r.ROUTINEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY	p.ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=3
loadedObj=Module function,Module procedure

[schemaCmp.6.112]
enabled=1
caption=Module procedure (DROP)
export=1
qType=3
oType=Module procedure
query=ALTER MODULE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP PROCEDURE "$NAME$"($, |PARAMETER=METHOD PARAMETER$)
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.113]
enabled=1
caption=Module function params
export=1
qType=1
oType=
query=SELECT	RTRIM(r.ROUTINESCHEMA) AS "Schema name",	RTRIM(r.ROUTINEMODULENAME) AS "Type name",	RTRIM(r.ROUTINENAME) AS "Method name",	COALESCE(RTRIM(p.PARMNAME), 'unnamed ' || p.ORDINAL) AS "Parameter name",	'Parameter' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (p.CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	p.PARMNAME AS "PARNAME__HIDDEN",	CASE p.ROWTYPE		WHEN 'P' THEN 'IN'		WHEN 'O' THEN 'OUT'		WHEN 'B' THEN 'INOUT'	END AS "IO Type"FROM SYSCAT.ROUTINEPARMS AS p	JOIN SYSCAT.ROUTINES AS r		ON r.ROUTINESCHEMA = p.ROUTINESCHEMA 		AND r.SPECIFICNAME = p.SPECIFICNAMEWHERE  	r.ORIGIN IN ('Q','E')	AND COALESCE(p.PARMNAME, '_') <> 'SELF'	AND r.ROUTINEMODULENAME IS NOT NULL	AND p.ORDINAL > 0	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(r.ROUTINESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(r.ROUTINEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY	p.ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=3
loadedObj=Module function,Module procedure

[schemaCmp.6.114]
enabled=1
caption=Module types (distinct)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	dt.TYPESTRINGUNITS AS "Type units",	CASE 		WHEN dt.TYPERULES = 'W' THEN 			'WITH WEAK TYPE RULES' ||			CASE WHEN dt."NULLS" = 'N' THEN ' NOT NULL' ELSE '' END ||			COALESCE(' CHECK(' || dt.CONSTRAINT_TEXT || ')', '')	END AS "Rules",	dt.METATYPE AS "METATYPE__HIDDEN",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE = 'T'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.115]
enabled=1
caption=Type create
export=1
qType=3
oType=
query=ALTER MODULE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD TYPE "$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=InModule=1
pathNameCnt=0
loadedObj=

[schemaCmp.6.116]
enabled=1
caption=Type create
export=1
qType=3
oType=
query=CREATE TYPE "$SCHEMA_NAME$"."$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.117]
enabled=1
caption=Module types (distinct)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	CASE 		WHEN dt.TYPERULES = 'W' THEN 			'WITH WEAK TYPE RULES' ||			CASE WHEN dt."NULLS" = 'N' THEN ' NOT NULL' ELSE '' END ||			COALESCE(' CHECK(' || dt.CONSTRAINT_TEXT || ')', '')	END AS "Rules",	dt.METATYPE AS "METATYPE__HIDDEN",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE = 'T'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.118]
enabled=1
caption=Module types (distinct)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	'WITH COMPARISONS' AS "Rules",	dt.METATYPE AS "METATYPE__HIDDEN",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE = 'T'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.119]
enabled=1
caption=Module types (cursor)
export=1
qType=1
oType=
query=SELECT DISTINCT	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	'Cursor' AS "Type kind",	dt.METATYPE AS "METATYPE__HIDDEN",	'"' || RTRIM(dp.BSCHEMA) || '"."' || RTRIM(dp.BNAME) || '"' AS "Base name__NAME_REFERENCE",	CASE WHEN dp.BTYPE <> 'R' THEN 'ANCHOR ROW' END AS "Anchor",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPEDEP AS dp		ON dp.TYPESCHEMA = dt.TYPESCHEMA 			AND dp.TYPENAME = dt.TYPENAMEWHERE dt.METATYPE = 'C'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY RTRIM(dt.TYPENAME)
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.120]
enabled=1
caption=Module types (array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	dt.TYPESTRINGUNITS AS "Type units",	CASE WHEN dt.ARRAY_LENGTH <> 2147483647 THEN dt.ARRAY_LENGTH END AS "Array length",	dt.METATYPE AS "METATYPE__HIDDEN",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'A'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.121]
enabled=1
caption=Module types (array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	CASE WHEN dt.ARRAY_LENGTH <> 2147483647 THEN dt.ARRAY_LENGTH END AS "Array length",	dt.METATYPE AS "METATYPE__HIDDEN",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'A'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.122]
enabled=1
caption=Module types (ass. array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	dt.TYPESTRINGUNITS AS "Type units",	CASE WHEN dt.ARRAYINDEXTYPESCHEMA <> 'SYSIBM' THEN '"' || RTRIM(dt.ARRAYINDEXTYPESCHEMA) || '".' ELSE '' END ||		RTRIM(dt.ARRAYINDEXTYPENAME) || 		RTRIM(CASE 			WHEN RTRIM(dt.ARRAYINDEXTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING')				THEN '(' || RTRIM(CHAR(dt.ARRAYINDEXTYPELENGTH)) || COALESCE(' ' || dt.ARRAYINDEXTYPE_STRINGUNITS, '') || ')'			ELSE ''	END) AS "Index type",	dt.METATYPE AS "METATYPE__HIDDEN",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'L'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.123]
enabled=1
caption=Module types (ass. array)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	RTRIM(dt_src.TYPENAME) AS "Type",	CASE		WHEN RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(dt_src.TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(dt.SCALE)) 	END AS "Type scale",	CASE 		WHEN (dt.CODEPAGE = 0) AND RTRIM(dt_src.TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	CASE WHEN dt.ARRAYINDEXTYPESCHEMA <> 'SYSIBM' THEN '"' || RTRIM(dt.ARRAYINDEXTYPESCHEMA) || '".' ELSE '' END ||		RTRIM(dt.ARRAYINDEXTYPENAME) || 		RTRIM(CASE 			WHEN RTRIM(dt.ARRAYINDEXTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING')				THEN '(' || RTRIM(CHAR(dt.ARRAYINDEXTYPELENGTH)) || ')'			ELSE ''	END) AS "Index type",	dt.METATYPE AS "METATYPE__HIDDEN",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dt	LEFT JOIN SYSCAT.DATATYPES AS dt_src		ON dt_src.TYPEID = dt.SOURCETYPEIDWHERE dt.METATYPE IN 'L'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.124]
enabled=1
caption=Module types (row)
export=1
qType=1
oType=
query=SELECT 	RTRIM(dt.TYPESCHEMA) AS "Schema name", 	RTRIM(dt.TYPEMODULENAME) AS "Module name",	RTRIM(dt.TYPENAME) AS "Type name",	'Type' AS "Target name",	'Row' AS "Type kind",	dt.METATYPE AS "METATYPE__HIDDEN",	1 AS "InModule__HIDDEN"FROM SYSCAT.DATATYPES AS dtWHERE dt.METATYPE IN 'F'	AND dt.TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(dt.TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY dt.TYPENAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Type

[schemaCmp.6.125]
enabled=1
caption=Module type row fields
export=1
qType=1
oType=
query=SELECT	RTRIM(TYPESCHEMA) AS "Schema name",	RTRIM(TYPEMODULENAME) AS "Module name",	RTRIM(TYPENAME) AS "Type name",	RTRIM(FIELDNAME) AS "Field name",	'Field' AS "Target type",	RTRIM(FIELDTYPENAME) AS "Type",	CASE		WHEN RTRIM(FIELDTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(FIELDTYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(FIELDTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	TYPESTRINGUNITS AS "Type units"FROM	SYSCAT.ROWFIELDSWHERE	TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=3
loadedObj=Field

[schemaCmp.6.126]
enabled=1
caption=Type (DROP)
export=1
qType=3
oType=Type
query=ALTER MODULE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP TYPE "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=InModule=1
pathNameCnt=0
loadedObj=

[schemaCmp.6.127]
enabled=1
caption=Module type row fields
export=1
qType=1
oType=
query=SELECT	RTRIM(TYPESCHEMA) AS "Schema name",	RTRIM(TYPEMODULENAME) AS "Module name",	RTRIM(TYPENAME) AS "Type name",	RTRIM(FIELDNAME) AS "Field name",	'Field' AS "Target type",	RTRIM(FIELDTYPENAME) AS "Type",	CASE		WHEN RTRIM(FIELDTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(FIELDTYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(FIELDTYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext"FROM	SYSCAT.ROWFIELDSWHERE	TYPEMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TYPEMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY ORDINAL
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=3
loadedObj=Field

[schemaCmp.6.128]
enabled=1
caption=Synonyms
export=1
qType=1
oType=
query=SELECT	"Schema name",	"Table name",	'Synonym' AS "Target type",	"Base name__NAME_REFERENCE",	RTRIM("Object type") AS "Object type" FROM (SELECT  	RTRIM(TABSCHEMA) AS "Schema name", 	RTRIM(TABNAME) AS "Table name",	'"' || RTRIM(BASE_TABSCHEMA) || '"."' || RTRIM(BASE_TABNAME) || '"' AS "Base name__NAME_REFERENCE",	'TABLE' AS "Object type" FROM	SYSCAT.TABLESWHERE	TYPE = 'A'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	UNION ALL	SELECT  	RTRIM(MODULESCHEMA) AS "Schema name", 	RTRIM(MODULENAME) AS "Module name",	'"' || RTRIM(BASE_MODULESCHEMA) || '"."' || RTRIM(BASE_MODULENAME) || '"' AS "Base name__NAME_REFERENCE",	'MODULE' AS "Object type"FROM	SYSCAT.MODULESWHERE	MODULETYPE = 'A'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(MODULESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	UNION ALL	SELECT  	RTRIM(SEQSCHEMA) AS "Schema name", 	RTRIM(SEQNAME) AS "Module name",	'"' || RTRIM(BASE_SEQSCHEMA) || '"."' || RTRIM(BASE_SEQNAME) || '"' AS "Base name__NAME_REFERENCE",	'SEQUENCE' AS "Object type"FROM	SYSCAT.SEQUENCESWHERE	SEQTYPE = 'A'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQSCHEMA) = COALESCE('$SCHEMA_NAME$', '_')))ORDER BY "Table name"	
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Synonym

[schemaCmp.6.129]
enabled=1
caption=Synonyms
export=1
qType=1
oType=
query=SELECT  	RTRIM(TABSCHEMA) AS "Schema name", 	RTRIM(TABNAME) AS "Table name",	'Synonym' AS "Target type", 	'"' || RTRIM(BASE_TABSCHEMA) || '"."' || RTRIM(BASE_TABNAME) || '"' AS "Base name__NAME_REFERENCE",	'TABLE' AS "Object type" FROM	SYSCAT.TABLESWHERE	TYPE = 'A'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY TABNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=1
loadedObj=Synonym

[schemaCmp.6.130]
enabled=1
caption=Variables
export=1
qType=1
oType=
query=SELECT 	RTRIM(VARSCHEMA) AS "Schema name", 	RTRIM(VARNAME) AS "Variable name",	'Variable' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	TYPESTRINGUNITS AS "Type units",  	"DEFAULT" AS "Default", 	CASE READONLY		WHEN 'N' THEN 'DEFAULT'		ELSE 'CONSTANT'	END AS "Variable kind",	0 AS "InModule__HIDDEN" FROM 	SYSCAT.VARIABLESWHERE 	VARMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY VARNAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=1
loadedObj=Variable

[schemaCmp.6.131]
enabled=1
caption=Variables
export=1
qType=1
oType=
query=SELECT 	RTRIM(VARSCHEMA) AS "Schema name", 	RTRIM(VARNAME) AS "Variable name",	'Variable' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	"DEFAULT" AS "Default", 	CASE READONLY		WHEN 'N' THEN 'DEFAULT'		ELSE 'CONSTANT'	END AS "Variable kind",	0 AS "InModule__HIDDEN" FROM 	SYSCAT.VARIABLESWHERE 	VARMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY VARNAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=1
loadedObj=Variable

[schemaCmp.6.132]
enabled=1
caption=Variables
export=1
qType=1
oType=
query=SELECT 	RTRIM(VARSCHEMA) AS "Schema name", 	RTRIM(VARNAME) AS "Variable name",	'Variable' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	"DEFAULT" AS "Default", 	CASE READONLY		WHEN 'N' THEN 'DEFAULT'		ELSE 'CONSTANT'	END AS "Variable kind",	0 AS "InModule__HIDDEN" FROM 	SYSCAT.VARIABLESWHERE 	(COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))ORDER BY VARNAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=1
loadedObj=Variable

[schemaCmp.6.133]
enabled=1
caption=Module variables
export=1
qType=1
oType=
query=SELECT 	RTRIM(VARSCHEMA) AS "Schema name",	RTRIM(VARMODULENAME) AS "Module name", 	RTRIM(VARNAME) AS "Variable name",	'Variable' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	TYPESTRINGUNITS AS "Type units",  	"DEFAULT" AS "Default", 	CASE READONLY		WHEN 'N' THEN 'DEFAULT'		ELSE 'CONSTANT'	END AS "Variable kind",	1 AS "InModule__HIDDEN" FROM 	SYSCAT.VARIABLESWHERE 	VARMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY VARNAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=2
loadedObj=Variable

[schemaCmp.6.134]
enabled=1
caption=Module variables
export=1
qType=1
oType=
query=SELECT 	RTRIM(VARSCHEMA) AS "Schema name",	RTRIM(VARMODULENAME) AS "Module name", 	RTRIM(VARNAME) AS "Variable name",	'Variable' AS "Target type",	RTRIM(TYPENAME) AS "Type",	CASE		WHEN RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 			'CHARACTER VARYING', 'CLOB', 'DBCLOB', 'CHARACTER LARGE OBJECT', 'CHAR LARGE OBJECT',			'GRAPHIC', 'VARGRAPHIC', 'LONG VARGRAPHIC', 'BLOB', 'BINARY LARGE OBJECT', 			'NCHARACTER', 'NCHAR', 'NVARCHAR', 'LONG NVARCHAR', 'NCHAR VARYING', 'NCHARACTER VARYING',			'NATIONAL CHARACTER', 'NATIONAL CHAR', 'NATIONAL CHAR VARYING', 'NATIONAL CHARACTER VARYING',			'NCLOB', 'NCHAR LARGE OBJECT', 'NCHAR LARGE OBJECT', 'NATIONAL CHAR LARGE OBJECT',			'FLOAT', 'DECFLOAT', 'DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(LENGTH)) 	END AS "Type length",	CASE 		WHEN RTRIM(TYPENAME) IN ('DEC', 'DECIMAL', 'NUM', 'NUMERIC') 		THEN RTRIM(CHAR(SCALE)) 	END AS "Type scale",	CASE 		WHEN (CODEPAGE = 0) AND RTRIM(TYPENAME) IN ('CHARACTER', 'CHAR', 'VARCHAR', 'LONG VARCHAR', 'CHAR VARYING', 'CHARACTER VARYING') 		THEN 'FOR BIT DATA' 	END AS "Type ext",	"DEFAULT" AS "Default", 	CASE READONLY		WHEN 'N' THEN 'DEFAULT'		ELSE 'CONSTANT'	END AS "Variable kind",	1 AS "InModule__HIDDEN" FROM 	SYSCAT.VARIABLESWHERE 	VARMODULENAME IS NOT NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARMODULENAME) = COALESCE('$OBJECT_NAME$', '_'))ORDER BY VARNAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Variable

[schemaCmp.6.135]
enabled=1
caption=Variable (CREATE)
export=1
qType=3
oType=Variable
query=CREATE VARIABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" $|=DATA TYPE$ $VARIABLE KIND$ $DEFAULT;NULL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589829
condition=InModule=0
pathNameCnt=0
loadedObj=

[schemaCmp.6.136]
enabled=1
caption=Variable (CREATE)
export=1
qType=3
oType=Variable
query=ALTER MODULE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD VARIABLE "$NAME$" $|=DATA TYPE$ $VARIABLE KIND$ $DEFAULT;NULL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589831
condition=InModule=1
pathNameCnt=0
loadedObj=

[schemaCmp.6.137]
enabled=1
caption=Variable (DROP)
export=1
qType=3
oType=Variable
query=DROP VARIABLE  "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=InModule=0
pathNameCnt=0
loadedObj=

[schemaCmp.6.138]
enabled=1
caption=Variable (DROP)
export=1
qType=3
oType=Variable
query=ALTER MODULE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP VARIABLE "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=InModule=1
pathNameCnt=0
loadedObj=

[schemaCmp.6.139]
enabled=1
caption=Audit policies
export=1
qType=1
oType=Database
query=SELECT 	RTRIM(AUDITPOLICYNAME) AS "Audit name",	'Audit Policy' AS "Target name",	CASE AUDITSTATUS 		WHEN 'B' THEN 'BOTH'		WHEN 'F' THEN 'FAILURE'		WHEN 'N' THEN 'NONE'		WHEN 'S' THEN 'SUCCESS'	END AS "Audit status",	CASE CONTEXTSTATUS		WHEN 'B' THEN 'BOTH'		WHEN 'F' THEN 'FAILURE'		WHEN 'N' THEN 'NONE'		WHEN 'S' THEN 'SUCCESS'	END AS "Context status",	CASE CHECKINGSTATUS		WHEN 'B' THEN 'BOTH'		WHEN 'F' THEN 'FAILURE'		WHEN 'N' THEN 'NONE'		WHEN 'S' THEN 'SUCCESS'	END AS "Checking status",	CASE VALIDATESTATUS		WHEN 'B' THEN 'BOTH'		WHEN 'F' THEN 'FAILURE'		WHEN 'N' THEN 'NONE'		WHEN 'S' THEN 'SUCCESS'	END AS "Validate status",	CASE SECMAINTSTATUS		WHEN 'B' THEN 'BOTH'		WHEN 'F' THEN 'FAILURE'		WHEN 'N' THEN 'NONE'		WHEN 'S' THEN 'SUCCESS'	END AS "SECMAINT status",	CASE OBJMAINTSTATUS		WHEN 'B' THEN 'BOTH'		WHEN 'F' THEN 'FAILURE'		WHEN 'N' THEN 'NONE'		WHEN 'S' THEN 'SUCCESS'	END AS "OBJMAINT status",	CASE SYSADMINSTATUS		WHEN 'B' THEN 'BOTH'		WHEN 'F' THEN 'FAILURE'		WHEN 'N' THEN 'NONE'		WHEN 'S' THEN 'SUCCESS'	END AS "SYSADMIN status",	CASE EXECUTESTATUS		WHEN 'B' THEN 'BOTH'		WHEN 'F' THEN 'FAILURE'		WHEN 'N' THEN 'NONE'		WHEN 'S' THEN 'SUCCESS'	END AS "Execute status",	CASE EXECUTEWITHDATA		WHEN 'N' THEN 'WITHOUT DATA'		WHEN 'Y' THEN 'WITH DATA'	END AS "Execute with data",	CASE ERRORTYPE		WHEN 'A' THEN 'AUDIT'		WHEN 'N' THEN 'NORMAL'	END AS "Error type"FROM SYSCAT.AUDITPOLICIESORDER BY AUDITPOLICYNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=0
loadedObj=Audit Policy

[schemaCmp.6.140]
enabled=1
caption=Buffer pools
export=1
qType=1
oType=Database
query=SELECT	RTRIM(BPNAME) AS "Buffer pool name",	'Buffer pool' AS "Target type",	DBPGNAME AS "Database partition group",	NPAGES AS "Buffer size in pages", 	"PAGESIZE" AS "Page size", 	"NUMBLOCKPAGES" AS "Number of block pages", 	"BLOCKSIZE" AS "Pages in block",	(		SELECT				LISTAGG(bpe."MEMBER" || ' SIZE ' || bpe.NPAGES, ', ') WITHIN GROUP (ORDER BY bpe."MEMBER")		FROM SYSCAT.BUFFERPOOLEXCEPTIONS AS bpe		WHERE bpe.BUFFERPOOLID = bp.BUFFERPOOLID	) AS "Except members"FROM SYSCAT."BUFFERPOOLS" AS bpORDER BY BPNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589832
condition=
pathNameCnt=0
loadedObj=Buffer pool

[schemaCmp.6.141]
enabled=1
caption=Buffer pools
export=1
qType=1
oType=Database
query=SELECT	RTRIM(BPNAME) AS "Buffer pool name",	'Buffer pool' AS "Target type",	DBPGNAME AS "Database partition group",	NPAGES AS "Buffer size in pages", 	"PAGESIZE" AS "Page size", 	"NUMBLOCKPAGES" AS "Number of block pages", 	"BLOCKSIZE" AS "Pages in block"FROM SYSCAT."BUFFERPOOLS" AS bpORDER BY BPNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=Buffer pool

[schemaCmp.6.142]
enabled=1
caption=Buffer pools
export=1
qType=1
oType=Database
query=SELECT	RTRIM(BPNAME) AS "Buffer pool name",	'Buffer pool' AS "Target type",	NGNAME AS "Database partition group",	NPAGES AS "Buffer size in pages", 	"PAGESIZE" AS "Page size" FROM SYSCAT."BUFFERPOOLS" AS bpORDER BY BPNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=Buffer pool

[schemaCmp.6.143]
enabled=1
caption=Database partition groups
export=1
qType=1
oType=Database
query=SELECT	RTRIM(DBPGNAME) AS "Group name",	'Database partition group' AS "Target type"FROM SYSCAT.DBPARTITIONGROUPS AS pgORDER BY DBPGNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Database partition group

[schemaCmp.6.144]
enabled=1
caption=Database partition numbers
export=1
qType=0
oType=Database partition group
query=SELECT "DBPARTITIONNUM" AS "value__AGG" FROM SYSCAT.DBPARTITIONGROUPDEFWHERE DBPGNAME = '$SCHEMA_NAME$'ORDER BY "DBPARTITIONNUM" 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Database partition group

[schemaCmp.6.145]
enabled=1
caption=Event monitors
export=1
qType=1
oType=Database
query=SELECT	RTRIM(EVMONNAME) AS "Event monitor name",	'Event monitor' AS "Target type",	CASE TARGET_TYPE		WHEN 'F' THEN 'FILE' 		WHEN 'P' THEN 'PIPE' 		WHEN 'T' THEN 'TABLE' 		WHEN 'U' THEN 'UNFORMATTED EVENT TABLE'	END AS "Write to",	"TARGET" AS "Target path",	"MAXFILES" AS "Max number of files", 	"MAXFILESIZE" AS "Max file size", 	"BUFFERSIZE" AS "Buffer size", 	CASE IO_MODE		WHEN 'B' THEN 'BLOCKED'		WHEN 'N' THEN 'NONBLOCKED'	END AS "IO Mode",	CASE WRITE_MODE		WHEN 'A' THEN 'APPEND'		WHEN 'R' THEN 'REPLACE'	END AS "Write mode",	CASE "AUTOSTART"		WHEN 'Y' THEN 'AUTOSTART'		WHEN 'N' THEN 'MANUAL'	END AS "Auto start",	"DBPARTITIONNUM" AS "DB Partition number", 	CASE MONSCOPE		WHEN 'G' THEN 'GLOBAL'		WHEN 'L' THEN 'LOCAL'	END AS "Scope"FROM SYSCAT.EVENTMONITORS AS emORDER BY EVMONNAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Event monitor

[schemaCmp.6.146]
enabled=1
caption=Role (CREATE)
export=1
qType=3
oType=Role
query=CREATE ROLE "$NAME$"
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.147]
enabled=1
caption=Role (DROP)
export=1
qType=3
oType=Role
query=DROP ROLE "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.148]
enabled=1
caption=Table Temporary (CREATE)
export=1
qType=3
oType=Temporary table
query=CREATE GLOBAL TEMPORARY TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN=COLUMN DEFINITION$)$	ON COMMIT {ON COMMIT} ROWS$$	{LOGGED}$$	ON ROLLBACK {ON ROLLBACK} ROWS$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.149]
enabled=1
caption=Events
export=1
qType=0
oType=
query=SELECT	EVMONNAME AS "Event monitor name",	CASE "TYPE"	WHEN 'CHANGEHISTORY' THEN 'CHANGE HISTORY WHERE ' || "FILTER" 	WHEN 'DETAILDEADLOCKS' THEN 'DEADLOCKS WITH DETAILS' 	WHEN 'DLOCKWHIST' THEN 'DEADLOCKS WITH DETAILS HISTORY' 	WHEN 'DLOCKWHISTAVAL' THEN 'DEADLOCKS WITH DETAILS HISTORY VALUES' 	WHEN 'PKGCACHEBASE' THEN 'PACKAGE CACHE' || COALESCE(' WHERE ' || "FILTER", '') || ' COLLECT BASE DATA' 	WHEN 'PKGCACHEDETAILED' THEN 'PACKAGE CACHE' || COALESCE(' WHERE ' || "FILTER", '') || ' COLLECT DETAILED DATA' 	WHEN 'THRESHOLDVIOLATIONS' THEN 'THRESHOLD VIOLATIONS' 	WHEN 'UOW' THEN 'UNIT OF WORK'	ELSE 		CASE WHEN "TYPE" IN ('CONNECTIONS', 'STATEMENTS', 'TRANSACTIONS')		THEN "TYPE" || COALESCE(' WHERE ' || "FILTER", '')		ELSE "TYPE"		END	END AS "Events__AGG"FROM SYSCAT.EVENTS
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Event monitor

[schemaCmp.6.150]
enabled=1
caption=Event tables
export=1
qType=1
oType=
query=SELECT	EVMONNAME AS "Event monitor name",	TABNAME AS "Table name",	'Event table' AS "Target type",	'"' || TABSCHEMA || '"."' || TABNAME || '"' AS "Full name__NAMEREFERENCE",	"PCTDEACTIVATE" AS "PCT Deactivate",	LOGICAL_GROUP AS "Logical group"FROM SYSCAT.EVENTTABLES 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Event table

[schemaCmp.6.151]
enabled=1
caption=Tablespaces
export=1
qType=1
oType=Database
query=SELECT	RTRIM(t.TBSPACE) AS "Name",	'Tablespace' AS "Target type",	CASE t.DATATYPE		WHEN 'A' THEN 'REGULAR' 		WHEN 'L' THEN 'LARGE' 		WHEN 'T' THEN 'SYSTEM TEMPOPRARY' 		WHEN 'U' THEN 'USER TEMPOPRARY' 	END AS "Data type",	t.DBPGNAME AS "DB Partition group",	t."PAGESIZE" AS "Page size",	t."EXTENTSIZE" AS "Extent size",	CASE		WHEN t."PREFETCHSIZE" <> -1 THEN cast(t."PREFETCHSIZE" AS VARCHAR(100))   		ELSE 'AUTOMATIC'	END AS "Prefetch size",	CASE 		WHEN t.BUFFERPOOLID <> 1 THEN b.BPNAME 	END AS "Buffer pool",	CASE 		WHEN t."OVERHEAD" <> -1 THEN cast(t."OVERHEAD" AS VARCHAR(100))	END AS "Overhead",	CASE 		WHEN t."TRANSFERRATE" <> -1 THEN cast(t."TRANSFERRATE" AS VARCHAR(100))	END AS "Transfer rate",	RTRIM(CASE t.DROP_RECOVERY		WHEN 'Y' THEN 'ON'		WHEN 'N' THEN 'OFF'	END) AS "Drop recovery",	CASE t.DATATAG 		WHEN 0 THEN 'NONE'		WHEN -1 THEN ''		ELSE CAST(t.DATATAG AS VARCHAR(1))	END AS "Data tag"FROM SYSCAT.TABLESPACES AS t	LEFT JOIN SYSCAT."BUFFERPOOLS" AS b		ON b.BUFFERPOOLID = t.BUFFERPOOLIDWHERE t.OWNERTYPE <> 'S'ORDER BY t.TBSPACE
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Table space

[schemaCmp.6.152]
enabled=1
caption=Table space (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE $VALUE$ TABLESPACE "$NAME$"$	IN DATABASE PARTITION GROUP {DB PARTITION GROUP}$$	PAGESIZE {PAGE SIZE}$$	EXTENTSIZE {EXTENT SIZE}$$	PREFETCHSIZE {PREFETCH SIZE}$$	BUFFERPOOL {BUFFER POOL}$$	OVERHEAD {OVERHEAD}$$	TRANSFERRATE {TRANSFER RATE}$$	DATA TAG {DATA TAG}$$	DROPPED TABLE RECOVERY {DROP RECOVERY}$     
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.153]
enabled=1
caption=Table space (DROP)
export=1
qType=3
oType=Tablespace
query=DROP TABLESPACE "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.154]
enabled=1
caption=Tablespaces
export=1
qType=1
oType=Database
query=SELECT	RTRIM(t.TBSPACE) AS "Name",	'Tablespace' AS "Target type",	CASE t.DATATYPE		WHEN 'A' THEN 'REGULAR' 		WHEN 'L' THEN 'LARGE' 		WHEN 'T' THEN 'SYSTEM TEMPOPRARY' 		WHEN 'U' THEN 'USER TEMPOPRARY' 	END AS "Data type",	t.DBPGNAME AS "DB Partition group",	t."PAGESIZE" AS "Page size",	t."EXTENTSIZE" AS "Extent size",	CASE		WHEN t."PREFETCHSIZE" <> -1 THEN cast(t."PREFETCHSIZE" AS VARCHAR(100))   		ELSE 'AUTOMATIC'	END AS "Prefetch size",	CASE 		WHEN t.BUFFERPOOLID <> 1 THEN b.BPNAME 	END AS "Buffer pool",	CASE 		WHEN t."OVERHEAD" <> -1 THEN cast(t."OVERHEAD" AS VARCHAR(100))	END AS "Overhead",	CASE 		WHEN t."TRANSFERRATE" <> -1 THEN cast(t."TRANSFERRATE" AS VARCHAR(100))	END AS "Transfer rate",	RTRIM(CASE t.DROP_RECOVERY		WHEN 'Y' THEN 'ON'		WHEN 'N' THEN 'OFF'	END) AS "Drop recovery".FROM SYSCAT.TABLESPACES AS t	LEFT JOIN SYSCAT."BUFFERPOOLS" AS b		ON b.BUFFERPOOLID = t.BUFFERPOOLIDWHERE t.OWNERTYPE <> 'S'ORDER BY t.TBSPACE
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=Table space

[schemaCmp.6.155]
enabled=1
caption=Storage groups
export=1
qType=1
oType=Database
query=SELECT 	RTRIM(SGNAME) AS "Name",	'Storage group' AS "Target type",	(		SELECT LISTAGG('''' || T.DB_STORAGE_PATH || '''', ', ')		FROM TABLE(ADMIN_GET_STORAGE_PATHS(SGNAME,-1)) AS T	) AS "Paths",	CASE 		WHEN "OVERHEAD" <> 0 THEN CAST("OVERHEAD" AS VARCHAR(30))	END AS "Overhead", 	CASE 		WHEN DEVICEREADRATE <> 0 THEN CAST(DEVICEREADRATE AS VARCHAR(30))	END AS "Device read rate",	CASE 		WHEN DATATAG > 0 THEN CAST(DATATAG AS CHAR(1))	END AS "Data tag"	FROM SYSCAT.STOGROUPSORDER BY SGNAME
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=0
loadedObj=Storage group

[schemaCmp.6.156]
enabled=1
caption=Storage group (CREATE)
export=1
qType=3
oType=Storage group
query=CREATE STOGROUP "$NAME$" ON $VALUE$$	OVERHEAD {OVERHEAD}$$	DEVICE READ RATE {DEVICE READ RATE}$$	DATA TAG {DATA TAG}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.157]
enabled=1
caption=Storage group (DROP)
export=1
qType=3
oType=Storage group
query=DROP STOGROUP "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.158]
enabled=1
caption=Column Name
export=1
qType=3
oType=Column
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=IsAuto=0
pathNameCnt=0
loadedObj=

[schemaCmp.6.159]
enabled=1
caption=Column Convert
export=1
qType=3
oType=Column
query=CAST("$NAME$" AS $TYPE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*Type & IsAuto=0
pathNameCnt=0
loadedObj=

[schemaCmp.6.160]
enabled=1
caption=Column Convert
export=1
qType=3
oType=Column
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=IsAuto=0
pathNameCnt=0
loadedObj=

[schemaCmp.6.161]
enabled=1
caption=Users
export=1
qType=1
oType=Database
query=SELECT	CASE 		WHEN GRANTEE <> 'PUBLIC' THEN 			CASE GRANTEETYPE 			WHEN 'G' THEN 'GROUP '			WHEN 'U' THEN 'USER '			END 		ELSE '' 	END || RTRIM(GRANTEE) AS "User name",	'User' AS "Target type",	SUBSTR(		CASE WHEN BINDADDAUTH = 'Y' THEN ', BINDADD' ELSE '' END ||		CASE WHEN CONNECTAUTH = 'Y' THEN ', CONNECT' ELSE '' END ||		CASE WHEN CREATETABAUTH = 'Y' THEN ', CREATETAB' ELSE '' END ||		CASE WHEN DBADMAUTH = 'Y' THEN ', DBADM' ELSE '' END ||		CASE WHEN EXTERNALROUTINEAUTH = 'Y' THEN ', CREATE_EXTERNAL_ROUTINE' ELSE '' END ||		CASE WHEN IMPLSCHEMAAUTH = 'Y' THEN ', IMPLICIT_SCHEMA' ELSE '' END ||		CASE WHEN LOADAUTH = 'Y' THEN ', LOAD' ELSE '' END ||		CASE WHEN NOFENCEAUTH = 'Y' THEN ', NOFENCE' ELSE '' END ||		CASE WHEN QUIESCECONNECTAUTH = 'Y' THEN ', QUIESCE_CONNECT' ELSE '' END ||		CASE WHEN SECURITYADMAUTH = 'Y' THEN ', SECADM' ELSE '' END ||		CASE WHEN SQLADMAUTH = 'Y' THEN ', SQLADM' ELSE '' END ||		CASE WHEN WLMADMAUTH = 'Y' THEN ', WLMADM' ELSE '' END ||		CASE WHEN EXPLAINAUTH = 'Y' THEN ', EXPLAIN' ELSE '' END ||		CASE WHEN DATAACCESSAUTH = 'Y' THEN ', DATAACCESS' ELSE '' END ||		CASE WHEN ACCESSCTRLAUTH = 'Y' THEN ', ACCESSCTRL' ELSE '' END	, 3) AS "DB Permissions" FROM SYSCAT.DBAUTHWHERE GRANTEETYPE IN ('G', 'U')ORDER BY GRANTEE
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=0
loadedObj=User

[schemaCmp.6.162]
enabled=1
caption=Users
export=1
qType=1
oType=Database
query=SELECT	CASE 		WHEN GRANTEE <> 'PUBLIC' THEN 			CASE GRANTEETYPE 			WHEN 'G' THEN 'GROUP '			WHEN 'U' THEN 'USER '			END 		ELSE '' 	END || RTRIM(GRANTEE) AS "User name",	'User' AS "Target type",	SUBSTR(		CASE WHEN BINDADDAUTH = 'Y' THEN ', BINDADD' ELSE '' END ||		CASE WHEN CONNECTAUTH = 'Y' THEN ', CONNECT' ELSE '' END ||		CASE WHEN CREATETABAUTH = 'Y' THEN ', CREATETAB' ELSE '' END ||		CASE WHEN DBADMAUTH = 'Y' THEN ', DBADM' ELSE '' END ||		CASE WHEN EXTERNALROUTINEAUTH = 'Y' THEN ', CREATE_EXTERNAL_ROUTINE' ELSE '' END ||		CASE WHEN IMPLSCHEMAAUTH = 'Y' THEN ', IMPLICIT_SCHEMA' ELSE '' END ||		CASE WHEN LOADAUTH = 'Y' THEN ', LOAD' ELSE '' END ||		CASE WHEN NOFENCEAUTH = 'Y' THEN ', NOFENCE' ELSE '' END ||		CASE WHEN QUIESCECONNECTAUTH = 'Y' THEN ', QUIESCE_CONNECT' ELSE '' END ||		CASE WHEN SECURITYADMAUTH = 'Y' THEN ', SECADM' ELSE '' END	, 3) AS "DB Permissions" FROM SYSCAT.DBAUTHWHERE GRANTEETYPE IN ('G', 'U')ORDER BY GRANTEE
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=User

[schemaCmp.6.163]
enabled=1
caption=Users
export=1
qType=1
oType=Database
query=SELECT	CASE 		WHEN GRANTEE <> 'PUBLIC' THEN 			CASE GRANTEETYPE 			WHEN 'G' THEN 'GROUP '			WHEN 'U' THEN 'USER '			END 		ELSE '' 	END || RTRIM(GRANTEE) AS "User name",	'User' AS "Target type",	SUBSTR(		CASE WHEN BINDADDAUTH = 'Y' THEN ', BINDADD' ELSE '' END ||		CASE WHEN CONNECTAUTH = 'Y' THEN ', CONNECT' ELSE '' END ||		CASE WHEN CREATETABAUTH = 'Y' THEN ', CREATETAB' ELSE '' END ||		CASE WHEN DBADMAUTH = 'Y' THEN ', DBADM' ELSE '' END ||		CASE WHEN EXTERNALROUTINEAUTH = 'Y' THEN ', CREATE_EXTERNAL_ROUTINE' ELSE '' END ||		CASE WHEN IMPLSCHEMAAUTH = 'Y' THEN ', IMPLICIT_SCHEMA' ELSE '' END ||		CASE WHEN LOADAUTH = 'Y' THEN ', LOAD' ELSE '' END ||		CASE WHEN NOFENCEAUTH = 'Y' THEN ', NOFENCE' ELSE '' END ||		CASE WHEN QUIESCECONNECTAUTH = 'Y' THEN ', QUIESCE_CONNECT' ELSE '' END	, 3) AS "DB Permissions" FROM SYSCAT.DBAUTHWHERE GRANTEETYPE IN ('G', 'U')ORDER BY GRANTEE
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=User

[schemaCmp.6.164]
enabled=1
caption=Role
export=1
qType=1
oType=Database
query=SELECT 	ROLENAME AS "Role name",	'Role' AS "Target type"FROM 	SYSCAT.ROLESORDER BY ROLENAME
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=0
loadedObj=Role

[schemaCmp.6.165]
enabled=1
caption=Permissions (tables)
export=1
qType=1
oType=
query=SELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'CONTROL TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN CONTROLAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'CONTROL' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE CONTROLAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'ALTER TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN ALTERAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'ALTER' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE ALTERAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'DELETE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN DELETEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'DELETE' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE DELETEAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'INDEX TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN INDEXAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'INDEX' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE INDEXAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'INSERT TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN INSERTAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'INSERT' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE INSERTAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'SELECT TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN SELECTAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'SELECT' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE SELECTAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_')) UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'REFERENCES TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	(		SELECT LISTAGG('"' || c.COLNAME || '"', ', ') WITHIN GROUP (ORDER BY c.COLNO)		FROM SYSCAT.COLAUTH AS c		WHERE t.TABSCHEMA = c.TABSCHEMA 			AND t.TABNAME = c.TABNAME			AND t.GRANTEE = c.GRANTEE			AND c.PRIVTYPE = 'R'	) AS "Columns",	CASE WHEN REFAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'REFERENCES' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTH AS tWHERE REFAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_')) UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'UPDATE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	(		SELECT LISTAGG('"' || c.COLNAME || '"', ', ') WITHIN GROUP (ORDER BY c.COLNO)		FROM SYSCAT.COLAUTH AS c		WHERE t.TABSCHEMA = c.TABSCHEMA 			AND t.TABNAME = c.TABNAME			AND t.GRANTEE = c.GRANTEE			AND c.PRIVTYPE = 'U'	) AS "Columns",	CASE WHEN UPDATEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'UPDATE' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTH AS tWHERE UPDATEAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589832
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.6.166]
enabled=1
caption=Permission (GRANT)
export=1
qType=3
oType=Permission
query=GRANT $TYPE$$({COLUMNS})$ ON$ {OTYPE}$ "$SCHEMA_NAME$"."$OBJECT_NAME$" TO ${GRANTEETYPE} $$GRANTEE$$ {GRANT OPTION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.167]
enabled=1
caption=Permission (REVOKE)
export=1
qType=3
oType=Permission
query=REVOKE $TYPE$$({COLUMNS})$ ON$ {OTYPE}$ "$SCHEMA_NAME$"."$OBJECT_NAME$" FROM ${GRANTEETYPE} $$GRANTEE$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.168]
enabled=1
caption=Permissions (tables)
export=1
qType=1
oType=
query=SELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'CONTROL TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN CONTROLAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'CONTROL' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE CONTROLAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'ALTER TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN ALTERAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'ALTER' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE ALTERAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'DELETE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN DELETEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'DELETE' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE DELETEAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'INDEX TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN INDEXAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'INDEX' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE INDEXAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'INSERT TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN INSERTAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'INSERT' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE INSERTAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'SELECT TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN SELECTAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'SELECT' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTHWHERE SELECTAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_')) UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'REFERENCES TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN REFAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'REFERENCES' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTH AS tWHERE REFAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_')) UNION ALLSELECT	RTRIM(TABSCHEMA) AS "Schema name",	RTRIM(TABNAME) AS "Table name",	'UPDATE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	'' AS "Columns",	CASE WHEN UPDATEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option", 	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'UPDATE' AS "TYPE__HIDDEN"FROM SYSCAT.TABAUTH AS tWHERE UPDATEAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(TABNAME) = COALESCE('$OBJECT_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.6.169]
enabled=1
caption=Permissions (schemas)
export=1
qType=1
oType=
query=SELECT	RTRIM(SCHEMANAME) AS "Schema name",	'ALTERIN TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN ALTERINAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'ALTERIN' AS "TYPE__HIDDEN",	'SCHEMA' AS "OTYPE__HIDDEN"FROM SYSCAT.SCHEMAAUTHWHERE ALTERINAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SCHEMANAME) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT	RTRIM(SCHEMANAME) AS "Schema name",	'CREATEIN TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN CREATEINAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'CREATEIN' AS "TYPE__HIDDEN",	'SCHEMA' AS "OTYPE__HIDDEN"FROM SYSCAT.SCHEMAAUTHWHERE CREATEINAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SCHEMANAME) = COALESCE('$SCHEMA_NAME$', '_'))UNION ALLSELECT	RTRIM(SCHEMANAME) AS "Schema name",	'DROPIN TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN DROPINAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'DROPIN' AS "TYPE__HIDDEN",	'SCHEMA' AS "OBTYPE__HIDDEN"FROM SYSCAT.SCHEMAAUTHWHERE DROPINAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SCHEMANAME) = COALESCE('$SCHEMA_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Permission

[schemaCmp.6.170]
enabled=1
caption=Permission (GRANT)
export=1
qType=3
oType=Permission
query=GRANT $TYPE$ ON SCHEMA "$SCHEMA_NAME$" TO ${GRANTEETYPE} $$GRANTEE$$ {GRANT OPTION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=OTYPE=SCHEMA
pathNameCnt=0
loadedObj=

[schemaCmp.6.171]
enabled=1
caption=Permission (REVOKE)
export=1
qType=3
oType=Permission
query=REVOKE $TYPE$ ON SCHEMA "$SCHEMA_NAME$" FROM ${GRANTEETYPE} $$GRANTEE$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=OTYPE=SCHEMA
pathNameCnt=0
loadedObj=

[schemaCmp.6.172]
enabled=1
caption=Permissions (roles)
export=1
qType=1
oType=
query=SELECT	RTRIM(ROLENAME) AS "Role name",	CASE GRANTEETYPE 	WHEN 'G' THEN 'GROUP '	WHEN 'R' THEN 'ROLE '	ELSE 'USER '	END || GRANTEE AS "Permission",	'Permission' AS "Target type",	CASE WHEN ADMIN = 'Y' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'ROLE' AS "OTYPE__HIDDEN"FROM SYSCAT.ROLEAUTH
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=1
loadedObj=Permission

[schemaCmp.6.173]
enabled=1
caption=Permission (GRANT)
export=1
qType=3
oType=Permission
query=GRANT ROLE "$SCHEMA_NAME$" TO ${GRANTEETYPE} $$GRANTEE$$ {GRANT OPTION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=OTYPE=ROLE
pathNameCnt=0
loadedObj=

[schemaCmp.6.174]
enabled=1
caption=Permission (REVOKE)
export=1
qType=3
oType=Permission
query=REVOKE ROLE "$SCHEMA_NAME$" FROM ${GRANTEETYPE} $$GRANTEE$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=OTYPE=ROLE
pathNameCnt=0
loadedObj=

[schemaCmp.6.175]
enabled=1
caption=Permissions (DB)
export=1
qType=3
oType=User
query=REVOKE $VALUE.TRG$ ON DATABASE FROM $NAME$$^$^$^GRANT $VALUE.SRC$ ON DATABASE TO $NAME$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.176]
enabled=1
caption=Permissions (variables)
export=1
qType=1
oType=
query=SELECT	RTRIM(VARSCHEMA) AS "Schema name",	RTRIM(VARNAME) AS "Variable name",	'READ TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN READAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'READ' AS "TYPE__HIDDEN",	'VARIABLE' AS "OTYPE__HIDDEN" FROM SYSCAT.VARIABLEAUTHWHERE READAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(VARSCHEMA) AS "Schema name",	RTRIM(VARNAME) AS "Variable name",	'WRITE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN WRITEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'WRITE' AS "TYPE__HIDDEN",	'VARIABLE' AS "OTYPE__HIDDEN" FROM SYSCAT.VARIABLEAUTHWHERE WRITEAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(VARNAME) = COALESCE('$OBJECT_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589829
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.6.177]
enabled=1
caption=Permissions (modules)
export=1
qType=1
oType=
query=SELECT	RTRIM(MODULESCHEMA) AS "Schema name",	RTRIM(MODULENAME) AS "Module name",	'EXECUTE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN EXECUTEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'EXECUTE' AS "TYPE__HIDDEN",	'MODULE' AS "OTYPE__HIDDEN" FROM SYSCAT.MODULEAUTHWHERE EXECUTEAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(MODULESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(MODULENAME) = COALESCE('$OBJECT_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589831
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.6.178]
enabled=1
caption=Permissions (sequences)
export=1
qType=1
oType=
query=SELECT	RTRIM(SEQSCHEMA) AS "Schema name",	RTRIM(SEQNAME) AS "Sequence name",	'ALTER TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN ALTERAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'ALTER' AS "TYPE__HIDDEN",	'SEQUENCE' AS "OTYPE__HIDDEN" FROM SYSCAT.SEQUENCEAUTHWHERE ALTERAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQNAME) = COALESCE('$OBJECT_NAME$', '_'))UNION ALLSELECT	RTRIM(SEQSCHEMA) AS "Schema name",	RTRIM(SEQNAME) AS "Sequence name",	'USAGE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN USAGEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'USAGE' AS "TYPE__HIDDEN",	'SEQUENCE' AS "OTYPE__HIDDEN" FROM SYSCAT.SEQUENCEAUTHWHERE USAGEAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(SEQNAME) = COALESCE('$OBJECT_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.6.179]
enabled=1
caption=Permissions (table spaces)
export=1
qType=1
oType=
query=SELECT	RTRIM(TBSPACE) AS "Table space",	'USE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN USEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'USE' AS "TYPE__HIDDEN",	'TBSPACE' AS "OTYPE__HIDDEN" FROM SYSCAT.TBSPACEAUTHWHERE USEAUTH <> 'N'
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=1
loadedObj=Permission

[schemaCmp.6.180]
enabled=1
caption=Permission (GRANT)
export=1
qType=3
oType=Permission
query=GRANT USE OF TABLESPACE "$SCHEMA_NAME$" TO ${GRANTEETYPE} $$GRANTEE$$ {GRANT OPTION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=OTYPE=TBSPACE
pathNameCnt=0
loadedObj=

[schemaCmp.6.181]
enabled=1
caption=Permission (REVOKE)
export=1
qType=3
oType=Permission
query=REVOKE USE OF TABLESPACE "$SCHEMA_NAME$" FROM ${GRANTEETYPE} $$GRANTEE$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=OTYPE=TBSPACE
pathNameCnt=0
loadedObj=

[schemaCmp.6.182]
enabled=1
caption=Permissions (routines)
export=1
qType=1
oType=
query=SELECT	RTRIM("SCHEMA") AS "Schema name",	RTRIM(r.ROUTINENAME) || 	'(' || (		SELECT LISTAGG(p.TYPENAME, ', ') WITHIN GROUP (ORDER BY p.ORDINAL) 		FROM SYSCAT.ROUTINEPARMS AS p		WHERE p.ROUTINESCHEMA = r.ROUTINESCHEMA			AND p.SPECIFICNAME = r.SPECIFICNAME 	) || ')' AS "Function name",	'EXECUTE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN a.EXECUTEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'EXECUTE' AS "TYPE__HIDDEN",	CASE a.ROUTINETYPE	WHEN 'F' THEN 'FUNCTION'	WHEN 'P' THEN 'PROCEDURE'	END AS "OTYPE__HIDDEN",	a.SPECIFICNAME AS "SPECIFICNAME__HIDDEN" FROM SYSCAT.ROUTINEAUTH AS a 	JOIN SYSCAT.ROUTINES AS r		ON a."SCHEMA" = r.ROUTINESCHEMA		AND a.SPECIFICNAME = r.SPECIFICNAMEWHERE EXECUTEAUTH <> 'N'	AND a.ROUTINETYPE IN ('F', 'P')	AND r.ROUTINEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM("SCHEMA") = COALESCE('$SCHEMA_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589832
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.6.183]
enabled=1
caption=Permission (GRANT)
export=1
qType=3
oType=Permission
query=GRANT $TYPE$ ON SPECIFIC $OTYPE$ "$SCHEMA_NAME$"."$SPECIFICNAME$" TO ${GRANTEETYPE} $$GRANTEE$$ {GRANT OPTION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=OTYPE=PROCEDURE | OTYPE=FUNCTION | OTYPE = METHOD
pathNameCnt=0
loadedObj=

[schemaCmp.6.184]
enabled=1
caption=Permission (REVOKE)
export=1
qType=3
oType=Permission
query=REVOKE $TYPE$ ON SPECIFIC $OTYPE$ "$SCHEMA_NAME$"."$SPECIFICNAME$" FROM ${GRANTEETYPE} $$GRANTEE$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=OTYPE=PROCEDURE | OTYPE=FUNCTION | OTYPE = METHOD
pathNameCnt=0
loadedObj=

[schemaCmp.6.185]
enabled=1
caption=Permissions (routines)
export=1
qType=1
oType=
query=SELECT	RTRIM("SCHEMA") AS "Schema name",	RTRIM(r.ROUTINENAME) AS "Function name",	'EXECUTE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN a.EXECUTEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'EXECUTE' AS "TYPE__HIDDEN",	CASE a.ROUTINETYPE	WHEN 'F' THEN 'FUNCTION'	WHEN 'P' THEN 'PROCEDURE'	END AS "OTYPE__HIDDEN",	a.SPECIFICNAME AS "SPECIFICNAME__HIDDEN" FROM SYSCAT.ROUTINEAUTH AS a 	JOIN SYSCAT.ROUTINES AS r		ON a."SCHEMA" = r.ROUTINESCHEMA		AND a.SPECIFICNAME = r.SPECIFICNAMEWHERE EXECUTEAUTH <> 'N'	AND a.ROUTINETYPE IN ('F', 'P')	AND r.ROUTINEMODULENAME IS NULL	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM("SCHEMA") = COALESCE('$SCHEMA_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.6.186]
enabled=1
caption=Permissions (methods)
export=1
qType=1
oType=
query=SELECT	RTRIM(a.TYPESCHEMA) AS "Schema name",	RTRIM(a.TYPENAME) AS "Type name",	RTRIM(r.ROUTINENAME) AS "Method name",	'EXECUTE TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN a.EXECUTEAUTH = 'G' THEN ' WITH GRANT OPTION' END AS "Grant option",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'EXECUTE' AS "TYPE__HIDDEN",	'METHOD' AS "OTYPE__HIDDEN",	a.SPECIFICNAME AS "SPECIFICNAME__HIDDEN"FROM SYSCAT.ROUTINEAUTH AS a 	JOIN SYSCAT.ROUTINES AS r		ON a."SCHEMA" = r.ROUTINESCHEMA		AND a.SPECIFICNAME = r.SPECIFICNAMEWHERE EXECUTEAUTH <> 'N'	AND r.ROUTINEMODULENAME IS NULL	AND r.ORIGIN IN ('Q','E')	AND a.ROUTINETYPE IN ('M')	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(a.TYPESCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(a.TYPENAME) = COALESCE('$OBJECT_NAME$', '_'))	
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Permission

[schemaCmp.6.187]
enabled=1
caption=Permissions (indexes)
export=1
qType=1
oType=
query=SELECT	RTRIM(i.TABSCHEMA) AS "Schema name",	RTRIM(i.TABNAME) AS "Table name",	RTRIM(i.INDNAME) AS "Index name",	'CONTROL TO ' || 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP '		WHEN 'R' THEN 'ROLE '		ELSE 'USER '		END || RTRIM(GRANTEE) AS "Permission",	'Permission' AS "Target type",	CASE WHEN GRANTEE <> 'PUBLIC' THEN 		CASE GRANTEETYPE 		WHEN 'G' THEN 'GROUP'		WHEN 'R' THEN 'ROLE'		WHEN 'U' THEN 'USER'		END	END AS "GRANTEETYPE__HIDDEN",  	CASE WHEN GRANTEE <> 'PUBLIC' THEN '"' || RTRIM(GRANTEE) || '"' ELSE 'PUBLIC' END AS "GRANTEE__HIDDEN",	'CONTROL' AS "TYPE__HIDDEN",	'INDEX' AS "OTYPE__HIDDEN",	RTRIM(i.INDNAME) AS "INDEXNAME__HIDDEN"FROM SYSCAT.INDEXAUTH AS a 	JOIN SYSCAT.INDEXES AS i		ON a.INDSCHEMA = i.INDSCHEMA		AND a.INDNAME = i.INDNAMEWHERE a.CONTROLAUTH <> 'N'	AND (COALESCE('$SCHEMA_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABSCHEMA) = COALESCE('$SCHEMA_NAME$', '_'))	AND (COALESCE('$OBJECT_NAME$', '_') = COALESCE('', '_') OR RTRIM(i.TABNAME) = COALESCE('$OBJECT_NAME$', '_'))
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Permission

[schemaCmp.6.188]
enabled=1
caption=Schemas
export=1
qType=1
oType=Database
query=SELECT	RTRIM(schemaname) AS "Schema name" , 	'Schema' AS "Target type",	RTRIM(OWNER) AS "Owner",	CASE 		WHEN SUBSTR(SCHEMANAME, 1, 3) = 'SYS' AND OWNERTYPE = 'S' THEN 1 ELSE 0 	END AS "IsSystemObject__HIDDEN" FROM	SYSCAT.SCHEMATAORDER BY schemaname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Schema

[schemaCmp.6.189]
enabled=1
caption=Permission (GRANT)
export=1
qType=3
oType=Permission
query=GRANT $TYPE$ ON $OTYPE$ "$SCHEMA_NAME$"."$INDEXNAME$" TO ${GRANTEETYPE} $$GRANTEE$$ {GRANT OPTION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=OTYPE = INDEX
pathNameCnt=0
loadedObj=

[schemaCmp.6.190]
enabled=1
caption=Permission (REVOKE)
export=1
qType=3
oType=Permission
query=REVOKE $TYPE$ ON $OTYPE$ "$SCHEMA_NAME$"."$INDEXNAME$" FROM ${GRANTEETYPE} $$GRANTEE$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=OTYPE=INDEX
pathNameCnt=0
loadedObj=

[schemaCmp.6.191]
enabled=1
caption=Index column
export=1
qType=3
oType=
query="$NAME$"$ {ORDER}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.192]
enabled=1
caption=Type - distinct (CREATE)
export=1
qType=3
oType=Type
query=CREATE DISTINCT TYPE "$SCHEMA_NAME$"."$NAME$" AS $|=DATA TYPE$$	{RULES}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524288
condition=METATYPE=T
pathNameCnt=0
loadedObj=

[schemaCmp.6.193]
enabled=1
caption=Element name
export=1
qType=3
oType=
query=$NAME$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.194]
enabled=1
caption=Event table entry
export=1
qType=3
oType=
query=${LOGICAL GROUP} $$FULL NAME$$ PCTDEACTIVATE {PCT DEACTIVATE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.195]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN=COLUMN DEFINITION$)$	{DATA ORGANIZATION}$$	DATA CAPTURE {DATA CAPTURE}$$	IN {TABLE SPACE}$$	INDEX IN {INDEX TABLE SPACE}$$	LONG IN {LONG TABLE SPACE}$$	DISTRIBUTE BY {DISTRIBUTION}$$({HASH COLUMNS})$$	{VALUE COMPRESSION}$$	{DROP RULE}$$	CCSID {ENCODING SCHEME}$$	SECURITY POLICY {SECURITY POLICY}$$^$^$^$\n| PRIMARY KEY, UNIQUE KEY, CHECK CONSTRAINT, FOREIGN KEY, INDEX, DML TRIGGER$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.196]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN=COLUMN DEFINITION$)$	{DATA ORGANIZATION}$$	DATA CAPTURE {DATA CAPTURE}$$	IN {TABLE SPACE}$$	INDEX IN {INDEX TABLE SPACE}$$	LONG IN {LONG TABLE SPACE}$$	{VALUE COMPRESSION}$$	{DROP RULE}$$^$^$^$\n| PRIMARY KEY, UNIQUE KEY, CHECK CONSTRAINT, FOREIGN KEY, INDEX, DML TRIGGER$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.197]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=RENAME TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" TO "TMP_$OBJECT_NAME$"$^$^$^CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN.TARGET=COLUMN DEFINITION$)$	{DATA ORGANIZATION}$$	DATA CAPTURE {DATA CAPTURE}$$	IN {TABLE SPACE}$$	INDEX IN {INDEX TABLE SPACE}$$	LONG IN {LONG TABLE SPACE}$$	{VALUE COMPRESSION}$$	{DROP RULE}$$^$^$^$\n|	PRIMARY KEY.TARGET=PRIMARY KEY (CREATE),	UNIQUE KEY.TARGET=UNIQUE KEY (CREATE),	CHECK CONSTRAINT.TARGET=CHECK CONSTRAINT (CREATE),	INDEX.TARGET=INDEX (CREATE),	DML TRIGGER.TARGET=CODE OBJECT (CREATE),	FOREIGN KEY.TARGET=FOREIGN KEY (CREATE)$INSERT INTO "$SCHEMA_NAME$"."$OBJECT_NAME$" ($,|COLUMN.TARGET_OLD=COLUMN NAME$)SELECT $,|COLUMN.TARGET_OLD=COLUMN CONVERT$ FROM "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$"$^$^$^DROP TABLE "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.198]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=RENAME TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" TO "TMP_$OBJECT_NAME$"$^$^$^CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN.TARGET=COLUMN DEFINITION$)$	{DATA ORGANIZATION}$$	DATA CAPTURE {DATA CAPTURE}$$	IN {TABLE SPACE}$$	INDEX IN {INDEX TABLE SPACE}$$	LONG IN {LONG TABLE SPACE}$$	DISTRIBUTE BY {DISTRIBUTION}$$({HASH COLUMNS})$$	{VALUE COMPRESSION}$$	{DROP RULE}$$	CCSID {ENCODING SCHEME}$$	SECURITY POLICY {SECURITY POLICY}$$^$^$^$\n|	PRIMARY KEY.TARGET=PRIMARY KEY (CREATE),	UNIQUE KEY.TARGET=UNIQUE KEY (CREATE),	CHECK CONSTRAINT.TARGET=CHECK CONSTRAINT (CREATE),	INDEX.TARGET=INDEX (CREATE),	DML TRIGGER.TARGET=CODE OBJECT (CREATE),	FOREIGN KEY.TARGET=FOREIGN KEY (CREATE)$INSERT INTO "$SCHEMA_NAME$"."$OBJECT_NAME$" ($,|COLUMN.TARGET_OLD=COLUMN NAME$)SELECT $,|COLUMN.TARGET_OLD=COLUMN CONVERT$ FROM "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$"$^$^$^DROP TABLE "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.199]
enabled=1
caption=Column Definition
export=1
qType=3
oType=
query="$NAME$" $|=DATA TYPE$$ {LOB LOGGED}$$ {LOB COMPACT}$$ {NULLABLE}$$ DEFAULT {DEFAULT}$$ {INLINE LENGTH}$$ {COMPRESS DEFAULTS} SYSTEM DEFAULT$$ {HIDDEN}$$ {GENERATED}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.200]
enabled=1
caption=Constraint props
export=1
qType=3
oType=
query=${ENFORCED} $${QUERY OPTIMIZATION} QUERY OPTIMIZATION$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.201]
enabled=1
caption=Constraint props
export=1
qType=3
oType=
query=${ENFORCED} $${TRUSTED} $${QUERY OPTIMIZATION} QUERY OPTIMIZATION$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.202]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE$ {UNIQUE}$ INDEX "$SCHEMA_NAME$"."$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$"	($COLUMNS$$, BUSINESS_TIME {WITHOUT OVERLAPS}$)$	INCLUDE ({INCLUDE COLUMNS})$$ {CLUSTER}$$	EXTEND USING {INDEX EXTENSION}$$({INDEX EXTENSION ARGS})$$	GENERATE KEY USING XMLPATTERN {XML PATTERN.STRING}$$	AS SQL {XML DATA TYPE}$$ {XML INVALID VALUES} INVALID VALUES$$	PCTFREE {PERCENTAGE OF FREE}$$ 	LEVEL2 PCTFREE {LEVEL 2 PERCENTAGE OF FREE}$$ 	MINPCTUSED {MINIMUM USED PERCENTAGE}$$	{REVERSE SCANS} REVERSE SCANS$$	PAGE SPLIT {PAGE SPLIT}$$	COLLECT {STATISTICS}$$	COMPRESS {COMPRESSION}$$	{NULL KEYS} NULL KEYS$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655361
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.203]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE$ {UNIQUE}$ INDEX "$SCHEMA_NAME$"."$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$"	($COLUMNS$)$	INCLUDE ({INCLUDE COLUMNS})$$ {CLUSTER}$$	EXTEND USING {INDEX EXTENSION}$$({INDEX EXTENSION ARGS})$$	GENERATE KEY USING XMLPATTERN {XML PATTERN.STRING}$$	AS SQL {XML DATA TYPE}$$ {XML INVALID VALUES} INVALID VALUES$$	PCTFREE {PERCENTAGE OF FREE}$$ 	LEVEL2 PCTFREE {LEVEL 2 PERCENTAGE OF FREE}$$ 	MINPCTUSED {MINIMUM USED PERCENTAGE}$$	{REVERSE SCANS} REVERSE SCANS$$	PAGE SPLIT {PAGE SPLIT}$$	COLLECT {STATISTICS}$$	COMPRESS {COMPRESSION}$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589832
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.204]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE$ {UNIQUE}$ INDEX "$SCHEMA_NAME$"."$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$"	($COLUMNS$)$	INCLUDE ({INCLUDE COLUMNS})$$ {CLUSTER}$$	EXTEND USING {INDEX EXTENSION}$$({INDEX EXTENSION ARGS})$$	GENERATE KEY USING XMLPATTERN {XML PATTERN.STRING}$$	AS SQL {XML DATA TYPE}$$ {XML INVALID VALUES} INVALID VALUES$$	PCTFREE {PERCENTAGE OF FREE}$$ 	LEVEL2 PCTFREE {LEVEL 2 PERCENTAGE OF FREE}$$ 	MINPCTUSED {MINIMUM USED PERCENTAGE}$$	{REVERSE SCANS} REVERSE SCANS$$	PAGE SPLIT {PAGE SPLIT}$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.205]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE$ {UNIQUE}$ INDEX "$SCHEMA_NAME$"."$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$"	($COLUMNS$)$	INCLUDE ({INCLUDE COLUMNS})$$ {CLUSTER}$$	EXTEND USING {INDEX EXTENSION}$$({INDEX EXTENSION ARGS})$$	PCTFREE {PERCENTAGE OF FREE}$$ 	MINPCTUSED {MINIMUM USED PERCENTAGE}$$	{REVERSE SCANS} REVERSE SCANS$$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.206]
enabled=1
caption=Type method declare
export=1
qType=3
oType=
query=	METHOD $NAME$($, |PARAMETER=METHOD PARAMETER$)	$|RETURN=METHOD PARAMETER$	LANGUAGE $LANGUAGE$$	PARAMETER STYLE {PARAMETER STYLE}$$	{DETERMINISTIC} DETERMINISTIC$$	{EXTERNAL ACTION} EXTERNAL ACTION$$	{DATA ACCESS}$$	{NULL CALL}$$	{SPECIAL REGISTERS} SPECIAL REGISTERS$$	{FENCED}$$	{SCRATCHPAD}$$	{PARALLEL} PARALLEL$$	{DB INFO}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.207]
enabled=1
caption=Buffer pool (CREATE)
export=1
qType=3
oType=Buffer pool
query=CREATE BUFFERPOOL "$NAME$" 	$DATABASE PARTITION GROUP {DATABASE PARTITION GROUP};ALL DBPARTITIONNUMS$	SIZE $BUFFER SIZE IN PAGES$	NUMBLOCKPAGES $Number of block pages$ BLOCKSIZE $PAGES IN BLOCK$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589825
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.208]
enabled=1
caption=Buffer pool (CREATE)
export=1
qType=3
oType=Buffer pool
query=CREATE BUFFERPOOL "$NAME$" 	$DATABASE PARTITION GROUP {DATABASE PARTITION GROUP};ALL DBPARTITIONNUMS$	SIZE $BUFFER SIZE IN PAGES$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.209]
enabled=1
caption=Data type
export=1
qType=3
oType=
query=$TYPE$$({|=DATA TYPE LENGTH})$$ {TYPE EXT}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.210]
enabled=1
caption=Data type length
export=1
qType=3
oType=
query=$TYPE LENGTH$$, {TYPE SCALE}$$ {TYPE UNITS}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655365
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.211]
enabled=1
caption=Data type length
export=1
qType=3
oType=
query=$TYPE LENGTH$$, {TYPE SCALE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.212]
enabled=1
caption=Unique Key (CREATE)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" 	ADD$|=CONSTRAINT NAME$ UNIQUE		($VALUE$)$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.213]
enabled=1
caption=Primary Key (CREATE)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" 	ADD$|=CONSTRAINT NAME$ PRIMARY KEY 		($VALUE$)$^$^$^
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.214]
enabled=1
caption=Table space (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE $VALUE$ TABLESPACE "$NAME$"$	IN DATABASE PARTITION GROUP {DB PARTITION GROUP}$$	PAGESIZE {PAGE SIZE}$$	EXTENTSIZE {EXTENT SIZE}$$	PREFETCHSIZE {PREFETCH SIZE}$$	BUFFERPOOL {BUFFER POOL}$$	OVERHEAD {OVERHEAD}$$	TRANSFERRATE {TRANSFER RATE}$$	DROPPED TABLE RECOVERY {DROP RECOVERY}$     
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=524288
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.215]
enabled=1
caption=Package (CREATE)
export=1
qType=3
oType=Package
query=$HEADER$$^$^$^$BODY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.6.216]
enabled=1
caption=Package (DROP)
export=1
qType=3
oType=Package
query=DROP PACKAGE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7]
enabled=1
caption=Oracle
export=1
count=303
dbType=0
useCache=0
objTypes=SchemaView	Editioning	View type	OID	Super view	SelectTable,Nested table,LOB,Partition,Flashback,Supplemental log	Is temporary	Table type	On commit	PctFree	PctUsed	IniTrans	Logging	Segment creation	Initial extent	Next extent	Min extents	Max extents	Pct increase	Free lists	Free list groups	Buffer pool	Flash cache	Cell flash cache	-Tablespace	Compression	Cluster	Parallel	Cache	Row depndencies	Row movement	Partition type	Subpartition type	Partition interval	-Partition tablespace	Partition keysMaterialized view,Materialized view log	Select	Table type	Build mode	Updatable 	Rewrite	Refresh	Use index	PctFree	PctUsed	IniTrans	Logging	Segment creation	Initial extent	Next extent	Min extents	Max extents	Pct increase	Free lists	Free list groups	Buffer pool	Flash cache	Cell flash cache	-Tablespace	Compression	Cluster	Parallel	Cache	Row depndencies	Row movementColumn	Type	Nullable	Default value	Calc expression	PositionPrimary key	Deferable	Defered	Status	Validated	RelyUnique key	Deferable	Defered	Status	Validated	RelyCheck constraint	Deferable	Defered	Status	Validated	RelyForeign key	Deferable	Defered	Status	Validated	Rely	Delete ruleIndex	Status	PctFree	PctUsed	IniTrans	Logging	Segment creation	Initial extent	Next extent	Min extents	Max extents	Pct increase	Free lists	Free list groups	Buffer pool	Flash cache	Cell flash cache	-Tablespace	Compression	Reversed	VisibilityDML Trigger	Event	Trigger type	Referencing names	Nested table column	Row trigger	Crossedition	When clause	Trigger ordering	Status	BodyDDL Trigger	Event	Trigger type	When clause	Trigger ordering	Status	BodySupplemental log|Materialized view log	Kind	Columns	AlwaysNested table	Column	Return as	PctFree	PctUsed	IniTrans	Logging	Segment creation	Initial extent	Next extent	Min extents	Max extents	Pct increase	Free lists	Free list groups	Buffer pool	Flash cache	Cell flash cache	-Tablespace	CompressionLOB	Store as	-Tablespace	Storage in row	Chunk	Pct Version	Free Pools	Retension	Deduplication	Compression	Cache	LoggingPartition,Partition LOB,Subpartition|Partition	PctFree	PctUsed	IniTrans	Logging	Segment creation	Initial extent	Next extent	Min extents	Max extents	Pct increase	Free lists	Free list groups	Buffer pool	Flash cache	Cell flash cache	-Tablespace	Compression	Partition LOB|LOB	Store as	-Tablespace	Storage in row	Chunk	Pct Version	Retension	Deduplication	Compression	Cache	Logging	Initial extent	Next extent	Min extents	Max extents	Pct increase	Free lists	Free list groups	Buffer pool	Flash cache	Cell flash cacheSubpartition|Partition	PctFree	PctUsed	IniTrans	Logging	Segment creation	Initial extent	Next extent	Min extents	Max extents	Pct increase	Free lists	Free list groups	Buffer pool	Flash cache	Cell flash cache	-Tablespace	Compression	Materialized view logSynonym	DB LinkSequence	Increment	Min value	Max value	-Start	Cycle	Cache	OrderCluster	Cluster type	Hash expression	PctFree	PctUsed	IniTrans	Initial extent	Next extent	Min extents	Max extents	Pct increase	Free lists	Free list groups	Buffer pool	Flash cache	Cell flash cache	-Tablespace	Key size	Cache	Parallel	Row dependenciesComment|PropertyOperator,Operator bindingOperator binding,Operator ancillary	Return type	Context	FunctionOperator ancillaryIndex type,Index operator,Index DML	Implementation type	Maintenance	PartitioningIndex operator|OperatorIndex DMLDimension,Dimension level,Dimension hierarchy,Dimension attributeDimension level	Skip	KeysDimension hierarchy,Dimension hierarchy child,Dimension hierarchy joinDimension hierarchy childDimension hierarchy join|Reference	Parent level	KeysDimension attribute	Level	ColumnsDirectory	PathDB Link	User	Connection stringFlashback archive|Flashback	Retention in days	Default	Tablespace	Quota in MbFlashbackCode Objects,Procedure,Function,Package,Type|FolderProcedureFunctionPackageTypeServer Scope,Edition,Context,Tablespace,Rollback segment|FolderEditionContextTablespace,Data file	File size	File name	Min extent	Block size	Logging	Force logging	Encryption	Compression	Initial extent	Next extent	Min extents	Max extents	Pct increase	Max size	Status	Extent management	Segment management	RetensionData file    Size    Status    Auto-extensible    Increment by     Max bytesRollback segment	Public	Tablespace	Initial extent	Next extent	Min extents	Max extents	Pct increaseSecurity,Role,User,User permission,Granted role,Permission|FolderRole	AuthenticationUser	Authentication	Default tablespace	Temporary tablespace	Profile	Editions	Expire	StateUser permission	Admin optionGranted role	Admin optionPermission	Grantable	HierarchyResource manager,Consumer group category,Consumer group,Resource plan|AssemblyConsumer group category	CommentConsumer group|Role	CPU method	Management method	Category	CommentResource plan,Resource plan directive|Assembly	CPU method	Management method	Active session pool	Parallel degree limit	Queueing	Sub plan	CommentResource plan directive|Rule	CPU P1	CPU P2	CPU P3	CPU P4	CPU P5	CPU P6	CPU P7	CPU P8	Active session pool	Queueing	Parallel degree limit	Switch group	Switch time	Switch estimate	Max est exec time	Undo pool	Max idle time	Max idle blocker time	Switch time in call	Mgmt P1	Mgmt P2	Mgmt P3	Mgmt P4	Mgmt P5	Mgmt P6	Mgmt P7	Mgmt P8	Switch IO megabytes	Switch IO reqs	Switch for call	Max utilization limit	Comment

[schemaCmp.7.1]
enabled=1
caption=Views
export=1
qType=1
oType=
query=SELECT		owner AS "Schema name",	view_name AS "View name",	'View' AS "Target type", 	text AS "Select__SQL",	CASE WHEN editioning_view = 'Y' THEN 'EDITIONING' END AS "Editioning",	CASE 		WHEN view_type IS NOT NULL THEN '"' || view_type_owner || '"."' || view_type || '"' 	END AS "View type__NAME_REFERENCE", 	oid_text AS "OID",	superview_name AS "Super view__NAME_REFERENCE",	CASE		WHEN superview_name IS NOT NULL THEN 'SUPER' 		WHEN view_type = 'XMLTYPE' THEN 'XMLTYPE'		WHEN view_type IS NOT NULL THEN 'OBJECT'		ELSE 'NORMAL'	END AS "ViewKind__HIDDEN" FROM ALL_VIEWS WHERE 	'$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$'ORDER BY view_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=View

[schemaCmp.7.2]
enabled=1
caption=View (CREATE)
export=1
qType=3
oType=View
query=CREATE ${EDITIONING} $VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$" $|=VIEW DEF$ AS$SELECT$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.3]
enabled=1
caption=View def
export=1
qType=3
oType=
query=(	$,\n\t|COLUMN=NAME,PRIMARY KEY=PRIMARY KEY INPLACE,UNIQUE KEY=UNIQUE KEY INPLACE,CHECK CONSTRAINT=CHECK CONSTRAINT INPLACE,FOREIGN KEY=FOREIGN KEY INPLACE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=VIEWKIND=NORMAL
pathNameCnt=0
loadedObj=

[schemaCmp.7.4]
enabled=1
caption=View def
export=1
qType=3
oType=
query=OF $VIEW TYPE$	WITH OBJECT IDENTIFIER ($OID$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=VIEWKIND=OBJECT
pathNameCnt=0
loadedObj=

[schemaCmp.7.5]
enabled=1
caption=View def
export=1
qType=3
oType=
query=OF $VIEW TYPE$	UNDER $SUPER VIEW$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=VIEWKIND=SUPER
pathNameCnt=0
loadedObj=

[schemaCmp.7.6]
enabled=1
caption=Views
export=1
qType=1
oType=
query=SELECT		owner AS "Schema name",	view_name AS "View name",	'View' AS "Target type", 	text AS "Select__SQL",	CASE 		WHEN view_type IS NOT NULL THEN '"' || view_type_owner || '"."' || view_type || '"' 	END AS "View type__NAME_REFERENCE", 	oid_text AS "OID",	superview_name AS "Super view__NAME_REFERENCE",	CASE		WHEN superview_name IS NOT NULL THEN 'SUPER' 		WHEN view_type = 'XMLTYPE' THEN 'XMLTYPE'		WHEN view_type IS NOT NULL THEN 'OBJECT'		ELSE 'NORMAL'	END AS "ViewKind__HIDDEN" FROM ALL_VIEWS WHERE 	'$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$'ORDER BY view_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=View

[schemaCmp.7.7]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name", 	table_name AS "Table name",	'Table' AS "Target type",	DECODE("TEMPORARY", 'Y', 'TEMPORARY') AS "Is temporary", 	CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type = 'XMLTYPE' THEN 'XMLTYPE'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	CASE 		WHEN table_type IS NOT NULL THEN '"' || table_type_owner || '"."' || table_type || '"'	END AS "Table type",	DECODE(duration, 'SYS$^SESSION', 'PRESERVE', 'SYS$^TRANSACTION', 'DROP') AS "On commit",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	DECODE(segment_created, 'YES', 'IMMEDIATE', 'NO', 'DEFERRED') AS  "Segment creation",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	flash_cache AS "Flash cache",	cell_flash_cache AS "Cell flash cache",	tablespace_name AS "Tablespace",	DECODE(compression, 'ENABLED', 'COMPRESS ' || DECODE(compress_for, 'BASIC', '', 'FOR ') || compress_for) AS "Compression",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE",	DECODE(object_id_type, 'SYSTEM GENERATED', 'OIDINDEX') AS "OID Index",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM("CACHE"), 'Y', 'CACHE') AS "Cache",	DECODE(dependencies, 'ENABLED', 'ROWDEPNDENCIES') AS "Row depndencies", 	DECODE(row_movement, 'ENABLED', 'ENABLE') AS "Row movement"FROM	all_all_tablesWHERE	"NESTED" = 'NO'	AND NOT (owner, table_name) IN (SELECT owner, mview_name FROM all_mviews)	AND NOT (owner, table_name) IN (SELECT mv.log_owner, mv.log_table FROM all_mview_logs mv)	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')ORDER BY table_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.7.8]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name", 	table_name AS "Table name",	'Table' AS "Target type",	DECODE("TEMPORARY", 'Y', 'TEMPORARY') AS "Is temporary", 	CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type = 'XMLTYPE' THEN 'XMLTYPE'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	CASE 		WHEN table_type IS NOT NULL THEN '"' || table_type_owner || '"."' || table_type || '"'	END AS "Table type",	DECODE(duration, 'SYS$^SESSION', 'PRESERVE', 'SYS$^TRANSACTION', 'DROP') AS "On commit",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(compression, 'ENABLED', 'COMPRESS') AS "Compression",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE",	DECODE(object_id_type, 'SYSTEM GENERATED', 'OIDINDEX') AS "OID Index",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM("CACHE"), 'Y', 'CACHE') AS "Cache",	DECODE(dependencies, 'ENABLED', 'ROWDEPNDENCIES') AS "Row depndencies", 	DECODE(row_movement, 'ENABLED', 'ENABLE') AS "Row movement"FROM	all_all_tablesWHERE	"NESTED" = 'NO'	AND NOT (owner, table_name) IN (SELECT owner, mview_name FROM all_mviews)	AND NOT (owner, table_name) IN (SELECT mv.log_owner, mv.log_table FROM all_mview_logs mv)	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')ORDER BY table_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.7.9]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name", 	table_name AS "Table name",	'Table' AS "Target type",	DECODE("TEMPORARY", 'Y', 'TEMPORARY') AS "Is temporary", 	CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type = 'XMLTYPE' THEN 'XMLTYPE'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	CASE 		WHEN table_type IS NOT NULL THEN '"' || table_type_owner || '"."' || table_type || '"'	END AS "Table type",	DECODE(duration, 'SYS$^SESSION', 'PRESERVE', 'SYS$^TRANSACTION', 'DROP') AS "On commit",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE",	DECODE(object_id_type, 'SYSTEM GENERATED', 'OIDINDEX') AS "OID Index",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM("CACHE"), 'Y', 'CACHE') AS "Cache",	DECODE(dependencies, 'ENABLED', 'ROWDEPNDENCIES') AS "Row depndencies", 	DECODE(row_movement, 'ENABLED', 'ENABLE') AS "Row movement"FROM	all_all_tablesWHERE	"NESTED" = 'NO'	AND NOT (owner, table_name) IN (SELECT owner, mview_name FROM all_mviews)	AND NOT (owner, table_name) IN (SELECT mv.log_owner, mv.log_table FROM all_mview_logs mv)	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')ORDER BY table_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.7.10]
enabled=1
caption=Materialized views
export=1
qType=1
oType=
query=SELECT 	mv.owner AS "Schema name", 	mv.mview_name AS "MView name",	'Materialized View' AS "Target type",	mv."QUERY" AS "Select__SQL",	CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	CASE 		WHEN table_type IS NOT NULL THEN '"' || table_type_owner || '"."' || table_type || '"'	END AS "Table type",	mv.build_mode AS "Build mode",	DECODE(mv."UPDATABLE", 'Y', 'FOR UPDATE') AS "Updatable", 	DECODE(mv.rewrite_enabled, 'Y', 'ENABLE', 'N', 'DISABLE') AS "Rewrite",	DECODE(mv.refresh_mode,		'DEMAND', 'REFRESH ON DEMAND',		'COMMIT', 'REFRESH ON COMMIT',		'NEVER', 'NEVER REFRESH'	) || DECODE(mv.refresh_method, 'NEVER', '', ' ' || mv.refresh_method) AS "Refresh",	DECODE(mv.use_no_index, 'Y', 'USE NO INDEX', 'N', 'USE INDEX') AS "Use index",		PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	DECODE(segment_created, 'YES', 'IMMEDIATE', 'NO', 'DEFERRED') AS  "Segment creation",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	flash_cache AS "Flash cache",	cell_flash_cache AS "Cell flash cache",	tablespace_name AS "Tablespace",	DECODE(compression, 'ENABLED', 'COMPRESS ' || DECODE(compress_for, 'BASIC', '', 'FOR ') || compress_for) AS "Compression",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM("CACHE"), 'Y', 'CACHE') AS "Cache",	DECODE(dependencies, 'ENABLED', 'ROWDEPNDENCIES') AS "Row depndencies", 	DECODE(row_movement, 'ENABLED', 'ENABLE') AS "Row movement"FROM all_mviews mv	LEFT JOIN all_all_tables t		ON t.owner = mv.owner		AND t.table_name = mv.mview_nameWHERE	('$SCHEMA_NAME$' IS NULL OR mv.owner = '$SCHEMA_NAME$')ORDER BY mv.mview_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Materialized View

[schemaCmp.7.11]
enabled=1
caption=Materialized views
export=1
qType=1
oType=
query=SELECT 	mv.owner AS "Schema name", 	mv.mview_name AS "MView name",	'Materialized View' AS "Target type",	mv."QUERY" AS "Select__SQL",	CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	CASE 		WHEN table_type IS NOT NULL THEN '"' || table_type_owner || '"."' || table_type || '"'	END AS "Table type",	mv.build_mode AS "Build mode",	DECODE(mv."UPDATABLE", 'Y', 'FOR UPDATE') AS "Updatable", 	DECODE(mv.rewrite_enabled, 'Y', 'ENABLE', 'N', 'DISABLE') AS "Rewrite",	DECODE(mv.refresh_mode,		'DEMAND', 'REFRESH ON DEMAND',		'COMMIT', 'REFRESH ON COMMIT',		'NEVER', 'NEVER REFRESH'	) || DECODE(mv.refresh_method, 'NEVER', '', ' ' || mv.refresh_method) AS "Refresh",	DECODE(mv.use_no_index, 'Y', 'USE NO INDEX', 'N', 'USE INDEX') AS "Use index",		PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(compression, 'ENABLED', 'COMPRESS') AS "Compression",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM("CACHE"), 'Y', 'CACHE') AS "Cache",	DECODE(dependencies, 'ENABLED', 'ROWDEPNDENCIES') AS "Row depndencies", 	DECODE(row_movement, 'ENABLED', 'ENABLE') AS "Row movement"FROM all_mviews mv	LEFT JOIN all_all_tables t		ON t.owner = mv.owner		AND t.table_name = mv.mview_nameWHERE	('$SCHEMA_NAME$' IS NULL OR mv.owner = '$SCHEMA_NAME$')ORDER BY mv.mview_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Materialized View

[schemaCmp.7.12]
enabled=1
caption=Materialized views
export=1
qType=1
oType=
query=SELECT 	mv.owner AS "Schema name", 	mv.mview_name AS "MView name",	'Materialized View' AS "Target type",	mv."QUERY" AS "Select__SQL",	CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	CASE 		WHEN table_type IS NOT NULL THEN '"' || table_type_owner || '"."' || table_type || '"'	END AS "Table type",	mv.build_mode AS "Build mode",	DECODE(mv."UPDATABLE", 'Y', 'FOR UPDATE') AS "Updatable", 	DECODE(mv.rewrite_enabled, 'Y', 'ENABLE', 'N', 'DISABLE') AS "Rewrite",	DECODE(mv.refresh_mode,		'DEMAND', 'REFRESH ON DEMAND',		'COMMIT', 'REFRESH ON COMMIT',		'NEVER', 'NEVER REFRESH'	) || DECODE(mv.refresh_method, 'NEVER', '', ' ' || mv.refresh_method) AS "Refresh",	DECODE(mv.use_no_index, 'Y', 'USE NO INDEX', 'N', 'USE INDEX') AS "Use index",		PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM("CACHE"), 'Y', 'CACHE') AS "Cache",	DECODE(dependencies, 'ENABLED', 'ROWDEPNDENCIES') AS "Row depndencies", 	DECODE(row_movement, 'ENABLED', 'ENABLE') AS "Row movement"FROM all_mviews mv	LEFT JOIN all_all_tables t		ON t.owner = mv.owner		AND t.table_name = mv.mview_nameWHERE	('$SCHEMA_NAME$' IS NULL OR mv.owner = '$SCHEMA_NAME$')ORDER BY mv.mview_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Materialized View

[schemaCmp.7.13]
enabled=1
caption=Clusters
export=1
qType=1
oType=
query=SELECT 	c.owner AS "Schema name",	c.cluster_name AS "Cluster name",	'Cluster' AS "Target type",	CASE cluster_type		WHEN 'INDEX' THEN 'INDEX'		WHEN 'HASH' THEN DECODE(TRIM(single_table), 'Y', 'SINGLE TABLE ', '') ||			'HASHKEYS ' || "HASHKEYS" 	END AS "Cluster type",	he.hash_expression AS "Hash expression",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	flash_cache AS "Flash cache",	cell_flash_cache AS "Cell flash cache",	tablespace_name AS "Tablespace",	key_size AS "Key size",	DECODE(TRIM("CACHE"), 'Y', 'CACHE', 'N', 'NOCACHE') AS "Cache",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM(dependencies), 'ENABLED', 'ROWDEPENDENCIES', 'DISABLED', 'NOROWDEPENDENCIES') AS "Row dependencies"FROM all_clusters c	LEFT JOIN all_cluster_hash_expressions he		ON he.owner = c.owner 		AND he.cluster_name = c.cluster_nameWHERE 	'$SCHEMA_NAME$' IS NULL OR c.owner = '$SCHEMA_NAME$'ORDER BY c.cluster_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Cluster

[schemaCmp.7.14]
enabled=1
caption=Clusters
export=1
qType=1
oType=
query=SELECT 	c.owner AS "Schema name",	c.cluster_name AS "Cluster name",	'Cluster' AS "Target type",	CASE cluster_type		WHEN 'INDEX' THEN 'INDEX'		WHEN 'HASH' THEN DECODE(TRIM(single_table), 'Y', 'SINGLE TABLE ', '') ||			'HASHKEYS ' || "HASHKEYS" 	END AS "Cluster type",	he.hash_expression AS "Hash expression",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	key_size AS "Key size",	DECODE(TRIM("CACHE"), 'Y', 'CACHE', 'N', 'NOCACHE') AS "Cache",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM(dependencies), 'ENABLED', 'ROWDEPENDENCIES', 'DISABLED', 'NOROWDEPENDENCIES') AS "Row dependencies"FROM all_clusters c	LEFT JOIN all_cluster_hash_expressions he		ON he.owner = c.owner 		AND he.cluster_name = c.cluster_nameWHERE 	'$SCHEMA_NAME$' IS NULL OR c.owner = '$SCHEMA_NAME$'ORDER BY c.cluster_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Cluster

[schemaCmp.7.15]
enabled=1
caption=Table def
export=1
qType=3
oType=
query=OF $TABLE TYPE$$(	{|=CONSTRAINTS INPLACE})$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=TABLEKIND=OBJECT
pathNameCnt=0
loadedObj=

[schemaCmp.7.16]
enabled=1
caption=Table def
export=1
qType=3
oType=
query=(	$,\n\t|COLUMN=COLUMN DEF,SUPPLEMENTAL LOG=SUPPLEMENTAL LOG$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.17]
enabled=1
caption=Column def
export=1
qType=3
oType=
query=$NAME$ $TYPE$ $NULLABLE$$ DEFAULT {DEFAULT VALUE}$$ GENERATED ALWAYS AS ({CALC EXPRESSION})$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.18]
enabled=1
caption=Partition props
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name", 	table_name AS "Table name", 	partitioning_type AS "Partition type",	DECODE(subpartitioning_type, 'NONE', '', subpartitioning_type) AS "Subpartition type",	"INTERVAL" AS "Partition interval",	DECODE("INTERVAL", NULL, NULL, def_tablespace_name) AS "Partition tablespace"FROM all_part_tablesWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY 1, 2
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.7.19]
enabled=1
caption=Partition props
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name", 	table_name AS "Table name", 	partitioning_type AS "Partition type",	DECODE(subpartitioning_type, 'NONE', '', subpartitioning_type) AS "Subpartition type"FROM all_part_tablesWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY 1, 2	
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.7.20]
enabled=1
caption=Partition keys
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name", 	"NAME" AS "Table name", 	column_name AS "Partition keys__AGG"FROM all_part_key_columnsWHERE object_type = 'TABLE'	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR "NAME" = '$OBJECT_NAME$')ORDER BY column_position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.7.21]
enabled=1
caption=Subpartition keys
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name", 	"NAME" AS "Table name", 	column_name AS "Subpartition keys__AGG"FROM all_subpart_key_columnsWHERE object_type = 'TABLE'	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR "NAME" = '$OBJECT_NAME$')ORDER BY column_position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.7.22]
enabled=1
caption=Materialized view logs
export=1
qType=1
oType=
query=SELECT	log_owner AS "Schema name",	"MASTER" AS "Table name",	'Log view' AS "Name",	'Materialized view log' AS "Target type",	SUBSTR(		DECODE(l.rowids, 'YES', ', ROWID', '') ||		DECODE(l.primary_key, 'YES', ', PRIMARY KEY', '') ||		DECODE(l.object_id, 'YES', ', OBJECT ID', '') ||		DECODE(l.commit_scn_based, 'YES', ', COMMIT SCN', '') ||		DECODE(l."SEQUENCE", 'YES', ', SEQUENCE', '')	,3) AS "Options",	DECODE(l.include_new_values, 'YES', 'INCLUDING', 'NO', 'EXCLUDING') AS "New values",	DECODE(l.purge_asynchronous, 'YES', 'ASYNCHRONOUS', 'SYNCHRONOUS') AS "Purge asynchronous",	DECODE(l.purge_deferred, 'YES', 'DEFERRED', 'IMMEDIATE') AS "Purge deferred",	l.purge_start AS "Purge start",	l.purge_interval AS "Purge interval",		PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	DECODE(segment_created, 'YES', 'IMMEDIATE', 'NO', 'DEFERRED') AS  "Segment creation",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	flash_cache AS "Flash cache",	cell_flash_cache AS "Cell flash cache",	tablespace_name AS "Tablespace",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM("CACHE"), 'Y', 'CACHE') AS "Cache",	DECODE(dependencies, 'ENABLED', 'ROWDEPNDENCIES') AS "Row depndencies", 	DECODE(row_movement, 'ENABLED', 'ENABLE') AS "Row movement"FROM all_mview_logs l	LEFT JOIN all_all_tables t 		ON t.owner = l.log_owner		AND t.table_name = l.log_table WHERE	('$SCHEMA_NAME$' IS NULL OR log_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR "MASTER" = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=2
loadedObj=Materialized view log

[schemaCmp.7.23]
enabled=1
caption=Materialized view logs
export=1
qType=1
oType=
query=SELECT	log_owner AS "Schema name",	"MASTER" AS "Table name",	'Log view' AS "Name",	'Materialized view log' AS "Target type",	SUBSTR(		DECODE(l.rowids, 'YES', ', ROWID', '') ||		DECODE(l.primary_key, 'YES', ', PRIMARY KEY', '') ||		DECODE(l.object_id, 'YES', ', OBJECT ID', '') ||		DECODE(l."SEQUENCE", 'YES', ', SEQUENCE', '')	,3) AS "Options",	DECODE(l.include_new_values, 'YES', 'INCLUDING', 'NO', 'EXCLUDING') AS "New values",		PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(TRIM(degree), '1', 'NOPARALLEL', 'PARALLEL ' || TRIM(degree)) AS "Parallel",	DECODE(TRIM("CACHE"), 'Y', 'CACHE') AS "Cache",	DECODE(dependencies, 'ENABLED', 'ROWDEPNDENCIES') AS "Row depndencies", 	DECODE(row_movement, 'ENABLED', 'ENABLE') AS "Row movement"FROM all_mview_logs l	LEFT JOIN all_all_tables t 		ON t.owner = l.log_owner		AND t.table_name = l.log_tableWHERE	('$SCHEMA_NAME$' IS NULL OR log_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR "MASTER" = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Materialized view log

[schemaCmp.7.24]
enabled=1
caption=Materialized view log columns
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name",	"NAME" AS "Table name",	'Log view' AS "Lag table name",	column_name AS "Columns__AGG"FROM dba_mview_log_filter_colsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR "NAME" = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Materialized view log

[schemaCmp.7.25]
enabled=1
caption=XML Table attributes
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name",	table_name AS "Table name",	"XMLSCHEMA" AS "XML Schema",	element_name AS "Element name",	DECODE(storage_type,		'OBJECT-RELATIONAL', 'OBJECT RELATIONAL',		'BINARY', 'BINARY XML',		'CLOB', 'CLOB'	) AS "Store",	DECODE(anyschema, 'YES', 'ALLOW', 'NO', 'DISALLOW') AS "Any schema",	DECODE(nonschema, 'YES', 'ALLOW', 'NO', 'DISALLOW') AS "No schema"FROM all_xml_tablesWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.7.26]
enabled=1
caption=XML Table attributes
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name",	table_name AS "Table name",	"XMLSCHEMA" AS "XML Schema",	element_name AS "Element name",	DECODE(storage_type,		'OBJECT-RELATIONAL', 'OBJECT RELATIONAL',		'BINARY', 'BINARY XML',		'CLOB', 'CLOB'	) AS "Store"FROM all_xml_tablesWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Table

[schemaCmp.7.27]
enabled=1
caption=Nested Tables
export=1
qType=1
oType=
query=SELECT	n.owner AS "Schema name",	n.parent_table_name AS "Table name",	n.parent_table_column AS "Column",	'Nested table' AS "Target type",	n.table_name AS "Nested table",	TRIM(n.return_type) AS "Return as",		CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	DECODE(segment_created, 'YES', 'IMMEDIATE', 'NO', 'DEFERRED') AS  "Segment creation",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	flash_cache AS "Flash cache",	cell_flash_cache AS "Cell flash cache",	tablespace_name AS "Tablespace",	DECODE(compression, 'ENABLED', 'COMPRESS ' || DECODE(compress_for, 'BASIC', '', 'FOR ') || compress_for) AS "Compression",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE"FROM all_nested_tables n	JOIN all_all_tables t		ON n.owner = t.owner		AND n.table_name = t.table_name WHERE	('$SCHEMA_NAME$' IS NULL OR n.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR n.parent_table_name = '$OBJECT_NAME$')ORDER BY n.parent_table_column
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=2
loadedObj=Nested table

[schemaCmp.7.28]
enabled=1
caption=Nested Tables
export=1
qType=1
oType=
query=SELECT	n.owner AS "Schema name",	n.parent_table_name AS "Table name",	n.parent_table_column AS "Column",	'Nested table' AS "Target type",	n.table_name AS "Nested table",	TRIM(n.return_type) AS "Return as",		CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(compression, 'ENABLED', 'COMPRESS') AS "Compression",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE"FROM all_nested_tables n	JOIN all_all_tables t		ON n.owner = t.owner		AND n.table_name = t.table_nameWHERE	('$SCHEMA_NAME$' IS NULL OR n.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR n.parent_table_name = '$OBJECT_NAME$')ORDER BY n.parent_table_column
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Nested table

[schemaCmp.7.29]
enabled=1
caption=Nested Tables
export=1
qType=1
oType=
query=SELECT	n.owner AS "Schema name",	n.parent_table_name AS "Table name",	n.parent_table_column AS "Column",	'Nested table' AS "Target type",	n.table_name AS "Nested table",	TRIM(n.return_type) AS "Return as",		CASE 		WHEN cluster_name IS NOT NULL THEN 'CLUSTER'		WHEN table_type IS NOT NULL THEN 'OBJECT'		ELSE 'RELATIONAL'	END AS "TableKind__HIDDEN",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(cluster_name, NULL, '', '"' || cluster_owner || '"."' || cluster_name || '"') AS "Cluster__NAME_REFERENCE"FROM all_nested_tables n	JOIN all_all_tables t		ON n.owner = t.owner		AND n.table_name = t.table_nameWHERE	('$SCHEMA_NAME$' IS NULL OR n.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR n.parent_table_name = '$OBJECT_NAME$')ORDER BY n.parent_table_column
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Nested table

[schemaCmp.7.30]
enabled=1
caption=LOBs
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	column_name AS "Column",	'LOB' AS "Target type",	DECODE(securefile, 'YES', 'SECUREFILE', 'NO', 'BASICFILE') AS "Store as",	tablespace_name AS "Tablespace",	DECODE(in_row, 'YES', 'ENABLE', 'NO', 'DISABLE') AS "Storage in row",	"CHUNK" AS "Chunk",	"PCTVERSION" AS "Pct Version",	"FREEPOOLS" AS "Free Pools",	"RETENTION" AS "Retension",	DECODE(deduplication, 'NO', 'KEEP_DUPLICATES', 'LOB', 'DEDUPLICATE') AS "Deduplication",	DECODE(compression, 'NONE', '', 'NO', 'NOCOMPRESS','COMPRESS ' || compression) AS "Compression",	DECODE("CACHE", 'YES', 'CACHE', 'NO', 'NOCACHE', 'CACHEREADS', 'CACHE READS') AS "Cache",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging"FROM	all_lobsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY column_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=2
loadedObj=LOB

[schemaCmp.7.31]
enabled=1
caption=LOBs
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	column_name AS "Column",	'LOB' AS "Target type",	tablespace_name AS "Tablespace",	DECODE(in_row, 'YES', 'ENABLE', 'NO', 'DISABLE') AS "Storage in row",	"CHUNK" AS "Chunk",	"PCTVERSION" AS "Pct Version",	"FREEPOOLS" AS "Free Pools",	"RETENTION" AS "Retension",	DECODE("CACHE", 'YES', 'CACHE', 'NO', 'NOCACHE', 'CACHEREADS', 'CACHE READS') AS "Cache",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging"FROM	all_lobsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY column_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=LOB

[schemaCmp.7.32]
enabled=1
caption=LOBs
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	column_name AS "Column",	'LOB' AS "Target type",	DECODE(in_row, 'YES', 'ENABLE', 'NO', 'DISABLE') AS "Storage in row",	"CHUNK" AS "Chunk",	"PCTVERSION" AS "Pct Version",	"FREEPOOLS" AS "Free Pools",	"RETENTION" AS "Retension",	DECODE("CACHE", 'YES', 'CACHE', 'NO', 'NOCACHE', 'CACHEREADS', 'CACHE READS') AS "Cache",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging"FROM	all_lobsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY column_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=LOB

[schemaCmp.7.33]
enabled=1
caption=VArrays
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name",	parent_table_name AS "Table name",	parent_table_column AS "Nested table name",	'YES' AS "VArray"FROM all_varraysWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR parent_table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=LOB,Nested table

[schemaCmp.7.34]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	column_name AS "Column name",	'Column' AS "Target type",	data_type	|| decode(data_type,		'NUMBER', decode(nvl(data_precision,0),0,'','('||data_precision||decode(nvl(data_scale,0),0,'',','||data_scale)||')'),		decode(decode(data_type,		'CHAR','(','NCHAR','(','VARCHAR','(','NVARCHAR','(','VARCHAR2','(','NVARCHAR2','(','RAW','(',''), 		'(', decode(nvl(data_length,0),0,'','('||nvl(decode(char_length, 0, NULL, char_length),data_length)||')'), '')	) AS "Type", 	DECODE(nullable, 'N', 'NOT NULL', 'NULL')   AS "Nullable", 	CASE WHEN virtual_column = 'NO' THEN data_default END AS "Default value__SQL",	CASE WHEN virtual_column = 'YES' THEN data_default END AS "Calc expression__SQL",	DECODE(virtual_column, 'YES', 1, 'NO', 0)   AS "IsAuto",	column_id AS "Position" FROM	all_tab_colsWHERE	hidden_column = 'NO'	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY	column_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.7.35]
enabled=1
caption=Name
export=1
qType=3
oType=
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.36]
enabled=1
caption=Storage
export=1
qType=3
oType=
query=$STORAGE({|=STORAGE INT})$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.37]
enabled=1
caption=Cluster columns
export=1
qType=0
oType=
query=SELECT 	c.owner AS "Schema name", 	c.table_name AS "Table name",	'"' || c.column_name || '"' AS "Cluster columns__AGG"FROM all_tab_columns c	JOIN all_clusters o		ON o.owner = c.owner		AND o.cluster_name = c."TABLE_NAME"WHERE	('$SCHEMA_NAME$' IS NULL OR c.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR c.table_name = '$OBJECT_NAME$')ORDER BY c.column_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Cluster

[schemaCmp.7.38]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT 	ai.table_owner AS "Schema name",	ai.table_name AS "Table name",	ai.index_name AS "Index name",	'Index' AS "Target type",	CASE 		WHEN ai.index_type IN ('BITMAP', 'FUNCTION-BASED BITMAP') THEN 'BITMAP'		WHEN ai.uniqueness = 'UNIQUE' THEN 'UNIQUE'	END AS "Index type",	DECODE(ai."GENERATED", 'N', 0, 'Y', 1) AS "IsSystem", 	DECODE(ai.status, 'UNUSABLE', 'UNUSABLE') AS "Status"FROM all_indexes ai	LEFT JOIN all_constraints ac 		ON ai.table_owner = ac.owner 		AND ai.table_name = ac.table_name		AND ai.index_name = ac.constraint_nameWHERE ac.owner IS NULL	AND ('$SCHEMA_NAME$' IS NULL OR ai.table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR ai.table_name = '$OBJECT_NAME$')ORDER BY ai.index_name
linkByVal=2
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.7.39]
enabled=1
caption=Index columns
export=1
qType=0
oType=
query=SELECT 	table_owner AS "Schema name",	table_name AS "Table name",	index_name AS "Index name",	'"' || column_name || '" ' || descend AS "Value__AGG"FROM all_ind_columnsWHERE	('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY column_position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Index

[schemaCmp.7.40]
enabled=1
caption=Constraints
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	constraint_name AS "Constraint name",	DECODE(constraint_type,		'P', 'Primary key',		'U', 'Unique key',		'R', 'Foreign key'	) AS "Target type",	DECODE("GENERATED", 'USER NAME', 0, 'GENERATED NAME', 1) AS "IsSystem", 	"DEFERRABLE" AS "Deferable",	"DEFERRED" AS "Defered",	DECODE(status, 'ENABLED', 'ENABLE', 'DISABLED', 'DISABLE') AS "Status",	DECODE(Validated, 'VALIDATED', 'VALIDATE', 'NOT VALIDATED', 'NOVALIDATE') AS "Validated",	DECODE(Validated, 'NOT VALIDATED', DECODE("RELY", 'RELY', 'RELY', 'NORELY')) AS "Rely",	CASE WHEN index_name IS NOT NULL AND index_name <> constraint_name THEN		CASE WHEN index_owner IS NOT NULL THEN '"' || index_owner || '".' ELSE '' END ||		'"' || index_name || '"' 	END AS "Index__NAME_REFERENCE"FROM	all_constraintsWHERE	constraint_type in ('P', 'U', 'R')	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Primary key,Unique key,Foreign key

[schemaCmp.7.41]
enabled=1
caption=Index attributes
export=1
qType=3
oType=
query=${LOGGING} $${VISIBILITY} $${REVERSED}	$${|=PHYSICAL ATTRIBUTES}	$$TABLESPACE "{TABLESPACE}"$${COMPRESSION}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.42]
enabled=1
caption=Index attributes
export=1
qType=3
oType=
query=${LOGGING} $${REVERSED}	$${|=PHYSICAL ATTRIBUTES}	$$TABLESPACE "{TABLESPACE}"$${COMPRESSION}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.43]
enabled=1
caption=Partition props index
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name", 	table_name AS "Table name",	index_name AS "Index name", 	partitioning_type AS "Partition type",	DECODE(subpartitioning_type, 'NONE', '', subpartitioning_type) AS "Subpartition type",	"INTERVAL" AS "Partition interval",	DECODE("INTERVAL", NULL, NULL, def_tablespace_name) AS "Partition tablespace"FROM all_part_indexesWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=3
loadedObj=Table

[schemaCmp.7.44]
enabled=1
caption=Partition props index
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name", 	table_name AS "Table name",	index_name AS "Index name", 	partitioning_type AS "Partition type",	DECODE(subpartitioning_type, 'NONE', '', subpartitioning_type) AS "Subpartition type"FROM all_part_indexesWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Table

[schemaCmp.7.45]
enabled=1
caption=Foreign key references
export=1
qType=0
oType=
query=SELECT	c.owner AS "Schema name",	c.table_name AS "Table name",	c.constraint_name AS "Constraint name",	('"' || cr.owner || '"."' || cr.table_name || '"') AS "Refer table__NAME_REFERENCE",	DECODE(c.delete_rule, 'NO ACTION', '', c.delete_rule) AS "Delete rule" FROM  all_constraints c	JOIN all_constraints cr		ON cr.owner = c.r_owner		AND cr.constraint_name = c.r_constraint_name WHERE	('$SCHEMA_NAME$' IS NULL OR c.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR c.table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Foreign key

[schemaCmp.7.46]
enabled=1
caption=Constraint columns
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name",	table_name AS "Table name",	constraint_name AS "Constraint name",	column_name AS "Value__AGG"FROM all_cons_columnsWHERE	column_name <> 'SYS_NC_OID$^'	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Primary key,Unique key,Foreign key

[schemaCmp.7.47]
enabled=1
caption=Foreign key columns
export=1
qType=0
oType=
query=SELECT 	c.owner AS "Schema name",	c.table_name AS "Table name",	c.constraint_name AS "Constraint name",	'"' || column_name || '"' AS "Refer columns__AGG"FROM all_constraints c 	JOIN all_cons_columns cc		ON cc.owner = c.r_owner		AND cc.constraint_name = c.r_constraint_nameWHERE	('$SCHEMA_NAME$' IS NULL OR c.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR c.table_name = '$OBJECT_NAME$')ORDER BY position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Foreign key

[schemaCmp.7.48]
enabled=1
caption=Constraint (DROP)
export=1
qType=3
oType=Primary Key,Unique Key,Foreign Key,Check Constraint
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP CONSTRAINT "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.49]
enabled=1
caption=Constraint Name
export=1
qType=3
oType=
query=CONSTRAINT "$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=IsSystem=0
pathNameCnt=0
loadedObj=

[schemaCmp.7.50]
enabled=1
caption=Constraint (RENAME)
export=1
qType=3
oType=Primary Key,Unique Key,Foreign Key,Check Constraint
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" RENAME CONSTRAINT "$NAME.TRG$" TO "$NAME.SRC$";
linkByVal=0
hasValue=0
templType=RENAME
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.51]
enabled=1
caption=Primary Key (CREATE)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" 	ADD$ {|=CONSTRAINT NAME}$ PRIMARY KEY ($VALUE$)$	{|=CONSTRAINT STATE}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.52]
enabled=1
caption=Constraint State
export=1
qType=3
oType=
query=${DEFERABLE} $$INITIALLY {DEFERED} $${RELY} $${STATUS} $${VALIDATED}$$	{|=USING INDEX}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.53]
enabled=1
caption=Unique Key (CREATE)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" 	ADD$ {|=CONSTRAINT NAME}$ UNIQUE ($VALUE$)$	{|=CONSTRAINT STATE}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.54]
enabled=1
caption=Foreign Key (CREATE)
export=1
qType=3
oType=Foreign Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" 	ADD$ {|=CONSTRAINT NAME}$ FOREIGN KEY ($VALUE$)	REFERENCES $REFER TABLE$$ ({REFER COLUMNS})$$	{|=CONSTRAINT STATE}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.55]
enabled=1
caption=Check Constraint (CREATE)
export=1
qType=3
oType=Check Constraint
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"	ADD$ {|=CONSTRAINT NAME}$ 	CHECK ($VALUE$)$	{|=CONSTRAINT STATE}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.56]
enabled=1
caption=Check Constraints
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	constraint_name AS "Constraint name",	'Check constraint' AS "Target type",	search_condition AS "Check condition__SQL",	DECODE("GENERATED", 'USER NAME', 0, 'GENERATED NAME', 1) AS "IsSystem", 	"DEFERRABLE" AS "Deferable",	"DEFERRED" AS "Defered",	DECODE(status, 'ENABLED', 'ENABLE', 'DISABLED', 'DISABLE') AS "Status",	DECODE(Validated, 'VALIDATED', 'VALIDATE', 'NOT VALIDATED', 'NOVALIDATE') AS "Validated",	DECODE(Validated, 'NOT VALIDATED', DECODE("RELY", 'RELY', 'RELY', 'NORELY')) AS "Rely"FROM                                   	all_constraintsWHERE	constraint_type in ('C', 'F')	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY constraint_name
linkByVal=2
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Check constraint

[schemaCmp.7.57]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE$ {INDEX TYPE}$ INDEX "$SCHEMA_NAME$"."$NAME$" 	ON "$SCHEMA_NAME$"."$OBJECT_NAME$" ($VALUE$)	$|=INDEX ATTRIBUTES$${|=INDEX PARTITIONS}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.58]
enabled=1
caption=Index (RENAME)
export=1
qType=3
oType=Index
query=ALTER INDEX "$SCHEMA_NAME$"."$NAME.TRG$" RENAME TO "$NAME.SRC$"
linkByVal=0
hasValue=0
templType=RENAME
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.59]
enabled=1
caption=Primary Key inplace
export=1
qType=3
oType=
query=${|=CONSTRAINT NAME} $PRIMARY KEY ($VALUE$)$ {|=CONSTRAINT STATE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.60]
enabled=1
caption=Unique Key inplace
export=1
qType=3
oType=
query=${|=CONSTRAINT NAME} $UNIQUE ($VALUE$)$ {|=CONSTRAINT STATE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=.<>
pathNameCnt=0
loadedObj=

[schemaCmp.7.61]
enabled=1
caption=Check Constraint inplace
export=1
qType=3
oType=
query=${|=CONSTRAINT NAME} $CHECK($VALUE$)$ {|=CONSTRAINT STATE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.62]
enabled=1
caption=Foreign Key inplace
export=1
qType=3
oType=
query=${|=CONSTRAINT NAME} $FOREIGN KEY ($VALUE$)	REFERENCES $REFER TABLE$$ ({REFER COLUMNS})$$ {|=CONSTRAINT STATE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.63]
enabled=1
caption=Table (DROP)
export=1
qType=3
oType=Table,Temporary table
query=DROP TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.64]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" RENAME TO "TMP_$OBJECT_NAME$";CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"$|=TABLE DEF$$	ON COMMIT {ON COMMIT} ROWS$$ {OID INDEX}$$	{|=TABLE PHYSICAL PROPS}$${\n|NESTED TABLE=NESTED TABLE,LOB=LOB}$${|=TABLE PARTITIONS}$;${\n\n|INDEX.TARGET=INDEX (CREATE),DML TRIGGER.TARGET=DML TRIGGER (CREATE)}$${|=CONSTRAINTS.TARGET (CREATE)}$INSERT INTO "$SCHEMA_NAME$"."$OBJECT_NAME$" ($,|COLUMN.TARGET_OLD=COLUMN NAME$)SELECT $,|COLUMN.TARGET_OLD=COLUMN CONVERT$ FROM "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$";DROP TABLE "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.65]
enabled=1
caption=Column Convert
export=1
qType=3
oType=Column
query=CAST("$NAME$" AS $TYPE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*Type & IsAuto=0
pathNameCnt=0
loadedObj=

[schemaCmp.7.66]
enabled=1
caption=Column Convert
export=1
qType=3
oType=Column
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=IsAuto=0
pathNameCnt=0
loadedObj=

[schemaCmp.7.67]
enabled=1
caption=Column Name
export=1
qType=3
oType=Column
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=IsAuto=0
pathNameCnt=0
loadedObj=

[schemaCmp.7.68]
enabled=1
caption=DML Triggers
export=1
qType=1
oType=
query=SELECT	table_owner AS "Schema name",	table_name AS "Table name",	t.trigger_name AS "Trigger name", 	'DML Trigger' AS "Target type", 	triggering_event AS "Event", 	DECODE(trigger_type,		'BEFORE EACH ROW', 'BEFORE',		'BEFORE STATEMENT', 'BEFORE',		'AFTER EACH ROW', 'AFTER',		'AFTER STATEMENT', 'AFTER',		trigger_type	) AS "Trigger type",	referencing_names AS "Referencing names",            	column_name AS "Nested table column",             	DECODE(substr(trigger_type, length(trigger_type) - 2), 'ROW', 'ROW') AS "Row trigger",	DECODE(crossedition, 'NO', '', crossedition) AS "Crossedition",	DECODE(tro.ordering_type, NULL, '', tro.ordering_type || ' "' || tro.referenced_trigger_name || '"') AS "Trigger ordering",	SUBSTR(status, 1, LENGTH(status) - 1) AS "Status",	when_clause AS "When clause__SQL",	trigger_body AS "Body__SQL"FROM all_triggers t	LEFT JOIN all_trigger_ordering tro		ON tro.trigger_name = t.trigger_name		AND tro.trigger_owner = t.ownerWHERE t."TABLE_NAME" IS NOT NULL	AND ('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY t.trigger_name	
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=2
loadedObj=DML Trigger

[schemaCmp.7.69]
enabled=1
caption=DML/DDL Trigger (DROP)
export=1
qType=3
oType=DML Trigger,DDL Trigger
query=DROP TRIGGER "$SCHEMA_NAME$"."$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.70]
enabled=1
caption=DML Trigger (CREATE)
export=1
qType=3
oType=DML Trigger
query=CREATE TRIGGER "$SCHEMA_NAME$"."$NAME$" $TRIGGER TYPE$ $EVENT$ 	ON$ NESTED TABLE "{NESTED TABLE COLUMN}" OF $"$SCHEMA_NAME$"."$OBJECT_NAME$"	$REFERENCING NAMES$$	FOR EACH {ROW TRIGGER}$$	{CROSSEDITION} CROSSEDITION$$	{TRIGGER ORDERING}$$	WHEN({WHEN CLAUSE})$$	{STATUS}$ $BODY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.71]
enabled=1
caption=DML Triggers
export=1
qType=1
oType=
query=SELECT	table_owner AS "Schema name",	table_name AS "Table name",	t.trigger_name AS "Trigger name", 	'DML Trigger' AS "Target type", 	triggering_event AS "Event", 	DECODE(trigger_type,		'BEFORE EACH ROW', 'BEFORE',		'BEFORE STATEMENT', 'BEFORE',		'AFTER EACH ROW', 'AFTER',		'AFTER STATEMENT', 'AFTER',		trigger_type	) AS "Trigger type",	referencing_names AS "Referencing names",            	column_name AS "Nested table column",             	DECODE(substr(trigger_type, length(trigger_type) - 2), 'ROW', 'ROW') AS "Row trigger",	SUBSTR(status, 1, LENGTH(status) - 1) AS "Status",	when_clause AS "When clause__SQL",	trigger_body AS "Body__SQL"FROM all_triggers tWHERE t."TABLE_NAME" IS NOT NULL	AND ('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY t.trigger_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=DML Trigger

[schemaCmp.7.72]
enabled=1
caption=DDL Triggers
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	t.trigger_name AS "Trigger name", 	'DDL Trigger' AS "Target type", 	triggering_event AS "Event", 	DECODE(trigger_type,		'BEFORE EVENT', 'BEFORE',		'AFTER EVENT', 'AFTER',		trigger_type	) AS "Trigger type",   	DECODE(base_object_type, 'SCHEMA', 'SCHEMA "' || table_owner || '"', base_object_type) AS "Base object",	DECODE(tro.ordering_type, NULL, '', tro.ordering_type || ' "' || tro.referenced_trigger_name || '"') AS "Trigger ordering",	SUBSTR(status, 1, LENGTH(status) - 1) AS "Status",	when_clause AS "When clause__SQL",	trigger_body AS "Body__SQL"FROM all_triggers t	LEFT JOIN all_trigger_ordering tro		ON tro.trigger_name = t.trigger_name		AND tro.trigger_owner = t.ownerWHERE t."TABLE_NAME" IS NULL	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')ORDER BY t.trigger_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=DDL Trigger

[schemaCmp.7.73]
enabled=1
caption=DDL Triggers
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	t.trigger_name AS "Trigger name", 	'DDL Trigger' AS "Target type", 	triggering_event AS "Event", 	DECODE(trigger_type,		'BEFORE EVENT', 'BEFORE',		'AFTER EVENT', 'AFTER',		trigger_type	) AS "Trigger type",   	DECODE(base_object_type, 'SCHEMA', 'SCHEMA "' || table_owner || '"', base_object_type) AS "Base object",	SUBSTR(status, 1, LENGTH(status) - 1) AS "Status",	when_clause AS "When clause__SQL",	trigger_body AS "Body__SQL"FROM all_triggers tWHERE t."TABLE_NAME" IS NULL	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')ORDER BY t.trigger_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=DDL Trigger

[schemaCmp.7.74]
enabled=1
caption=Supplemental logs
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	log_group_name AS "Log broup name",	'Supplemental log' AS "Target type",	DECODE(LOG_GROUP_TYPE,		'PRIMARY KEY LOGGING', 'PRIMARY KEY',		'UNIQUE KEY LOGGING', 'UNIQUE KEY',		'FOREIGN KEY LOGGING', 'FOREIGN KEY',		'ALL COLUMN LOGGING', 'ALL',		'USER LOG GROUP', 'GROUP'	) AS "Kind",	"ALWAYS"FROM all_log_groupsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY log_group_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Supplemental log

[schemaCmp.7.75]
enabled=1
caption=Supplemental logs
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	log_group_name AS "Log broup name",	'Supplemental log' AS "Target type",	"ALWAYS"FROM all_log_groupsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY log_group_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Supplemental log

[schemaCmp.7.76]
enabled=1
caption=Supplemental log columns
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	log_group_name AS "Log broup name",	'"' || column_name || '"' || DECODE(logging_property, 'NO LOG', ' NO LOG', '') AS "Columns__AGG"FROM all_log_group_columnsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=3
loadedObj=Supplemental log

[schemaCmp.7.77]
enabled=1
caption=Supplemental log columns
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name",	table_name AS "Table name",	log_group_name AS "Log broup name",	'"' || column_name || '"' AS "Columns__AGG"FROM all_log_group_columnsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Supplemental log

[schemaCmp.7.78]
enabled=1
caption=Synonyms
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	synonym_name AS "Synonym name",	'Synonym' AS "Target type",	'"' || table_owner || '"."' || table_name || '"' AS "Ref object__NAME_REFERENCE",	db_link AS "DB Link"FROM all_synonymsWHERE  	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR synonym_name = '$OBJECT_NAME$')ORDER BY synonym_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Synonym

[schemaCmp.7.79]
enabled=1
caption=Synonym (CREATE)
export=1
qType=3
oType=Synonym
query=CREATE SYNONYM "$SCHEMA_NAME$"."$NAME$" FOR $REF OBJECT$$ @{DB LINK}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.80]
enabled=1
caption=Synonym (DROP)
export=1
qType=3
oType=Synonym
query=DROP SYNONYM "$SCHEMA_NAME$"."$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.81]
enabled=1
caption=Sequences
export=1
qType=1
oType=
query=SELECT	sequence_owner AS "Schema name",	sequence_name AS "Sequence name",	'Sequence' AS "Target type",	CASE 		WHEN min_value = 1 AND increment_by > 0 OR min_value = -999999999999999999999999999 AND increment_by < 0 THEN 'NOMINVALUE'		ELSE cast(min_value AS VARCHAR2(28))	END AS "Min value",	CASE 		WHEN max_value = 9999999999999999999999999999 THEN 'NOMAXVALUE' 		ELSE cast(max_value AS VARCHAR2(28)) 	END AS "Max value",	increment_by AS "Increment",	DECODE(cycle_flag, 'Y', 'CYCLE', 'N', 'NOCYCLE') AS "Cycle",	DECODE(order_flag, 'Y', 'ORDER', 'N', 'NOORDER') AS "Order",	DECODE(cache_size, 0, 'NOCACHE', 20, '', cast(cache_size AS VARCHAR2(28))) AS "Cache",	last_number AS "Start"FROM all_sequencesWHERE  	('$SCHEMA_NAME$' IS NULL OR sequence_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR sequence_name = '$OBJECT_NAME$')ORDER BY sequence_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Sequence

[schemaCmp.7.82]
enabled=1
caption=Sequence (CREATE)
export=1
qType=3
oType=Sequence
query=CREATE SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$"$	START WITH {START}$$	INCREMENT BY {INCREMENT}$$	MINVALUE {MIN VALUE}$$	MAXVALUE {MAX VALUE}$$	CACHE {CACHE}$$	{CYCLE}$$	{ORDER}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.83]
enabled=1
caption=Sequence (DROP)
export=1
qType=3
oType=Sequence
query=DROP SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.84]
enabled=1
caption=Code objects
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	object_name AS "Object name", 	DECODE(object_type, 		'PROCEDURE', 'Procedure', 		'FUNCTION', 'Function',		'PACKAGE', 'Package',		'TYPE', 'Type'	) AS "Target type"FROM all_objects oWHERE subobject_name IS NULL   	AND object_type IN ('PROCEDURE', 'FUNCTION', 'PACKAGE', 'TYPE')	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND (object_type <> 'TYPE' OR EXISTS(SELECT 1 FROM all_types t WHERE t.owner = o.owner AND t.type_name = o.object_name) )ORDER BY object_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Procedure,Function,Package,Type

[schemaCmp.7.85]
enabled=1
caption=Code objects DDL
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name",	name AS "Object name", 	decode(line, 1,         decode(sign(4000-21-length(text)),-1,            '',            CASE WHEN "TYPE" LIKE '%BODY' THEN chr(10)||chr(10)||chr(10) ELSE '' END            || decode(instr(text,'CREATE '), 0, 'CREATE OR REPLACE ','')         ),        ''    )    || text AS "DDL",	CASE WHEN text LIKE '%a000000%' THEN 'Wrapped' END AS "Value__AGG" FROM all_sourceWHERE "TYPE" IN ('PROCEDURE', 'FUNCTION', 'PACKAGE', 'PACKAGE BODY', 'TYPE', 'TYPE BODY')	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR name = '$OBJECT_NAME$')order by    type, line    
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Procedure,Function,Package,Type

[schemaCmp.7.86]
enabled=1
caption=Type (DROP)
export=1
qType=3
oType=Type
query=DROP TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.87]
enabled=1
caption=Type (CREATE)
export=1
qType=3
oType=Type
query=$DDL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.88]
enabled=1
caption=Type (ALTER)
export=1
qType=3
oType=Type
query=$DDL$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.89]
enabled=1
caption=Comments (Level 0)
export=1
qType=1
oType=
query=SELECT	edition_name AS "Parent name",	'Comment' AS "Name",	'Comment' AS "Target type",	comments,	'"' || edition_name || '"' AS "CmtTrg__HIDDEN__NAME_REFERENCE",	'EDITION' AS "ObjType__HIDDEN"FROM all_edition_commentsWHERE comments IS NOT NULL
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Comment

[schemaCmp.7.90]
enabled=1
caption=Comments (Level 1)
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name",	table_name AS "Table name",	'Comment' AS "Name",	'Comment' AS "Target type",	comments,	'"' || owner || '"."' || table_name || '"' AS "CmtTrg__HIDDEN__NAME_REFERENCE",	table_type AS "ObjType__HIDDEN"FROM all_tab_commentsWHERE comments IS NOT NULL	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')UNION ALLSELECT 	owner, 	operator_name, 	'Comment' AS "Name",	'Comment' AS "Target type",	comments, 	'"' || owner || '"."' || operator_name || '"' AS "CmtTrg__HIDDEN__NAME_REFERENCE",	'OPERATOR' AS "ObjType__HIDDEN"FROM all_operator_commentsWHERE comments IS NOT NULL	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR operator_name = '$OBJECT_NAME$')UNION ALLSELECT 	owner, 	indextype_name, 	'Comment' AS "Name",	'Comment' AS "Target type",	comments, 	'"' || owner || '"."' || indextype_name || '"' AS "CmtTrg__HIDDEN__NAME_REFERENCE",	'INDEXTYPE' AS "ObjType__HIDDEN"FROM all_indextype_commentsWHERE comments IS NOT NULL	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR indextype_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Comment

[schemaCmp.7.91]
enabled=1
caption=Comments (Level 2)
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name",	table_name AS "Table name",	column_name AS "Column name",	'Comment' AS "Name",	'Comment' AS "Target type",	comments,	'"' || owner || '"."' || table_name || '"' AS "CmtTrg__HIDDEN__NAME_REFERENCE",	column_name AS "Column name__HIDDEN",	'COLUMN' AS "ObjType__HIDDEN"FROM all_col_commentsWHERE comments IS NOT NULL	AND ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Comment

[schemaCmp.7.92]
enabled=1
caption=Comment (ALTER)
export=1
qType=3
oType=Comment
query=COMMENT ON $OBJTYPE$ $CMTTRG$$."{COLUMN NAME}"$ IS $VALUE.STRING$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.93]
enabled=1
caption=Comment (CREATE)
export=1
qType=3
oType=Comment
query=COMMENT ON $OBJTYPE$ $CMTTRG$$."{COLUMN NAME}"$ IS $VALUE.STRING$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.94]
enabled=1
caption=Comment (DROP)
export=1
qType=3
oType=Comment
query=COMMENT ON $OBJTYPE$ $CMTTRG$$."{COLUMN NAME}"$ IS ''
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.95]
enabled=1
caption=Operators
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	operator_name AS "Operator name",	'Operator' AS "Target type"FROM all_operatorsWHERE 	'$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$'ORDER BY operator_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Operator

[schemaCmp.7.96]
enabled=1
caption=Operator bundings
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	operator_name AS "Operator name",	binding# AS "Binding number",	'Operator binding' AS "Target type",	DECODE(return_schema, NULL, return_type, '"' || return_schema || '"."' || return_type || '"') AS "Return type__NAME_REFERENCE",	DECODE(property,		'WITH INDEX CONTEXT', 'WITH INDEX CONTEXT, SCAN CONTEXT "' || implementation_type_schema || '"."' || implementation_type || '"',		'COMPUTE ANCILLARY DATA', 'WITH INDEX CONTEXT, SCAN CONTEXT "' || implementation_type_schema || '"."' || implementation_type || '" COMPUTE ANCILLARY DATA',		'WITH COLUMN CONTEXT', 'WITH COLUMN CONTEXT',		'WITH INDEX, COLUMN CONTEXT', 'WITH INDEX CONTEXT, SCAN CONTEXT "' || implementation_type_schema || '"."' || implementation_type || '" WITH COLUMN CONTEXT',		'COMPUTE ANCILLARY DATA, WITH COLUMN CONTEXT', 'WITH INDEX CONTEXT, SCAN CONTEXT "' || implementation_type_schema || '"."' || implementation_type || '" COMPUTE ANCILLARY DATA WITH COLUMN CONTEXT'	) AS "Context__NAME_REFERENCE",	function_name AS "Function__NAME_REFERENCE"FROM all_opbindingsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR operator_name = '$OBJECT_NAME$')ORDER BY binding#
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Operator binding

[schemaCmp.7.97]
enabled=1
caption=Operator arguments
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name", 	operator_name AS "Operator name",	binding# AS "Binding number",	argument_type AS "Value__AGG" FROM all_opargumentsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR operator_name = '$OBJECT_NAME$')ORDER BY position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Operator binding

[schemaCmp.7.98]
enabled=1
caption=Operator (CREATE)
export=1
qType=3
oType=Operator
query=CREATE OPERATOR "$SCHEMA_NAME$"."$OBJECT_NAME$" BINDING$,\n|OPERATOR BINDING=OPERATOR BINDING$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.99]
enabled=1
caption=Operator binding
export=1
qType=3
oType=
query=	($VALUE$) RETURN $RETURN TYPE$$	ANCILLARY TO {,|OPERATOR ANCILLARY=OPERATOR ANCILLARY}$$	{CONTEXT}$ 	USING $FUNCTION$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.100]
enabled=1
caption=Operator (DROP)
export=1
qType=3
oType=Operator
query=DROP OPERATOR "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.101]
enabled=1
caption=Operator ancillaries
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	operator_name AS "Operator name",	binding# AS "Binding number",	primop_owner || '.' || primop_name || '.' || primop_bind# AS "Name",	'Operator ancillary' AS "Target type",	'"' || primop_owner || '"."' || primop_name || '"' AS "POP__NAME_REFERENCE__HIDDEN"FROM all_opancillaryWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR operator_name = '$OBJECT_NAME$')ORDER BY primop_bind#
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Operator ancillary

[schemaCmp.7.102]
enabled=1
caption=Operator ancillary arguments
export=1
qType=0
oType=
query=SELECT	oa.owner AS "Schema name", 	oa.operator_name AS "Operator name",	oa.binding# AS "Binding number",	oa.primop_owner || '.' || oa.primop_name || '.' || oa.primop_bind# AS "Primary",	a.argument_type AS "Value__AGG" FROM all_oparguments a, all_opancillary oaWHERE a.owner = oa.primop_owner 	AND a.operator_name = oa.primop_name	AND a.binding# = oa.primop_bind#	AND ('$SCHEMA_NAME$' IS NULL OR oa.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR oa.operator_name = '$OBJECT_NAME$')ORDER BY a.position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=4
loadedObj=Operator ancillary

[schemaCmp.7.103]
enabled=1
caption=Operator ancillary
export=1
qType=3
oType=
query=$POP$($VALUE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.104]
enabled=1
caption=Index types
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	indextype_name AS "Index type name",	'Index type' AS "Target type",	'"' || implementation_schema || '"."' || implementation_name || '"' AS "Implementation type__NR",	REPLACE(maintenance_type, '_', ' ') AS "Maintenance",	DECODE(RTRIM(partitioning), 'LOCAL', 'LOCAL', 'RANGE', 'LOCAL RANGE') AS "Partitioning"FROM all_indextypesWHERE 	'$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$'ORDER BY indextype_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Index type

[schemaCmp.7.105]
enabled=1
caption=Index type (CREATE)
export=1
qType=3
oType=Index type
query=CREATE INDEXTYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" FOR$,\n|INDEX OPERATOR=INDEX OPERATOR$USING $IMPLEMENTATION TYPE$$ WITH ARRAY DML {, |INDEX DML=INDEX DML}$$WITH {PARTITIONING} PARTITION $$WITH {MAINTENANCE} STORAGE TABLES$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.106]
enabled=1
caption=Index type (DROP)
export=1
qType=3
oType=Index type
query=DROP INDEXTYPE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.107]
enabled=1
caption=Index types
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	indextype_name AS "Index type name",	'Index type' AS "Target type",	'"' || implementation_schema || '"."' || implementation_name || '"' AS "Implementation type__NR",	DECODE(RTRIM(partitioning), 'LOCAL', 'LOCAL', 'RANGE', 'LOCAL RANGE') AS "Partitioning"FROM all_indextypesWHERE 	'$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$'ORDER BY indextype_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=1
loadedObj=Index type

[schemaCmp.7.108]
enabled=1
caption=Index operators
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name",	indextype_name AS "Index type name",	operator_schema || '.' || operator_name || '.' || binding# AS "Name",	'Index operator' AS "Target type",	'"' || operator_schema || '"."' || operator_name || '"' AS "Operator name__NAME_REFERENCE"FROM all_indextype_operatorsWHERE ('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR indextype_name = '$OBJECT_NAME$')ORDER BY binding#
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Index operator

[schemaCmp.7.109]
enabled=1
caption=Index operator arguments
export=1
qType=0
oType=
query=SELECT	io.owner AS "Schema name", 	io.indextype_name AS "Index type name",	io.operator_schema || '.' || io.operator_name || '.' || io.binding# AS "Operator name",	a.argument_type AS "Value__AGG" FROM all_oparguments a, all_indextype_operators ioWHERE a.owner = io.operator_schema 	AND a.operator_name = io.operator_name	AND a.binding# = io.binding#	AND ('$SCHEMA_NAME$' IS NULL OR io.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR io.indextype_name = '$OBJECT_NAME$')ORDER BY a.position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Index operator

[schemaCmp.7.110]
enabled=1
caption=Index operator
export=1
qType=3
oType=
query=$OPERATOR NAME$($VALUE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.111]
enabled=1
caption=Index DML
export=1
qType=3
oType=
query=($BASE TYPE$$, {ARRAY TYPE}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.112]
enabled=1
caption=Editions
export=1
qType=1
oType=Database
query=SELECT 	edition_name AS "Name",	'Edition' AS "Target type", 	parent_edition_name AS "Parent"FROM all_editionsWHERE parent_edition_name IS NOT NULL AND usable = 'YES'ORDER BY edition_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=Edition

[schemaCmp.7.113]
enabled=1
caption=Edition (CREATE)
export=1
qType=3
oType=Edition
query=CREATE EDITION "$NAME$" AS CHILD OF $PARENT$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.114]
enabled=1
caption=Edition (DROP)
export=1
qType=3
oType=Edition
query=DROP EDITION "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.115]
enabled=1
caption=Context (CREATE)
export=1
qType=3
oType=Context
query=CREATE CONTEXT "$NAME$" USING $PACKAGE$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.116]
enabled=1
caption=Context (DROP)
export=1
qType=3
oType=Context
query=DROP CONTEXT "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.117]
enabled=1
caption=Contexts
export=1
qType=1
oType=Database
query=SELECT 	namespace AS "Name",	'Context' AS "Target type", 	'"' || "SCHEMA" || '"."'  || "PACKAGE" || '"' AS "Package__NAME_REFERENCE"FROM all_contextORDER BY namespace 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Context

[schemaCmp.7.118]
enabled=1
caption=Cluster (CREATE)
export=1
qType=3
oType=Cluster
query=CREATE CLUSTER "$SCHEMA_NAME$"."$OBJECT_NAME$" 	($, |COLUMN=COLUMN DEF CLUSTER$)$	{CLUSTER TYPE}$$ HASH IS {HASH EXPRESSION}$$	{|=PHYSICAL ATTRIBUTES}$$	TABLESPACE "{TABLESPACE}"$$	SIZE {KEY SIZE}$$	{|=TABLE PROPS}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.119]
enabled=1
caption=Column def cluster
export=1
qType=3
oType=
query=$NAME$ $TYPE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.120]
enabled=1
caption=Cluster (DROP)
export=1
qType=3
oType=Cluster
query=DROP CLUSTER "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.121]
enabled=1
caption=Storage extents
export=1
qType=3
oType=
query=$INITIAL {INITIAL EXTENT}$$ NEXT {NEXT EXTENT}$$ MINEXTENTS {MIN EXTENTS}$$ MAXEXTENTS {MAX EXTENTS}$$ MAXSIZE {MAX SIZE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.122]
enabled=1
caption=Dimensions
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	'Dimension' AS "Target type"FROM all_dimensionsWHERE 	'$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$'ORDER BY dimension_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Dimension

[schemaCmp.7.123]
enabled=1
caption=Dimension levels
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	level_name AS "Level name",	'Dimension level' AS "Target type",	DECODE(skip_when_null, 'Y', 'SKIP WHEN NULL') AS "Skip"FROM all_dim_levelsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR dimension_name = '$OBJECT_NAME$')ORDER BY level_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=2
loadedObj=Dimension level

[schemaCmp.7.124]
enabled=1
caption=Dimension levels
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	level_name AS "Level name",	'Dimension level' AS "Target type"FROM all_dim_levelsWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR dimension_name = '$OBJECT_NAME$')ORDER BY level_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Dimension level

[schemaCmp.7.125]
enabled=1
caption=Dimension level columns
export=1
qType=0
oType=
query=SELECT 	lk.owner AS "Schema name", 	lk.dimension_name AS "Dimension name",	lk.level_name AS "Level name",	'"' || l.detailobj_owner || '"."' || l.detailobj_name || '"."' || lk.column_name || '"' AS "Keys__NAME_REFERENCE__AGG"FROM all_dim_level_key lk	LEFT JOIN all_dim_levels l		ON l.owner = lk.owner		AND l.dimension_name = lk.dimension_name		AND l.level_name = lk.level_name WHERE	('$SCHEMA_NAME$' IS NULL OR lk.owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR lk.dimension_name = '$OBJECT_NAME$')ORDER BY lk.column_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Dimension level

[schemaCmp.7.126]
enabled=1
caption=Dimension (CREATE)
export=1
qType=3
oType=Dimension
query=CREATE DIMENSION "$SCHEMA_NAME$"."$OBJECT_NAME$"	$\n\t|DIMENSION LEVEL=DIMENSION LEVEL,DIMENSION HIERARCHY=DIMENSION HIERARCHY,DIMENSION ATTRIBUTE=DIMENSION ATTRIBUTE$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.127]
enabled=1
caption=Dimension level
export=1
qType=3
oType=
query=LEVEL "$NAME$" IS ($KEYS$)$ {SKIP}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.128]
enabled=1
caption=Dimension hierarchies
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	hierarchy_name AS "Hierarchy name",	'Dimension hierarchy' AS "Target type"FROM all_dim_hierarchiesORDER BY hierarchy_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Dimension hierarchy

[schemaCmp.7.129]
enabled=1
caption=Dimension hierarchy children
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	hierarchy_name AS "Hierarchy name",	child_level_name AS "Child name",	'Dimension hierarchy child' AS "Target type",	0 AS "position__DONT_USE"FROM all_dim_child_ofWHERE position = 1UNION ALLSELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	hierarchy_name AS "Hierarchy name",	parent_level_name AS "Child name",	'Dimension hierarchy child' AS "Target type",	positionFROM all_dim_child_ofORDER BY 6
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Dimension hierarchy child

[schemaCmp.7.130]
enabled=1
caption=Dimension hierarchy
export=1
qType=3
oType=
query=HIERARCHY "$NAME$" ($ CHILD OF |DIMENSION HIERARCHY CHILD=NAME$$|DIMENSION HIERARCHY JOIN=DIMENSION HIERARCHY JOIN$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.131]
enabled=1
caption=Dimension hierarchy joins
export=1
qType=1
oType=
query=SELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	hierarchy_name AS "Hierarchy name",	dim_key_id AS "Key ID",	'Dimension hierarchy join' AS "Target type",	level_name AS "Parent level"FROM all_dim_join_keyWHERE key_position = 1
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Dimension hierarchy join

[schemaCmp.7.132]
enabled=1
caption=Dimension hierarchy join keys
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	hierarchy_name AS "Hierarchy name",	dim_key_id AS "Key ID",	'"' || child_join_owner || '"."' || child_join_table || '"."' || child_join_column || '"' AS "Keys__NAME_REFERENCE__AGG"FROM all_dim_join_keyORDER BY key_position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=4
loadedObj=Dimension hierarchy join

[schemaCmp.7.133]
enabled=1
caption=Dimension hierarchy join
export=1
qType=3
oType=
query= JOIN KEY ($KEYS$) REFERENCES "$PARENT LEVEL$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.134]
enabled=1
caption=Dimension hierarchy join keys
export=1
qType=0
oType=
query=SELECT 	owner AS "Schema name", 	dimension_name AS "Dimension name",	hierarchy_name AS "Hierarchy name",	dim_key_id AS "Key ID",	'"' || child_join_column || '"' AS "Keys__NAME_REFERENCE__AGG"FROM all_dim_join_keyORDER BY key_position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=4
loadedObj=Dimension hierarchy join

[schemaCmp.7.135]
enabled=1
caption=Dimension attributes
export=1
qType=1
oType=
query=SELECT DISTINCT	owner AS "Schema name", 	dimension_name AS "Dimension name",	attribute_name AS "Attribute name",	'Dimension attribute' AS "Target name",	CASE WHEN level_name <> attribute_name THEN level_name END AS "Level"FROM all_dim_attributesORDER BY attribute_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Dimension attribute

[schemaCmp.7.136]
enabled=1
caption=Dimension attributes
export=1
qType=1
oType=
query=SELECT DISTINCT	owner AS "Schema name", 	dimension_name AS "Dimension name",	level_name AS "Attribute name",	'Dimension attribute' AS "Target name"FROM all_dim_attributesORDER BY level_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Dimension attribute

[schemaCmp.7.137]
enabled=1
caption=Dimension attribute columns
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name", 	dimension_name AS "Dimension name",	attribute_name AS "Attribute name",	'"' || column_name || '"' AS "Columns__AGG"FROM all_dim_attributes
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=3
loadedObj=Dimension attribute

[schemaCmp.7.138]
enabled=1
caption=Dimension attribute
export=1
qType=3
oType=
query=ATTRIBUTE "$NAME$"$ LEVEL "{LEVEL}"$ DETERMINES ($COLUMNS$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.139]
enabled=1
caption=Materialized view (CREATE)
export=1
qType=3
oType=Meterialized view
query=CREATE MATERIALIZED VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$"$ OF {TABLE TYPE}$	($, |COLUMN=NAME$)	$|=MATERIALIZED VIEW TABLE$$	{USE INDEX}$$	{REFRESH}$$	{UPDATABLE}$$	{REWRITE} QUERY REWRITE$AS$SELECT$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.140]
enabled=1
caption=Materialized view (DROP)
export=1
qType=3
oType=Meterialized view
query=DROP MATERIALIZED VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.141]
enabled=1
caption=Constraints inplace
export=1
qType=3
oType=
query=$,\n\t|PRIMARY KEY=PRIMARY KEY INPLACE,UNIQUE KEY=UNIQUE KEY INPLACE,FOREIGN KEY=FOREIGN KEY INPLACE,CHECK CONSTRAINT=CHECK CONSTRAINT INPLACE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.142]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE$ GLOBAL {IS TEMPORARY}$ TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"$|=TABLE DEF$$	ON COMMIT {ON COMMIT} ROWS$$ {OID INDEX}$$	{|=TABLE PHYSICAL PROPS}$$	{|=TABLE PROPS}$${\n|NESTED TABLE=NESTED TABLE,LOB=LOB}$${|=TABLE PARTITIONS}$;${\n\n|INDEX,DML TRIGGER}$${|=CONSTRAINTS (CREATE)}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.143]
enabled=1
caption=Table physical props
export=1
qType=3
oType=
query=CLUSTER $CLUSTER$ ($CLUSTER COLUMNS$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=TABLEKIND=CLUSTER
pathNameCnt=0
loadedObj=

[schemaCmp.7.144]
enabled=1
caption=Table physical props
export=1
qType=3
oType=
query=$SEGMENT CREATION {SEGMENT CREATION}	$${LOGGING}	$${|=PHYSICAL ATTRIBUTES}$$	TABLESPACE "{TABLESPACE}"$${COMPRESSION}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.145]
enabled=1
caption=Physical attributes
export=1
qType=3
oType=
query=$PCTFREE {PCTFREE} $$PCTUSED {PCTUSED} $$INITRANS {INITRANS} 	$${|=STORAGE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.146]
enabled=1
caption=Using index
export=1
qType=3
oType=
query=USING INDEX $INDEX$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Index<>
pathNameCnt=0
loadedObj=

[schemaCmp.7.147]
enabled=1
caption=Using index
export=1
qType=3
oType=
query=$USING INDEX {|=INDEX ATTRIBUTES}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.148]
enabled=1
caption=Supplemental log
export=1
qType=3
oType=
query=SUPPLEMENTAL LOG GROUP "$NAME$" ($COLUMNS$)$ {ALWAYS}$ 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Kind=GROUP
pathNameCnt=0
loadedObj=

[schemaCmp.7.149]
enabled=1
caption=Supplemental log
export=1
qType=3
oType=
query=SUPPLEMENTAL LOG DATA ($KIND$) COLUMNS 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.150]
enabled=1
caption=Table def
export=1
qType=3
oType=
query=OF XMLTYPE$(	{|=CONSTRAINTS INPLACE})$$ STORE {STORE}$$ 	XMLSCHEMA {XML SCHEMA.STRING}$$ ELEMENT {ELEMENT NAME.STRING}$$	{ANY SCHEMA} ANYSCHEMA$$ {NO SCHEMA} NOSCHEMA$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=TABLEKIND=XMLTYPE
pathNameCnt=0
loadedObj=

[schemaCmp.7.151]
enabled=1
caption=Nested table
export=1
qType=3
oType=
query=NESTED TABLE $NAME$ STORE AS "$NESTED TABLE$" 	($|=TABLE PHYSICAL PROPS$)	RETURN AS $RETURN AS$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.152]
enabled=1
caption=Dimension attribute columns
export=1
qType=0
oType=
query=SELECT	owner AS "Schema name", 	dimension_name AS "Dimension name",	level_name AS "Attribute name",	'"' || column_name || '"' AS "Columns__AGG"FROM all_dim_attributes
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Dimension attribute

[schemaCmp.7.153]
enabled=1
caption=Directories
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	directory_name AS "Directory name",	'Directory' AS "Target type",	directory_path AS "Path"FROM	all_directoriesWHERE 	'$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$'ORDER BY directory_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Directory

[schemaCmp.7.154]
enabled=1
caption=Directory (CREATE)
export=1
qType=3
oType=Directory
query=CREATE DIRECTORY "$SCHEMA_NAME$"."$OBJECT_NAME$" AS $PATH.STRING;''$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.155]
enabled=1
caption=Directory (ALTER)
export=1
qType=3
oType=Directory
query=CREATE OR REPLACE DIRECTORY "$SCHEMA_NAME$"."$OBJECT_NAME$" AS $PATH.STRING;''$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.156]
enabled=1
caption=Directory (DROP)
export=1
qType=3
oType=Directory
query=DROP DIRECTORY "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.157]
enabled=1
caption=LOB
export=1
qType=3
oType=
query=LOB($NAME$) STORE AS$ {STORE AS}$ ($TABLESPACE {TABLESPACE}$	${STORAGE IN ROW} STORAGE IN ROW$$ CHUNK {CHUNK}$$ PCTVERSION {PCT VERSION}$$ FREEPOOLS {FREE POOLS}$$ RETENSION MIN {RETENSION}$$	{DEDUPLICATION}$$ {COMPRESSION}$$ {CACHE}$$ {LOGGING}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.158]
enabled=1
caption=Nested table
export=1
qType=3
oType=
query=VARRAY $NAME$ STORE AS TABLE "$NESTED TABLE$" 	($|=TABLE PHYSICAL PROPS$)	RETURN AS $RETURN AS$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=VArray=YES
pathNameCnt=0
loadedObj=

[schemaCmp.7.159]
enabled=1
caption=LOB
export=1
qType=3
oType=
query=VARRAY $NAME$ STORE AS$ {STORE AS}$ LOB($TABLESPACE {TABLESPACE}$	${STORAGE IN ROW} STORAGE IN ROW$$ CHUNK {CHUNK}$$ PCTVERSION {PCT VERSION}$$ FREEPOOLS {FREE POOLS}$$ RETENSION MIN {RETENSION}$$	{DEDUPLICATION}$$ {COMPRESSION}$$ {CACHE}$$ {LOGGING}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=VArray=YES
pathNameCnt=0
loadedObj=

[schemaCmp.7.160]
enabled=1
caption=Materialized view table
export=1
qType=3
oType=
query=ON PREBUILT TABLE WITHOUT REDUCED PRECISION
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Build mode=PREBUILT
pathNameCnt=0
loadedObj=

[schemaCmp.7.161]
enabled=1
caption=Materialized view table
export=1
qType=3
oType=
query=$|=TABLE PHYSICAL PROPS$$	{|=TABLE PROPS}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.162]
enabled=1
caption=Permissions
export=1
qType=1
oType=
query=SELECT 	table_schema AS "Schema name",	table_name AS "Object name",	"PRIVILEGE" || ' TO ' || grantee AS "Name",	'Permission' AS "Target type",	"PRIVILEGE" AS "Privilege__HIDDEN",	grantee AS "grantee__HIDDEN",    DECODE(grantable, 'YES', 'GRANT', '') AS "Grantable",    DECODE("HIERARCHY", 'YES', 'HIERARCHY', '') AS "Hierarchy"FROM all_tab_privsWHERE	('$SCHEMA_NAME$' IS NULL OR table_schema = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')UNION ALLSELECT DISTINCT	table_schema AS "Schema name",	table_name AS "Object name",	"PRIVILEGE" || ' TO ' || grantee AS "Name",	'Permission' AS "Target type",	"PRIVILEGE" AS "Privilege__HIDDEN",	grantee AS "grantee__HIDDEN",	DECODE(grantable, 'YES', 'GRANT', '') AS "Grantable",	NULLFROM all_col_privs WHERE	('$SCHEMA_NAME$' IS NULL OR table_schema = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Permission

[schemaCmp.7.163]
enabled=1
caption=Permission (CREATE)
export=1
qType=3
oType=Permission
query=GRANT $PRIVILEGE$$({COLUMNS})$ ON "$SCHEMA_NAME$"."$OBJECT_NAME$" TO "$GRANTEE$"$ WITH {HIERARCHY} OPTION$$ WITH {GRANTABLE} OPTION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.164]
enabled=1
caption=Permission (DROP)
export=1
qType=3
oType=Permission
query=REVOKE $PRIVILEGE$ ON "$SCHEMA_NAME$"."$OBJECT_NAME$" FROM "$GRANTEE$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.165]
enabled=1
caption=Permission columns
export=1
qType=0
oType=
query=SELECT DISTINCT	table_schema AS "Schema name",	table_name AS "Object name",	"PRIVILEGE" || ' TO ' || grantee AS "Name",	'"' || column_name || '"' AS "Columns__AGG"FROM all_col_privs 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Permission

[schemaCmp.7.166]
enabled=1
caption=DB Links
export=1
qType=1
oType=
query=SELECT	owner AS "Schema name",	db_link AS "DB Link",	'DB Link' AS "Target type",	username AS "User",	host AS "Connection string"FROM all_db_linksWHERE	('$SCHEMA_NAME$' IS NULL OR owner = '$SCHEMA_NAME$')ORDER BY db_link
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=DB Link

[schemaCmp.7.167]
enabled=1
caption=DB Link (CREATE)
export=1
qType=3
oType=DB Link
query=CREATE DATABASE LINK $NAME$  CONNECT TO $USER$ IDENTIFIED BY 'password'  USING $CONNECTION STRING.STRING$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.168]
enabled=1
caption=DB Link (DROP)
export=1
qType=3
oType=DB Link
query=DROP DATABASE LINK $NAME$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.169]
enabled=1
caption=Flashback archives
export=1
qType=1
oType=
query=SELECT	f.owner_name AS "Schema name",	f.flashback_archive_name AS "Name",	'Flashback archive' AS "Target type",	retention_in_days AS "Retention in days",	status AS "Default",	t.tablespace_name AS "Tablespace",	t.quota_in_mb AS "Quota in Mb"FROM dba_flashback_archive f	JOIN dba_flashback_archive_ts t		ON t.flashback_archive_name = f.flashback_archive_name		AND t.flashback_archive# = f.flashback_archive#WHERE	('$SCHEMA_NAME$' IS NULL OR f.owner_name = '$SCHEMA_NAME$')ORDER BY f.flashback_archive_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Flashback archive

[schemaCmp.7.170]
enabled=1
caption=Flashback archive (CREATE)
export=1
qType=3
oType=Flashback archive
query=CREATE FLASHBACK ARCHIVE$ {DEFAULT}$ "$SCHEMA_NAME$"."$OBJECT_NAME$"  TABLESPACE $TABLESPACE$$  QUOTA {QUOTA IN MB} M$$  RETENSION {RETENSION IN DAYS} DAY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.171]
enabled=1
caption=Flashback archive (DROP)
export=1
qType=3
oType=Flashback archive
query=DROP FLASHBACK ARCHIVE "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.172]
enabled=1
caption=Flashback for tables
export=1
qType=1
oType=
query=SELECT	owner_name AS "Schema name",	table_name AS "Table name",	flashback_archive_name AS "Name",	'Flashback' AS "Target type",	16 AS "SyncConfig__HIDDEN"FROM dba_flashback_archive_tablesWHERE status = 'ENABLED'	AND ('$SCHEMA_NAME$' IS NULL OR owner_name = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY flashback_archive_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=2
loadedObj=Flashback

[schemaCmp.7.173]
enabled=1
caption=Flashback (CREATE)
export=1
qType=3
oType=Flashback
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"	FLASHBACK ARCHIVE "$NAME$"
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.174]
enabled=1
caption=Flashback (ALTER)
export=1
qType=3
oType=Flashback
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"	FLASHBACK ARCHIVE "$NAME$"
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.175]
enabled=1
caption=Flashback (DROP)
export=1
qType=3
oType=Flashback
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"	NO FLASHBACK ARCHIVE
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.176]
enabled=1
caption=Materialized view log (CREATE)
export=1
qType=3
oType=Materialized view log
query=CREATE MATERIALIZED VIEW LOG ON "$SCHEMA_NAME$"."$OBJECT_NAME$"	$|=TABLE PHYSICAL PROPS$$	{|=TABLE PROPS}$$	WITH {OPTIONS}$$({COLUMNS})$$	{NEW VALUES} NEW VALUES$$	{|=MAT VIEW LOG PURGE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.177]
enabled=1
caption=Mat view log purge
export=1
qType=3
oType=
query=PURGE IMMEDIATE $PURGE ASYNCHRONOUS$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=Purge deferred=IMMEDIATE
pathNameCnt=0
loadedObj=

[schemaCmp.7.178]
enabled=1
caption=Mat view log purge
export=1
qType=3
oType=
query=PURGE$ START WITH {PURGE START.STRING}$$ REPEAT INTERVAL {PURGE INTERVAL}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.179]
enabled=1
caption=Materialized view log (DROP)
export=1
qType=3
oType=Materialized view log
query=DROP MATERIALIZED VIEW LOG ON "$SCHEMA_NAME$"."$OBJECT_NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.180]
enabled=1
caption=Table props
export=1
qType=3
oType=
query=${CACHE} $${PARALLEL} $${ROW DEPNDENCIES} $${ROW MOVEMENT} ROW MOVEMENT$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.181]
enabled=1
caption=Tablespace (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE$ {FILE SIZE}$ TABLESPACE "$NAME$"$ 	DATAFILE {,\n\t\t|DATA FILE=DATA FILE}$	$MINIMUM EXTENT {MIN EXTENT}$$ BLOCKSIZE {BLOCK SIZE}$$ 	{LOGGING}$$ {FORCE LOGGING}$$	{ENCRYPTION}$$	DEFAULT {COMPRESSION}$$	DEFAULT {|=STORAGE TABLESPACE}$$	{STATUS}$$	EXTENT MANAGEMENT {EXTENT MANAGEMENT}$$	SEGMENT SPACE MANAGEMENT {SEGMENT MANAGEMENT}$$;{;\n|DATA FILE=DATA FILE - MAKE OFFLINE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.182]
enabled=1
caption=Tablespaces
export=1
qType=1
oType=Database
query=SELECT	tablespace_name AS "Name",	'Tablespace' AS "Target type",	"CONTENTS" AS "Contents",	DECODE("BIGFILE", 'YES', 'BIGFILE', 'NO', 'SMALLFILE') AS "File size",	min_extlen AS "Min extent", 	block_size AS "Block size", 	"LOGGING" AS "Logging",	DECODE(force_logging, 'YES', 'FORCE LOGGING') AS "Force logging",	DECODE(encrypted, 'YES', 'ENCRYPTION') AS "Encryption",	DECODE(def_tab_compression, 'ENABLED', 'COMPRESS ' || DECODE(compress_for, 		NULL, '', 		'BASIC', compress_for, 		'FOR ' || compress_for)) AS "Compression",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	max_size AS "Max size", 	status AS "Status",	DECODE(extent_management, 'LOCAL', 'LOCAL' || DECODE(allocation_type, 'SYSTEM', ' AUTOALLOCATE', 'UNIFORM', ' UNIFORM')) AS "Extent management",	segment_space_management AS "Segment management",	DECODE("RETENTION", 'NOT APPLY', '', "RETENTION") AS "Retension",	8 AS "SyncConfig__HIDDEN" FROM dba_tablespacesWHERE NOT tablespace_name IN ('SYSTEM', 'SYSAUX')ORDER BY tablespace_name 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=Tablespace

[schemaCmp.7.183]
enabled=1
caption=Tablespace (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE$ {FILE SIZE}$ TEMPORARY TABLESPACE "$NAME$"$ 	TEMPFILE {,\n\t\t|DATA FILE=DATA FILE}$$	EXTENT MANAGEMENT {EXTENT MANAGEMENT}$$;{;\n|DATA FILE=DATA FILE - MAKE OFFLINE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=CONTENTS=TEMPORARY
pathNameCnt=0
loadedObj=

[schemaCmp.7.184]
enabled=1
caption=Tablespace (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE$ {FILE SIZE}$ UNDO TABLESPACE "$NAME$"$ 	DATAFILE {,\n\t\t|DATA FILE=DATA FILE}$$	EXTENT MANAGEMENT {EXTENT MANAGEMENT}$$	RETENSION {RETENSION}$$;{;\n|DATA FILE=DATA FILE - MAKE OFFLINE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=CONTENTS=UNDO
pathNameCnt=0
loadedObj=

[schemaCmp.7.185]
enabled=1
caption=Tablespaces
export=1
qType=1
oType=Database
query=SELECT	tablespace_name AS "Name",	'Tablespace' AS "Target type",	"CONTENTS" AS "Contents",	DECODE("BIGFILE", 'YES', 'BIGFILE', 'NO', 'SMALLFILE') AS "File size",	min_extlen AS "Min extent", 	block_size AS "Block size", 	"LOGGING" AS "Logging",	DECODE(force_logging, 'YES', 'FORCE LOGGING') AS "Force logging",	DECODE(def_tab_compression, 'ENABLED', 'COMPRESS') AS "Compression",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	status AS "Status",	DECODE(extent_management, 'LOCAL', 'LOCAL' || DECODE(allocation_type, 'SYSTEM', ' AUTOALLOCATE', 'UNIFORM', ' UNIFORM')) AS "Extent management",	segment_space_management AS "Segment management",	DECODE("RETENTION", 'NOT APPLY', '', "RETENTION") AS "Retension",	8 AS "SyncConfig__HIDDEN" FROM dba_tablespacesWHERE NOT tablespace_name IN ('SYSTEM', 'SYSAUX')ORDER BY tablespace_name  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Tablespace

[schemaCmp.7.186]
enabled=1
caption=Tablespaces
export=1
qType=1
oType=Database
query=SELECT	tablespace_name AS "Name",	'Tablespace' AS "Target type",	"CONTENTS" AS "Contents",	min_extlen AS "Min extent", 	block_size AS "Block size", 	"LOGGING" AS "Logging",	DECODE(force_logging, 'YES', 'FORCE LOGGING') AS "Force logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	status AS "Status",	DECODE(extent_management, 'LOCAL', 'LOCAL' || DECODE(allocation_type, 'SYSTEM', ' AUTOALLOCATE', 'UNIFORM', ' UNIFORM')) AS "Extent management",	segment_space_management AS "Segment management",	8 AS "SyncConfig__HIDDEN" FROM dba_tablespacesWHERE NOT tablespace_name IN ('SYSTEM', 'SYSAUX')ORDER BY tablespace_name  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=Tablespace

[schemaCmp.7.187]
enabled=1
caption=Tablespace files
export=1
qType=1
oType=Database
query=SELECT    tablespace_name AS "Name",    file_name AS "File name",    'Data file' AS "Target type",    bytes AS "Size",    status AS "Status",    DECODE(autoextensible, 'YES', 'ON', 'NO', 'OFF') AS "Auto-extensible",    DECODE(autoextensible, 'YES', bytes / blocks * increment_by) AS "Increment by",     DECODE(autoextensible, 'YES', maxbytes) AS "Max bytes",    online_status AS "Online status",	8 AS "SyncConfig__HIDDEN" FROM dba_data_filesWHERE NOT tablespace_name IN ('SYSTEM', 'SYSAUX')ORDER BY file_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=1
minVer=0
condition=
pathNameCnt=1
loadedObj=Data file

[schemaCmp.7.188]
enabled=1
caption=Rollback segments
export=1
qType=1
oType=Database
query=SELECT	segment_name AS "Segment name",	'Rollback segment' AS "Target type",	DECODE(owner, 'PUBLIC', 'PUBLIC') AS "Public",	tablespace_name AS "Tablespace",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase"FROM dba_rollback_segsORDER BY segment_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Rollback segment

[schemaCmp.7.189]
enabled=1
caption=Rollback segment (CREATE)
export=1
qType=3
oType=Rollback segment
query=CREATE ${PUBLIC} $ROLLBACK SEGMENT "$NAME$"$	TABLESPACE {TABLESPACE}$$	{|=STORAGE TABLESPACE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.190]
enabled=1
caption=Storage tablespace
export=1
qType=3
oType=
query=STORAGE(${|=STORAGE EXTENTS}$$ PCTINCREASE {PCT INCREASE}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.191]
enabled=1
caption=Roles
export=1
qType=1
oType=Database
query=SELECT 	r."ROLE" AS "Name",	'Role' AS "Target type",	DECODE(authentication_type,		'EXTERNAL', 'EXTERNALLY',		'GLOBAL', 'GLOBALLY',		'APPLICATION', 'USING "' || a."SCHEMA" ||'"."' || a."PACKAGE" || '"',		'PASSWORD', 'BY /*{password}*/'	) AS "Authentication"FROM dba_roles r	LEFT JOIN dba_application_roles a		ON a."ROLE" = r."ROLE"ORDER BY r."ROLE"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=Role

[schemaCmp.7.192]
enabled=1
caption=Role (CREATE)
export=1
qType=3
oType=Role
query=CREATE ROLE "$NAME$"$ INDENTIFIED {AUTHENTICATION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.193]
enabled=1
caption=Role (DROP)
export=1
qType=3
oType=Role
query=DROP ROLE "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.194]
enabled=1
caption=Roles
export=1
qType=1
oType=Database
query=SELECT 	r."ROLE" AS "Name",	'Role' AS "Target type",  	DECODE(a."PACKAGE", NULL,  		DECODE(r.password_required, 'YES', 'BY /*{password}*/'), 		'USING "' || a."SCHEMA" ||'"."' || a."PACKAGE" || '"'	) AS "Authentication"FROM dba_roles r	LEFT JOIN dba_application_roles a		ON a."ROLE" = r."ROLE"ORDER BY r."ROLE"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=Role

[schemaCmp.7.195]
enabled=1
caption=Users
export=1
qType=1
oType=Database
query=SELECT 	username AS "Name",	'User' AS "Target type",	DECODE(authentication_type,		'EXTERNAL', 'EXTERNALLY',		'GLOBAL', 'GLOBALLY',		'PASSWORD', 'BY /*{password}*/'	) || DECODE(external_name, NULL, '', ' AS ''' || external_name || '''') AS "Authentication",	default_tablespace AS "Default tablespace", 	temporary_tablespace AS "Temporary tablespace",	"PROFILE" AS "Profile",	DECODE(editions_enabled, 'Y', 'ENABLE') AS "Editions",	DECODE(expiry_date, NULL, NULL, 'PASSWORD EXPIRE') AS "Expire",	DECODE(lock_date, NULL, 'UNLOCK', 'LOCK') AS "State",	initial_rsrc_consumer_group AS "Initial RSRC consumer group"FROM dba_usersORDER BY username
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=User

[schemaCmp.7.196]
enabled=1
caption=Users
export=1
qType=1
oType=Database
query=SELECT 	username AS "Name",	'User' AS "Target type",	'BY /*{password}*/' AS "Authentication",	default_tablespace AS "Default tablespace", 	temporary_tablespace AS "Temporary tablespace",	"PROFILE" AS "Profile",	DECODE(expiry_date, NULL, NULL, 'PASSWORD EXPIRE') AS "Expire",	DECODE(lock_date, NULL, 'UNLOCK', 'LOCK') AS "State",	initial_rsrc_consumer_group AS "Initial RSRC consumer group"FROM dba_usersORDER BY username
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=User

[schemaCmp.7.197]
enabled=1
caption=User quotas
export=1
qType=0
oType=Database
query=SELECT	username AS "User",	'QUOTA ' || DECODE(max_bytes, -1, 'UNLIMITED', max_bytes) || ' ON "' || tablespace_name || '"' AS "Quotas__AGG"FROM dba_ts_quotas
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=User

[schemaCmp.7.198]
enabled=1
caption=User (CREATE)
export=1
qType=3
oType=User
query=CREATE USER "$NAME$"$ INDENTIFIED {AUTHENTICATION}$$	DEFAULT TABLESPACE "{DEFAULT TABLESPACE}"$$	TEMPORARY TABLESPACE "{TEMPORARY TABLESPACE}"$$	{QUOTAS}$$	PROFILE {PROFILE}$$	{EXPIRE}$$	ACCOUNT {STATE}$$	{EDITIONS} EDITIONS$$;	{|=USER CHANGE CONSUMER GROUP}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.199]
enabled=1
caption=User (DROP)
export=1
qType=3
oType=User
query=DROP USER "$NAME$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.200]
enabled=1
caption=User permissions
export=1
qType=1
oType=Database
query=SELECT 	grantee AS "Grantee",	"PRIVILEGE" AS "Permission",	'User permission' AS "Target type",	DECODE(admin_option, 'YES', 'ADMIN') AS "Admin option",	16 AS "SyncConfig__HIDDEN"FROM dba_sys_privs
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=User permission

[schemaCmp.7.201]
enabled=1
caption=User permission (GRANT)
export=1
qType=3
oType=User permission
query=GRANT $NAME$ TO "$NAME_LEVEL_1$"$ WITH {VALUE} OPTION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.202]
enabled=1
caption=User permission (REVOKE)
export=1
qType=3
oType=User permission
query=GRANT $NAME$ FROM "$NAME_LEVEL_1$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.203]
enabled=1
caption=Storage int
export=1
qType=3
oType=
query=${|=STORAGE EXTENTS}$$	PCTINCREASE {PCT INCREASE} $$FREELISTS {FREE LISTS} $$FREELIST GROUPS {FREE LIST GROUPS} $$BUFFER_POOL {BUFFER POOL} $$FLASH_CACHE {FLASH CACHE} $$CELL_FLASH_CACHE {CELL FLASH CACHE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.204]
enabled=1
caption=Constraints (CREATE)
export=1
qType=3
oType=
query=$\n|PRIMARY KEY=PRIMARY KEY (CREATE),UNIQUE KEY=UNIQUE KEY (CREATE),FOREIGN KEY=FOREIGN KEY (CREATE),CHECK CONSTRAINT=CHECK CONSTRAINT (CREATE)$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=TableKind=RELATIONAL | TableKind=CLUSTER
pathNameCnt=0
loadedObj=

[schemaCmp.7.205]
enabled=1
caption=Constraints.Target (CREATE)
export=1
qType=3
oType=
query=$\n|PRIMARY KEY.TARGET=PRIMARY KEY (CREATE),UNIQUE KEY.TARGET=UNIQUE KEY (CREATE),FOREIGN KEY.TARGET=FOREIGN KEY (CREATE),CHECK CONSTRAINT.TARGET=CHECK CONSTRAINT (CREATE)$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=TableKind=RELATIONAL | TableKind=CLUSTER
pathNameCnt=0
loadedObj=

[schemaCmp.7.206]
enabled=1
caption=Partitions
export=1
qType=1
oType=
query=SELECT 	table_owner AS "Schema name", 	table_name AS "Table name", 	partition_name AS "Partition name",	'Partition' AS "Target type",	high_value AS "Value",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	DECODE(segment_created, 'YES', 'IMMEDIATE', 'NO', 'DEFERRED') AS  "Segment creation",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extent AS "Min extents", 	max_extent AS "Max extents",	max_size AS "Max size",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	flash_cache AS "Flash cache",	cell_flash_cache AS "Cell flash cache",	tablespace_name AS "Tablespace",                                               	DECODE(compression, 'ENABLED', 'COMPRESS ' || DECODE(compress_for, 'BASIC', '', 'FOR ') || compress_for) AS "Compression"FROM all_tab_partitionsWHERE	('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY partition_position
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=2
loadedObj=Partition

[schemaCmp.7.207]
enabled=1
caption=Granted roles
export=1
qType=1
oType=Database
query=SELECT 	grantee AS "Grantee", 	granted_role AS "Role",	'Granted role' AS "Target type",	DECODE(admin_option, 'YES', 'ADMIN') AS "Admin option",	16 AS "SyncConfig__HIDDEN" FROM dba_role_privs
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Granted role

[schemaCmp.7.208]
enabled=1
caption=Partitions
export=1
qType=1
oType=
query=SELECT 	table_owner AS "Schema name", 	table_name AS "Table name", 	partition_name AS "Partition name",	'Partition' AS "Target type",	high_value AS "Value",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extent AS "Min extents", 	max_extent AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(compression, 'ENABLED', 'COMPRESS') AS "Compression"FROM all_tab_partitionsWHERE	('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY partition_position
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=2
loadedObj=Partition

[schemaCmp.7.209]
enabled=1
caption=Partition LOBs
export=1
qType=1
oType=
query=SELECT 	table_owner AS "Schema name", 	table_name AS "Table name", 	partition_name AS "Partition name",	column_name AS "Lob column",	'Partition LOB' AS "Target type",	DECODE(securefile, 'YES', 'SECUREFILE', 'NO', 'BASICFILE') AS "Store as",	tablespace_name AS "Tablespace",	DECODE(in_row, 'YES', 'ENABLE', 'NO', 'DISABLE') AS "Storage in row",	"CHUNK" AS "Chunk",	"PCTVERSION" AS "Pct Version",	"RETENTION" AS "Retension",	DECODE(deduplication, 'NO', 'KEEP_DUPLICATES', 'LOB', 'DEDUPLICATE') AS "Deduplication",	DECODE(compression, 'NONE', '', 'NO', 'NOCOMPRESS','COMPRESS ' || compression) AS "Compression",	DECODE("CACHE", 'YES', 'CACHE', 'NO', 'NOCACHE', 'CACHEREADS', 'CACHE READS') AS "Cache",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",		initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	max_size AS "Max size",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	flash_cache AS "Flash cache",	cell_flash_cache AS "Cell flash cache"FROM ALL_LOB_PARTITIONSWHERE	('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY column_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=3
loadedObj=Partition LOB

[schemaCmp.7.210]
enabled=1
caption=Partition LOBs
export=1
qType=1
oType=
query=SELECT 	table_owner AS "Schema name", 	table_name AS "Table name", 	partition_name AS "Partition name",	column_name AS "Lob column",	'Partition LOB' AS "Target type",	tablespace_name AS "Tablespace",	DECODE(in_row, 'YES', 'ENABLE', 'NO', 'DISABLE') AS "Storage in row",	"CHUNK" AS "Chunk",	"PCTVERSION" AS "Pct Version",	DECODE("CACHE", 'YES', 'CACHE', 'NO', 'NOCACHE', 'CACHEREADS', 'CACHE READS') AS "Cache",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",		initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extents AS "Min extents", 	max_extents AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool"FROM ALL_LOB_PARTITIONSWHERE	('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR table_name = '$OBJECT_NAME$')ORDER BY column_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Partition LOB

[schemaCmp.7.211]
enabled=1
caption=Schemas
export=1
qType=1
oType=Database
query=SELECT		username AS "Schema name", 	'Schema' AS "Target type" FROM all_usersORDER BY username
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Schema

[schemaCmp.7.212]
enabled=1
caption=Table partitions
export=1
qType=3
oType=
query=PARTITION BY RANGE ($PARTITION KEYS$)$ INTERVAL ({INTERVAL})$$ STORE IN({PARTITION TABLESPACE})$$	{|=TABLE SUBPARTITIONS}$($,\n|PARTITION=PARTITION RANGE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=Partition type=RANGE
pathNameCnt=0
loadedObj=

[schemaCmp.7.213]
enabled=1
caption=Table partitions
export=1
qType=3
oType=
query=PARTITION BY LIST ($PARTITION KEYS$)($,\n|PARTITION=PARTITION LIST$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Partition type=LIST
pathNameCnt=0
loadedObj=

[schemaCmp.7.214]
enabled=1
caption=Partition RANGE
export=1
qType=3
oType=
query=PARTITION $NAME$ VALUES LESS THAN ($VALUE$)${|=TABLE PARTITION DESCRIPTION}$${\n|SUBPARTITION=SUBPARTITION}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.215]
enabled=1
caption=Table partition description
export=1
qType=3
oType=
query=	$|=TABLE PHYSICAL PROPS$$	{\n|PARTITION LOB=PARTITION LOB}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.216]
enabled=1
caption=Partition LOB
export=1
qType=3
oType=
query=LOB($NAME$) STORE AS$ {STORE AS}$ (	${STORAGE IN ROW} STORAGE IN ROW$$ CHUNK {CHUNK}$$ PCTVERSION {PCT VERSION}$$ FREEPOOLS {FREE POOLS}$$ RETENSION MIN {RETENSION}$$	{DEDUPLICATION}$$ {COMPRESSION}$$ {CACHE}$$ {LOGGING}$$	{|=STORAGE}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.217]
enabled=1
caption=Partition LIST
export=1
qType=3
oType=
query=PARTITION $NAME$ VALUES ($VALUE$)${|=TABLE PARTITION DESCRIPTION}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.218]
enabled=1
caption=View (CREATE)
export=1
qType=3
oType=View
query=CREATE VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$" $|=VIEW DEF$ AS$SELECT$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.219]
enabled=1
caption=Table physical props
export=1
qType=3
oType=
query=${LOGGING}	$${|=PHYSICAL ATTRIBUTES}$$	TABLESPACE "{TABLESPACE}"$${COMPRESSION}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.220]
enabled=1
caption=Table physical props
export=1
qType=3
oType=
query=${LOGGING}	$${|=PHYSICAL ATTRIBUTES}$$	TABLESPACE "{TABLESPACE}"$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.221]
enabled=1
caption=Storage int
export=1
qType=3
oType=
query=${|=STORAGE EXTENTS}$$	PCTINCREASE {PCT INCREASE} $$FREELISTS {FREE LISTS} $$FREELIST GROUPS {FREE LIST GROUPS} $$BUFFER_POOL {BUFFER POOL}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.222]
enabled=1
caption=Table partitions
export=1
qType=3
oType=
query=PARTITION BY RANGE ($PARTITION KEYS$)($,\n|PARTITION=PARTITION RANGE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=Partition type=RANGE
pathNameCnt=0
loadedObj=

[schemaCmp.7.223]
enabled=1
caption=Table def
export=1
qType=3
oType=
query=OF XMLTYPE$(	{|=CONSTRAINTS INPLACE})$$ STORE {STORE}$$ 	XMLSCHEMA {XML SCHEMA.STRING}$$ ELEMENT {ELEMENT NAME.STRING}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=TABLEKIND=XMLTYPE
pathNameCnt=0
loadedObj=

[schemaCmp.7.224]
enabled=1
caption=LOB
export=1
qType=3
oType=
query=LOB($NAME$) STORE AS ($TABLESPACE {TABLESPACE}$	${STORAGE IN ROW} STORAGE IN ROW$$ CHUNK {CHUNK}$$ PCTVERSION {PCT VERSION}$$ FREEPOOLS {FREE POOLS}$$ RETENSION MIN {RETENSION}$$ {CACHE}$$ {LOGGING}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.225]
enabled=1
caption=LOB
export=1
qType=3
oType=
query=LOB($NAME$) STORE AS (	${STORAGE IN ROW} STORAGE IN ROW$$ CHUNK {CHUNK}$$ PCTVERSION {PCT VERSION}$$ FREEPOOLS {FREE POOLS}$$ RETENSION MIN {RETENSION}$$ {CACHE}$$ {LOGGING}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.226]
enabled=1
caption=LOB
export=1
qType=3
oType=
query=VARRAY $NAME$ STORE AS$ {STORE AS}$ LOB($TABLESPACE {TABLESPACE}$	${STORAGE IN ROW} STORAGE IN ROW$$ CHUNK {CHUNK}$$ PCTVERSION {PCT VERSION}$$ FREEPOOLS {FREE POOLS}$$ RETENSION MIN {RETENSION}$$ {CACHE}$$ {LOGGING}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=VArray=YES
pathNameCnt=0
loadedObj=

[schemaCmp.7.227]
enabled=1
caption=LOB
export=1
qType=3
oType=
query=VARRAY $NAME$ STORE AS$ {STORE AS}$ LOB(	${STORAGE IN ROW} STORAGE IN ROW$$ CHUNK {CHUNK}$$ PCTVERSION {PCT VERSION}$$ FREEPOOLS {FREE POOLS}$$ RETENSION MIN {RETENSION}$$ {CACHE}$$ {LOGGING}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=VArray=YES
pathNameCnt=0
loadedObj=

[schemaCmp.7.228]
enabled=1
caption=Supplemental log
export=1
qType=3
oType=
query=SUPPLEMENTAL LOG GROUP "$NAME$" ($COLUMNS$)$ {ALWAYS}$ 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.229]
enabled=1
caption=Index type (CREATE)
export=1
qType=3
oType=Index type
query=CREATE INDEXTYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" FOR$,\n|INDEX OPERATOR=INDEX OPERATOR$USING $IMPLEMENTATION TYPE$$ WITH ARRAY DML {, |INDEX DML=INDEX DML}$$WITH {PARTITIONING} PARTITION $
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.230]
enabled=1
caption=Dimension attribute
export=1
qType=3
oType=
query=ATTRIBUTE "$NAME$" DETERMINES ($COLUMNS$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.231]
enabled=1
caption=Tablespace (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE$ {FILE SIZE}$ TABLESPACE "$NAME$"$	DATAFILE {,\n\t\t|DATA FILE=DATA FILE}$	$MINIMUM EXTENT {MIN EXTENT}$$ BLOCKSIZE {BLOCK SIZE}$$ 	{LOGGING}$$ {FORCE LOGGING}$$	DEFAULT {COMPRESSION}$$	DEFAULT {|=STORAGE TABLESPACE}$$	{STATUS}$$	EXTENT MANAGEMENT {EXTENT MANAGEMENT}$$	SEGMENT SPACE MANAGEMENT {SEGMENT MANAGEMENT}$$;{;\n|DATA FILE=DATA FILE - MAKE OFFLINE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.232]
enabled=1
caption=Storage extents
export=1
qType=3
oType=
query=$INITIAL {INITIAL EXTENT}$$ NEXT {NEXT EXTENT}$$ MINEXTENTS {MIN EXTENTS}$$ MAXEXTENTS {MAX EXTENTS}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.233]
enabled=1
caption=Tablespace (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE TABLESPACE "$NAME$"$	DATAFILE {,\n\t\t|DATA FILE=DATA FILE}$	$MINIMUM EXTENT {MIN EXTENT}$$ BLOCKSIZE {BLOCK SIZE}$$ 	{LOGGING}$$ {FORCE LOGGING}$$	DEFAULT {|=STORAGE TABLESPACE}$$	{STATUS}$$	EXTENT MANAGEMENT {EXTENT MANAGEMENT}$$	SEGMENT SPACE MANAGEMENT {SEGMENT MANAGEMENT}$$;{;\n|DATA FILE=DATA FILE - MAKE OFFLINE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.234]
enabled=1
caption=Tablespace (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE TEMPORARY TABLESPACE "$NAME$"$	TEMPFILE {,\n\t\t|DATA FILE=DATA FILE}$$	EXTENT MANAGEMENT {EXTENT MANAGEMENT}$$;{;\n|DATA FILE=DATA FILE - MAKE OFFLINE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=CONTENTS=TEMPORARY
pathNameCnt=0
loadedObj=

[schemaCmp.7.235]
enabled=1
caption=Tablespace (CREATE)
export=1
qType=3
oType=Tablespace
query=CREATE UNDO TABLESPACE "$NAME$"$	DATAFILE {,\n\t\t|DATA FILE=DATA FILE}$$	EXTENT MANAGEMENT {EXTENT MANAGEMENT}$$;{;\n|DATA FILE=DATA FILE - MAKE OFFLINE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=CONTENTS=UNDO
pathNameCnt=0
loadedObj=

[schemaCmp.7.236]
enabled=1
caption=User (CREATE)
export=1
qType=3
oType=User
query=CREATE USER "$NAME$"$ INDENTIFIED {AUTHENTICATION}$$	DEFAULT TABLESPACE "{DEFAULT TABLESPACE}"$$	TEMPORARY TABLESPACE "{TEMPORARY TABLESPACE}"$$	{QUOTAS}$$	PROFILE {PROFILE}$$	{EXPIRE}$$	ACCOUNT {STATE}$$;	{|=USER CHANGE CONSUMER GROUP}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.237]
enabled=1
caption=Partition LOB
export=1
qType=3
oType=
query=LOB($NAME$) STORE AS$ {STORE AS}$ (	${STORAGE IN ROW} STORAGE IN ROW$$ CHUNK {CHUNK}$$ PCTVERSION {PCT VERSION}$$ FREEPOOLS {FREE POOLS}$$ {CACHE}$$ {LOGGING}$$	{|=STORAGE}$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.238]
enabled=1
caption=Granted role (GRANT)
export=1
qType=3
oType=Granted role
query=GRANT $NAME$ TO "$NAME_LEVEL_1$"$ WITH {VALUE} OPTION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.239]
enabled=1
caption=Granted role (REVOKE)
export=1
qType=3
oType=Granted role
query=GRANT "$NAME$" FROM "$NAME_LEVEL_1$"
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.240]
enabled=1
caption=User change consumer group
export=1
qType=3
oType=
query=BEGIN	SYS.DBMS_RESOURCE_MANAGER.SET_INITIAL_CONSUMER_GROUP ($NAME.STRING$, $INITIAL RSRC CONSUMER GROUP.STRING$);END;
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Initial RSRC consumer group<>
pathNameCnt=0
loadedObj=

[schemaCmp.7.241]
enabled=1
caption=DML Trigger (CREATE)
export=1
qType=3
oType=DML Trigger
query=CREATE TRIGGER "$SCHEMA_NAME$"."$NAME$" FOR $EVENT$ 	ON "$SCHEMA_NAME$"."$OBJECT_NAME$"	$REFERENCING NAMES$$	{CROSSEDITION} CROSSEDITION$$	{TRIGGER ORDERING}$$	{STATUS}$$	WHEN({WHEN CLAUSE})$$BODY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=Trigger type=COMPOUND
pathNameCnt=0
loadedObj=

[schemaCmp.7.242]
enabled=1
caption=DML Trigger (CREATE)
export=1
qType=3
oType=DML Trigger
query=CREATE TRIGGER "$SCHEMA_NAME$"."$NAME$" $TRIGGER TYPE$ $EVENT$ 	ON$ NESTED TABLE "{NESTED TABLE COLUMN}" OF $"$SCHEMA_NAME$"."$OBJECT_NAME$"	$REFERENCING NAMES$$	FOR EACH {ROW TRIGGER}$$	WHEN({WHEN CLAUSE})$$	{STATUS}$ $BODY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.243]
enabled=1
caption=DDL Trigger (CREATE)
export=1
qType=3
oType=DDL Trigger
query=CREATE TRIGGER "$SCHEMA_NAME$"."$NAME$" $TRIGGER TYPE$ $EVENT$ 	ON $BASE OBJECT$$	{TRIGGER ORDERING}$$	WHEN({WHEN CLAUSE})$$	{STATUS}$ $BODY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.244]
enabled=1
caption=DDL Trigger (CREATE)
export=1
qType=3
oType=DDL Trigger
query=CREATE TRIGGER "$SCHEMA_NAME$"."$NAME$" $TRIGGER TYPE$ $EVENT$ 	ON $BASE OBJECT$$	WHEN({WHEN CLAUSE})$$	{STATUS}$ $BODY$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.245]
enabled=1
caption=View def
export=1
qType=3
oType=
query=OF XMLTYPE$	XMLSCHEMA {XML SCHEMA.STRING}$$ ELEMENT {ELEMENT NAME.STRING}$$	{ANY SCHEMA} ANYSCHEMA$$ {NO SCHEMA} NOSCHEMA$	WITH OBJECT IDENTIFIER ($OID$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=VIEWKIND=XMLTYPE
pathNameCnt=0
loadedObj=

[schemaCmp.7.246]
enabled=1
caption=View def
export=1
qType=3
oType=
query=OF XMLTYPE$	XMLSCHEMA {XML SCHEMA.STRING}$$ ELEMENT {ELEMENT NAME.STRING}$	WITH OBJECT IDENTIFIER ($OID$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=VIEWKIND=XMLTYPE
pathNameCnt=0
loadedObj=

[schemaCmp.7.247]
enabled=1
caption=Tablespace (ALTER)
export=1
qType=3
oType=Tablespace
query=ALTER TABLESPACE "$NAME$" DEFAULT $|=STORAGE TABLESPACE$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=*Initial extent | *Next extent | *Min extents | *Max extents | *Pct increase | *Max size & Contents=PERMANENT
pathNameCnt=0
loadedObj=

[schemaCmp.7.248]
enabled=1
caption=Tablespace (ALTER)
export=1
qType=3
oType=Tablespace
query=ALTER TABLESPACE "$NAME$" DEFAULT $COMPRESSION$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=655360
condition=*Compression & Contents=PERMANENT
pathNameCnt=0
loadedObj=

[schemaCmp.7.249]
enabled=1
caption=Tablespace (ALTER)
export=1
qType=3
oType=Tablespace
query=ALTER TABLESPACE "$NAME$" MINIMUM EXTENT $MIN EXTENT$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=*Min extent & Contents=PERMANENT
pathNameCnt=0
loadedObj=

[schemaCmp.7.250]
enabled=1
caption=Tablespace (ALTER)
export=1
qType=3
oType=Tablespace
query=ALTER TABLESPACE "$NAME$" $FORCE LOGGING;NO FORCE LOGGING$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=*FORCE LOGGING & Contents=PERMANENT
pathNameCnt=0
loadedObj=

[schemaCmp.7.251]
enabled=1
caption=Tablespace (ALTER)
export=1
qType=3
oType=Tablespace
query=ALTER TABLESPACE "$NAME$" $LOGGING$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=*LOGGING & Contents=PERMANENT
pathNameCnt=0
loadedObj=

[schemaCmp.7.252]
enabled=1
caption=Tablespace (ALTER)
export=1
qType=3
oType=Tablespace
query=ALTER TABLESPACE "$NAME$" $STATUS$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=*STATUS & Contents=PERMANENT
pathNameCnt=0
loadedObj=

[schemaCmp.7.253]
enabled=1
caption=Tablespace (ALTER)
export=1
qType=3
oType=Tablespace
query=ALTER TABLESPACE "$NAME$" RETENSION $RETENSION$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=*Retension & Contents<>TEMPORARY
pathNameCnt=0
loadedObj=

[schemaCmp.7.254]
enabled=1
caption=Data file
export=1
qType=3
oType=
query=$NAME.STRING$$ SIZE {SIZE}$ REUSE $AUTOEXTEND {AUTO-EXTENSIBLE}$$ NEXT {INCREMENT BY}$$ MAXSIZE {MAX BYTES}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.255]
enabled=1
caption=Partition HASH
export=1
qType=3
oType=
query=PARTITION $NAME$${|=PARTITIONING STORAGE}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.256]
enabled=1
caption=Table partitions
export=1
qType=3
oType=
query=PARTITION BY HASH ($PARTITION KEYS$)($,\n|PARTITION=PARTITION HASH$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Partition type=HASH
pathNameCnt=0
loadedObj=

[schemaCmp.7.257]
enabled=1
caption=Subpartitions
export=1
qType=1
oType=
query=SELECT 	table_owner AS "Schema name", 	sp.table_name AS "Table name", 	partition_name AS "Partition name",	subpartition_name AS "Subpartition name",	'Subpartition' AS "Target type",	high_value AS "Value",	t.subpartitioning_type AS "Subpartition type",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	DECODE(segment_created, 'YES', 'IMMEDIATE', 'NO', 'DEFERRED') AS  "Segment creation",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extent AS "Min extents", 	max_extent AS "Max extents",	max_size AS "Max size",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	flash_cache AS "Flash cache",	cell_flash_cache AS "Cell flash cache",	tablespace_name AS "Tablespace",                                               	DECODE(compression, 'ENABLED', 'COMPRESS ' || DECODE(compress_for, 'BASIC', '', 'FOR ') || compress_for) AS "Compression"FROM all_tab_subpartitions sp	JOIN all_part_tables t 		ON t.table_name = sp.table_name		AND t.owner = sp.table_ownerWHERE	('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR sp.table_name = '$OBJECT_NAME$')ORDER BY subpartition_position
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=3
loadedObj=Subpartition

[schemaCmp.7.258]
enabled=1
caption=Subpartitions
export=1
qType=1
oType=
query=SELECT 	table_owner AS "Schema name", 	sp.table_name AS "Table name", 	partition_name AS "Partition name",	subpartition_name AS "Subpartition name",	'Subpartition' AS "Target type",	high_value AS "Value",	t.subpartitioning_type AS "Subpartition type",	PCT_FREE AS "PctFree",	PCT_USED AS "PctUsed",	INI_TRANS AS "IniTrans",	DECODE("LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	initial_extent AS "Initial extent", 	next_extent AS "Next extent",	min_extent AS "Min extents", 	max_extent AS "Max extents",	pct_increase AS "Pct increase",	"FREELISTS" AS "Free lists", 	freelist_groups AS "Free list groups",	"BUFFER_POOL" AS "Buffer pool",	tablespace_name AS "Tablespace",	DECODE(compression, 'ENABLED', 'COMPRESS') AS "Compression"FROM all_tab_subpartitions sp	JOIN all_part_tables t 		ON t.table_name = sp.table_name		AND t.owner = sp.table_ownerWHERE	('$SCHEMA_NAME$' IS NULL OR table_owner = '$SCHEMA_NAME$')	AND ('$OBJECT_NAME$' IS NULL OR sp.table_name = '$OBJECT_NAME$')ORDER BY subpartition_position
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Subpartition

[schemaCmp.7.259]
enabled=1
caption=Partitioning storage
export=1
qType=3
oType=
query=	$TABLESPACE "{TABLESPACE}"$$ {COMPRESSION}$$	{\n|PARTITION LOB=PARTITION LOB}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.260]
enabled=1
caption=Index partitions
export=1
qType=1
oType=
query=SELECT 	i.owner AS "Schema name", 	i.table_name AS "Table name",	i.index_name AS "Index name", 	partition_name AS "Partition name",	'Partition' AS "Target type",	ip.high_value AS "Value",	ip.PCT_FREE AS "PctFree",	ip.INI_TRANS AS "IniTrans",	DECODE(ip."LOGGING", 'YES', 'LOGGING', 'NO', 'NOLOGGING') AS "Logging",	ip.initial_extent AS "Initial extent", 	ip.next_extent AS "Next extent",	ip.min_extent AS "Min extents", 	ip.max_extent AS "Max extents",	ip.pct_increase AS "Pct increase",	ip."FREELISTS" AS "Free lists", 	ip.freelist_groups AS "Free list groups",	ip."BUFFER_POOL" AS "Buffer pool",	ip.tablespace_name AS "Tablespace",	DECODE(ip.compression, 'ENABLED', 'COMPRESS') AS "Compression"FROM all_ind_partitions ip	JOIN all_indexes i		ON i.index_name = ip.index_name		AND i.owner = ip.index_ownerWHERE 	('$SCHEMA_NAME$' IS NULL OR i.owner = '$SCHEMA_NAME$') 	AND ('$OBJECT_NAME$' IS NULL OR i.table_name = '$OBJECT_NAME$')ORDER BY ip.partition_position
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=3
loadedObj=Partition

[schemaCmp.7.261]
enabled=1
caption=RSRC.Resource manager
export=1
qType=1
oType=Database
query=SELECT 	'Resource manager' AS "Root name",	'Resource manager' AS "Target type",	4 as "SyncConfig__HIDDEN" -- do not ALTER childrenFROM dual
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Resource manager

[schemaCmp.7.262]
enabled=1
caption=RSRC.Consumer group category
export=1
qType=1
oType=Database
query=SELECT	'Resource manager'          AS "Root name",	"NAME"                      AS "Category",	'Consumer group category'   AS "Target type",	comments                    AS "Comment"FROM	dba_rsrc_categoriesORDER BY  "NAME"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Consumer group category

[schemaCmp.7.263]
enabled=1
caption=RSRC.Consumer groups
export=1
qType=1
oType=Database
query=SELECT	'Resource manager'   AS "Root name",	consumer_group       AS "Group name",	'Consumer group'     AS "Target type",	cpu_method           AS "CPU method",	mgmt_method          AS "Management method",	"CATEGORY"           AS "Category",	comments             AS "Comment"FROM	dba_rsrc_consumer_groupsORDER BY consumer_group
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Consumer group

[schemaCmp.7.264]
enabled=1
caption=RSRC.Consumer groups
export=1
qType=1
oType=Database
query=SELECT	'Resource manager'   AS "Root name",	consumer_group       AS "Group name",	'Consumer group'     AS "Target type",	cpu_method           AS "CPU method",	comments             AS "Comment"FROM	dba_rsrc_consumer_groupsORDER BY consumer_group
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Consumer group

[schemaCmp.7.265]
enabled=1
caption=RSRC.Resource manager (ALTER)
export=1
qType=3
oType=Resource manager
query=BEGIN	DBMS_RESOURCE_MANAGER.CREATE_PENDING_AREA();		$\n\n|CONSUMER GROUP CATEGORY,CONSUMER GROUP,RESOURCE PLAN$		DBMS_RESOURCE_MANAGER.VALIDATE_PENDING_AREA();	DBMS_RESOURCE_MANAGER.SUBMIT_PENDING_AREA();END;/
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.266]
enabled=1
caption=RSRC.Consumer group (CREATE)
export=1
qType=3
oType=Consumer group
query=	DBMS_RESOURCE_MANAGER.CREATE_CONSUMER_GROUP(		CONSUMER_GROUP => $NAME.STRING$,		COMMENT        => $COMMENT.STRING$$,		CPU_MTH        => {CPU METHOD.STRING}$$,		MGMT_MTH       => {MANAGEMENT METHOD.STRING}$$,		CATEGORY       => {CATEGORY.STRING}$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.267]
enabled=1
caption=RSRC.Consumer group (ALTER)
export=1
qType=3
oType=Consumer group
query=	DBMS_RESOURCE_MANAGER.UPDATE_CONSUMER_GROUP(		CONSUMER_GROUP => $NAME.STRING$,		NEW_COMMENT    => $COMMENT.STRING$$,		NEW_CPU_MTH    => {CPU METHOD.STRING}$$,		NEW_MGMT_MTH   => {MANAGEMENT METHOD.STRING}$$,		NEW_CATEGORY   => {CATEGORY.STRING}$);
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.268]
enabled=1
caption=RSRC.Consumer group (ALTER)
export=1
qType=3
oType=Consumer group
query=	DBMS_RESOURCE_MANAGER.UPDATE_CONSUMER_GROUP(		CONSUMER_GROUP => $NAME.STRING$,		NEW_COMMENT    => $COMMENT.STRING$$,		NEW_CPU_MTH    => {CPU METHOD.STRING}$);
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.269]
enabled=1
caption=RSRC.Consumer group (CREATE)
export=1
qType=3
oType=Consumer group
query=	DBMS_RESOURCE_MANAGER.CREATE_CONSUMER_GROUP(		CONSUMER_GROUP => $NAME.STRING$,		COMMENT        => $COMMENT.STRING$$,		CPU_MTH        => {CPU METHOD.STRING}$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.270]
enabled=1
caption=RSRC.Consumer group (DROP)
export=1
qType=3
oType=Consumer group
query=	DBMS_RESOURCE_MANAGER.DELETE_CONSUMER_GROUP(		CONSUMER_GROUP => $NAME.STRING$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.271]
enabled=1
caption=RSRC.Consumer group category (CREATE)
export=1
qType=3
oType=Consumer group category
query=	DBMS_RESOURCE_MANAGER.CREATE_CATEGORY(		CATEGORY => $NAME.STRING$,		COMMENT  => $COMMENT.STRING$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.272]
enabled=1
caption=RSRC.Consumer group category (ALTER)
export=1
qType=3
oType=Consumer group category
query=	DBMS_RESOURCE_MANAGER.UPDATE_CATEGORY(		CATEGORY    => $NAME.STRING$,		NEW_COMMENT => $COMMENT.STRING$);
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.273]
enabled=1
caption=RSRC.Consumer group category (DROP)
export=1
qType=3
oType=Consumer group category
query=	DBMS_RESOURCE_MANAGER.DELETE_CATEGORY(		CATEGORY => $NAME.STRING$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.274]
enabled=1
caption=RSRC.Resource plans
export=1
qType=1
oType=Database
query=SELECT	'Resource manager'         AS "Root name",	"PLAN"                     AS "Name",	'Resource plan'            AS "Target type",	cpu_method                 AS "CPU method",	mgmt_method                AS "Management method",	active_sess_pool_mth       AS "Active session pool",	parallel_degree_limit_mth  AS "Parallel degree limit",	queueing_mth               AS "Queueing",	DECODE(sub_plan, 'YES', 'TRUE', 'NO', 'FALSE') AS "Sub plan",	comments 				   AS "Comment"FROM	dba_rsrc_plansORDER BY 2
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=1
loadedObj=Resource plan

[schemaCmp.7.275]
enabled=1
caption=RSRC.Resource plans
export=1
qType=1
oType=Database
query=SELECT	'Resource manager'         AS "Root name",	"PLAN"                     AS "Name",	'Resource plan'            AS "Target type",	cpu_method                 AS "CPU method",	active_sess_pool_mth       AS "Active session pool",	parallel_degree_limit_mth  AS "Parallel degree limit",	queueing_mth               AS "Queueing",	comments                   AS "Comment"FROM	dba_rsrc_plansORDER BY 2
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Resource plan

[schemaCmp.7.276]
enabled=1
caption=RSRC.Resource plan (CREATE)
export=1
qType=3
oType=Resource plan
query=	DBMS_RESOURCE_MANAGER.CREATE_PLAN(		PLAN                      => $NAME.STRING$,		COMMENT                   => $COMMENT.STRING$$,		CPU_MTH                   => {CPU METHOD.STRING}$$,		ACTIVE_SESS_POOL_MTH      => {ACTIVE SESSION POOL.STRING}$$,		PARALLEL_DEGREE_LIMIT_MTH => {PARALLEL DEGREE LIMIT.STRING}$$,		QUEUEING_MTH              => {QUEUEING.STRING}$$,		MGMT_MTH                  => {MANAGEMENT METHOD.STRING}$$,		SUB_PLAN                  => {SUB PLAN}$);$		{\n\n|RESOURCE PLAN DIRECTIVE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.277]
enabled=1
caption=RSRC.Resource plan (ALTER)
export=1
qType=3
oType=Resource plan
query=	DBMS_RESOURCE_MANAGER.UPDATE_PLAN(		PLAN                          => $NAME.STRING$,		NEW_COMMENT                   => $COMMENT.STRING$$,		NEW_CPU_MTH                   => {CPU METHOD.STRING}$$,		NEW_ACTIVE_SESS_POOL_MTH      => {ACTIVE SESSION POOL.STRING}$$,		NEW_PARALLEL_DEGREE_LIMIT_MTH => {PARALLEL DEGREE LIMIT.STRING}$$,		NEW_QUEUEING_MTH              => {QUEUEING.STRING}$$,		NEW_MGMT_MTH                  => {MANAGEMENT METHOD.STRING}$$,		NEW_SUB_PLAN                  => {SUB PLAN}$);$		{\n\n|RESOURCE PLAN DIRECTIVE}$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.278]
enabled=1
caption=RSRC.Resource plan (DROP)
export=1
qType=3
oType=Resource plan
query=	DBMS_RESOURCE_MANAGER.DELETE_PLAN(		PLAN => $NAME.STRING$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.279]
enabled=1
caption=RSRC.Resource plan (CREATE)
export=1
qType=3
oType=Resource plan
query=	DBMS_RESOURCE_MANAGER.CREATE_PLAN(		PLAN                      => $NAME.STRING$,		COMMENT                   => $COMMENT.STRING$$,		CPU_MTH                   => {CPU METHOD.STRING}$$,		ACTIVE_SESS_POOL_MTH      => {ACTIVE SESSION POOL.STRING}$$,		PARALLEL_DEGREE_LIMIT_MTH => {PARALLEL DEGREE LIMIT.STRING}$$,		QUEUEING_MTH              => {QUEUEING.STRING}$);$		{\n\n|RESOURCE PLAN DIRECTIVE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.280]
enabled=1
caption=RSRC.Resource plan (ALTER)
export=1
qType=3
oType=Resource plan
query=	DBMS_RESOURCE_MANAGER.UPDATE_PLAN(		PLAN                          => $NAME.STRING$,		NEW_COMMENT                   => $COMMENT.STRING$$,		NEW_CPU_MTH                   => {CPU METHOD.STRING}$$,		NEW_ACTIVE_SESS_POOL_MTH      => {ACTIVE SESSION POOL.STRING}$$,		NEW_PARALLEL_DEGREE_LIMIT_MTH => {PARALLEL DEGREE LIMIT.STRING}$$,		NEW_QUEUEING_MTH              => {QUEUEING.STRING}$);$		{\n\n|RESOURCE PLAN DIRECTIVE}$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.281]
enabled=1
caption=RSRC.Resource plan directives
export=1
qType=1
oType=Database
query=SELECT	'Resource manager'          AS "Root name",	"PLAN"                      AS "Name",	group_or_subplan            AS "Directive target",	'Resource plan directive'   AS "Target type",	cpu_p1                      AS "CPU P1",	cpu_p2                      AS "CPU P2",	cpu_p3                      AS "CPU P3",	cpu_p4                      AS "CPU P4",	cpu_p5                      AS "CPU P5",	cpu_p6                      AS "CPU P6",	cpu_p7                      AS "CPU P7",	cpu_p8                      AS "CPU P8",	active_sess_pool_p1			AS "Active session pool P1",	queueing_p1					AS "Queueing P1",	parallel_degree_limit_p1	AS "Parallel degree limit P1",	switch_group				AS "Switch group",	switch_time					AS "Switch time",	switch_estimate				AS "Switch estimate",	max_est_exec_time			AS "Max est exec time",	undo_pool					AS "Undo pool",	max_idle_time				AS "Max idle time",	max_idle_blocker_time		AS "Max idle blocker time",	switch_time_in_call			AS "Switch time in call",	mgmt_p1                     AS "Mgmt P1",	mgmt_p2                     AS "Mgmt P2",	mgmt_p3                     AS "Mgmt P3",	mgmt_p4                     AS "Mgmt P4",	mgmt_p5                     AS "Mgmt P5",	mgmt_p6                     AS "Mgmt P6",	mgmt_p7                     AS "Mgmt P7",	mgmt_p8                     AS "Mgmt P8",	switch_io_megabytes			AS "Switch IO megabytes",	switch_io_reqs				AS "Switch IO reqs",	switch_for_call				AS "Switch for call",	comments                    AS "Comment"FROM	dba_rsrc_plan_directives
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720897
condition=
pathNameCnt=2
loadedObj=Resource plan directive

[schemaCmp.7.282]
enabled=1
caption=RSRC.Resource plan directives
export=1
qType=1
oType=Database
query=SELECT	'Resource manager'          AS "Root name",	"PLAN"                      AS "Name",	group_or_subplan            AS "Directive target",	'Resource plan directive'   AS "Target type",	cpu_p1                      AS "CPU P1",	cpu_p2                      AS "CPU P2",	cpu_p3                      AS "CPU P3",	cpu_p4                      AS "CPU P4",	cpu_p5                      AS "CPU P5",	cpu_p6                      AS "CPU P6",	cpu_p7                      AS "CPU P7",	cpu_p8                      AS "CPU P8",	active_sess_pool_p1			AS "Active session pool P1",	queueing_p1					AS "Queueing P1",	parallel_degree_limit_p1	AS "Parallel degree limit P1",	switch_group				AS "Switch group",	switch_time					AS "Switch time",	switch_estimate				AS "Switch estimate",	max_est_exec_time			AS "Max est exec time",	undo_pool					AS "Undo pool",	max_idle_time				AS "Max idle time",	max_idle_blocker_time		AS "Max idle blocker time",	switch_time_in_call			AS "Switch time in call",	mgmt_p1                     AS "Mgmt P1",	mgmt_p2                     AS "Mgmt P2",	mgmt_p3                     AS "Mgmt P3",	mgmt_p4                     AS "Mgmt P4",	mgmt_p5                     AS "Mgmt P5",	mgmt_p6                     AS "Mgmt P6",	mgmt_p7                     AS "Mgmt P7",	mgmt_p8                     AS "Mgmt P8",	switch_io_megabytes			AS "Switch IO megabytes",	switch_io_reqs				AS "Switch IO reqs",	switch_for_call				AS "Switch for call",	max_utilization_limit		AS "Max utilization limit",	comments                    AS "Comment"FROM	dba_rsrc_plan_directives
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720898
condition=
pathNameCnt=2
loadedObj=Resource plan directive

[schemaCmp.7.283]
enabled=1
caption=RSRC.Resource plan directives
export=1
qType=1
oType=Database
query=SELECT	'Resource manager'          AS "Root name",	"PLAN"                      AS "Name",	group_or_subplan            AS "Directive target",	'Resource plan directive'   AS "Target type",	cpu_p1                      AS "CPU P1",	cpu_p2                      AS "CPU P2",	cpu_p3                      AS "CPU P3",	cpu_p4                      AS "CPU P4",	cpu_p5                      AS "CPU P5",	cpu_p6                      AS "CPU P6",	cpu_p7                      AS "CPU P7",	cpu_p8                      AS "CPU P8",	active_sess_pool_p1			AS "Active session pool P1",	queueing_p1					AS "Queueing P1",	parallel_degree_limit_p1	AS "Parallel degree limit P1",	switch_group				AS "Switch group",	switch_time					AS "Switch time",	switch_estimate				AS "Switch estimate",	max_est_exec_time			AS "Max est exec time",	undo_pool					AS "Undo pool",	max_idle_time				AS "Max idle time",	max_idle_blocker_time		AS "Max idle blocker time",	switch_time_in_call			AS "Switch time in call",	comments                    AS "Comment"FROM	dba_rsrc_plan_directives
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=2
loadedObj=Resource plan directive

[schemaCmp.7.284]
enabled=1
caption=RSRC.Resource plan directive (CREATE)
export=1
qType=3
oType=Resource plan directive
query=	DBMS_RESOURCE_MANAGER.CREATE_PLAN_DIRECTIVE(		plan                      => '$NAME_LEVEL_3$',		group_or_subplan          => $NAME.STRING$$,		COMMENT                   => {COMMENTS.STRING}$$,		cpu_p1                    => {CPU P1}$$,		cpu_p2                    => {CPU P2}$$,		cpu_p3                    => {CPU P3}$$,		cpu_p4                    => {CPU P4}$$,		cpu_p5                    => {CPU P5}$$,		cpu_p6                    => {CPU P6}$$,		cpu_p7                    => {CPU P7}$$,		cpu_p8                    => {CPU P8}$$,		active_sess_pool_p1       => {ACTIVE SESSION POOL P1}$$,		queueing_p1               => {QUEUEING P1}$$,		parallel_degree_limit_p1  => {PARALLEL DEGREE LIMIT P1}$$,		switch_group              => {SWITCH GROUP.STRING}$$,		switch_time               => {SWITCH TIME}$$,		switch_estimate           => {SWITCH ESTIMATE}$$,		max_est_exec_time         => {MAX EST EXEC TIME}$$,		undo_pool                 => {UNDO POOL}$$,		max_idle_time             => {MAX IDLE TIME}$$,		max_idle_blocker_time     => {MAX IDLE BLOCKER TIME}$$,		switch_time_in_call       => {SWITCH TIME IN CALL}$$,		mgmt_p1                   => {MGMT P1}$$,		mgmt_p2                   => {MGMT P2}$$,		mgmt_p3                   => {MGMT P3}$$,		mgmt_p4                   => {MGMT P4}$$,		mgmt_p5                   => {MGMT P5}$$,		mgmt_p6                   => {MGMT P6}$$,		mgmt_p7                   => {MGMT P7}$$,		mgmt_p8                   => {MGMT P8}$$,		switch_io_megabytes       => {SWITCH IO MEGABYTES}$$,		switch_io_reqs            => {SWITCH IO REQS}$$,		switch_for_call           => {SWITCH FOR CALL}$$,		max_utilization_limit     => {MAX UTILIZATION LIMIT}$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720898
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.285]
enabled=1
caption=RSRC.Resource plan directive (CREATE)
export=1
qType=3
oType=Resource plan directive
query=	DBMS_RESOURCE_MANAGER.CREATE_PLAN_DIRECTIVE(		plan                      => '$NAME_LEVEL_3$',		group_or_subplan          => $NAME.STRING$$,		COMMENT                   => {COMMENTS.STRING}$$,		cpu_p1                    => {CPU P1}$$,		cpu_p2                    => {CPU P2}$$,		cpu_p3                    => {CPU P3}$$,		cpu_p4                    => {CPU P4}$$,		cpu_p5                    => {CPU P5}$$,		cpu_p6                    => {CPU P6}$$,		cpu_p7                    => {CPU P7}$$,		cpu_p8                    => {CPU P8}$$,		active_sess_pool_p1       => {ACTIVE SESSION POOL P1}$$,		queueing_p1               => {QUEUEING P1}$$,		parallel_degree_limit_p1  => {PARALLEL DEGREE LIMIT P1}$$,		switch_group              => {SWITCH GROUP.STRING}$$,		switch_time               => {SWITCH TIME}$$,		switch_estimate           => {SWITCH ESTIMATE}$$,		max_est_exec_time         => {MAX EST EXEC TIME}$$,		undo_pool                 => {UNDO POOL}$$,		max_idle_time             => {MAX IDLE TIME}$$,		max_idle_blocker_time     => {MAX IDLE BLOCKER TIME}$$,		switch_time_in_call       => {SWITCH TIME IN CALL}$$,		mgmt_p1                   => {MGMT P1}$$,		mgmt_p2                   => {MGMT P2}$$,		mgmt_p3                   => {MGMT P3}$$,		mgmt_p4                   => {MGMT P4}$$,		mgmt_p5                   => {MGMT P5}$$,		mgmt_p6                   => {MGMT P6}$$,		mgmt_p7                   => {MGMT P7}$$,		mgmt_p8                   => {MGMT P8}$$,		switch_io_megabytes       => {SWITCH IO MEGABYTES}$$,		switch_io_reqs            => {SWITCH IO REQS}$$,		switch_for_call           => {SWITCH FOR CALL}$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.286]
enabled=1
caption=RSRC.Resource plan directive (CREATE)
export=1
qType=3
oType=Resource plan directive
query=	DBMS_RESOURCE_MANAGER.CREATE_PLAN_DIRECTIVE(		plan                      => '$NAME_LEVEL_3$',		group_or_subplan          => $NAME.STRING$$,		COMMENT                   => {COMMENTS.STRING}$$,		cpu_p1                    => {CPU P1}$$,		cpu_p2                    => {CPU P2}$$,		cpu_p3                    => {CPU P3}$$,		cpu_p4                    => {CPU P4}$$,		cpu_p5                    => {CPU P5}$$,		cpu_p6                    => {CPU P6}$$,		cpu_p7                    => {CPU P7}$$,		cpu_p8                    => {CPU P8}$$,		active_sess_pool_p1       => {ACTIVE SESSION POOL P1}$$,		queueing_p1               => {QUEUEING P1}$$,		parallel_degree_limit_p1  => {PARALLEL DEGREE LIMIT P1}$$,		switch_group              => {SWITCH GROUP.STRING}$$,		switch_time               => {SWITCH TIME}$$,		switch_estimate           => {SWITCH ESTIMATE}$$,		max_est_exec_time         => {MAX EST EXEC TIME}$$,		undo_pool                 => {UNDO POOL}$$,		max_idle_time             => {MAX IDLE TIME}$$,		max_idle_blocker_time     => {MAX IDLE BLOCKER TIME}$$,		switch_time_in_call       => {SWITCH TIME IN CALL}$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.287]
enabled=1
caption=RSRC.Resource plan directive (ALTER)
export=1
qType=3
oType=Resource plan directive
query=	DBMS_RESOURCE_MANAGER.UPDATE_PLAN_DIRECTIVE(		plan                          => '$NAME_LEVEL_3$',		group_or_subplan              => $NAME.STRING$$,		new_comment                   => {COMMENTS.STRING}$$,		new_cpu_p1                    => {CPU P1}$$,		new_cpu_p2                    => {CPU P2}$$,		new_cpu_p3                    => {CPU P3}$$,		new_cpu_p4                    => {CPU P4}$$,		new_cpu_p5                    => {CPU P5}$$,		new_cpu_p6                    => {CPU P6}$$,		new_cpu_p7                    => {CPU P7}$$,		new_cpu_p8                    => {CPU P8}$$,		new_active_sess_pool_p1       => {ACTIVE SESSION POOL P1}$$,		new_queueing_p1               => {QUEUEING P1}$$,		new_parallel_degree_limit_p1  => {PARALLEL DEGREE LIMIT P1}$$,		new_switch_group              => {SWITCH GROUP.STRING}$$,		new_switch_time               => {SWITCH TIME}$$,		new_switch_estimate           => {SWITCH ESTIMATE}$$,		new_max_est_exec_time         => {MAX EST EXEC TIME}$$,		new_undo_pool                 => {UNDO POOL}$$,		new_max_idle_time             => {MAX IDLE TIME}$$,		new_max_idle_blocker_time     => {MAX IDLE BLOCKER TIME}$$,		new_switch_time_in_call       => {SWITCH TIME IN CALL}$$,		new_mgmt_p1                   => {MGMT P1}$$,		new_mgmt_p2                   => {MGMT P2}$$,		new_mgmt_p3                   => {MGMT P3}$$,		new_mgmt_p4                   => {MGMT P4}$$,		new_mgmt_p5                   => {MGMT P5}$$,		new_mgmt_p6                   => {MGMT P6}$$,		new_mgmt_p7                   => {MGMT P7}$$,		new_mgmt_p8                   => {MGMT P8}$$,		new_switch_io_megabytes       => {SWITCH IO MEGABYTES}$$,		new_switch_io_reqs            => {SWITCH IO REQS}$$,		new_switch_for_call           => {SWITCH FOR CALL}$$,		new_max_utilization_limit     => {MAX UTILIZATION LIMIT}$);
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=720898
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.288]
enabled=1
caption=RSRC.Resource plan directive (ALTER)
export=1
qType=3
oType=Resource plan directive
query=	DBMS_RESOURCE_MANAGER.UPDATE_PLAN_DIRECTIVE(		plan                          => '$NAME_LEVEL_3$',		group_or_subplan              => $NAME.STRING$$,		new_comment                   => {COMMENTS.STRING}$$,		new_cpu_p1                    => {CPU P1}$$,		new_cpu_p2                    => {CPU P2}$$,		new_cpu_p3                    => {CPU P3}$$,		new_cpu_p4                    => {CPU P4}$$,		new_cpu_p5                    => {CPU P5}$$,		new_cpu_p6                    => {CPU P6}$$,		new_cpu_p7                    => {CPU P7}$$,		new_cpu_p8                    => {CPU P8}$$,		new_active_sess_pool_p1       => {ACTIVE SESSION POOL P1}$$,		new_queueing_p1               => {QUEUEING P1}$$,		new_parallel_degree_limit_p1  => {PARALLEL DEGREE LIMIT P1}$$,		new_switch_group              => {SWITCH GROUP.STRING}$$,		new_switch_time               => {SWITCH TIME}$$,		new_switch_estimate           => {SWITCH ESTIMATE}$$,		new_max_est_exec_time         => {MAX EST EXEC TIME}$$,		new_undo_pool                 => {UNDO POOL}$$,		new_max_idle_time             => {MAX IDLE TIME}$$,		new_max_idle_blocker_time     => {MAX IDLE BLOCKER TIME}$$,		new_switch_time_in_call       => {SWITCH TIME IN CALL}$$,		new_mgmt_p1                   => {MGMT P1}$$,		new_mgmt_p2                   => {MGMT P2}$$,		new_mgmt_p3                   => {MGMT P3}$$,		new_mgmt_p4                   => {MGMT P4}$$,		new_mgmt_p5                   => {MGMT P5}$$,		new_mgmt_p6                   => {MGMT P6}$$,		new_mgmt_p7                   => {MGMT P7}$$,		new_mgmt_p8                   => {MGMT P8}$$,		new_switch_io_megabytes       => {SWITCH IO MEGABYTES}$$,		new_switch_io_reqs            => {SWITCH IO REQS}$$,		new_switch_for_call           => {SWITCH FOR CALL}$);
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.289]
enabled=1
caption=RSRC.Resource plan directive (ALTER)
export=1
qType=3
oType=Resource plan directive
query=	DBMS_RESOURCE_MANAGER.UPDATE_PLAN_DIRECTIVE(		plan                          => '$NAME_LEVEL_3$',		group_or_subplan              => $NAME.STRING$$,		new_comment                   => {COMMENTS.STRING}$$,		new_cpu_p1                    => {CPU P1}$$,		new_cpu_p2                    => {CPU P2}$$,		new_cpu_p3                    => {CPU P3}$$,		new_cpu_p4                    => {CPU P4}$$,		new_cpu_p5                    => {CPU P5}$$,		new_cpu_p6                    => {CPU P6}$$,		new_cpu_p7                    => {CPU P7}$$,		new_cpu_p8                    => {CPU P8}$$,		new_active_sess_pool_p1       => {ACTIVE SESSION POOL P1}$$,		new_queueing_p1               => {QUEUEING P1}$$,		new_parallel_degree_limit_p1  => {PARALLEL DEGREE LIMIT P1}$$,		new_switch_group              => {SWITCH GROUP.STRING}$$,		new_switch_time               => {SWITCH TIME}$$,		new_switch_estimate           => {SWITCH ESTIMATE}$$,		new_max_est_exec_time         => {MAX EST EXEC TIME}$$,		new_undo_pool                 => {UNDO POOL}$$,		new_max_idle_time             => {MAX IDLE TIME}$$,		new_max_idle_blocker_time     => {MAX IDLE BLOCKER TIME}$$,		new_switch_time_in_call       => {SWITCH TIME IN CALL}$);
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.290]
enabled=1
caption=RSRC.Resource plan directive (DROP)
export=1
qType=3
oType=Resource plan directive
query=	DBMS_RESOURCE_MANAGER.DELETE_PLAN_DIRECTIVE(		plan                      => '$NAME_LEVEL_3$',		group_or_subplan          => $NAME.STRING$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.291]
enabled=1
caption=Table subpartitions
export=1
qType=3
oType=
query=SUBPARTITION BY $SUBPARTITION TYPE$($SUBPARTITION KEYS$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.292]
enabled=1
caption=Subpartition
export=1
qType=3
oType=
query=SUBPARTITION ${NAME} $VALUES LESS THAN ($VALUE$)${|=TABLE PARTITION DESCRIPTION}$ 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Subpartition type=RANGE
pathNameCnt=0
loadedObj=

[schemaCmp.7.293]
enabled=1
caption=Subpartition
export=1
qType=3
oType=
query=SUBPARTITION ${NAME} $VALUES ($VALUE$)${|=TABLE PARTITION DESCRIPTION}$ 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Subpartition type=LIST
pathNameCnt=0
loadedObj=

[schemaCmp.7.294]
enabled=1
caption=Subpartition
export=1
qType=3
oType=
query=SUBPARTITION ${NAME} $${|=TABLE PARTITION DESCRIPTION}$ 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=Subpartition type=HASH
pathNameCnt=0
loadedObj=

[schemaCmp.7.295]
enabled=1
caption=Index partitions
export=1
qType=3
oType=
query=$LOCAL({\n|PARTITION=INDEX PARTITION})$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.296]
enabled=1
caption=Index partition
export=1
qType=3
oType=
query=PARTITION $"{NAME}" $$|=TABLE PHYSICAL PROPS$ 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.297]
enabled=0
caption=Data file (CREATE)
export=1
qType=3
oType=Data file
query=ALTER TABLESPACE "$NAME_LEVEL_2$" ADD DATAFILE $|=DATA FILE$$;{|=DATA FILE - MAKE OFFLINE}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.298]
enabled=0
caption=Data file (DROP)
export=1
qType=3
oType=Data file
query=ALTER TABLESPACE "$NAME_LEVEL_2$" DROP DATAFILE $NAME.STRING$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.7.299]
enabled=1
caption=Data file (ALTER)
export=1
qType=3
oType=Data file
query=ALTER TABLESPACE "$NAME_LEVEL_2$" DATAFILE $NAME.STRING$ $ONLINE STATUS$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=*Online status
pathNameCnt=0
loadedObj=

[schemaCmp.7.300]
enabled=1
caption=Data file - make offline
export=1
qType=3
oType=Data file
query=ALTER TABLESPACE "$NAME_LEVEL_2$" DATAFILE $NAME.STRING$ OFFLINE
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=Online status=OFFLINE
pathNameCnt=0
loadedObj=

[schemaCmp.7.301]
enabled=1
caption=Code object (CREATE)
export=1
qType=3
oType=Procedure,Function,Package,Type
query=$DDL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=.=
pathNameCnt=0
loadedObj=

[schemaCmp.7.302]
enabled=1
caption=Code object (CREATE)
export=1
qType=3
oType=Procedure,Function,Package,Type
query=-- ignored wrapped object $SCHEMA_NAME$.$NAME$ 
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=.<>
pathNameCnt=0
loadedObj=

[schemaCmp.7.303]
enabled=1
caption=Code object (ALTER)
export=1
qType=3
oType=Procedure,Function,Package,Type
query=-- ignored wrapped object $SCHEMA_NAME$.$NAME$ 
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=.=
pathNameCnt=0
loadedObj=

[schemaCmp.8]
enabled=1
caption=Greenplum
export=1
count=82
dbType=12
useCache=0
objTypes=Role	Superuser    Create DB    Create role    Inherit    Can login    Replication    Connection limit    ValidRole member|UserTableViewFunctionAggregate|FunctionCast|ConstantConversion|CursorSequence	Increment    Minimum value    Maximum value    -Start value    CycleOperator	Procedure	Left operand	Right operand	Commutator	Negator	Restrict	Join	Hashes 	Merges	Left type	Right typeColumn	Nullable    Type	Default    Collate	PositionPrimary KeyUnique KeyForeign KeyIndex	MethodRuleComment|PropertyData Types,Type,Composite type,Domain|FolderDomain|Type	Base type    Collation    Default    Nullable    Check constraintType	Input	Output	Receive      Send      Type modifier input      Type modifier output      Analyze      Length      By value      Alignment      Storage      Default      Element      Delimiter     Category Composite type,Type Column|TypeType Column|Column	Type    Collation

[schemaCmp.8.1]
enabled=1
caption=Databases
export=1
qType=1
oType=Server
query=SELECT 	d.datname		AS "Database name", 	'Database'		AS "Target type",	d.datconnlimit 	AS "Connection limit",	t.spcname		AS "Table space",	pg_get_userbyid(d.datdba) AS "Owner",	pg_encoding_to_char(d."encoding") AS "Encoding"FROM pg_catalog.pg_database AS d	JOIN pg_catalog.pg_tablespace AS t     	ON d.dattablespace = t.oidWHERE NOT d.datistemplateORDER BY d.datname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Database

[schemaCmp.8.2]
enabled=1
caption=Schemas
export=1
qType=1
oType=Database
query=SELECT	schema_name  AS "Schema name",     'Schema'     AS "Target type",    schema_owner AS "Owner"FROM	information_schema.schemataWHERE schema_name NOT LIKE 'pg%'    OR substring(schema_name, 3, 1) != '_'    OR schema_name = 'pg_catalog'ORDER BY schema_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Schema

[schemaCmp.8.3]
enabled=1
caption=Tables
export=1
qType=1
oType=
query=SELECT    pn.nspname AS "Schema name",     pc.relname AS "Table name",     'Table'	   AS "Target type",    CASE WHEN pc.relhasoids THEN 'TRUE' ELSE 'FALSE' END AS "Has OIDs",	pg_get_userbyid(pc.relowner) AS "Owner"FROM pg_catalog.pg_class AS pc	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pc.relnamespace WHERE pc.relkind = 'r'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pc.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Table

[schemaCmp.8.4]
enabled=1
caption=Views
export=1
qType=1
oType=
query=SELECT    pn.nspname AS "Schema name",     pc.relname AS "Table name",     'View'	   AS "Target type",     pg_get_viewdef(pc.oid) AS "Definition__NAME_REFERENCE",	pg_get_userbyid(pc.relowner) AS "Owner"FROM pg_catalog.pg_class AS pc	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pc.relnamespaceWHERE pc.relkind = 'v'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pc.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=View

[schemaCmp.8.5]
enabled=1
caption=Functions
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	pp.proname || '(' || array_to_string(ARRAY(		SELECT replace(format_type(pp.proargtypes[k], 'character varying', 'varchar'), NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Function specific name",	'Function' AS "Target type",	replace(format_type(pp.prorettype, null), 'character varying', 'varchar') AS "Returns",	pp.proname AS "Function name__HIDDEN",	pg_get_userbyid(pp.proowner) AS "Owner",	pl.lanname AS "Language",	pp.prosrc  AS "Definition__NAME_REFERENCE__SQL"FROM pg_catalog.pg_proc AS pp	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pp.pronamespace	JOIN pg_catalog.pg_language AS pl		ON pl.oid = pp.prolang AND pl.lanname IN ('sql', 'plpgsql','plpythonu')	WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pp.proname
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Function

[schemaCmp.8.6]
enabled=1
caption=Aggregate Functions
export=1
qType=1
oType=
query=SELECT 	pn.nspname 	AS "Schema name", 	pp.proname || '(' || array_to_string(ARRAY(		SELECT replace(format_type(pp.proargtypes[k], 'character varying', 'varchar'), NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Aggregate specific name",	'Aggregate'	AS "Target type",	pp.proname	AS "Aggregate name__HIDDEN",	pp2.proname AS "Transition function",	replace(pt.typname, 'character varying', 'varchar')	AS "Transition data type",	pp3.proname AS "Final function",	pa.agginitval AS "Initial condition",	po.oprname  AS "Sort operator"FROM pg_catalog.pg_aggregate AS pa	JOIN pg_catalog.pg_proc AS pp     	ON pp.oid = pa.aggfnoid	JOIN pg_catalog.pg_namespace AS pn     	ON pp.pronamespace = pn.oid	JOIN pg_catalog.pg_proc AS pp2     	ON pa.aggtransfn = pp2.oid	JOIN pg_catalog.pg_type AS pt     	ON pa.aggtranstype = pt.oid	LEFT JOIN pg_catalog.pg_proc AS pp3     	ON pa.aggfinalfn = pp3.oid	LEFT JOIN pg_catalog.pg_operator AS po     	ON pa.aggsortop = po.oidWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pp.proname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Aggregate

[schemaCmp.8.7]
enabled=1
caption=Columns
export=1
qType=1
oType=
query=SELECT	table_schema	AS "Schema name",     table_name		AS "Table name",     column_name		AS "Column name",     'Column'		AS "Target type",	CASE upper(is_nullable)        WHEN 'YES' THEN 'NULL'         ELSE 'NOT NULL'     END 			AS "Nullable",	REPLACE(CASE WHEN character_maximum_length IS NOT NULL THEN replace(data_type, 'character varying', 'varchar') || '(' || character_maximum_length || ')'		WHEN data_type = 'numeric' AND numeric_precision IS NOT NULL THEN data_type || '(' || numeric_precision || ',' || numeric_scale || ')'   		ELSE replace(data_type, 'character varying', 'varchar')		END, '"', ''    ) AS "Type", 	column_default AS "Default",	collation_name AS "Collate",	CASE     	WHEN column_default LIKE 'nextval(%' THEN 1         ELSE 0     END AS "Auto",    ordinal_position AS "Position"FROM 	information_schema.columnsWHERE 	('$SCHEMA_NAME$' = '' OR table_schema = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR table_name = '$OBJECT_NAME$')ORDER BY	ordinal_position
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Column

[schemaCmp.8.8]
enabled=1
caption=Table (CREATE)
export=1
qType=3
oType=Table
query=CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN=COLUMN DEFINITION$) WITH (	OIDS=$HAS OIDS$);ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;$\n|PRIMARY KEY,UNIQUE KEY,CHECK CONSTRAINT,INDEX,DML TRIGGER,FOREIGN KEY,COMMENT,PERMISSION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.9]
enabled=1
caption=Column Definition
export=1
qType=3
oType=
query="$NAME$" $TYPE$$ COLLATE {COLLATE}$ $NULLABLE$$ DEFAULT {DEFAULT}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.10]
enabled=1
caption=Table (DROP)
export=1
qType=3
oType=Table
query=DROP TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.11]
enabled=1
caption=View (CREATE)
export=1
qType=3
oType=View
query=CREATE VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$" ($, |COLUMN=COLUMN NAME$) AS$DEFINITION$;ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;$|COMMENT$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.12]
enabled=1
caption=View (DROP)
export=1
qType=3
oType=View
query=DROP VIEW "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.13]
enabled=1
caption=Column Name
export=1
qType=3
oType=
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.14]
enabled=1
caption=Schema (CREATE)
export=1
qType=3
oType=Schema
query=CREATE SCHEMA "$SCHEMA_NAME$" AUTHORIZATION $OWNER$;${\n|PERMISSION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.15]
enabled=1
caption=Schema (DROP)
export=1
qType=3
oType=Schema
query=DROP SCHEMA "$SCHEMA_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.16]
enabled=1
caption=Argument Definition
export=1
qType=3
oType=
query=${MODE} $${PARAMETER NAME} $$TYPE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.17]
enabled=1
caption=Function (CREATE)
export=1
qType=3
oType=Function
query=CREATE FUNCTION "$SCHEMA_NAME$"."$FUNCTION NAME$" ($, |ARGUMENT=ARGUMENT DEFINITION$)RETURNS $VALUE$AS $^$^ $DEFINITION$$^$^ LANGUAGE $LANGUAGE$;ALTER FUNCTION "$SCHEMA_NAME$"."$VALUE$" ($, |ARGUMENT=ARGUMENT DEFINITION$)	OWNER TO "$OWNER$";$\n|PERMISSION$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.18]
enabled=1
caption=Function (DROP)
export=1
qType=3
oType=Function
query=DROP FUNCTION "$SCHEMA_NAME$"."$VALUE$" ($, |ARGUMENT=ARGUMENT DEFINITION$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.19]
enabled=1
caption=Arguments
export=1
qType=1
oType=
query=SELECT	r.routine_schema AS "Schema name", 	pp.proname || '(' || array_to_string(ARRAY(		SELECT replace(format_type(pp.proargtypes[k], 'character varying', 'varchar'), NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Function specific name",	COALESCE(p.parameter_name, 'unnamed parameter ' || p.ordinal_position) AS "Parameter display name",	'Argument' AS "Target type",	p."parameter_name" AS "Parameter name",    REPLACE(REPLACE(p.data_type, 'character varying', 'varchar'), '"', '') AS "Type",    CASE WHEN p.parameter_mode <> 'IN' THEN p."parameter_mode" END AS "Mode"FROM information_schema.parameters p	JOIN information_schema.routines r    	ON p.specific_schema = r.specific_schema      		AND p.specific_name = r.specific_name      JOIN pg_catalog.pg_proc AS pp    	ON pp.oid = substring(r.specific_name, '_([^_]*?)$^')::oidWHERE 	('$SCHEMA_NAME$' = '' OR r.routine_schema = '$SCHEMA_NAME$') AND     ('$OBJECT_NAME$' = '' OR r.routine_name = '$OBJECT_NAME$')ORDER BY p.ordinal_position
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=1
minVer=0
condition=
pathNameCnt=2
loadedObj=Argument

[schemaCmp.8.20]
enabled=1
caption=Check Constraints
export=1
qType=1
oType=
query=SELECT 	tc.table_schema 	AS "Schema name",     tc.table_name		AS "Table name",	     cc.constraint_name	AS "Constraint name", 	'Check Constraint'	AS "Target type", 	cc.check_clause 	AS "Definition" FROM information_schema.check_constraints AS cc 	JOIN information_schema.table_constraints AS tc     	ON tc."constraint_schema" = cc."constraint_schema"         	AND tc."constraint_name" = cc."constraint_name"WHERE not cc.check_clause LIKE '% IS NOT NULL' 	AND ('$SCHEMA_NAME$' = '' OR tc.table_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR tc.table_name = '$OBJECT_NAME$')ORDER BY cc.constraint_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Check Constraint

[schemaCmp.8.21]
enabled=1
caption=Keys
export=1
qType=1
oType=
query=SELECT    tc.table_schema		AS "Schema name",     tc.table_name		AS "Table name",     tc.constraint_name	AS "Constraint name",     CASE tc.constraint_type     	WHEN 'PRIMARY KEY' THEN 'Primary Key'    	WHEN 'UNIQUE' THEN 'Unique Key'    END AS "Target type",    array_to_string(ARRAY(       	SELECT ccu."column_name"::varchar       	FROM information_schema.key_column_usage AS ccu        	WHERE tc."constraint_schema" = ccu."constraint_schema"        		AND tc."constraint_name" = ccu."constraint_name"		ORDER BY ccu.ordinal_position     ), ', ') AS "Columns"FROM information_schema.table_constraints tcWHERE tc.constraint_type IN ('PRIMARY KEY', 'UNIQUE')	AND ('$SCHEMA_NAME$' = '' OR tc.table_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR tc.table_name = '$OBJECT_NAME$')ORDER BY tc.constraint_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Primary Key,Unique Key

[schemaCmp.8.22]
enabled=1
caption=Foreign Keys
export=1
qType=1
oType=
query=SELECT    tc.table_schema		AS "Schema name",     tc.table_name		AS "Table name",     tc.constraint_name	AS "Constraint name",    'Foreign Key'		AS "Target type",     array_to_string(ARRAY(       	SELECT kc."column_name"::varchar       	FROM information_schema.key_column_usage AS kc        	WHERE tc."constraint_schema" = kc."constraint_schema"         	AND tc."constraint_name" = kc."constraint_name"       	ORDER BY kc.ordinal_position        	), ', ') AS "Columns",     '"' || ctu.table_schema || '"."' || ctu."table_name" || '"' AS "Refer table",    array_to_string(ARRAY(       	SELECT kc."column_name"::varchar       	FROM information_schema.constraint_column_usage AS kc        	WHERE tc."constraint_schema" = kc."constraint_schema"        		AND tc."constraint_name" = kc."constraint_name"       ), ', ') AS "Refer columns"FROM information_schema.table_constraints tc	JOIN information_schema.constraint_table_usage AS ctu     	ON ctu."constraint_schema" = tc."constraint_schema"         	AND ctu."constraint_name" = tc."constraint_name"WHERE tc.constraint_type = 'FOREIGN KEY'	AND ('$SCHEMA_NAME$' = '' OR tc.table_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR tc.table_name = '$OBJECT_NAME$')ORDER BY tc.constraint_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Foreign Key

[schemaCmp.8.23]
enabled=1
caption=Indexes
export=1
qType=1
oType=
query=SELECT 	n.nspname AS "Schema name",     c.relname AS "Table name",     i.relname AS "Index name",     'Index'	  AS "Target type",     array_to_string(ARRAY(       SELECT pg_get_indexdef(x.indexrelid, k + 1, true)       FROM generate_series(array_lower(x.indkey, 1), array_upper(x.indkey, 1)) as k       ORDER BY k       ), ', ') AS "Columns",    CASE WHEN x.indisunique THEN 'UNIQUE' END AS "Unique",    CASE WHEN p.amname <> 'btree' THEN p.amname END AS "Method"FROM pg_index x     JOIN pg_class c     	ON c.oid = x.indrelid     JOIN pg_class i     	ON i.oid = x.indexrelid    JOIN pg_namespace n     	ON n.oid = c.relnamespace     JOIN pg_opclass o     	ON o.oid = x.indclass[0]    JOIN pg_am p     	ON o.opcamid = p.oidWHERE (c.relkind = 'r'::"char") AND 	(i.relkind = 'i'::"char") AND 	(NOT EXISTS (		SELECT 1 FROM information_schema.table_constraints AS tc 		WHERE tc.table_schema = n.nspname 			AND tc."table_name" = c.relname			AND tc."constraint_name" = i.relname 	))	AND ('$SCHEMA_NAME$' = '' OR n.nspname = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR c.relname = '$OBJECT_NAME$')ORDER BY i.relname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Index

[schemaCmp.8.24]
enabled=1
caption=Primary Key (CREATE)
export=1
qType=3
oType=Primary Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD CONSTRAINT "$NAME$" PRIMARY KEY ($COLUMNS$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.25]
enabled=1
caption=Unique Key (CREATE)
export=1
qType=3
oType=Unique Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD CONSTRAINT "$NAME$" UNIQUE ($COLUMNS$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.26]
enabled=1
caption=Constraint (DROP)
export=1
qType=3
oType=Primary Key,Unique Key,Check Constraint,Foreign Key
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP CONSTRAINT "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.27]
enabled=1
caption=Column (CREATE)
export=1
qType=3
oType=Column
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD COLUMN $|=COLUMN DEFINITION$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.28]
enabled=1
caption=Column (DROP)
export=1
qType=3
oType=Column
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" DROP COLUMN "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.29]
enabled=1
caption=Index (CREATE)
export=1
qType=3
oType=Index
query=CREATE ${UNIQUE} $INDEX "$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$" $USING {METHOD}$($COLUMNS$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.30]
enabled=1
caption=Index (DROP)
export=1
qType=3
oType=Index
query=DROP INDEX "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.31]
enabled=1
caption=(header)
export=1
qType=3
oType=
query=/****************************************************************** * Code generated by SoftTree SQL Assistant © v$SA_VERSION$ * using Schema Compare templates * Time: $DATE$ $TIME$   * Source: $SOURCE$ * Target: $TARGET$ * ================================================================ * VERY IMPORTANT: Before running this script please check a recent * database backup is available so that you can undo all changes in * case of errors or unexpected data loss. ******************************************************************/
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.32]
enabled=1
caption=Table (ALTER)
export=1
qType=3
oType=Table
query=ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" RENAME TO "TMP_$OBJECT_NAME$";CREATE TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$"(	$,\n\t|COLUMN.TARGET=COLUMN DEFINITION$) WITH (	OIDS=$HAS OIDS$);ALTER TABLE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;$\n|PRIMARY KEY.TARGET=PRIMARY KEY (CREATE),UNIQUE KEY.TARGET=UNIQUE KEY (CREATE),CHECK CONSTRAINT.TARGET=CHECK CONSTRAINT (CREATE),INDEX.TARGET=INDEX (CREATE),DML TRIGGER.TARGET=TRIGGER (CREATE),FOREIGN KEY.TARGET=FOREIGN KEY (CREATE),COMMENT=COMMENT (CREATE),PERMISSION=PERMISSION (CREATE)$INSERT INTO "$SCHEMA_NAME$"."$OBJECT_NAME$" ($,|COLUMN.TARGET_OLD=COLUMN NAME$)SELECT $,|COLUMN.TARGET_OLD=COLUMN CONVERT$ FROM "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$";DROP TABLE "$SCHEMA_NAME$"."TMP_$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.33]
enabled=1
caption=Trigger (CREATE)
export=1
qType=3
oType=DML Trigger
query=CREATE TRIGGER "$NAME$" $ACTION TIMING$ $EVENT MANIPULATION$ ON "$SCHEMA_NAME$"."$OBJECT_NAME$" FOR EACH $ACTION ORIENTATION$ $ACTION STATEMENT$;	
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.34]
enabled=1
caption=Trigger (DROP)
export=1
qType=3
oType=Trigger
query=DROP TRIGGER "$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.35]
enabled=1
caption=Column Convert
export=1
qType=3
oType=
query="$NAME$"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition==Type
pathNameCnt=0
loadedObj=

[schemaCmp.8.36]
enabled=1
caption=Column Convert
export=1
qType=3
oType=
query=CONVERT(`$NAME$`, $TYPE$)
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*Type
pathNameCnt=0
loadedObj=

[schemaCmp.8.37]
enabled=1
caption=Check Constraint (CREATE)
export=1
qType=3
oType=Check Constraint
query=ALTER TABLE ONLY "$SCHEMA_NAME$"."$OBJECT_NAME$" ADD CONSTRAINT "$NAME$" CHECK($DEFINITION$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.38]
enabled=1
caption=Database (DROP)
export=1
qType=3
oType=Database
query=DROP DATABASE "$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.39]
enabled=1
caption=Triggers
export=1
qType=1
oType=
query=SELECT DISTINCT	event_object_schema AS "Schema name", 	event_object_table	AS "Table name", 	"trigger_name"		AS "Trigger name",	'DML Trigger'		AS "Target type", 	array_to_string(ARRAY(		SELECT event_manipulation::CHAR VARYING FROM information_schema.triggers t1		WHERE t1."trigger_schema" = t."trigger_schema" AND t1."trigger_name" = t."trigger_name" 		ORDER BY event_manipulation 	), ' OR ')			AS "Event manipulation",	condition_timing    AS "Action timing",	action_statement	AS "Action statement",	action_orientation  AS "Action orientation"FROM 	information_schema.triggers tWHERE ('$SCHEMA_NAME$' = '' OR event_object_schema = '$SCHEMA_NAME$')    AND ('$OBJECT_NAME$' = '' OR event_object_table = '$OBJECT_NAME$')ORDER BY "trigger_name"
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=DML Trigger

[schemaCmp.8.40]
enabled=1
caption=Sequences
export=1
qType=1
oType=
query=SELECT 	s.sequence_schema	AS "Schema name", 	s.sequence_name		AS "Sequence name",	'Sequence'			AS "Target type", 	s."increment"		AS "Increment", 	s.minimum_value		AS "Minimum value",    s.maximum_value		AS "Maximum value",     CASE s.cycle_option    	WHEN 'YES' THEN 'CYCLE'    	WHEN 'NO'  THEN 'NO CYCLE'    END 				AS "Cycle"FROM information_schema.sequences AS sWHERE ('$SCHEMA_NAME$' = '' OR s.sequence_schema = '$SCHEMA_NAME$')ORDER BY s.sequence_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Sequence

[schemaCmp.8.41]
enabled=1
caption=Sequence (CREATE)
export=1
qType=3
oType=Sequence
query=CREATE SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$"$ 	INCREMENT BY {INCREMENT}$$    MINVALUE {MINIMUM VALUE}$$     MAXVALUE {MAXIMUM VALUE}$$    {CYCLE}$;${\n|PERMISSION}$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.42]
enabled=1
caption=Sequence (DROP)
export=1
qType=3
oType=Sequence
query=DROP SEQUENCE "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.43]
enabled=1
caption=Aggregate (CREATE)
export=1
qType=3
oType=Aggregate
query=CREATE AGGREGATE "$SCHEMA_NAME$"."$AGGREGATE NAME$" ($, |ARGUMENT=ARGUMENT DEFINITION$) (    SFUNC = $TRANSITION FUNCTION$,    STYPE = $TRANSITION DATA TYPE$$,	FINALFUNC = {FINAL FUNCTION}$$,	INITCOND = {INITIAL CONDITION.STRING}$$,	SORTOP = {SORT OPERATOR}$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.44]
enabled=1
caption=Aggregate (DROP)
export=1
qType=3
oType=Aggregate
query=DROP AGGREGATE "$SCHEMA_NAME$"."$AGGREGATE NAME$" ($, |ARGUMENT=ARGUMENT DEFINITION$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.45]
enabled=1
caption=Casts
export=1
qType=1
oType=Database
query=SELECT 	ts.typname || ' AS ' || tt.typname AS "Cast name",	'Cast' 		AS "Target type",	ts.typname  AS "Source data type",	tt.typname  AS "Target data type",	CASE pc.castcontext 		WHEN 'e' THEN ''		WHEN 'a' THEN 'AS ASSIGNMENT'		WHEN 'i' THEN 'AS IMPLICIT'	END	AS "Context"FROM pg_catalog.pg_cast AS pc	JOIN pg_catalog.pg_type AS ts     	ON pc.castsource = ts.oid	JOIN pg_catalog.pg_type AS tt     	ON pc.casttarget = tt.oid	LEFT JOIN pg_catalog.pg_proc AS pp     	ON pc.castfunc = pp.oid	LEFT JOIN pg_catalog.pg_namespace AS pn     	ON pp.pronamespace = pn.oid	LEFT JOIN pg_catalog.pg_type AS pt     	ON pp.proargtypes[0] = pt.oidORDER BY ts.typname 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Cast

[schemaCmp.8.46]
enabled=1
caption=Cast (CREATE)
export=1
qType=3
oType=Cast
query=CREATE CAST ($SOURCE DATA TYPE$ AS $TARGET DATA TYPE$) $CONTEXT$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.47]
enabled=1
caption=Cast (DROP)
export=1
qType=3
oType=Cast
query=DROP CAST ($SOURCE DATA TYPE$ AS $TARGET DATA TYPE$);
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.48]
enabled=1
caption=Conversions
export=1
qType=1
oType=
query=SELECT 	pn.nspname   AS "Schema name", 	pc.conname   AS "Conversion name",	'Conversion' AS "Target type",	CASE WHEN pc.condefault THEN 'DEFAULT' END 	     AS "Default",	pg_encoding_to_char(pc.conforencoding) 			 AS "Source encoding",	pg_encoding_to_char(pc.contoencoding) 			 AS "Target encoding",	'"' || pn2.nspname || '"."' || pp.proname || '"' AS "Function"FROM pg_catalog.pg_conversion AS pc	JOIN pg_catalog.pg_namespace AS pn 		ON pn.oid = pc.connamespace	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pc.conproc	JOIN pg_catalog.pg_namespace AS pn2		ON pn2.oid = pp.pronamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pc.conname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Conversion

[schemaCmp.8.49]
enabled=1
caption=Conversion (CREATE)
export=1
qType=3
oType=Conversion
query=CREATE$ {DEFAULT}$ CONVERSION "$SCHEMA_NAME$"."$OBJECT_NAME$"    FOR '$SOURCE ENCODING$' TO '$TARGET ENCODING$' FROM $FUNCTION$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.50]
enabled=1
caption=Conversion (DROP)
export=1
qType=3
oType=Conversion
query=DROP CONVERSION "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.51]
enabled=1
caption=Domains
export=1
qType=1
oType=
query=SELECT 	pn.nspname    AS "Schema name",	pt.typname    AS "Domain name",	'Domain'   	  AS "Target type",	pt2.typname   AS "Base type",	pt.typdefault AS "Default",	CASE WHEN pt.typnotnull THEN 'NOT NULL' ELSE 'NULL' END AS "Nullable",	pc2.consrc    AS "Check constraint"FROM pg_catalog.pg_type AS pt	JOIN pg_catalog.pg_namespace AS pn 		ON pn.oid = pt.typnamespace	JOIN pg_catalog.pg_type AS pt2 		ON pt2.oid = pt.typbasetype 	LEFT JOIN pg_catalog.pg_constraint AS pc2		ON pc2.contypid = pt.oid	WHERE pt.typtype = 'd'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pt.typname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Domain

[schemaCmp.8.52]
enabled=1
caption=Domain (DROP)
export=1
qType=3
oType=Domain
query=DROP DOMAIN "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.53]
enabled=1
caption=Operators
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name", 	po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') || ',' || COALESCE(ptr.typname, 'NONE') || ')' AS "Operator specific name",	'Operator' AS "Target type",	pp.proname AS "Procedure",	po.oprname AS "Operator",	ptl.typname AS "Left operand",	ptr.typname AS "Right operand",	po2.oprname AS "Commutator",	po3.oprname AS "Negator",	pp1.proname AS "Restrict",	pp2.proname AS "Join",	CASE WHEN po.oprcanhash THEN 'HASHES' END AS "Hashes"FROM pg_catalog.pg_operator AS po	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.oprnamespace 	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = po.oprcode 	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = po.oprleft	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = po.oprright	LEFT JOIN pg_catalog.pg_operator AS po2		ON po2.oid = po.oprcom		LEFT JOIN pg_catalog.pg_operator AS po3		ON po3.oid = po.oprnegate 	LEFT JOIN pg_catalog.pg_proc AS pp1		ON pp1.oid = po.oprrest 	LEFT JOIN pg_catalog.pg_proc AS pp2		ON pp2.oid = po.oprjoinWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY po.oprname
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Operator

[schemaCmp.8.54]
enabled=1
caption=Operator (CREATE)
export=1
qType=3
oType=Operator
query=CREATE OPERATOR "$SCHEMA_NAME$".$OPERATOR$ (    PROCEDURE = $VALUE$$,    LEFTARG = {LEFT OPERAND}$$,    RIGHTARG = {RIGHT OPERAND}$$,    COMMUTATOR = {COMMUTATOR}$$,    NEGATOR = {NEGATOR}$$,    RESTRICT = {RESTRICT}$$,    JOIN = {JOIN}$$,    {HASHES}$$,    {MERGES}$)
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.55]
enabled=1
caption=Operator (DROP)
export=1
qType=3
oType=Operator
query=DROP OPERATOR "$SCHEMA_NAME$".$OBJECT_NAME$ ($LEFT OPERAND;NONE$, $RIGHT OPERAND;NONE$)
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.56]
enabled=1
caption=Roles
export=1
qType=1
oType=Server
query=SELECT 	rolname AS "Role name",	'Role'	AS "Target type",	CASE 		WHEN rolsuper THEN 'SUPERUSER' 		ELSE 'NOSUPERUSER' 	END AS "Superuser",	CASE 		WHEN rolcreatedb THEN 'CREATEDB' 		ELSE 'NOCREATEDB' 	END AS "Create DB",	CASE 		WHEN rolcreaterole THEN 'CREATEROLE' 		ELSE 'NOCREATEROLE' 	END AS "Create role",	CASE 		WHEN rolinherit THEN 'INHERIT' 		ELSE 'NOINHERIT' 	END AS "Inherit",	CASE 		WHEN rolcanlogin THEN 'LOGIN' 		ELSE 'NOLOGIN' 	END AS "Can login",	rolconnlimit AS "Connection limit",	rolvaliduntil AS "Valid"FROM pg_catalog.pg_authidORDER BY rolname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Role

[schemaCmp.8.57]
enabled=1
caption=Role (CREATE)
export=1
qType=3
oType=Role
query=CREATE ROLE "$NAME$" WITH 	$SUPERUSER$    $CREATE DB$    $CREATE ROLE$    $INHERIT$    $CAN LOGIN$    CONNECTION LIMIT $CONNECTION LIMIT;-1$$    VALID UNTIL '{VALID}'$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.58]
enabled=1
caption=Role members
export=1
qType=1
oType=Role
query=SELECT 	am.rolname 	  AS "Member",		'Role member' AS "Target type"FROM pg_catalog.pg_auth_members m	JOIN pg_catalog.pg_authid ap  		ON ap.oid = m.roleid	JOIN pg_catalog.pg_authid am  		ON am.oid = m."member"WHERE ap.rolname = '$DB_NAME$'ORDER BY am.rolname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Role member

[schemaCmp.8.59]
enabled=1
caption=Role (DROP)
export=1
qType=3
oType=Role
query=DROP ROLE $NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.60]
enabled=1
caption=Role member (CREATE)
export=1
qType=3
oType=Role member
query=GRANT $SCHEMA_NAME$ TO $NAME$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.61]
enabled=1
caption=Role member (DROP)
export=1
qType=3
oType=Role member
query=REVOKE $SCHEMA_NAME$ FROM $NAME$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.62]
enabled=1
caption=Rules
export=1
qType=1
oType=
query=SELECT 	schemaname 	AS "Schema name", 	tablename 	AS "Table name", 	rulename 	AS "Rule name",	'Rule'		AS "Target type", 	definition 	AS "DDL"FROM pg_catalog.pg_rulesORDER BY rulename
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Rule

[schemaCmp.8.63]
enabled=1
caption=Rule (CREATE)
export=1
qType=3
oType=Rule
query=$DDL$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.64]
enabled=1
caption=Rule (DROP)
export=1
qType=3
oType=Rule
query=DROP RULE "$NAME$" ON "$SCHEMA_NAME$"."$OBJECT_NAME$"; 
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.65]
enabled=1
caption=Composite Types
export=1
qType=1
oType=
query=SELECT 	pn.nspname AS "Schema name",	t.typname AS "Type name",	'Composite type' AS "Target type"FROM pg_catalog.pg_type AS t	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = t.typnamespace 	JOIN pg_catalog.pg_class AS c		ON c.oid = t.typrelidWHERE t.typtype = 'c' AND c.relkind = 'c'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY t.typname  
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Composite type

[schemaCmp.8.66]
enabled=1
caption=Composite Type Columns
export=1
qType=1
oType=
query=SELECT 	pn.nspname    AS "Schema name",	c.relname     AS "Type name",	pa.attname    AS "Column name",	'Type column' AS "Target type",	replace(pt.typname, 'character varying', 'varchar')    AS "Type"FROM pg_catalog.pg_attribute AS pa	JOIN pg_catalog.pg_class AS c		ON c.oid = pa.attrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace	JOIN pg_catalog.pg_type AS pt		ON pt.oid = pa.atttypid WHERE c.relkind = 'c'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY pa.attnum
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Type column

[schemaCmp.8.67]
enabled=1
caption=Type Composite (CREATE)
export=1
qType=3
oType=Composite type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" AS (	$,\n\t|TYPE COLUMN=TYPE COLUMN$);
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.68]
enabled=1
caption=Type Column
export=1
qType=3
oType=
query=$NAME$ $TYPE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.69]
enabled=1
caption=Type (DROP)
export=1
qType=3
oType=Type,Composite type,Enum type,Range type
query=DROP TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.70]
enabled=1
caption=Types
export=1
qType=1
oType=
query=SELECT 	pn.nspname  AS "Schema name",	t.typname   AS "Type name",	'Type' 	    AS "Target type",	t.typinput  AS "Input",	t.typoutput AS "Output",	CASE WHEN t.typreceive <> 0 THEN t.typreceive    END AS "Receive",	CASE WHEN t.typsend <> 0    THEN t.typsend       END AS "Send",	CASE WHEN t.typanalyze <> 0 THEN t.typanalyze    END AS "Analyze",	CASE WHEN t.typlen >= 0     THEN t.typlen        END AS "Length",	CASE WHEN t.typbyval        THEN 'PASSEDBYVALUE' END AS "By value",	CASE t.typalign		WHEN 'c' THEN 'char'		WHEN 's' THEN 'int2'		WHEN 'd' THEN 'double'		ELSE NULL -- 'int4'	END AS "Alignment",	CASE t.typstorage 		WHEN 'e' THEN 'external'		WHEN 'm' THEN 'main'		WHEN 'x' THEN 'extended'		ELSE NULL -- 'plain'	END AS "Storage",	t.typdefault  AS "Default",	pe.typname    AS "Element",    t.typdelim    AS "Delimiter",	pg_get_userbyid(t.typowner) AS "Owner"FROM pg_catalog.pg_type AS t	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = t.typnamespace	LEFT JOIN pg_catalog.pg_type AS pe		ON pe.oid = t.typelemWHERE t.typtype = 'b'	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')ORDER BY t.typname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Type

[schemaCmp.8.71]
enabled=1
caption=Comments (Role)
export=1
qType=1
oType=Role
query=SELECT	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'ROLE "' || pa.rolname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_shdescription AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_authid'	JOIN pg_catalog.pg_authid AS pa		ON pa.oid = pd.objoidWHERE pa.rolname = '$DB_NAME$'
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Comment

[schemaCmp.8.72]
enabled=1
caption=Comments (Database)
export=1
qType=1
oType=Database
query=SELECT	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'DATABASE "' || d.datname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_shdescription AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_database'	JOIN pg_catalog.pg_database AS d		ON d.oid = pd.objoid WHERE d.datname = '$DB_NAME$'
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Comment

[schemaCmp.8.73]
enabled=1
caption=Comments (Level 1)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'SCHEMA "' || pn.nspname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_namespace'	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pd.objoidWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	ptl.typname || ' AS ' || ptr.typname AS "Cast name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'CAST(' || ptl.typname || ' AS ' || ptr.typname || ')' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_cast'	JOIN pg_catalog.pg_cast AS c		ON c.oid = pd.objoid 	JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = c.castsource	JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = c.casttargetWHERE ('$SCHEMA_NAME$' = '')
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Comment

[schemaCmp.8.74]
enabled=1
caption=Comments (Level 2)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	pp.proname || '(' || array_to_string(ARRAY(		SELECT format_type(pp.proargtypes[k], NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "Function specific name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'FUNCTION "' || pn.nspname || '"."' || pp.proname || '" (' ||		array_to_string(ARRAY(		SELECT format_type(pp.proargtypes[k], NULL) 		FROM generate_series(0, pp.pronargs-1) AS k 	), ', ') || ')' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_proc'	JOIN pg_catalog.pg_proc AS pp		ON pp.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pp.pronamespaceWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname AS "Table name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	CASE c.relkind 		WHEN 'r' THEN 'TABLE'		WHEN 's' THEN 'SEQUENCE'		WHEN 'v' THEN 'VIEW'		WHEN 'm' THEN 'MATERIALIZED VIEW'	END || ' "' || pn.nspname || '"."' || c.relname || '"' AS "CmtObject__HIDDEN" 	   FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_class'	JOIN pg_catalog.pg_class AS c		ON c.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE pd.objsubid = 0 AND c.relkind IN ('r', 's', 'v', 'm')	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') || 		',' || COALESCE(ptr.typname, 'NONE') || ')' AS "Operator specific name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	'OPERATOR "' || pn.nspname || '".' || po.oprname || ' (' || COALESCE(ptl.typname, 'NONE') ||			',' || COALESCE(ptr.typname, 'NONE') || ')' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_operator'	JOIN pg_catalog.pg_operator AS po		ON po.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = po.oprnamespace	LEFT JOIN pg_catalog.pg_type AS ptl		ON ptl.oid = po.oprleft	LEFT JOIN pg_catalog.pg_type AS ptr		ON ptr.oid = po.oprrightWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	pt.typname AS "Type name",	'Comment'	AS "Comment name",	'Comment'   AS "Target type",	pd.description AS "Comment",	CASE WHEN pt.typtype = 'd' THEN 'DOMAIN' ELSE 'TYPE' END || ' "' || 		pn.nspname || '"."' || pt.typname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_type'	JOIN pg_catalog.pg_type AS pt		ON pt.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = pt.typnamespaceWHERE pd.objsubid = 0	AND ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')UNION ALLSELECT	pn.nspname AS "Schema name",	c.conname  AS "Conversion name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'CONVERSION "' || pn.nspname || '"."' || c.conname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_conversion'	JOIN pg_catalog.pg_conversion AS c		ON c.oid = pd.objoid 	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.connamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=2
loadedObj=Comment

[schemaCmp.8.75]
enabled=1
caption=Comment (CREATE)
export=1
qType=3
oType=Comment
query=COMMENT ON $CMTOBJECT$ IS $VALUE.STRING$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.76]
enabled=1
caption=Comment (ALTER)
export=1
qType=3
oType=Comment
query=COMMENT ON $CMTOBJECT$ IS $VALUE.STRING$;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.77]
enabled=1
caption=Comment (DROP)
export=1
qType=3
oType=Comment
query=COMMENT ON $CMTOBJECT$ IS '';
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.78]
enabled=1
caption=Collation (DROP)
export=1
qType=3
oType=Collation
query=DROP COLLATION "$SCHEMA_NAME$"."$NAME$";
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.79]
enabled=1
caption=Comments (Level 3)
export=1
qType=1
oType=
query=SELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pa.attname AS "Column name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'COLUMN "' || pn.nspname || '"."' || c.relname || '"."' || pa.attname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid         	AND pc.relname = 'pg_class'	JOIN pg_catalog.pg_class AS c		ON c.oid = pd.objoid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace	JOIN pg_catalog.pg_attribute AS pa		ON pa.attrelid = c.oid 			AND pa.attnum = pd.objsubidWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	cn.conname AS "Constraint name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'CONSTRAINT "' || cn.conname || '" ON "' || pn.nspname || '"."' || c.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_constraint'	JOIN pg_catalog.pg_constraint AS cn		ON cn.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = cn.conrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALL        SELECT	pn.nspname AS "Schema name",	ct.relname AS "Table name", 	ci.relname AS "Index name", 	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'INDEX "' || pn.nspname || '"."' || ci.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_index AS pi	JOIN pg_catalog.pg_class ci 		ON ci.oid = pi.indexrelid 	JOIN pg_catalog.pg_class ct 		ON ct.oid = pi.indrelid 	JOIN pg_catalog.pg_namespace pn 		ON pn.oid = ct.relnamespace	JOIN pg_catalog.pg_description AS pd 		ON pd.objoid = ci.oid 	JOIN pg_catalog.pg_class dc 		ON dc.oid = pd.classoid 			AND dc.relname = 'pg_class'WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALLSELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pr.rulename AS "Constraint name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'RULE "' || pr.rulename || '" ON "' || pn.nspname || '"."' || c.relname || '"'  AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_rewrite'	JOIN pg_catalog.pg_rewrite AS pr		ON pr.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = pr.ev_class	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespace WHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')            UNION ALL        SELECT	pn.nspname AS "Schema name",	c.relname  AS "Table name",	pt.tgname  AS "Trigger name",	'Comment'  AS "Comment name",	'Comment'  AS "Target type",	pd.description AS "Comment",	'TRIGGER "' || pt.tgname || '" ON "' || pn.nspname || '"."' || c.relname || '"' AS "CmtObject__HIDDEN"FROM pg_catalog.pg_description AS pd	JOIN pg_catalog.pg_class AS pc		ON pc.oid = pd.classoid AND pc.relname = 'pg_trigger'	JOIN pg_catalog.pg_trigger AS pt		ON pt.oid = pd.objoid	JOIN pg_catalog.pg_class AS c		ON c.oid = pt.tgrelid	JOIN pg_catalog.pg_namespace AS pn		ON pn.oid = c.relnamespaceWHERE ('$SCHEMA_NAME$' = '' OR pn.nspname = '$SCHEMA_NAME$')        
linkByVal=0
hasValue=1
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=3
loadedObj=Comment

[schemaCmp.8.80]
enabled=1
caption=Database (CREATE)
export=1
qType=3
oType=Database
query=CREATE DATABASE "$NAME$" WITH     OWNER = $OWNER$$    ENCODING = {ENCODING.STRING}$$    TABLESPACE = {TABLESPACE}$$    CONNECTION LIMIT = {CONNECTION LIMIT}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.81]
enabled=1
caption=Domain (CREATE)
export=1
qType=3
oType=Domain
query=CREATE DOMAIN "$SCHEMA_NAME$"."$OBJECT_NAME$" AS $BASE TYPE$$DEFAULT {DEFAULT}$$NULLABLE$$CHECK {CHECK CONSTRAINT}$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.8.82]
enabled=1
caption=Type (CREATE)
export=1
qType=3
oType=Type
query=CREATE TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" (    INPUT = $INPUT$,    OUTPUT = $OUTPUT$$,    RECEIVE = {RECEIVE}$$,    SEND = {SEND}$$,    ANALYZE = {ANALYZE}$$,    INTERNALLENGTH = {LENGTH}$$,    {BY VALUE}$$,    ALIGNMENT = {ALIGNMENT}$$,    STORAGE = {STORAGE}$$,    DEFAULT = {DEFAULT}$$,    ELEMENT = {ELEMENT}$$,    DELIMITER = {DELIMITER.STRING}$);ALTER TYPE "$SCHEMA_NAME$"."$OBJECT_NAME$" OWNER TO $OWNER$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9]
enabled=1
caption=SQL Server Jobs
export=1
count=15
dbType=1
useCache=0
objTypes=Job,Job Step,Job Schedule	Job enabled,JobEnabled	Description	Job owner	Start step ID	Job category	Write to event log,notify_level_eventlog	Send e-mail,notify_level_email	Email operator	Send network message,notify_level_netsend	Net send operator	Send a page,notify_level_page	Page operator	Delete job,delete_levelJob Step|Assembly	Step ID	Sub-system,subsystem	Command	Additional parameters	On success action,on_success_action,on_success_step_id	On fail action,on_fail_action,on_fail_step_id	Server	Database name	Database user name	Retry attempts	Retry interval	Run priority	Output file name	Flags	Proxy IDJob Schedule|ScheduleSchedule	Enabled,Enable	Frequency,freq_type,freq_interval,freq_relative_interval,freq_recurrence_factor	Sub-frequency,freq_subday_type,freq_subday_interval	Start date,active_start_date	Start time,active_start_time	End date,active_end_date	End time,active_end_time	Owner name

[schemaCmp.9.1]
enabled=1
caption=Schedules
export=1
qType=1
oType=Server
query=SELECT	s.name AS [Schedule name],	'Schedule' AS [Target type],	s.[enabled] AS [Enable__HIDDEN],  	CASE WHEN s.[enabled] = 1 then 'Yes' ELSE 'No' END AS [Enabled],	s.freq_type AS [freq_type__HIDDEN],	s.freq_interval AS [freq_interval__HIDDEN],	s.freq_subday_type AS [freq_subday_type__HIDDEN],	s.freq_subday_interval AS [freq_subday_interval__HIDDEN],	s.freq_relative_interval AS [freq_relative_interval__HIDDEN], 	s.freq_recurrence_factor AS [freq_recurrence_factor__HIDDEN],	CASE s.freq_type		WHEN 1 THEN 'Once'		WHEN 4 THEN			CASE         		WHEN s.freq_interval = 1 THEN 'Daily'         		ELSE 'Every ' + CAST(s.freq_interval AS VARCHAR(5)) + ' days'        	END        WHEN 8 THEN         	SUBSTRING(                CASE WHEN s.freq_interval & 1 > 0 THEN ',Sunday' ELSE '' END +                CASE WHEN s.freq_interval & 2 > 0 THEN ',Monday' ELSE '' END +                CASE WHEN s.freq_interval & 4 > 0 THEN ',Tuesday' ELSE '' END +                CASE WHEN s.freq_interval & 8 > 0 THEN ',Wednesday' ELSE '' END +                CASE WHEN s.freq_interval & 16 > 0 THEN ',Thursday' ELSE '' END +                CASE WHEN s.freq_interval & 32 > 0 THEN ',Friday' ELSE '' END +                CASE WHEN s.freq_interval & 64 > 0 THEN ',Saturday' ELSE '' END                , 2, 255            ) +            CASE             	WHEN s.freq_recurrence_factor <> 0 AND s.freq_recurrence_factor = 1 THEN '; weekly'                WHEN s.freq_recurrence_factor <> 0 THEN '; every ' + CAST(s.freq_recurrence_factor AS VARCHAR(10)) + ' weeks'                ELSE ''            END        WHEN 16 THEN 'On day ' + CAST(s.freq_interval AS VARCHAR(10)) + ' of every '        	+ CAST(s.freq_recurrence_factor AS VARCHAR(10)) + ' months'        WHEN 32 THEN            CASE s.freq_relative_interval            	WHEN 1 THEN 'First'                WHEN 2 THEN 'Second'                WHEN 4 THEN 'Third'                WHEN 8 THEN 'Fourth'                WHEN 16 THEN 'Last'            END +            CASE s.freq_interval            	WHEN 1 THEN ' Sunday'                WHEN 2 THEN ' Monday'                WHEN 3 THEN ' Tuesday'                WHEN 4 THEN ' Wednesday'                WHEN 5 THEN ' Thursday'                WHEN 6 THEN ' Friday'                WHEN 7 THEN ' Saturday'                WHEN 8 THEN ' Day'                WHEN 9 THEN ' Weekday'                WHEN 10 THEN ' Weekend'            END +            CASE             	WHEN s.freq_recurrence_factor <> 0 AND s.freq_recurrence_factor = 1 THEN '; monthly'                WHEN s.freq_recurrence_factor <> 0 THEN '; every ' + CAST(s.freq_recurrence_factor AS VARCHAR(10)) + ' months'                ELSE ''            END        WHEN 64 THEN 'Start automatically when SQL Server Agent starts'        WHEN 128 THEN 'Start whenever the CPUs become idle'  	END AS [Frequency],	  	ISNULL(  		'Every ' + CAST(s.freq_subday_interval AS VARCHAR(10)) +        CASE s.freq_subday_type        	WHEN 2 THEN ' seconds'            WHEN 4 THEN ' minutes'            WHEN 8 THEN ' hours'        END,        'Occurs once'  	) AS [Sub-frequency],	CONVERT(VARCHAR(10), CONVERT(DATETIME, RIGHT('00000000' + CONVERT(VARCHAR, s.active_start_date), 8), 112), 120) AS [Start date],	CONVERT(VARCHAR, CONVERT(DATETIME, STUFF(STUFF(RIGHT('000000' + CONVERT(VARCHAR, s.active_start_time), 6), 3, 0, ':'), 6, 0, ':'), 114), 108) AS [Start time],	CONVERT(VARCHAR(10), CONVERT(DATETIME, RIGHT('00000000' + CONVERT(VARCHAR, s.active_end_date), 8), 112), 120) AS [End date],	CONVERT(VARCHAR, CONVERT(DATETIME, STUFF(STUFF(RIGHT('000000' + CONVERT(VARCHAR, s.active_end_time), 6), 3, 0, ':'), 6, 0, ':'), 114), 108)  AS [End time],	s.active_start_date AS [active_start_date__HIDDEN], 	s.active_end_date AS [active_end_date__HIDDEN], 	s.active_start_time AS [active_start_time__HIDDEN], 	s.active_end_time AS [active_end_time__HIDDEN],	sp.name AS [Owner name]FROM msdb.dbo.sysschedules s WITH (NOLOCK)	LEFT JOIN [master].sys.server_principals AS sp WITH (NOLOCK)		ON sp.[sid] = owner_sidORDER BY s.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Schedule

[schemaCmp.9.2]
enabled=1
caption=Jobs
export=1
qType=1
oType=Server
query=SELECT 	j.name AS jobName,    'Job' AS [Target type],    j.[enabled] AS [JobEnabled__HIDDEN],    CASE WHEN j.[enabled] = 1 THEN 'Yes' ELSE 'No' END AS [Job enabled],    j.[description] AS [Description],    l.name AS [Job owner],    j.start_step_id AS [Start step ID],    c.name AS [Job category],                 j.notify_level_eventlog AS [notify_level_eventlog__HIDDEN],     CASE j.notify_level_eventlog     	WHEN 0 THEN 'Never'     	WHEN 1 THEN 'On success'     	WHEN 3 THEN 'Always'     	ELSE 'On failure'  	END AS [Write to event log],		j.notify_level_email AS [notify_level_email__HIDDEN],     CASE j.notify_level_email     	WHEN 0 THEN 'Never'     	WHEN 1 THEN 'On success'     	WHEN 3 THEN 'Always'     	ELSE 'On failure'  	END AS [Send e-mail],    '''' + eo.name + '''' AS [Email operator],                  j.notify_level_netsend AS [notify_level_netsend__HIDDEN],     CASE j.notify_level_netsend     	WHEN 0 THEN 'Never'     	WHEN 1 THEN 'On success'     	WHEN 3 THEN 'Always'     	ELSE 'On failure'  	END AS [Send network message],    '''' + no.name + '''' AS [Net send operator],        j.notify_level_page AS notify_level_page__HIDDEN,    CASE j.notify_level_page     	WHEN 0 THEN 'Never'     	WHEN 1 THEN 'On success'     	WHEN 3 THEN 'Always'     	ELSE 'On failure'  	END AS [Send page],    '''' + po.name + '''' AS [Page operator],             j.delete_level AS delete_level__HIDDEN,    CASE j.delete_level     	WHEN 0 THEN 'Never'     	WHEN 1 THEN 'On success'     	WHEN 3 THEN 'Always'     	ELSE 'On failure'      END AS [Delete job],    1 AS [SyncConfig__HIDDEN]FROM   msdb.dbo.sysjobs  AS j WITH (NOLOCK)    LEFT JOIN msdb.dbo.syscategories AS c WITH (NOLOCK)        ON c.category_id = j.category_id    LEFT JOIN [master].sys.server_principals AS l WITH (NOLOCK)        ON l.sid = j.owner_sid    LEFT JOIN msdb.dbo.sysoperators AS po WITH (NOLOCK)        ON po.id = j.notify_page_operator_id    LEFT JOIN msdb.dbo.sysoperators AS eo WITH (NOLOCK)        ON eo.id = j.notify_email_operator_id    LEFT JOIN msdb.dbo.sysoperators AS no WITH (NOLOCK)        ON no.id = j.notify_netsend_operator_idORDER BY j.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Job

[schemaCmp.9.3]
enabled=1
caption=Job Steps
export=1
qType=1
oType=Server
query=SELECT	j.name 		 AS [Job name],    js.step_name AS [Step name],    'Job Step'   AS [Target Type],    js.step_id	 AS [Step ID],    js.subsystem AS [subsystem__HIDDEN],    CASE js.subsystem        WHEN 'ActiveScripting' THEN 'ActiveX Script'        WHEN 'CmdExec' THEN 'Operating system (CmdExec)'        WHEN 'PowerShell' THEN 'PowerShell'        WHEN 'Distribution' THEN 'Replication Distributor'        WHEN 'Merge' THEN 'Replication Merge'        WHEN 'QueueReader' THEN 'Replication Queue Reader'        WHEN 'Snapshot' THEN 'Replication Snapshot'        WHEN 'LogReader' THEN 'Replication Transaction-Log Reader'        WHEN 'ANALYSISCOMMAND' THEN 'SQL Server Analysis Services Command'        WHEN 'ANALYSISQUERY' THEN 'SQL Server Analysis Services Query'        WHEN 'SSIS' THEN 'SQL Server Integration Services Package'        WHEN 'TSQL' THEN 'Transact-SQL script (T-SQL)'        ELSE js.subsystem    END AS [Sub-system],    js.command AS [Command],    js.additional_parameters AS [Additional parameters],    js.cmdexec_success_code  AS [Cmdexec success code],    js.on_success_action 	 AS [on_success_action__HIDDEN],    js.on_success_step_id 	 AS [on_success_step_id__HIDDEN],    CASE js.on_success_action        WHEN 1 THEN 'Quit the job reporting success'        WHEN 2 THEN 'Quit the job reporting failure'        WHEN 3 THEN 'Go to the next step'        WHEN 4 THEN 'Go to Step: (' + CONVERT(VARCHAR, js.on_success_step_id) + ') ' + jsos.step_name    END AS [On success action],    js.on_fail_action AS [on_fail_action__HIDDEN],    js.on_fail_step_id AS [on_fail_step_id__HIDDEN],    CASE js.on_fail_action        WHEN 1 THEN 'Quit the job reporting success'        WHEN 2 THEN 'Quit the job reporting failure'        WHEN 3 THEN 'Go to the next step'        WHEN 4 THEN 'Go to Step: (' + CONVERT(VARCHAR, js.on_fail_step_id) + ') ' + jsof.step_name    END AS [On fail action],    js.[server] 			AS [Server],    js.database_name 		AS [Database name],    js.database_user_name 	AS [Database user name],    js.retry_attempts		AS [Retry attempts],    js.retry_interval		AS [Retry interval],    js.os_run_priority		AS [Run priority],    js.output_file_name	  	AS [Output file name],    js.flags 				AS [Flags],    js.proxy_id				AS [Proxy ID],	j.name 		 			AS [JobName__HIDDEN],     16						AS [SyncConfig__HIDDEN]FROM msdb.dbo.sysjobsteps AS js WITH (NOLOCK)    LEFT JOIN msdb.dbo.sysjobsteps AS jsos WITH (NOLOCK)        ON jsos.job_id = js.job_id        AND jsos.step_id = js.on_success_step_id    LEFT JOIN msdb.dbo.sysjobsteps AS jsof WITH (NOLOCK)        ON jsof.job_id = js.job_id        AND jsof.step_id = js.on_fail_step_id    JOIN msdb.dbo.sysjobs AS j WITH (NOLOCK)        ON j.job_id = js.job_id ORDER BY js.step_id
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Job Step

[schemaCmp.9.4]
enabled=1
caption=Job (DROP)
export=1
qType=3
oType=Job
query=EXEC msdb.dbo.sp_delete_job    @job_name = $NAME.STRING$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.5]
enabled=1
caption=Job (CREATE)
export=1
qType=3
oType=Job
query=EXEC msdb.dbo.sp_add_job    @job_name = $NAME.STRING$,    @enabled = $JOBENABLED;1$,    @description = $DESCRIPTION.STRING;NULL$,    @start_step_id = $START STEP ID;1$,    @category_name = $JOB CATEGORY.STRING;NULL$,    @owner_login_name = $JOB OWNER.STRING;NULL$,    @notify_level_eventlog = $NOTIFY_LEVEL_EVENTLOG;2$,    @notify_level_email = $NOTIFY_LEVEL_EMAIL$,     @notify_level_netsend = $NOTIFY_LEVEL_NETSEND$,     @notify_level_page = $NOTIFY_LEVEL_PAGE$,     @notify_email_operator_name = $EMAIL OPERATOR;NULL$,     @notify_netsend_operator_name = $NET SEND OPERATOR;NULL$,     @notify_page_operator_name = $PAGE OPERATOR;NULL$,     @delete_level = $DELETE_LEVEL;0$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.6]
enabled=1
caption=Job (UPDATE)
export=1
qType=3
oType=Job
query=EXEC msdb.dbo.sp_update_job 	@job_name = $NAME.STRING$,    @enabled = $JOBENABLED;1$,    @description = $DESCRIPTION.STRING;NULL$,    @start_step_id = $START STEP ID;1$,    @category_name = $JOB CATEGORY.STRING;NULL$,    @owner_login_name = $JOB OWNER.STRING;NULL$,    @notify_level_eventlog = $NOTIFY_LEVEL_EVENTLOG;2$,    @notify_level_email = $NOTIFY_LEVEL_EMAIL$,     @notify_level_netsend = $NOTIFY_LEVEL_NETSEND$,      @notify_level_page = $NOTIFY_LEVEL_PAGE$,      @notify_email_operator_name = $EMAIL OPERATOR;NULL$,      @notify_netsend_operator_name = $NET SEND OPERATOR;NULL$,     @notify_page_operator_name = $PAGE OPERATOR;NULL$,      @delete_level = $DELETE_LEVEL;0$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.7]
enabled=1
caption=Job Step (CREATE)
export=1
qType=3
oType=Job Step
query=EXEC msdb.dbo.sp_add_jobstep 	@job_name = $JOBNAME.STRING$,     @step_id = $STEP ID;NULL$,     @step_name = $NAME.STRING$,     @subsystem = $SUBSYSTEM.STRING;'TSQL'$,     @command = $COMMAND.STRING;NULL$,     @additional_parameters = $ADDITIONAL PARAMETERS.STRING;NULL$,    @cmdexec_success_code = $CMDEXEC SUCCESS CODE;0$,     @on_success_action = $ON_SUCCESS_ACTION;1$,     @on_success_step_id = $ON_SUCCESS_STEP_ID;0$,     @on_fail_action = $ON_FAIL_ACTION;2$,     @on_fail_step_id = $ON_FAIL_STEP_ID;0$,     @server = $SERVER.STRING;NULL$,     @database_name = $DATABASE NAME.STRING;NULL$,     @database_user_name = $DATABASE USER NAME.STRING;NULL$,     @retry_attempts = $RETRY ATTEMPTS;0$,     @retry_interval = $RETRY INTERVAL;0$,     @os_run_priority = $RUN PRIORITY;0$,     @output_file_name = $OUTPUT FILE NAME.STRING;NULL$,     @flags = $FLAGS;0$,     @proxy_id = $PROXY ID;NULL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.8]
enabled=1
caption=Job Step (ALTER)
export=1
qType=3
oType=Job Step
query=EXEC msdb.dbo.sp_update_jobstep 	@job_name = $JOBNAME.STRING$,     @step_id = $STEP ID;NULL$,     @step_name = $NAME.STRING$,     @subsystem = $SUBSYSTEM.STRING;'TSQL'$,     @command = $COMMAND.STRING;NULL$,     @additional_parameters = $ADDITIONAL PARAMETERS.STRING;NULL$,    @cmdexec_success_code = $CMDEXEC SUCCESS CODE;0$,     @on_success_action = $ON_SUCCESS_ACTION;1$,     @on_success_step_id = $ON_SUCCESS_STEP_ID;0$,     @on_fail_action = $ON_FAIL_ACTION;2$,     @on_fail_step_id = $ON_FAIL_STEP_ID;0$,     @server = $SERVER.STRING;NULL$,     @database_name = $DATABASE NAME.STRING;NULL$,     @database_user_name = $DATABASE USER NAME.STRING;NULL$,     @retry_attempts = $RETRY ATTEMPTS;0$,     @retry_interval = $RETRY INTERVAL;0$,     @os_run_priority = $RUN PRIORITY;0$,     @output_file_name = $OUTPUT FILE NAME.STRING;NULL$,     @flags = $FLAGS;0$,     @proxy_id = $PROXY ID;NULL$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.9]
enabled=1
caption=Job Step (DROP)
export=1
qType=3
oType=Job Step
query=EXEC msdb.dbo.sp_delete_jobstep 	@job_name = $JOBNAME.STRING$,     @step_id = $STEP ID$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.10]
enabled=1
caption=Schedule (CREATE)
export=1
qType=3
oType=Schedule
query=EXEC msdb.dbo.sp_add_schedule 	@schedule_name = $NAME.STRING$,     @enabled = $ENABLE;1$,    @freq_type = $FREQ_TYPE;0$,    @freq_interval = $FREQ_INTERVAL;1$,     @freq_subday_type = $FREQ_SUBDAY_TYPE;0$,     @freq_subday_interval = $FREQ_SUBDAY_INTERVAL;0$,     @freq_relative_interval = $FREQ_RELATIVE_INTERVAL;0$,     @freq_recurrence_factor = $FREQ_RECURRENCE_FACTOR;0$,     @active_start_date = $ACTIVE_START_DATE;NULL$,      @active_end_date = $ACTIVE_END_DATE;NULL$,     @active_start_time = $ACTIVE_START_TIME;000000$,     @active_end_time = $ACTIVE_END_TIME;235959$,     @owner_login_name = $OWNER NAME.STRING;NULL$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.11]
enabled=1
caption=Schedule (ALTER)
export=1
qType=3
oType=Schedule
query=EXEC msdb.dbo.sp_update_schedule 	@name = $NAME.STRING$,     @enabled = $ENABLE;1$,    @freq_type = $FREQ_TYPE;0$,    @freq_interval = $FREQ_INTERVAL;1$,     @freq_subday_type = $FREQ_SUBDAY_TYPE;0$,     @freq_subday_interval = $FREQ_SUBDAY_INTERVAL;0$,     @freq_relative_interval = $FREQ_RELATIVE_INTERVAL;0$,     @freq_recurrence_factor = $FREQ_RECURRENCE_FACTOR;0$,     @active_start_date = $ACTIVE_START_DATE;NULL$,      @active_end_date = $ACTIVE_END_DATE;NULL$,     @active_start_time = $ACTIVE_START_TIME;000000$,     @active_end_time = $ACTIVE_END_TIME;235959$,     @owner_login_name = $OWNER NAME.STRING;NULL$
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.12]
enabled=1
caption=Schedule (DROP)
export=1
qType=3
oType=Schedule
query=EXEC msdb.dbo.sp_delete_schedule 	@schedule_name = $NAME.STRING$,    @force_delete = 1
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.13]
enabled=1
caption=Job Schedules
export=1
qType=1
oType=Server
query=SELECT	j.name AS [Job name],	s.name AS ScheduleName,	'Job Schedule' AS [Target type],    j.name 		   AS [JobName__HIDDEN],     16 AS [SyncConfig__HIDDEN]FROM msdb.dbo.sysjobschedules AS js WITH (NOLOCK)    JOIN msdb.dbo.sysschedules AS s WITH (NOLOCK)        ON js.schedule_id = s.schedule_id    JOIN msdb.dbo.sysjobs AS j WITH (NOLOCK)        ON j.job_id = js.job_id ORDER BY s.name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Job Schedule

[schemaCmp.9.14]
enabled=1
caption=Job Schedule (CREATE)
export=1
qType=3
oType=Job Schedule
query=EXEC msdb.dbo.sp_attach_schedule   @job_name = $JOBNAME.STRING$,   @schedule_name = $NAME.STRING$
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.9.15]
enabled=1
caption=Job Schedule (DROP)
export=1
qType=3
oType=Job Schedule
query=EXEC msdb.dbo.sp_detach_schedule   @job_name = $JOBNAME.STRING$,   @schedule_name = $NAME.STRING$
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.10]
enabled=1
caption=MySQL Jobs
export=1
count=3
dbType=2
useCache=0
objTypes=Job	Definer	Definition	On completion	Status	Comment	Schedule

[schemaCmp.10.1]
enabled=1
caption=Job (CREATE)
export=1
qType=3
oType=Job
query=USE  `$SCHEMA NAME$`;CREATE DEFINER = $DEFINER$ EVENT    IF NOT EXISTS `$EVENT NAME$`    ON SCHEDULE $SCHEDULE$    ON COMPLETION $ON COMPLETION$    $STATUS$    COMMENT $COMMMENT.STRING$    DO       $DEFINITION$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.10.2]
enabled=1
caption=Job (DROP)
export=1
qType=3
oType=Job
query=DROP EVENT `$SCHEMA NAME$`.`$EVENT NAME$`;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.10.3]
enabled=1
caption=Jobs
export=1
qType=1
oType=Database
query=SELECT    concat(EVENT_SCHEMA, '.', EVENT_NAME) AS `Job name`,	'Job'			 AS `Target type`,	concat('''',REPLACE(`DEFINER`, '@', '''@'''),'''') AS `Definer`,	EVENT_DEFINITION AS `Definition`,	ON_COMPLETION	 AS `On completion`,	SQL_MODE		 AS `SQL Mode__DONT_COMPARE`,	`STATUS`		 AS `Status`,	EVENT_COMMENT	 AS `Comment`,	EVENT_SCHEMA	 AS `Schema name__HIDDEN`,	EVENT_NAME		 AS `Event name__HIDDEN`,	CONCAT(        CASE WHEN EXECUTE_AT IS NOT NULL THEN CONCAT(' AT ''', EXECUTE_AT, '''', CASE WHEN INTERVAL_VALUE IS NOT NULL THEN ' INTERVAL' ELSE '' END ) ELSE ' EVERY ' END,             CASE WHEN INTERVAL_VALUE IS NOT NULL THEN CONCAT(INTERVAL_VALUE, ' ', INTERVAL_FIELD) ELSE '' END,        CASE WHEN `STARTS` IS NOT NULL THEN CONCAT(' STARTS ', `STARTS`) ELSE '' END,        CASE WHEN `ENDS` IS NOT NULL THEN CONCAT(' ENDS ', `ENDS`) ELSE '' END    ) AS `Schedule`FROM    information_schema.`EVENTS`
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=327681
condition=
pathNameCnt=0
loadedObj=Job

[schemaCmp.11]
enabled=1
caption=PostgreSQL Jobs
export=1
count=12
dbType=7
useCache=0
objTypes=Job,Job Step,Job Schedule	Job class	Description	Host agent	EnabledJob Schedule|Schedule	Description	Enabled	Start time	End time	Months,jscmonths	Days,jscmonthdays	Hours,jschours	Minutes,jscminutes	Weekdays,jscweekdays	ExceptionsJob Step	Step number	Description	Enabled	Step type,jstkind	Script	Database	On error,jstonerror

[schemaCmp.11.1]
enabled=1
caption=Jobs
export=1
qType=1
oType=Server
query=SELECT	j.jobname                  AS "Job name",	'Job'                      AS "Target type",	cl.jclname                 AS "Job class",	j.jobdesc                  AS "Description",	j.jobhostagent             AS "Host agent",	CASE WHEN j.jobenabled THEN 'Yes' ELSE 'No' END AS "Enabled",	cl.jclid                   AS classid__HIDDEN__DONT_COMPARE,    1						   AS "SyncConfig__HIDDEN"FROM	pgagent.pga_job            AS j	LEFT JOIN pgagent.pga_jobclass  AS cl		ON   cl.jclid = j.jobjclidORDER BY j.jobname
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Job

[schemaCmp.11.2]
enabled=1
caption=Job Schedules
export=1
qType=1
oType=Server
query=SELECT	j.jobname      AS "job name",	s.jscname      AS "Schedule name",	'Job Schedule' AS "Target type",	s.jscdesc      AS "Description",	CASE WHEN s.jscenabled THEN 'Yes' ELSE 'No' END AS "Enabled",	to_char(s.jscstart, 'YYYY-MM-DD HH24:MI:SS')    AS "Start time",	to_char(s.jscend, 'YYYY-MM-DD HH24:MI:SS')      AS "End time",	s.jscminutes   AS jscminutes__HIDDEN,	s.jschours     AS jschours__HIDDEN,	s.jscweekdays  AS jscweekdays__HIDDEN,	s.jscmonthdays AS jscmonthdays__HIDDEN,	s.jscmonths    AS jscmonths__HIDDEN,	SUBSTRING(      CASE WHEN s.jscmonths[1] THEN ', January' ELSE '' END ||      CASE WHEN s.jscmonths[2] THEN ', February' ELSE '' END ||      CASE WHEN s.jscmonths[3] THEN ', March' ELSE '' END ||      CASE WHEN s.jscmonths[4] THEN ', April' ELSE '' END ||      CASE WHEN s.jscmonths[5] THEN ', May' ELSE '' END ||      CASE WHEN s.jscmonths[6] THEN ', June' ELSE '' END ||      CASE WHEN s.jscmonths[7] THEN ', July' ELSE '' END ||      CASE WHEN s.jscmonths[8] THEN ', August' ELSE '' END ||      CASE WHEN s.jscmonths[9] THEN ', September' ELSE '' END ||      CASE WHEN s.jscmonths[10] THEN ', October' ELSE '' END ||      CASE WHEN s.jscmonths[11] THEN ', November' ELSE '' END ||      CASE WHEN s.jscmonths[12] THEN ', December' ELSE '' END, 3, 255) AS "Months",	SUBSTRING(      CASE WHEN s.jscmonthdays[1] THEN ', 01' ELSE '' END ||      CASE WHEN s.jscmonthdays[2] THEN ', 02' ELSE '' END ||      CASE WHEN s.jscmonthdays[3] THEN ', 03' ELSE '' END ||      CASE WHEN s.jscmonthdays[4] THEN ', 04' ELSE '' END ||      CASE WHEN s.jscmonthdays[5] THEN ', 05' ELSE '' END ||      CASE WHEN s.jscmonthdays[6] THEN ', 06' ELSE '' END ||      CASE WHEN s.jscmonthdays[7] THEN ', 07' ELSE '' END ||      CASE WHEN s.jscmonthdays[8] THEN ', 08' ELSE '' END ||      CASE WHEN s.jscmonthdays[9] THEN ', 09' ELSE '' END ||      CASE WHEN s.jscmonthdays[10] THEN ', 10' ELSE '' END ||      CASE WHEN s.jscmonthdays[11] THEN ', 11' ELSE '' END ||      CASE WHEN s.jscmonthdays[12] THEN ', 12' ELSE '' END ||      CASE WHEN s.jscmonthdays[13] THEN ', 13' ELSE '' END ||      CASE WHEN s.jscmonthdays[14] THEN ', 14' ELSE '' END ||      CASE WHEN s.jscmonthdays[15] THEN ', 15' ELSE '' END ||      CASE WHEN s.jscmonthdays[16] THEN ', 16' ELSE '' END ||      CASE WHEN s.jscmonthdays[17] THEN ', 17' ELSE '' END ||      CASE WHEN s.jscmonthdays[18] THEN ', 18' ELSE '' END ||      CASE WHEN s.jscmonthdays[19] THEN ', 19' ELSE '' END ||      CASE WHEN s.jscmonthdays[20] THEN ', 20' ELSE '' END ||      CASE WHEN s.jscmonthdays[21] THEN ', 21' ELSE '' END ||      CASE WHEN s.jscmonthdays[22] THEN ', 22' ELSE '' END ||      CASE WHEN s.jscmonthdays[23] THEN ', 23' ELSE '' END ||      CASE WHEN s.jscmonthdays[24] THEN ', 24' ELSE '' END ||      CASE WHEN s.jscmonthdays[25] THEN ', 25' ELSE '' END ||      CASE WHEN s.jscmonthdays[26] THEN ', 26' ELSE '' END ||      CASE WHEN s.jscmonthdays[27] THEN ', 27' ELSE '' END ||      CASE WHEN s.jscmonthdays[28] THEN ', 28' ELSE '' END ||      CASE WHEN s.jscmonthdays[29] THEN ', 29' ELSE '' END ||      CASE WHEN s.jscmonthdays[30] THEN ', 30' ELSE '' END ||      CASE WHEN s.jscmonthdays[31] THEN ', 31' ELSE '' END ||      CASE WHEN s.jscmonthdays[32] THEN ', Last day' ELSE '' END, 3, 255) AS "Days",	SUBSTRING(      CASE WHEN s.jschours[1] THEN ', 00' ELSE '' END ||      CASE WHEN s.jschours[2] THEN ', 01' ELSE '' END ||      CASE WHEN s.jschours[3] THEN ', 02' ELSE '' END ||      CASE WHEN s.jschours[4] THEN ', 03' ELSE '' END ||      CASE WHEN s.jschours[5] THEN ', 04' ELSE '' END ||      CASE WHEN s.jschours[6] THEN ', 05' ELSE '' END ||      CASE WHEN s.jschours[7] THEN ', 06' ELSE '' END ||      CASE WHEN s.jschours[8] THEN ', 07' ELSE '' END ||      CASE WHEN s.jschours[9] THEN ', 08' ELSE '' END ||      CASE WHEN s.jschours[10] THEN ', 09' ELSE '' END ||      CASE WHEN s.jschours[11] THEN ', 10' ELSE '' END ||      CASE WHEN s.jschours[12] THEN ', 11' ELSE '' END ||      CASE WHEN s.jschours[13] THEN ', 12' ELSE '' END ||      CASE WHEN s.jschours[14] THEN ', 13' ELSE '' END ||      CASE WHEN s.jschours[15] THEN ', 14' ELSE '' END ||      CASE WHEN s.jschours[16] THEN ', 15' ELSE '' END ||      CASE WHEN s.jschours[17] THEN ', 16' ELSE '' END ||      CASE WHEN s.jschours[18] THEN ', 17' ELSE '' END ||      CASE WHEN s.jschours[19] THEN ', 18' ELSE '' END ||      CASE WHEN s.jschours[20] THEN ', 19' ELSE '' END ||      CASE WHEN s.jschours[21] THEN ', 20' ELSE '' END ||      CASE WHEN s.jschours[22] THEN ', 21' ELSE '' END ||      CASE WHEN s.jschours[23] THEN ', 22' ELSE '' END ||      CASE WHEN s.jschours[24] THEN ', 23' ELSE '' END, 3, 255) AS "Hours",	SUBSTRING(      CASE WHEN s.jscminutes[1] THEN ', 00' ELSE '' END ||      CASE WHEN s.jscminutes[2] THEN ', 01' ELSE '' END ||      CASE WHEN s.jscminutes[3] THEN ', 02' ELSE '' END ||      CASE WHEN s.jscminutes[4] THEN ', 03' ELSE '' END ||      CASE WHEN s.jscminutes[5] THEN ', 04' ELSE '' END ||      CASE WHEN s.jscminutes[6] THEN ', 05' ELSE '' END ||      CASE WHEN s.jscminutes[7] THEN ', 06' ELSE '' END ||      CASE WHEN s.jscminutes[8] THEN ', 07' ELSE '' END ||      CASE WHEN s.jscminutes[9] THEN ', 08' ELSE '' END ||      CASE WHEN s.jscminutes[10] THEN ', 09' ELSE '' END ||      CASE WHEN s.jscminutes[11] THEN ', 10' ELSE '' END ||      CASE WHEN s.jscminutes[12] THEN ', 11' ELSE '' END ||      CASE WHEN s.jscminutes[13] THEN ', 12' ELSE '' END ||      CASE WHEN s.jscminutes[14] THEN ', 13' ELSE '' END ||      CASE WHEN s.jscminutes[15] THEN ', 14' ELSE '' END ||      CASE WHEN s.jscminutes[16] THEN ', 15' ELSE '' END ||      CASE WHEN s.jscminutes[17] THEN ', 16' ELSE '' END ||      CASE WHEN s.jscminutes[18] THEN ', 17' ELSE '' END ||      CASE WHEN s.jscminutes[19] THEN ', 18' ELSE '' END ||      CASE WHEN s.jscminutes[20] THEN ', 19' ELSE '' END ||      CASE WHEN s.jscminutes[21] THEN ', 20' ELSE '' END ||      CASE WHEN s.jscminutes[22] THEN ', 21' ELSE '' END ||      CASE WHEN s.jscminutes[23] THEN ', 22' ELSE '' END ||      CASE WHEN s.jscminutes[24] THEN ', 23' ELSE '' END ||      CASE WHEN s.jscminutes[25] THEN ', 24' ELSE '' END ||      CASE WHEN s.jscminutes[26] THEN ', 25' ELSE '' END ||      CASE WHEN s.jscminutes[27] THEN ', 26' ELSE '' END ||      CASE WHEN s.jscminutes[28] THEN ', 27' ELSE '' END ||      CASE WHEN s.jscminutes[29] THEN ', 28' ELSE '' END ||      CASE WHEN s.jscminutes[30] THEN ', 29' ELSE '' END ||      CASE WHEN s.jscminutes[31] THEN ', 30' ELSE '' END ||      CASE WHEN s.jscminutes[32] THEN ', 31' ELSE '' END ||      CASE WHEN s.jscminutes[33] THEN ', 32' ELSE '' END ||      CASE WHEN s.jscminutes[34] THEN ', 33' ELSE '' END ||      CASE WHEN s.jscminutes[35] THEN ', 34' ELSE '' END ||      CASE WHEN s.jscminutes[36] THEN ', 35' ELSE '' END ||      CASE WHEN s.jscminutes[37] THEN ', 36' ELSE '' END ||      CASE WHEN s.jscminutes[38] THEN ', 37' ELSE '' END ||      CASE WHEN s.jscminutes[39] THEN ', 38' ELSE '' END ||      CASE WHEN s.jscminutes[40] THEN ', 39' ELSE '' END ||      CASE WHEN s.jscminutes[41] THEN ', 40' ELSE '' END ||      CASE WHEN s.jscminutes[42] THEN ', 41' ELSE '' END ||      CASE WHEN s.jscminutes[43] THEN ', 42' ELSE '' END ||      CASE WHEN s.jscminutes[44] THEN ', 43' ELSE '' END ||      CASE WHEN s.jscminutes[45] THEN ', 44' ELSE '' END ||      CASE WHEN s.jscminutes[46] THEN ', 45' ELSE '' END ||      CASE WHEN s.jscminutes[47] THEN ', 46' ELSE '' END ||      CASE WHEN s.jscminutes[48] THEN ', 47' ELSE '' END ||      CASE WHEN s.jscminutes[49] THEN ', 48' ELSE '' END ||      CASE WHEN s.jscminutes[50] THEN ', 49' ELSE '' END ||      CASE WHEN s.jscminutes[51] THEN ', 50' ELSE '' END ||      CASE WHEN s.jscminutes[52] THEN ', 51' ELSE '' END ||      CASE WHEN s.jscminutes[53] THEN ', 52' ELSE '' END ||      CASE WHEN s.jscminutes[54] THEN ', 53' ELSE '' END ||      CASE WHEN s.jscminutes[55] THEN ', 54' ELSE '' END ||      CASE WHEN s.jscminutes[56] THEN ', 55' ELSE '' END ||      CASE WHEN s.jscminutes[57] THEN ', 56' ELSE '' END ||      CASE WHEN s.jscminutes[58] THEN ', 57' ELSE '' END ||      CASE WHEN s.jscminutes[59] THEN ', 58' ELSE '' END ||      CASE WHEN s.jscminutes[60] THEN ', 59' ELSE '' END, 3, 255) AS "Minutes",	SUBSTRING(      CASE WHEN s.jscweekdays[1] THEN ', Sunday' ELSE '' END ||      CASE WHEN s.jscweekdays[2] THEN ', Monday' ELSE '' END ||      CASE WHEN s.jscweekdays[3] THEN ', Tuesday' ELSE '' END ||      CASE WHEN s.jscweekdays[4] THEN ', Wednesday' ELSE '' END ||      CASE WHEN s.jscweekdays[5] THEN ', Thursday' ELSE '' END ||      CASE WHEN s.jscweekdays[6] THEN ', Friday' ELSE '' END ||      CASE WHEN s.jscweekdays[7] THEN ', Saturday' ELSE '' END, 3, 255) AS "Weekdays",	array_to_string(ARRAY(		SELECT trim(coalesce(to_char(e.jexdate, 'YYYY-MM-DD'), '') || ' ' || coalesce(to_char(e.jextime, 'HH24:MI:SS'), ''))			FROM pgagent.pga_exception AS e			WHERE s.jscid = e.jexscid), ', '	) AS "Exceptions",	j.jobname   AS jobname__HIDDEN__DONT_COMPARE,	s.jscjobid	AS jobid__HIDDEN__DONT_COMPARE,    16			AS "SyncConfig__HIDDEN"FROM	pgagent.pga_schedule  AS s	JOIN pgagent.pga_job  AS j		ON   j.jobid = s.jscjobidORDER BY s.jscname
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Job Schedule

[schemaCmp.11.3]
enabled=1
caption=Job Steps
export=1
qType=1
oType=Server
query=SELECT	j.jobname             AS "job name",	s.jstname             AS "Step name",	'Job step'            AS "Target type",	(		SELECT COUNT(1) + 1		FROM pgagent.pga_jobstep   AS s2		WHERE s2.jstjobid = s.jstjobid			AND s2.jstid < s.jstid	)                     AS "Step number",	s.jstdesc             AS "Description",	CASE WHEN s.jstenabled THEN 'Yes' ELSE 'No' END AS "Enabled",	CASE s.jstkind WHEN 's' THEN 'SQL script' WHEN 'b' THEN 'Batch/schell script' ELSE 'Unknown' END AS "Step type",	s.jstkind             AS jstkind__HIDDEN,	s.jstcode             AS "Script",	s.jstdbname           AS "Database",	CASE s.jstonerror WHEN 'f' THEN 'Fail' WHEN 's' THEN 'Succeed' ELSE 'Ignore' END AS "On error",	s.jstonerror          AS jstonerror__HIDDEN,    j.jobname             AS jobname__HIDDEN__DONT_COMPARE,    s.jstid               AS stepid__HIDDEN__DONT_COMPARE,    16					  AS "SyncConfig__HIDDEN"FROM	pgagent.pga_jobstep   AS s	JOIN pgagent.pga_job  AS j		ON   j.jobid = s.jstjobidORDER BY	s.jstid
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=1
loadedObj=Job step

[schemaCmp.11.4]
enabled=1
caption=Job (DROP)
export=1
qType=3
oType=Job
query=DELETE FROM pgagent.pga_exceptionWHERE jexscid IN (SELECT jscid 				FROM pgagent.pga_schedule 				WHERE jscjobid IN (SELECT jobid                					FROM pgagent.pga_job									WHERE jobname = $NAME.STRING$));DELETE FROM pgagent.pga_schedule WHERE jscjobid IN (SELECT jobid                    FROM pgagent.pga_job                    WHERE jobname = $NAME.STRING$);DELETE FROM pgagent.pga_jobstep WHERE jstjobid IN (SELECT jobid                    FROM pgagent.pga_job                    WHERE jobname = $NAME.STRING$);DELETE FROM pgagent.pga_job WHERE jobname = $NAME.STRING$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.11.5]
enabled=1
caption=Job (CREATE)
export=1
qType=3
oType=Job
query=INSERT INTO pgagent.pga_job  (    jobjclid,    jobname,    jobdesc,    jobenabled,    jobhostagent  )VALUES  (	$CLASSID$,	$NAME.STRING$,	$DESCRIPTION.STRING;''$,	'$ENABLED$' = 'Yes',	$HOST AGENT.STRING;''$  );
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.11.6]
enabled=1
caption=Job (UPDATE)
export=1
qType=3
oType=Job
query=UPDATE pgagent.pga_jobSET jobjclid = $CLASSID$,	jobdesc = $DESCRIPTION.STRING;''$,	jobenabled = ('$ENABLED$' = 'Yes'),	jobhostagent =$HOST AGENT.STRING;''$WHERE jobname = $NAME.STRING$;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.11.7]
enabled=1
caption=Job Step (CREATE)
export=1
qType=3
oType=Job Step
query=INSERT INTO pgagent.pga_jobstep  (    jstjobid,    jstname,    jstdesc,    jstenabled,    jstkind,    jstonerror,    jstcode,    jstdbname  )SELECT	JobId,	$NAME.STRING$,	$DESCRIPTION.STRING;''$,	'$ENABLED$' = 'Yes',	$JSTKIND.STRING$,	$JSTONERROR.STRING$,	$SCRIPT.STRING;''$,	$DATABASE.STRING;''$FROM pgagent.pga_jobWHERE jobname = $JOBNAME.STRING$;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.11.8]
enabled=1
caption=Job Step (ALTER)
export=1
qType=3
oType=Job Step
query=UPDATE pgagent.pga_jobstepSET jstdesc = $DESCRIPTION.STRING;''$,    jstenabled = ('$ENABLED$' = 'Yes'),    jstkind = $JSTKIND.STRING$,    jstonerror = $JSTONERROR.STRING$,    jstcode = $SCRIPT.STRING;''$,    jstdbname = $DATABASE.STRING;''$WHERE jstname = $NAME.STRING$	AND jstjobid IN (SELECT jobid                    FROM pgagent.pga_job                    WHERE jobname = $JOBNAME.STRING$                    );
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.11.9]
enabled=1
caption=Job Step (DROP)
export=1
qType=3
oType=Job Step
query=DELETE FROM pgagent.pga_jobstep WHERE jstname = $NAME.STRING$	AND jstjobid IN (SELECT jobid                    FROM pgagent.pga_job                    WHERE jobname = $JOBNAME.STRING$                    );
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.11.10]
enabled=1
caption=Job Schedule (CREATE)
export=1
qType=3
oType=Job Schedule
query=INSERT INTO pgagent.pga_schedule  (    jscjobid,    jscname,    jscdesc,    jscminutes,    jschours,    jscweekdays,    jscmonthdays,    jscmonths,    jscenabled,    jscstart,    jscend  )SELECT	jobid,	$NAME.STRING$,	$DESCRIPTION.STRING;''$,	$JSCMINUTES.STRING$,	$JSCHOURS.STRING$,	$JSCWEEKDAYS.STRING$,	$JSCMONTHDAYS.STRING$,	$JSCMONTHS.STRING$,	'$ENABLED$' = 'Yes',	to_timestamp($START TIME.STRING;NULL$, 'YYYY-MM-DD HH24:MI:SS'), 	to_timestamp($END TIME.STRING;NULL$, 'YYYY-MM-DD HH24:MI:SS')FROM pgagent.pga_jobWHERE jobname = $JOBNAME.STRING$;-- scheduling exceptions not supported in this version
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.11.11]
enabled=1
caption=Job Schedule (DROP)
export=1
qType=3
oType=Job Schedule
query=DELETE FROM pgagent.pga_exceptionWHERE jexscid IN (SELECT jscid 				FROM pgagent.pga_schedule 				WHERE jscjobid IN (SELECT jobid                					FROM pgagent.pga_job									WHERE jobname = $JOBNAME.STRING$                                    )      				AND jscname = $NAME.STRING$                );DELETE FROM pgagent.pga_schedule WHERE jscjobid IN (SELECT jobid                    FROM pgagent.pga_job                    WHERE jobname = $JOBNAME.STRING$                    )	AND jscname = $NAME.STRING$;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.11.12]
enabled=1
caption=Job Schedule (UPDATE)
export=1
qType=3
oType=Job Schedule
query=UPDATE pgagent.pga_scheduleSET    jscdesc = $DESCRIPTION.STRING;''$,    jscminutes = $JSCMINUTES.STRING$,    jschours = $JSCHOURS.STRING$,    jscweekdays = $JSCWEEKDAYS.STRING$,    jscmonthdays = $JSCMONTHDAYS.STRING$,    jscmonths = $JSCMONTHS.STRING$,    jscenabled = ('$ENABLED$' = 'Yes'),    jscstart = to_timestamp($START TIME.STRING;NULL$, 'YYYY-MM-DD HH24:MI:SS'),    jscend = to_timestamp($END TIME.STRING;NULL$, 'YYYY-MM-DD HH24:MI:SS')WHERE jscjobid IN (SELECT jobid                    FROM pgagent.pga_job                    WHERE jobname = $JOBNAME.STRING$                    )	AND jscname = $NAME.STRING$;    -- scheduling exceptions not supported in this version
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.12]
enabled=1
caption=DB2 Jobs
export=1
count=10
dbType=3
useCache=0
objTypes=Schedule	Start Date	Start Time	End DateExit Code Condition|OperatorJob,Job Category,Job Schedule,Job Success Condition,Job Action,Job NotificationJob CategoryJob Schedule|Schedule	Start Date	Start Time	End DateJob Success Condition|OperatorJob Notification|DML Trigger	Email Subjest	Email Message	Pager Subject 	Pager Message	SenderJob Action|AssemblyDB2 Admin Job|JobDBMS_JOB Job|Job

[schemaCmp.12.1]
enabled=1
caption=Schedules
export=1
qType=1
oType=Database
query=SELECT 	CASE WHEN  s.RECURRING00 = '1' 	    THEN 	    	CASE WHEN s.INTERVALTYPE00 IN (0, 1) AND s.DETAIL00 = 1                THEN 'Run continuously, waiting '                ELSE 'Run every '            END 	    	|| 	    	CAST(s.INTERVALUNIT00 AS VARCHAR(10)) || ' '            ||            CASE s.INTERVALTYPE00                WHEN 0 THEN 'minutes'                WHEN 1 THEN 'hours'                WHEN 2 THEN 'days'                WHEN 3 THEN 'weeks'                WHEN 4 THEN 'months'                WHEN 5 THEN 'months'                WHEN 6 THEN 'years'                ELSE '?'            END  	        || 	        CASE s.INTERVALTYPE00              WHEN 0 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 1 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 3 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                      	''                  END              WHEN 4 THEN              	    ' on the ' ||              	    CASE WHEN s.DETAIL00 = 32              	        THEN 'last'              	        ELSE CAST(s.DETAIL00 AS VARCHAR(2))              	    END              	    || ' day'              	    || CASE WHEN s.DETAIL00 = 32 THEN ' of month' ELSE '' END              WHEN 5 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on the ' ||                        CASE CAST(s.DETAIL00 / 8 AS INTEGER)                            WHEN 0 THEN 'first'                            WHEN 1 THEN 'second'                            WHEN 2 THEN 'third'                            WHEN 3 THEN 'fourth'                            WHEN 4 THEN 'fifth'                            WHEN 5 THEN 'last'                        END  || ' '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                      	''                  END              ELSE ''            END            ELSE            	'Run once on ' || TO_CHAR(s.STARTDATE00, 'Day, DD-Mon-YYYY') 	END AS "Schedule", 	'Schedule' AS "Target type", 	CASE s.RECURRING00 		WHEN '1' THEN 'RECURRING' 		ELSE 'ONCE' 	END AS "Schedule Type", 	s.STARTDATE00 AS "Start Date", 	CAST(s.STARTTIME00 AS VARCHAR(20)) AS "Start Time", 	s.ENDDATE00 AS "End Date", 	s.OBJECT_ID  AS "SCHED_ID__HIDDEN" FROM 	SYSTOOLS.MDSCHEDEVENT00  AS s ORDER BY s.SCHEDULEEVENTID00
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Schedule

[schemaCmp.12.2]
enabled=1
caption=Exit Code Condition Sets
export=1
qType=1
oType=Database
query=SELECT sc.SUCCESSCODESETNAME00 AS "Condition Name",    'Exit Code Condition' AS "Target type",    sc.DESCRIPTION00 AS "Description",    cc.CONDITION00 || ' ' || CAST(cc.CODE00 AS VARCHAR(10)) AS "Logical Condition(s)__AGG",     cc.OBJECT_ID AS "CODE_ID__HIDDEN",    sc.OBJECT_ID AS "COND_SET_ID__HIDDEN"   FROM SYSTOOLS.MDSUCCESSCOD00 AS sc    JOIN SYSTOOLS.REL_LINK AS scrl        ON scrl.OBJECT_ID = sc.OBJECT_ID    JOIN SYSTOOLS.OBJECT_TYPE AS ot        ON ot.OBJECT_TYPE_ID =scrl.OBJECT_TYPE_ID        AND ot."NAME" = 'MDSuccessCodeSetType'    JOIN SYSTOOLS.REL_LINK AS crl        ON crl.REL_INST_ID = scrl.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS cot        ON cot.REL_TYPE_ID = crl.REL_TYPE_ID        AND cot."NAME" = 'SCS_Code_Rel'    JOIN SYSTOOLS.MDCODECONDIT00 AS cc         ON cc.OBJECT_ID = crl.OBJECT_ID
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Exit Code Condition

[schemaCmp.12.3]
enabled=1
caption=Jobs
export=1
qType=1
oType=Database
query=SELECT	t.TASKNAME00                AS "Task Name",	'Job'                       AS "Target type",	t.DESCRIPTION00             AS "Description",	CASE t.TASKTYPE00	    WHEN 1 THEN 'DB2 Command Script'	    WHEN 2 THEN 'OS Command Script'	    WHEN 3 THEN 'MVS Shell Script'	    WHEN 4 THEN 'Grouping Task'	    ELSE 'Other'	END                         AS "Task Type",	CASE t.SCHEDULEENABLE00 WHEN '1' THEN 'YES' ELSE 'NO' END AS "Task Enabled",    a.APPLICATION_NAME          AS "Scheduling Application",	t.EXECUTIONSYSTEMID00       AS "Exec System",	t.DB2INSTANCE00             AS "Exec DB2 Instance",	t.EXECUTIONPARTITIONID00    AS "Exec Partition",	t.USERID00                  AS "Exec as User",	t.COMMANDPROCESSOR00        AS "Command Processor",	t.FILEEXTENSION00           AS "Script File Extension",	t.SCRIPTCONTENT00           AS "Script",	t.STATEMENTTERMINATIONCHAR00 AS "Statement Termination Char",	t.WORKINGDIR00              AS "Work Dir",	t.OBJECT_ID                 AS "JOB_ID__HIDDEN"  FROM	SYSTOOLS.MDTASKTYPE00       AS t	JOIN SYSTOOLS.APPLICATIONS  AS a		ON a.APPLICATION_ID = t.ICM$^APPLICATIONORDER BY 1
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Job

[schemaCmp.12.4]
enabled=1
caption=Job Categories
export=1
qType=1
oType=Job
query=SELECT s.CATEGORY00 AS "Category Name",    'Job Category' AS "Target type",    s.DESCRIPTION00 AS "Category Description",      t.OBJECT_ID AS "JOB_ID__HIDDEN",    s.OBJECT_ID AS "CAT_ID__HIDDEN"FROM SYSTOOLS.MDTASKCATEGO00 AS s    JOIN SYSTOOLS.REL_LINK AS srl        ON srl.OBJECT_ID = s.OBJECT_ID    JOIN SYSTOOLS.OBJECT_TYPE AS sot        ON sot.OBJECT_TYPE_ID = srl.OBJECT_TYPE_ID        AND sot."NAME" = 'MDTaskCategoryType'    JOIN SYSTOOLS.REL_LINK AS trl        ON trl.REL_INST_ID = srl.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS tot        ON tot.REL_TYPE_ID = trl.REL_TYPE_ID        AND tot."NAME" = 'Task_Category_Rel'    JOIN SYSTOOLS.MDTASKTYPE00 AS t        ON t.OBJECT_ID = trl.OBJECT_IDWHERE t.TASKNAME00 = '$SCHEMA_NAME$'ORDER BY 1
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Job Category

[schemaCmp.12.5]
enabled=1
caption=Job Schedules
export=1
qType=1
oType=Job
query=SELECT CASE WHEN  s.RECURRING00 = '1'         THEN             CASE WHEN s.INTERVALTYPE00 IN (0, 1) AND s.DETAIL00 = 1                THEN 'Run continuously, waiting '                ELSE 'Run every '            END             ||             CAST(s.INTERVALUNIT00 AS VARCHAR(10)) || ' '            ||            CASE s.INTERVALTYPE00                WHEN 0 THEN 'minutes'                WHEN 1 THEN 'hours'                WHEN 2 THEN 'days'                WHEN 3 THEN 'weeks'                WHEN 4 THEN 'months'                WHEN 5 THEN 'months'                WHEN 6 THEN 'years'                ELSE '?'            END              ||             CASE s.INTERVALTYPE00              WHEN 0 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 1 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 3 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                          ''                  END              WHEN 4 THEN                      ' on the ' ||                      CASE WHEN s.DETAIL00 = 32                          THEN 'last'                          ELSE CAST(s.DETAIL00 AS VARCHAR(2))                      END                      || ' day'                      || CASE WHEN s.DETAIL00 = 32 THEN ' of month' ELSE '' END              WHEN 5 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on the ' ||                        CASE CAST(s.DETAIL00 / 8 AS INTEGER)                            WHEN 0 THEN 'first'                            WHEN 1 THEN 'second'                            WHEN 2 THEN 'third'                            WHEN 3 THEN 'fourth'                            WHEN 4 THEN 'fifth'                            WHEN 5 THEN 'last'                        END  || ' '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                          ''                  END              ELSE ''            END            ELSE                'Run once on ' || TO_CHAR(s.STARTDATE00, 'Day, DD-Mon-YYYY')     END AS "Schedule",     'Job Schedule' AS "Target Type",    'Anonymous Schedule' AS "Schedule Name",     CASE WHEN  s.RECURRING00 = '1'         THEN             CASE WHEN s.INTERVALTYPE00 IN (0, 1) AND s.DETAIL00 = 1                THEN 'Run continuously, waiting '                ELSE 'Run every '            END             ||             CAST(s.INTERVALUNIT00 AS VARCHAR(10)) || ' '            ||            CASE s.INTERVALTYPE00                WHEN 0 THEN 'minutes'                WHEN 1 THEN 'hours'                WHEN 2 THEN 'days'                WHEN 3 THEN 'weeks'                WHEN 4 THEN 'months'                WHEN 5 THEN 'months'                WHEN 6 THEN 'years'                ELSE '?'            END              ||             CASE s.INTERVALTYPE00              WHEN 0 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 1 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 3 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                          ''                  END              WHEN 4 THEN                      ' on the ' ||                      CASE WHEN s.DETAIL00 = 32                          THEN 'last'                          ELSE CAST(s.DETAIL00 AS VARCHAR(2))                      END                      || ' day'                      || CASE WHEN s.DETAIL00 = 32 THEN ' of month' ELSE '' END              WHEN 5 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on the ' ||                        CASE CAST(s.DETAIL00 / 8 AS INTEGER)                            WHEN 0 THEN 'first'                            WHEN 1 THEN 'second'                            WHEN 2 THEN 'third'                            WHEN 3 THEN 'fourth'                            WHEN 4 THEN 'fifth'                            WHEN 5 THEN 'last'                        END  || ' '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                          ''                  END              ELSE ''            END            ELSE                'Run once on ' || TO_CHAR(s.STARTDATE00, 'Day, DD-Mon-YYYY')     END AS "Schedule Definition",     CASE s.RECURRING00         WHEN '1' THEN 'RECURRING'         ELSE 'ONCE'     END AS "Schedule Type",     s.STARTDATE00 AS "Start Date",     CAST(s.STARTTIME00 AS VARCHAR(20)) AS "Start Time",     s.ENDDATE00 AS "End Date",    t.OBJECT_ID AS "JOB_ID__HIDDEN",    s.OBJECT_ID AS "SCHED_ID__HIDDEN"  FROM SYSTOOLS.MDSCHEDEVENT00 AS s    JOIN SYSTOOLS.REL_LINK AS srl        ON srl.OBJECT_ID = s.OBJECT_ID    JOIN SYSTOOLS.OBJECT_TYPE AS sot        ON sot.OBJECT_TYPE_ID = srl.OBJECT_TYPE_ID        AND sot."NAME" = 'MDSchedEventType'     JOIN SYSTOOLS.REL_LINK AS trl        ON trl.REL_INST_ID = srl.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS tot        ON tot.REL_TYPE_ID = trl.REL_TYPE_ID        AND tot."NAME" = 'Task_Event_Rel'     JOIN SYSTOOLS.MDTASKTYPE00 AS t        ON t.OBJECT_ID = trl.OBJECT_IDWHERE NOT EXISTS (SELECT 1                   FROM SYSTOOLS.MDNAMEDSCHED00 AS ns                  JOIN SYSTOOLS.REL_LINK AS nsrl                      ON nsrl.OBJECT_ID = ns.OBJECT_ID                    JOIN SYSTOOLS.OBJECT_TYPE AS nsot                      ON nsot.OBJECT_TYPE_ID = nsrl.OBJECT_TYPE_ID                          AND nsot."NAME" = 'MDNamedSchedType'                   JOIN SYSTOOLS.REL_LINK AS srl2                      ON srl2.REL_INST_ID = nsrl.REL_INST_ID                  JOIN SYSTOOLS.REL_TYPE AS sot2                      ON sot2.REL_TYPE_ID = srl2.REL_TYPE_ID                      AND sot2."NAME" = 'Sched_Event_Rel'                      AND srl2.OBJECT_ID = s.OBJECT_ID                  JOIN SYSTOOLS.REL_LINK AS trl2                      ON trl2.OBJECT_ID = nsrl.OBJECT_ID                   JOIN SYSTOOLS.REL_TYPE AS tot2                      ON tot2.REL_TYPE_ID = trl2.REL_TYPE_ID                      AND tot2."NAME" = 'Task_SNSCHED_Rel' )    AND t.TASKNAME00 = '$SCHEMA_NAME$'UNION ALLSELECT CASE WHEN  s.RECURRING00 = '1'         THEN             CASE WHEN s.INTERVALTYPE00 IN (0, 1) AND s.DETAIL00 = 1                THEN 'Run continuously, waiting '                ELSE 'Run every '            END             ||             CAST(s.INTERVALUNIT00 AS VARCHAR(10)) || ' '            ||            CASE s.INTERVALTYPE00                WHEN 0 THEN 'minutes'                WHEN 1 THEN 'hours'                WHEN 2 THEN 'days'                WHEN 3 THEN 'weeks'                WHEN 4 THEN 'months'                WHEN 5 THEN 'months'                WHEN 6 THEN 'years'                ELSE '?'            END              ||             CASE s.INTERVALTYPE00              WHEN 0 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 1 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 3 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                          ''                  END              WHEN 4 THEN                      ' on the ' ||                      CASE WHEN s.DETAIL00 = 32                          THEN 'last'                          ELSE CAST(s.DETAIL00 AS VARCHAR(2))                      END                      || ' day'                      || CASE WHEN s.DETAIL00 = 32 THEN ' of month' ELSE '' END              WHEN 5 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on the ' ||                        CASE CAST(s.DETAIL00 / 8 AS INTEGER)                            WHEN 0 THEN 'first'                            WHEN 1 THEN 'second'                            WHEN 2 THEN 'third'                            WHEN 3 THEN 'fourth'                            WHEN 4 THEN 'fifth'                            WHEN 5 THEN 'last'                        END  || ' '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                          ''                  END              ELSE ''            END            ELSE                'Run once on ' || TO_CHAR(s.STARTDATE00, 'Day, DD-Mon-YYYY')     END AS "Schedule",     'Job Schedule' AS "Target type",    ns.SHAREDSCHEDULENAME00 AS "Schedule Name",     CASE WHEN  s.RECURRING00 = '1'         THEN             CASE WHEN s.INTERVALTYPE00 IN (0, 1) AND s.DETAIL00 = 1                THEN 'Run continuously, waiting '                ELSE 'Run every '            END             ||             CAST(s.INTERVALUNIT00 AS VARCHAR(10)) || ' '            ||            CASE s.INTERVALTYPE00                WHEN 0 THEN 'minutes'                WHEN 1 THEN 'hours'                WHEN 2 THEN 'days'                WHEN 3 THEN 'weeks'                WHEN 4 THEN 'months'                WHEN 5 THEN 'months'                WHEN 6 THEN 'years'                ELSE '?'            END              ||             CASE s.INTERVALTYPE00              WHEN 0 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 1 THEN                  CASE WHEN s.DETAIL00 = 1                    THEN ' between runs'                    ELSE ''                  END              WHEN 3 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                          ''                  END              WHEN 4 THEN                      ' on the ' ||                      CASE WHEN s.DETAIL00 = 32                          THEN 'last'                          ELSE CAST(s.DETAIL00 AS VARCHAR(2))                      END                      || ' day'                      || CASE WHEN s.DETAIL00 = 32 THEN ' of month' ELSE '' END              WHEN 5 THEN                  CASE WHEN s.DETAIL00  IS NOT NULL                      THEN                        ' on the ' ||                        CASE CAST(s.DETAIL00 / 8 AS INTEGER)                            WHEN 0 THEN 'first'                            WHEN 1 THEN 'second'                            WHEN 2 THEN 'third'                            WHEN 3 THEN 'fourth'                            WHEN 4 THEN 'fifth'                            WHEN 5 THEN 'last'                        END  || ' '                        ||                        CASE MOD(s.DETAIL00, 7)                            WHEN 7 THEN 'Sunday'                            WHEN 1 THEN 'Monday'                            WHEN 2 THEN 'Tuesday'                            WHEN 3 THEN 'Wednesday'                            WHEN 4 THEN 'Thursday'                            WHEN 5 THEN 'Friday'                            WHEN 6 THEN 'Saturday'                            WHEN 0 THEN TO_CHAR(s.STARTDATE00, 'Day')                            ELSE '?'                        END                      ELSE                          ''                  END              ELSE ''            END            ELSE                'Run once on ' || TO_CHAR(s.STARTDATE00, 'Day, DD-Mon-YYYY')     END AS "Schedule Definition",     CASE s.RECURRING00         WHEN '1' THEN 'RECURRING'         ELSE 'ONCE'     END AS "Schedule Type",     s.STARTDATE00 AS "Start Date",     CAST(s.STARTTIME00 AS VARCHAR(20)) AS "Start Time",     s.ENDDATE00 AS "End Date",    t.OBJECT_ID AS "JOB_ID__HIDDEN",    s.OBJECT_ID AS "SCHED_ID__HIDDEN"  FROM SYSTOOLS.MDNAMEDSCHED00 AS ns    JOIN SYSTOOLS.REL_LINK AS nsrl        ON nsrl.OBJECT_ID = ns.OBJECT_ID      JOIN SYSTOOLS.OBJECT_TYPE AS nsot        ON nsot.OBJECT_TYPE_ID = nsrl.OBJECT_TYPE_ID            AND nsot."NAME" = 'MDNamedSchedType'     JOIN SYSTOOLS.REL_LINK AS srl        ON srl.REL_INST_ID = nsrl.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS sot        ON sot.REL_TYPE_ID = srl.REL_TYPE_ID        AND sot."NAME" = 'Sched_Event_Rel'      JOIN SYSTOOLS.MDSCHEDEVENT00 AS s        ON s.OBJECT_ID = srl.OBJECT_ID    JOIN SYSTOOLS.REL_LINK AS trl        ON trl.OBJECT_ID = nsrl.OBJECT_ID     JOIN SYSTOOLS.REL_TYPE AS tot        ON tot.REL_TYPE_ID = trl.REL_TYPE_ID        AND tot."NAME" = 'Task_SNSCHED_Rel'          JOIN SYSTOOLS.REL_LINK AS trl2        ON trl2.REL_INST_ID = trl.REL_INST_ID    JOIN SYSTOOLS.OBJECT_TYPE AS tot2        ON tot2.OBJECT_TYPE_ID = trl2.OBJECT_TYPE_ID        AND tot2."NAME" = 'MDTaskType'     JOIN SYSTOOLS.MDTASKTYPE00 AS t        ON t.OBJECT_ID = trl2.OBJECT_IDWHERE t.TASKNAME00 = '$SCHEMA_NAME$'ORDER BY 4, 1
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Job Schedule

[schemaCmp.12.6]
enabled=1
caption=Job Success Conditions
export=1
qType=1
oType=Job
query=SELECT n.SUCCESSCODESETNAME00 AS "Success Condition Set Name",    'Job Success Condition' AS "Target Type",    n.DESCRIPTION00 AS "Set Description",    cc.CONDITION00 || ' ' || CAST(cc.CODE00 AS VARCHAR(10)) AS "Logical Condition",     t.OBJECT_ID AS "JOB_ID__HIDDEN",    cc.OBJECT_ID AS "CODE_ID__HIDDEN",    n.OBJECT_ID AS "COND_SET_ID__HIDDEN"FROM SYSTOOLS.MDSUCCESSCOD00 AS n    JOIN SYSTOOLS.REL_LINK AS nrl        ON nrl.OBJECT_ID = n.OBJECT_ID    JOIN SYSTOOLS.OBJECT_TYPE AS ot        ON ot.OBJECT_TYPE_ID = nrl.OBJECT_TYPE_ID        AND ot."NAME" = 'MDSuccessCodeSetType'    JOIN SYSTOOLS.REL_LINK AS trl        ON trl.REL_INST_ID = nrl.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS tot        ON tot.REL_TYPE_ID = trl.REL_TYPE_ID        AND tot."NAME" = 'Task_SuccessCode_Rel'    JOIN SYSTOOLS.MDTASKTYPE00 AS t        ON t.OBJECT_ID = trl.OBJECT_ID      JOIN SYSTOOLS.REL_LINK AS scrl        ON scrl.OBJECT_ID = n.OBJECT_ID    JOIN SYSTOOLS.OBJECT_TYPE AS sot        ON sot.OBJECT_TYPE_ID = scrl.OBJECT_TYPE_ID        AND sot."NAME" = 'MDSuccessCodeSetType'    JOIN SYSTOOLS.REL_LINK AS crl        ON crl.REL_INST_ID = scrl.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS cot        ON cot.REL_TYPE_ID = crl.REL_TYPE_ID        AND cot."NAME" = 'SCS_Code_Rel'    JOIN SYSTOOLS.MDCODECONDIT00 AS cc         ON cc.OBJECT_ID = crl.OBJECT_ID		WHERE t.TASKNAME00 = '$SCHEMA_NAME$'ORDER BY 1, 3, 4
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Job Success Condition

[schemaCmp.12.7]
enabled=1
caption=Job Notifications
export=1
qType=1
oType=Job
query=SELECT CASE WHEN n.MESSAGETYPE00 = 0         THEN         	CASE WHEN n.USEEMAILMESSAGE00 = '1'          	    THEN 'Email message'         	    ELSE 'Pager message'         	END         ELSE         	'Journal entry'     END AS "Notification Type",    'Job Notification' AS "Target type",    CASE n.NOTIFICATIONCONDITION00        WHEN '0' THEN 'On success'        WHEN '1' THEN 'On failure'        ELSE 'Any condition'    END "Notification Condition",    n.SUBJECT00 AS "Email Subjest",    n.EMAILMESSAGE00 AS "Email Message",    n.PAGERSUBJECT00 AS "Pager Subject",     n.PAGERMESSAGE00 AS "Pager Message",    n.SENDER00 AS "Sender",     t.OBJECT_ID AS "JOB_ID__HIDDEN",    n.OBJECT_ID AS "NOTIF_ID__HIDDEN"FROM SYSTOOLS.MDNOTIFICATI00 AS n    JOIN SYSTOOLS.REL_LINK AS nrl        ON nrl.OBJECT_ID = n.OBJECT_ID    JOIN SYSTOOLS.OBJECT_TYPE AS ot        ON ot.OBJECT_TYPE_ID = nrl.OBJECT_TYPE_ID        AND ot."NAME" = 'MDNotificationActionType'    JOIN SYSTOOLS.REL_LINK AS trl        ON trl.REL_INST_ID = nrl.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS tot        ON tot.REL_TYPE_ID = trl.REL_TYPE_ID        AND tot."NAME" = 'Task_Notif_Rel'    JOIN SYSTOOLS.MDTASKTYPE00 AS t        ON t.OBJECT_ID = trl.OBJECT_IDWHERE t.TASKNAME00 = '$SCHEMA_NAME$'ORDER BY 1, 3
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Job Notification

[schemaCmp.12.8]
enabled=1
caption=Job Status Actions
export=1
qType=1
oType=Job
query=SELECT CASE a.FOLLOWONCONDITION00        WHEN '0' THEN 'On success'        WHEN '1' THEN 'On failure'        ELSE 'Any condition'    END AS "Event type",    'Job Action' AS "Target type",    CASE a.ACTION00        WHEN '0' THEN 'Run task'        WHEN '1' THEN 'Enable schedule of'        WHEN '2' THEN 'Disable schedule of'        WHEN '3' THEN 'Delete this task'          ELSE 'Unknown action type'    END AS "Action Type",        f.TASKNAME00  AS "Linked Task name",    t.OBJECT_ID AS "JOB_ID__HIDDEN",    a.OBJECT_ID AS "ACTION_ID__HIDDEN",    f.OBJECT_ID AS "LINKED_JOB_ID__HIDDEN"FROM SYSTOOLS.MDFOLLOWONAC00 AS a    JOIN SYSTOOLS.REL_LINK AS arl        ON arl.OBJECT_ID = a.OBJECT_ID    JOIN SYSTOOLS.OBJECT_TYPE AS ot        ON ot.OBJECT_TYPE_ID = arl.OBJECT_TYPE_ID        AND ot."NAME" = 'MDFollowOnActionType'    JOIN SYSTOOLS.REL_LINK AS trl        ON trl.REL_INST_ID = arl.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS tot        ON tot.REL_TYPE_ID = trl.REL_TYPE_ID        AND tot."NAME" = 'Task_Follow_Rel'    JOIN SYSTOOLS.MDTASKTYPE00 AS t        ON t.OBJECT_ID = trl.OBJECT_ID     JOIN SYSTOOLS.REL_LINK AS arl2        ON arl2.OBJECT_ID = a.OBJECT_ID    JOIN SYSTOOLS.OBJECT_TYPE AS ot2        ON ot2.OBJECT_TYPE_ID = arl2.OBJECT_TYPE_ID        AND ot2."NAME" = 'MDFollowOnActionType'    JOIN SYSTOOLS.REL_LINK AS frl        ON frl.REL_INST_ID = arl2.REL_INST_ID    JOIN SYSTOOLS.REL_TYPE AS fot2        ON fot2.REL_TYPE_ID = frl.REL_TYPE_ID        AND fot2."NAME" = 'FollowOn_Task_REL'    JOIN SYSTOOLS.MDTASKTYPE00 AS f        ON f.OBJECT_ID = frl.OBJECT_IDWHERE t.TASKNAME00 = '$SCHEMA_NAME$'        ORDER BY 1, 4
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=Job Action

[schemaCmp.12.9]
enabled=1
caption=DB2 Admin Job
export=1
qType=1
oType=Database
query=SELECT    "NAME" AS "Job Name",    'DB2 Admin Job' AS "Target type",    OWNER  AS "Owner",    CASE        WHEN MONTHS = '*' OR MONTHS = '*/1' THEN 'every month'        WHEN MONTHS LIKE '*/%' THEN 'every ' || REPLACE(MONTHS, '*/', '') || ' months'        ELSE            (CASE WHEN MONTHS LIKE '%-%' THEN 'from ' ELSE 'in ' END)            ||            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(                MONTHS,                '12', 'December'),                '11', 'November'),                '10', 'October'),                '9', 'September'),                '8', 'August'),                '7', 'July'),                '6', 'June'),                '5', 'May'),                '4', 'April'),                '3', 'March'),                '2', 'February'),                '1', 'January'),                '-', ' to ')    END /*AS MONTHS*/    || ' ' ||    CASE        WHEN DAYS_OF_WEEK = '*'        THEN            CASE                WHEN DAYS = '*' OR DAYS = '*/1'                THEN (CASE WHEN MONTHS = '*' OR MONTHS = '*/1' THEN 'every day' ELSE ''  END)                ELSE ''            END        ELSE            CASE                WHEN DAYS_OF_WEEK LIKE '%-%' THEN 'from '                ELSE (CASE WHEN MONTHS = '*' OR MONTHS = '*/1' THEN 'on' ELSE 'every' END || ' ')            END            ||            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(                DAYS_OF_WEEK,                  'sun', 'Sunday'),                  'mon', 'Monday'),                  'tue', 'Tuesday'),                  'wed', 'Wednesday'),                  'thu', 'Thursday'),                  'fri', 'Friday'),                  'sat', 'Saturday'),                  '0', 'Sunday'),                  '1', 'Monday'),                  '2', 'Tuesday'),                  '3', 'Wednesday'),                  '4', 'Thursday'),                  '5', 'Friday'),                  '6', 'Saturday'),                  '-', ' to ')    END /*AS DAYS_OF_WEEK*/    || ' ' ||    CASE        WHEN DAYS = '*' OR DAYS = '*/1' THEN ''        ELSE (CASE WHEN DAYS_OF_WEEK = '*' THEN '' ELSE 'and ' END)            ||            CASE                WHEN DAYS LIKE '*/%' THEN 'every ' || REPLACE(DAYS, '*/', '') || ' days'                WHEN DAYS LIKE '%-%' THEN 'from day ' || REPLACE(DAYS, '-', ' to ')                ELSE 'on day' || (CASE WHEN DAYS LIKE '%,%' THEN 's ' ELSE ' ' END) || REPLACE(DAYS, ',', ' and ')            END    END /*AS DAYS*/    || ' ' ||    CASE        WHEN HOURS = '*' OR HOURS = '*/1' THEN 'every hour'        WHEN HOURS LIKE '*/%' THEN 'every ' || REPLACE(HOURS, '*/', '') || ' hours'        WHEN HOURS LIKE '%-%' THEN 'between hours ' || REPLACE(HOURS, '-', ' and ')        ELSE 'at ' || REPLACE(HOURS, ',', ' and ')    END /*AS HOURS*/    ||    CASE        WHEN MINUTES = '*' OR MINUTES = '*/1' THEN ' every minute'        WHEN MINUTES LIKE '*/%' THEN ' every ' || REPLACE(MINUTES, '*/', '') || ' minutes'        WHEN MINUTES LIKE '%-%' THEN ' between minutes ' || REPLACE(MINUTES, '-', ' to ')        WHEN MINUTES LIKE ',' THEN ' on minutes ' || REPLACE(MINUTES, ',', ' and ')        ELSE            CASE                 WHEN HOURS NOT LIKE '%*%'                     AND HOURS NOT LIKE '%-%'                    AND MINUTES NOT LIKE '%*%'                     AND MINUTES NOT LIKE '%-%'                    AND MINUTES NOT LIKE '%,%'              THEN ':' || RIGHT('0' || MINUTES, 2)              ELSE ' at ' || MINUTES || ' minute'            END    END /*AS MINUTES*/ AS "Schedule",    SCHEDULE_IN_CRON_FORMAT AS "Schedule (in Cron Format)",    BEGIN_TIME AS "Start Time",    END_TIME AS "End Time",    MAX_INVOCATIONS AS "Maximum Invocations",    RTRIM(PROCEDURE_SCHEMA) || '.' || PROCEDURE_NAME AS "Procedure Name",    PROCEDURE_INPUT AS "Procedure Input Parameters",    "OPTIONS" AS "Options",    REMARKS AS "Remarks"FROM(  SELECT TRIM(MINUTES) AS MINUTES,      REPLACE(TRIM(HOURS), '00', '0') AS HOURS,      REPLACE(TRIM(DAYS), '00', '0') AS DAYS,      REPLACE(TRIM(SUBSTR(SCHEDULE, 1, LOCATE(' ', SCHEDULE))), '00', '0') AS MONTHS,      REPLACE(TRIM(SUBSTR(SCHEDULE, LOCATE(' ', SCHEDULE) + 1)), '00', '0') AS DAYS_OF_WEEK,      SCHEDULE_IN_CRON_FORMAT, "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS,      PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS  FROM  (      SELECT MINUTES,        HOURS,          SUBSTR(SCHEDULE, 1, LOCATE(' ', SCHEDULE)) AS DAYS,          SUBSTR(SCHEDULE, LOCATE(' ', SCHEDULE) + 1) AS SCHEDULE, SCHEDULE_IN_CRON_FORMAT,          "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS,          PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS    FROM  (        SELECT MINUTES,            SUBSTR(SCHEDULE, 1, LOCATE(' ', SCHEDULE)) AS HOURS,            SUBSTR(SCHEDULE, LOCATE(' ', SCHEDULE) + 1) AS SCHEDULE, SCHEDULE_IN_CRON_FORMAT,            "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS,            PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS      FROM  (          SELECT              SUBSTR(SCHEDULE, 1, LOCATE(' ', SCHEDULE)) AS MINUTES,              SUBSTR(SCHEDULE, LOCATE(' ', SCHEDULE) + 1) AS SCHEDULE, SCHEDULE_IN_CRON_FORMAT,              "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS,              PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS          FROM              (                  SELECT                      "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS, SCHEDULE, SCHEDULE AS SCHEDULE_IN_CRON_FORMAT,                      PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS                  FROM                      SYSTOOLS.ADMINTASKS AS t                  WHERE "NAME" NOT LIKE 'DBMS_JOB%'              ) AS mi      ) AS h    ) AS d  ) AS m) AS sORDER BY 1
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=DB2 Admin Job

[schemaCmp.12.10]
enabled=1
caption=DBMS_JOB Job
export=1
qType=1
oType=Database
query=SELECT    "NAME" AS "Job Name",    'DB2 Admin Job' AS "Target type",    OWNER  AS "Owner",    CASE        WHEN MONTHS = '*' OR MONTHS = '*/1' THEN 'every month'        WHEN MONTHS LIKE '*/%' THEN 'every ' || REPLACE(MONTHS, '*/', '') || ' months'        ELSE            (CASE WHEN MONTHS LIKE '%-%' THEN 'from ' ELSE 'in ' END)            ||            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(                MONTHS,                '12', 'December'),                '11', 'November'),                '10', 'October'),                '9', 'September'),                '8', 'August'),                '7', 'July'),                '6', 'June'),                '5', 'May'),                '4', 'April'),                '3', 'March'),                '2', 'February'),                '1', 'January'),                '-', ' to ')    END /*AS MONTHS*/    || ' ' ||    CASE        WHEN DAYS_OF_WEEK = '*'        THEN            CASE                WHEN DAYS = '*' OR DAYS = '*/1'                THEN (CASE WHEN MONTHS = '*' OR MONTHS = '*/1' THEN 'every day' ELSE ''  END)                ELSE ''            END        ELSE            CASE                WHEN DAYS_OF_WEEK LIKE '%-%' THEN 'from '                ELSE (CASE WHEN MONTHS = '*' OR MONTHS = '*/1' THEN 'on' ELSE 'every' END || ' ')            END            ||            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(            REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(                DAYS_OF_WEEK,                  'sun', 'Sunday'),                  'mon', 'Monday'),                  'tue', 'Tuesday'),                  'wed', 'Wednesday'),                  'thu', 'Thursday'),                  'fri', 'Friday'),                  'sat', 'Saturday'),                  '0', 'Sunday'),                  '1', 'Monday'),                  '2', 'Tuesday'),                  '3', 'Wednesday'),                  '4', 'Thursday'),                  '5', 'Friday'),                  '6', 'Saturday'),                  '-', ' to ')    END /*AS DAYS_OF_WEEK*/    || ' ' ||    CASE        WHEN DAYS = '*' OR DAYS = '*/1' THEN ''        ELSE (CASE WHEN DAYS_OF_WEEK = '*' THEN '' ELSE 'and ' END)            ||            CASE                WHEN DAYS LIKE '*/%' THEN 'every ' || REPLACE(DAYS, '*/', '') || ' days'                WHEN DAYS LIKE '%-%' THEN 'from day ' || REPLACE(DAYS, '-', ' to ')                ELSE 'on day' || (CASE WHEN DAYS LIKE '%,%' THEN 's ' ELSE ' ' END) || REPLACE(DAYS, ',', ' and ')            END    END /*AS DAYS*/    || ' ' ||    CASE        WHEN HOURS = '*' OR HOURS = '*/1' THEN 'every hour'        WHEN HOURS LIKE '*/%' THEN 'every ' || REPLACE(HOURS, '*/', '') || ' hours'        WHEN HOURS LIKE '%-%' THEN 'between hours ' || REPLACE(HOURS, '-', ' and ')        ELSE 'at ' || REPLACE(HOURS, ',', ' and ')    END /*AS HOURS*/    ||    CASE        WHEN MINUTES = '*' OR MINUTES = '*/1' THEN ' every minute'        WHEN MINUTES LIKE '*/%' THEN ' every ' || REPLACE(MINUTES, '*/', '') || ' minutes'        WHEN MINUTES LIKE '%-%' THEN ' between minutes ' || REPLACE(MINUTES, '-', ' to ')        WHEN MINUTES LIKE ',' THEN ' on minutes ' || REPLACE(MINUTES, ',', ' and ')        ELSE            CASE                 WHEN HOURS NOT LIKE '%*%'                     AND HOURS NOT LIKE '%-%'                    AND MINUTES NOT LIKE '%*%'                     AND MINUTES NOT LIKE '%-%'                    AND MINUTES NOT LIKE '%,%'              THEN ':' || RIGHT('0' || MINUTES, 2)              ELSE ' at ' || MINUTES || ' minute'            END    END /*AS MINUTES*/ AS "Schedule",    SCHEDULE_IN_CRON_FORMAT AS "Schedule (in Cron Format)",    BEGIN_TIME AS "Start Time",    END_TIME AS "End Time",    MAX_INVOCATIONS AS "Maximum Invocations",    RTRIM(PROCEDURE_SCHEMA) || '.' || PROCEDURE_NAME AS "Procedure Name",    PROCEDURE_INPUT AS "Procedure Input Parameters",    "OPTIONS" AS "Options",    REMARKS AS "Remarks"FROM(  SELECT TRIM(MINUTES) AS MINUTES,      REPLACE(TRIM(HOURS), '00', '0') AS HOURS,      REPLACE(TRIM(DAYS), '00', '0') AS DAYS,      REPLACE(TRIM(SUBSTR(SCHEDULE, 1, LOCATE(' ', SCHEDULE))), '00', '0') AS MONTHS,      REPLACE(TRIM(SUBSTR(SCHEDULE, LOCATE(' ', SCHEDULE) + 1)), '00', '0') AS DAYS_OF_WEEK,      SCHEDULE_IN_CRON_FORMAT, "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS,      PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS  FROM  (      SELECT MINUTES,        HOURS,          SUBSTR(SCHEDULE, 1, LOCATE(' ', SCHEDULE)) AS DAYS,          SUBSTR(SCHEDULE, LOCATE(' ', SCHEDULE) + 1) AS SCHEDULE, SCHEDULE_IN_CRON_FORMAT,          "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS,          PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS    FROM  (        SELECT MINUTES,            SUBSTR(SCHEDULE, 1, LOCATE(' ', SCHEDULE)) AS HOURS,            SUBSTR(SCHEDULE, LOCATE(' ', SCHEDULE) + 1) AS SCHEDULE, SCHEDULE_IN_CRON_FORMAT,            "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS,            PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS      FROM  (          SELECT              SUBSTR(SCHEDULE, 1, LOCATE(' ', SCHEDULE)) AS MINUTES,              SUBSTR(SCHEDULE, LOCATE(' ', SCHEDULE) + 1) AS SCHEDULE, SCHEDULE_IN_CRON_FORMAT,              "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS,              PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS          FROM              (                  SELECT                      "NAME", OWNER, BEGIN_TIME, END_TIME, MAX_INVOCATIONS, SCHEDULE, SCHEDULE AS SCHEDULE_IN_CRON_FORMAT,                      PROCEDURE_SCHEMA, PROCEDURE_NAME, PROCEDURE_INPUT, "OPTIONS", REMARKS                  FROM                      SYSTOOLS.ADMINTASKS AS t                  WHERE "NAME" LIKE 'DBMS_JOB%'              ) AS mi      ) AS h    ) AS d  ) AS m) AS sORDER BY 1
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=DB2 Admin Job

[schemaCmp.13]
enabled=1
caption=Oracle Jobs
export=1
count=153
dbType=0
useCache=0
objTypes=Schedule	-Start date	Repeat interval	End date	Queue specification	Event condition	CommentsWindow|Column	Resource plan	Schedule name	-Start date	Repeat interval	End date	Duration 	Window priority	Comments 	Enabled Window group,Window group member|Join column	Comments 	Enabled Window group member|ColumnProgram,Program Argument|Assembly	Program type	Program action	Number of arguments	Enabled	Detached	Comments Program argument|Argument    Argument position	Argument type 	Metadata attribute 	Default value	Out argumentJob	Job type	Job action	Enabled	Comments	Program name	Number of arguments	Schedule name	-Start date	End date	Repeat interval	Queue specification	Event condition	Event rule	Raise events	Job class name	Auto drop	Restartable	Job priority	Max runs	Max failures	Schedule limit	Logging level	Stop on window close	Instance stickiness	Job weight	Destination	Credential name	Instance IDJob class|Statistic	Resource consumer group	Service	Logging level	Log history    CommentsChain,Chain rule,Chain step |Dimension hierarchy child	Rule set name	Enabled	Evaluation interval    CommentsChain rule|Rule    Condition     Action     CommentsChain step|Dimension attribute	Program name	Schedule name	Queue specification	Event condition	Skip	Pause	Restart on recovery	TimeoutDBMS_JOB Job|Job	Job SQL	Effective user privileges	Enabled	Next date	Recurrence interval	NLS environment

[schemaCmp.13.1]
enabled=1
caption=Schedules
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || schedule_name AS "Schedule name",	'Schedule' AS "Target type",	schedule_type "Schedule type",	comments AS "Comments",	owner AS "Owner",	TO_CHAR(start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start date__DONT_COMPARE",	TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI:SS') AS "End date",	repeat_interval AS "Repeat interval",	DECODE(event_queue_owner, NULL, NULL, event_queue_owner || '.') || event_queue_name ||		DECODE(event_queue_agent, NULL, NULL, ', ' || event_queue_agent) AS "Queue specification"FROM	dba_scheduler_schedulesORDER BY owner, 	schedule_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=Schedule

[schemaCmp.13.2]
enabled=1
caption=Schedules
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || schedule_name AS "Schedule name",	'Schedule' AS "Target type",	comments AS "Comments",	owner AS "Owner",	TO_CHAR(start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start date__DONT_COMPARE",	TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI:SS') AS "End date",	repeat_interval AS "Repeat interval",	schedule_name AS schedule_name__HIDDENFROM	dba_scheduler_schedulesORDER BY owner,	schedule_name	
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Schedule

[schemaCmp.13.3]
enabled=1
caption=Windows
export=1
qType=1
oType=Database
query=SELECT  window_name AS "Window name",        'Window' AS "Target type",	    schedule_type AS "Schedule type",         DECODE(schedule_name, NULL, NULL, schedule_owner || '.' || schedule_name) AS "Schedule name",          comments AS "Comments",         resource_plan AS "Resource plan",         TO_CHAR(start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start date__DONT_COMPARE",         repeat_interval AS "Repeat interval",         TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI:SS') AS "End date",         duration AS "Duration",         window_priority AS "Window priority",        TO_CHAR(next_start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Next start date",         enabled AS "Enabled"FROM dba_scheduler_windowsORDER BY window_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=Window

[schemaCmp.13.4]
enabled=1
caption=Windows
export=1
qType=1
oType=Database
query=SELECT  window_name AS "Window name",        'Window' AS "Target type",	    DECODE(schedule_name, NULL, NULL, schedule_owner || '.' || schedule_name) AS "Schedule name",          comments AS "Comments",         resource_plan AS "Resource plan",         TO_CHAR(start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start date__DONT_COMPARE",         repeat_interval AS "Repeat interval",         TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI:SS') AS "End date",         duration AS "Duration",         window_priority AS "Window priority",        TO_CHAR(next_start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Next start date",         enabled AS "Enabled"FROM dba_scheduler_windowsORDER BY window_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Window

[schemaCmp.13.5]
enabled=1
caption=Window Groups
export=1
qType=1
oType=Database
query=SELECT window_group_name AS "Window group name",     'Window Group' AS "Target type",    enabled AS "Enabled",     number_of_windows AS "Number of windows",     comments AS "Comments"                                               FROM dba_scheduler_window_groupsORDER BY window_group_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Window Group

[schemaCmp.13.6]
enabled=1
caption=Window Group Members
export=1
qType=1
oType=Database
query=SELECT  wg.window_group_name AS "Window group name",        w.window_name AS "Window Name",        'Window group member' AS "Target Type",        w.schedule_name AS "Schedule Name",          w.schedule_type AS "Schedule Type",         w.comments As "Comments",         w.resource_plan AS "Resource Plan",         TO_CHAR(w.start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start Date__DONT_COMPARE",         TO_CHAR(w.end_date, 'YYYY-MM-DD HH24:MI:SS') AS "End Date",         w.duration AS "Duration",         w.window_priority AS "Window Priority",        TO_CHAR(w.next_start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Next Start Date",         w.enabled AS "Enabled"FROM dba_scheduler_windows w	JOIN  dba_scheduler_wingroup_members wg		ON wg.window_name = w.window_name ORDER BY w.window_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=1
loadedObj=Window group member

[schemaCmp.13.7]
enabled=1
caption=Window Group Members
export=1
qType=1
oType=Database
query=SELECT  wg.window_group_name AS "Window Group Name",        w.window_name AS "Window Name",        'Window group member' AS "Target Type",        w.schedule_name AS "Schedule Name",          w.comments As "Comments",         w.resource_plan AS "Resource Plan",         TO_CHAR(w.start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start Date__DONT_COMPARE",         TO_CHAR(w.end_date, 'YYYY-MM-DD HH24:MI:SS') AS "End Date",         w.duration AS "Duration",         w.window_priority AS "Window Priority",        TO_CHAR(w.next_start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Next Start Date",         w.enabled AS "Enabled",         w.active AS "Active"FROM dba_scheduler_windows w	JOIN  dba_scheduler_wingroup_members wg		ON wg.window_name = w.window_name ORDER BY w.window_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Window group member

[schemaCmp.13.8]
enabled=1
caption=Consumer Group
export=1
qType=1
oType=Database
query=SELECT	jc.job_class_name       AS "Job Class Name",	cg.consumer_group       AS "Resource Consumer Group",	'Consumer group'        AS "Target type",	cg.cpu_method           AS "CPU method",	cg.comments             AS "Comment"FROM	dba_rsrc_consumer_groups  cg 		JOIN dba_scheduler_job_classes jc			ON jc.resource_consumer_group = cg.consumer_groupORDER BY cg.consumer_group
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Consumer group

[schemaCmp.13.9]
enabled=1
caption=Classes
export=1
qType=1
oType=Database
query=SELECT	job_class_name AS "Job Class Name",	'Job class' AS "Target type",	comments AS "Class",	resource_consumer_group AS "Resource Consumer Group",	service AS "Service",	logging_level AS "Logging Level",	log_history AS "Log History"FROM	dba_scheduler_job_classesORDER BY job_class_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Job class

[schemaCmp.13.10]
enabled=1
caption=Programs
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || program_name AS "Program Name",	'Program' AS "Target Type",	comments AS "Comments",	program_type As "Program Type",	program_action AS "Program Action",	number_of_arguments AS "Number of Arguments",	enabled AS "Enabled",	detached AS "Detached"FROM	dba_scheduler_programsORDER BY owner,	 program_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=Program

[schemaCmp.13.11]
enabled=1
caption=Programs
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || program_name AS "Program Name",	'Program' AS "Target Type",	comments AS "Comments",	program_type As "Program Type",	program_action AS "Program Action",	number_of_arguments AS "Number of Arguments",	enabled AS "Enabled"FROM	dba_scheduler_programsORDER BY owner,	program_name
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Program

[schemaCmp.13.12]
enabled=1
caption=Program Arguments
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || program_name AS "Program name", 	argument_name AS "Argument name",	'Program argument' AS "Target type", 	argument_position AS "Argument position",	argument_type As "Argument type", 	metadata_attribute AS "Metadata attribute", 	default_value AS "Default value",	out_argument AS "OUT Argument"FROM	dba_scheduler_program_args  ORDER BY owner,	program_name,    argument_position 
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=1
loadedObj=Program argument

[schemaCmp.13.13]
enabled=1
caption=Jobs
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || job_name AS "Job name",	'Job' 			AS "Target type",	job_type 		AS "Job type",	job_action 		AS "Job action",	enabled 		AS "Enabled",	comments 		AS "Comments",	DECODE(program_name, NULL, NULL, program_owner || '.' || program_name) AS "Program name",	number_of_arguments AS "Number of arguments",	CASE WHEN schedule_name IS NULL         THEN 'UNNAMED SCHEDULE'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_schedules s WHERE s.owner = j.schedule_owner AND s.schedule_name = j.schedule_name)        THEN 'NAMED SCHEDULE'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_windows w WHERE w.window_name = j.schedule_name)        THEN 'WINDOW'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_window_groups wg WHERE wg.window_group_name = j.schedule_name)        THEN 'WINDOW GROUP'    END AS "Schedule Type",	DECODE(schedule_name, NULL, NULL, schedule_owner || '.' || schedule_name) AS "Schedule Name",	TO_CHAR(start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start date__DONT_COMPARE",	TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI:SS') AS "End date",	repeat_interval	AS "Repeat interval",	DECODE(event_queue_owner, NULL, NULL, event_queue_owner || '.') || event_queue_name ||		DECODE(event_queue_agent, NULL, NULL, ', ' || event_queue_agent) AS "Queue specification",	event_condition	AS "Event condition",	event_rule		AS "Event rule",	raise_events	AS "Raise events",	job_class		AS "Job class name",	auto_drop		AS "Auto drop",	restartable		AS "Restartable",	job_priority	AS "Job priority",	max_runs		AS "Max runs",	max_run_duration AS "Max run duration",	max_failures	AS "Max failures",	schedule_limit	AS "Schedule limit",	logging_level	AS "Logging level",	stop_on_window_close AS "Stop on window close",	instance_stickiness AS "Instance stickiness",	job_weight		AS "Job weight",	destination		AS "Destination",	DECODE(credential_name, NULL, NULL, credential_owner || '.' || credential_name) AS "Credential name",	instance_id		AS "Instance ID",	DECODE("SYSTEM", 'TRUE', 'YES', 'FALSE', 'NO') AS "System job__DONT_COMPARE"FROM	dba_scheduler_jobs jWHERE	job_subname IS NULLORDER BY 1
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=
pathNameCnt=0
loadedObj=Job

[schemaCmp.13.14]
enabled=1
caption=Jobs
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || job_name AS "Job name",	'Job' 			AS "Target type",	job_type 		AS "Job type",	job_action 		AS "Job action",	enabled 		AS "Enabled",	comments 		AS "Comments",	DECODE(program_name, NULL, NULL, program_owner || '.' || program_name) AS "Program name",	number_of_arguments AS "Number of arguments",	CASE WHEN schedule_name IS NULL         THEN 'UNNAMED SCHEDULE'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_schedules s WHERE s.owner = j.schedule_owner AND s.schedule_name = j.schedule_name)        THEN 'NAMED SCHEDULE'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_windows w WHERE w.window_name = j.schedule_name)        THEN 'WINDOW'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_window_groups wg WHERE wg.window_group_name = j.schedule_name)        THEN 'WINDOW GROUP'    END AS "Schedule Type",	DECODE(schedule_name, NULL, NULL, schedule_owner || '.' || schedule_name) AS "Schedule Name",	TO_CHAR(start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start date__DONT_COMPARE",	TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI:SS')	AS "End date",	repeat_interval	AS "Repeat interval",	DECODE(event_queue_owner, NULL, '', event_queue_owner || '.') || event_queue_name ||		DECODE(event_queue_agent, NULL, '', ', ' || event_queue_agent) AS "Queue specification",	event_condition	AS "Event condition",	event_rule		AS "Event rule",	raise_events	AS "Raise events",	job_class		AS "Job class name",	auto_drop		AS "Auto drop",	restartable		AS "Restartable",	job_priority	AS "Job priority",	max_runs		AS "Max runs",	max_run_duration AS "Max run duration",	max_failures	AS "Max failures",	schedule_limit	AS "Schedule limit",	logging_level	AS "Logging level",	stop_on_window_close AS "Stop on window close",	instance_stickiness AS "Instance stickiness",	job_weight		AS "Job weight",	destination		AS "Destination",	DECODE("SYSTEM", 'TRUE', 'YES', 'FALSE', 'NO') AS "System job__DONT_COMPARE"FROM	dba_scheduler_jobs jWHERE	job_subname IS NULLORDER BY 1
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=Job

[schemaCmp.13.15]
enabled=1
caption=Jobs
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || job_name AS "Job name",	'Job' 			AS "Target type",	job_type 		AS "Job type",	job_action 		AS "Job action",	enabled 		AS "Enabled",	comments 		AS "Comments",	DECODE(program_name, NULL, NULL, program_owner || '.' || program_name) AS "Program name",	number_of_arguments AS "Number of arguments",	CASE WHEN schedule_name IS NULL         THEN 'UNNAMED SCHEDULE'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_schedules s WHERE s.owner = j.schedule_owner AND s.schedule_name = j.schedule_name)        THEN 'NAMED SCHEDULE'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_windows w WHERE w.window_name = j.schedule_name)        THEN 'WINDOW'        WHEN EXISTS (SELECT 1 FROM dba_scheduler_window_groups wg WHERE wg.window_group_name = j.schedule_name)        THEN 'WINDOW GROUP'    END AS "Schedule Type",	DECODE(schedule_name, NULL, NULL, schedule_owner || '.' || schedule_name) AS "Schedule Name",	TO_CHAR(start_date, 'YYYY-MM-DD HH24:MI:SS') AS "Start date__DONT_COMPARE",	TO_CHAR(end_date, 'YYYY-MM-DD HH24:MI:SS') AS "End date",	repeat_interval	AS "Repeat interval",	job_class		AS "Job class name",	auto_drop		AS "Auto drop",	restartable		AS "Restartable",	job_priority	AS "Job priority",	max_runs		AS "Max runs",	max_run_duration AS "Max run duration",	max_failures	AS "Max failures",	schedule_limit	AS "Schedule limit",	logging_level	AS "Logging level",	stop_on_window_close AS "Stop on window close",	instance_stickiness AS "Instance stickiness",	job_weight		AS "Job weight",	destination		AS "Destination",	DECODE("SYSTEM", 'TRUE', 'YES', 'FALSE', 'NO') AS "System job__DONT_COMPARE"FROM	dba_scheduler_jobs jORDER BY 1
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655360
condition=
pathNameCnt=0
loadedObj=Job

[schemaCmp.13.16]
enabled=1
caption=Job Chains
export=1
qType=1
oType=Database
query=SELECT	c.owner || '.' || c.chain_name AS chain_name,	'Chain' AS "Target Type",	DECODE(j.job_name, NULL, NULL, j.owner || '.' || j.job_name) AS "Chain Startup Job",	c.comments AS "Comments",	DECODE(c.rule_set_name, NULL, NULL, c.rule_set_owner || '.' || c.rule_set_name) AS "Rule set name",	c.number_of_rules AS "Number of rules",	c.number_of_steps As "Number of steps",	c.enabled AS "Enabled",	c.evaluation_interval AS "Evaluation interval",	1 AS "SyncConfig__HIDDEN"FROM	dba_scheduler_chains c	LEFT JOIN dba_scheduler_jobs j		ON   j.owner = c.owner		AND j.job_type = 'CHAIN'		AND UPPER(j.job_action) = UPPER(c.chain_name)ORDER BY 1
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=Chain

[schemaCmp.13.17]
enabled=1
caption=Job Chain Rules
export=1
qType=1
oType=Database
query=SELECT 	owner || '.' || chain_name AS "Chain name",	rule_owner || '.' || rule_name AS "Rule name",	'Chain rule' AS "Target type",	condition	AS "Condition", 	action 		AS "Action", 	comments	AS "Comments"FROM 	dba_scheduler_chain_rulesORDER BY 1, 2
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=1
loadedObj=Chain rule

[schemaCmp.13.18]
enabled=1
caption=Job Chain Steps
export=1
qType=1
oType=Database
query=SELECT	owner || '.' || chain_name AS "Chain name",	step_name AS "Step name",	'Chain step' AS "Target type",	DECODE(program_name, NULL, NULL, program_owner || '.' || program_name) AS "Program name",	DECODE(event_schedule_name, NULL, NULL, event_schedule_owner || '.' || event_schedule_name) AS "Schedule name",	DECODE(event_queue_owner, NULL, NULL, event_queue_owner || '.') || event_queue_name ||		DECODE(event_queue_agent, NULL, NULL, ', ' || event_queue_agent) AS "Queue specification",	event_condition		AS "Event condition",	"TIMEOUT" AS "Timeout",	"SKIP" AS "Skip",	pause AS "Pause",	restart_on_recovery AS "Restart on recovery"FROM	dba_scheduler_chain_stepsORDER BY 1, 2
linkByVal=0
hasValue=0
templType=Objects
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=1
loadedObj=Chain step

[schemaCmp.13.19]
enabled=1
caption=DBMS_JOB Job
export=1
qType=1
oType=Database
query=SELECT '[' || schema_user || ']: ' || what AS job_name,    'DBMS_Job Job' As "Target Type",	schema_user AS "Job owner",     priv_user AS "Effective user privileges",    DECODE(broken, 'Y', 'NO', 'YES') AS "Enabled",    TO_CHAR(next_date, , 'YYYY-MM-DD HH24:MI:SS') AS "Next date",     interval AS "Recurrence interval",     what AS "Job SQL",     nls_env AS "NLS environment",    job AS jobid__HIDDEN__DONT_COMPARE  FROM dba_jobsORDER BY schema_user,     job
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=DBMS_JOB Job

[schemaCmp.13.20]
enabled=1
caption=DBMS_JOB Job (ALTER)
export=1
qType=3
oType=DBMS_JOB Job
query=BEGIN	-- ALTER SESSION SET nls_date_format= ... as in $NLS ENVIRONMENT$,	SYS.KUPP$^PROC.CHANGE_USER('$JOB OWNER$'); -- must have CHANGE USER privilege to do this	DBMS_JOB.CHANGE(job => $JOBID$,		what => $JOB SQL.STRING$$,		next_date => TO_DATE({NEXT DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$$,		interval => {RECURRENCE INTERVAL.STRING}$);	DBMS_JOB.BROKEN(job => job_no, broken => ('$ENABLED$' = 'NO'));	COMMIT;END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.21]
enabled=1
caption=Job class (CREATE)
export=1
qType=3
oType=Job class
query=BEGIN	DBMS_SCHEDULER.CREATE_JOB_CLASS (		job_class_name            => $NAME.STRING$$, 		resource_consumer_group   => {RESOURCE CONSUMER GROUP.STRING}$$,		service                   => {SERVICE.STRING}$$,		logging_level             => DBMS_SCHEDULER.LOGGING_{LOGGING LEVEL}$$,		log_history               => {LOG HISTORY}$$,		comments                  => {COMMENTS.STRING}$);END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.22]
enabled=1
caption=Job class (DROP)
export=1
qType=3
oType=Job class
query=BEGIN	DBMS_SCHEDULER.DROP_JOB_CLASS (		job_class_name          => $NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.23]
enabled=1
caption=Job class (ALTER)
export=1
qType=3
oType=Job class
query=-- Update job class "$NAME$"BEGIN${|=ATTRIBUTE - COMMENTS}$${|=JOB CLASS - LOG_HISTORY}$${|=ATTRIBUTE - LOGGING_LEVEL}$${|=JOB CLASS - RESOURCE_CONSUMER_GROUP}$${|=JOB CLASS - SERVICE}$    NULL;END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.24]
enabled=1
caption=Attribute - comments
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'comments',		value          =>   $COMMENTS.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*COMMENTS & COMMENTS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.25]
enabled=1
caption=Job class - resource_consumer_group
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'resource_consumer_group',		value          =>   $RESOURCE CONSUMER GROUP.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*RESOURCE CONSUMER GROUP & RESOURCE CONSUMER GROUP<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.26]
enabled=1
caption=Job class - log_history
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'log_history',		value          =>   $LOG HISTORY$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*LOG HISTORY & LOG HISTORY<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.27]
enabled=1
caption=Attribute - logging_level
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'logging_level',		value          =>   $DBMS_SCHEDULER.LOGGING_{LOGGING LEVEL}$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*LOGGING LEVEL & LOGGING LEVEL<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.28]
enabled=1
caption=Job class - service
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'service',		value          =>   $SERVICE.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*SERVICE & SERVICE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.29]
enabled=1
caption=Attribute - comments
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'comments');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*COMMENTS & COMMENTS=
pathNameCnt=0
loadedObj=

[schemaCmp.13.30]
enabled=1
caption=Job class - log_history
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'log_history');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*LOG HISTORY & LOG HISTORY=
pathNameCnt=0
loadedObj=

[schemaCmp.13.31]
enabled=1
caption=Attribute - logging_level
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'logging_level');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*LOGGING LEVEL & LOGGING LEVEL=
pathNameCnt=0
loadedObj=

[schemaCmp.13.32]
enabled=1
caption=Job class - resource_consumer_group
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'resource_consumer_group');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*RESOURCE CONSUMER GROUP & RESOURCE CONSUMER GROUP=
pathNameCnt=0
loadedObj=

[schemaCmp.13.33]
enabled=1
caption=Job class - service
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'service');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*SERVICE & SERVICE=
pathNameCnt=0
loadedObj=

[schemaCmp.13.34]
enabled=1
caption=Schedule (CREATE, Time-based)
export=1
qType=3
oType=Schedule
query=BEGIN	DBMS_SCHEDULER.CREATE_SCHEDULE (		schedule_name          => $NAME.STRING$$,		start_date             => TO_DATE({START DATE.STRING})$,		repeat_interval        => $REPEAT INTERVAL.STRING;NULL$$,		end_date               => TO_DATE({END DATE.STRING})$$,		comments               => {COMMENTS.STRING}$);END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=EVENT CONDITION=
pathNameCnt=0
loadedObj=

[schemaCmp.13.35]
enabled=1
caption=Schedule (DROP)
export=1
qType=3
oType=Schedule
query=BEGIN	DBMS_SCHEDULER.DROP_SCHEDULE (		schedule_name          => $NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.36]
enabled=1
caption=Schedule (ALTER)
export=1
qType=3
oType=Schedule
query=-- Update schedule "$NAME$"BEGIN${|=ATTRIBUTE - COMMENTS}$${|=ATTRIBUTE - START_DATE}$${|=ATTRIBUTE - END_DATE}$${|=ATTRIBUTE - REPEAT_INTERVAL}$${|=ATTRIBUTE - EVENT_SPEC}$END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.37]
enabled=1
caption=Attribute - end_date
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'end_date');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*END DATE & END DATE=
pathNameCnt=0
loadedObj=

[schemaCmp.13.38]
enabled=1
caption=Attribute - end_date
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'end_date',		value          =>   $TO_DATE({END DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*END DATE & END DATE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.39]
enabled=1
caption=Attribute - start_date
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'start_date',		value          =>   $TO_DATE({START DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*START DATE & START DATE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.40]
enabled=1
caption=Attribute - start_date
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'start_date');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*START DATE & START DATE=
pathNameCnt=0
loadedObj=

[schemaCmp.13.41]
enabled=1
caption=Attribute - repeat_interval
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'repeat_interval');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*REPEAT INTERVAL & REPEAT INTERVAL=
pathNameCnt=0
loadedObj=

[schemaCmp.13.42]
enabled=1
caption=Attribute - repeat_interval
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'repeat_interval',		value          =>   $REPEAT INTERVAL.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*REPEAT INTERVAL & REPEAT INTERVAL<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.43]
enabled=1
caption=Attribute - event_spec
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'event_spec',		value          =>   $EVENT CONDITION.STRING$,		value2         =>   $QUEUE SPECIFICATION.STRING;NULL$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=EVENT CONDITION<> & *EVENT CONDITION | *QUEUE SPECIFICATION
pathNameCnt=0
loadedObj=

[schemaCmp.13.44]
enabled=1
caption=Attribute - event_spec
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'event_spec');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=EVENT CONDITION= & *EVENT CONDITION | *QUEUE SPECIFICATION
pathNameCnt=0
loadedObj=

[schemaCmp.13.45]
enabled=1
caption=Window (CREATE, Unnamed Schedule)
export=1
qType=3
oType=Window
query=BEGIN	DBMS_SCHEDULER.CREATE_WINDOW (		window_name             => $NAME.STRING$,		resource_plan           => $RESOURCE PLAN.STRING;NULL$$,		start_date              => TO_DATE({START DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$,		repeat_interval         => $REPEAT INTERVAL.STRING;NULL$$,		end_date                => TO_DATE({END DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$,		duration                => INTERVAL $DURATION.STRING$ DAY TO SECOND$,		window_priority         => {WINDOW PRIORITY.STRING}$$,		comments                => {COMMENTS.STRING}$);${|=OBJECT - ENABLE}$END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=SCHEDULE NAME=
pathNameCnt=0
loadedObj=

[schemaCmp.13.46]
enabled=1
caption=Object - enable
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.ENABLE (		name              => $NAME.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=ENABLED=TRUE
pathNameCnt=0
loadedObj=

[schemaCmp.13.47]
enabled=1
caption=Object - enable
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.DISABLE (		name              => $NAME.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=ENABLED=FALSE
pathNameCnt=0
loadedObj=

[schemaCmp.13.48]
enabled=1
caption=Window (DROP)
export=1
qType=3
oType=Window
query=BEGIN	DBMS_SCHEDULER.DROP_WINDOW (		window_name          => $NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.49]
enabled=1
caption=Window (CREATE, Named Schedule)
export=1
qType=3
oType=Window
query=BEGIN	DBMS_SCHEDULER.CREATE_WINDOW (		window_name             => $NAME.STRING$,		resource_plan           => $RESOURCE PLAN.STRING;NULL$,		schedule_name           => $SCHEDULE NAME.STRING$,		duration                => INTERVAL $DURATION.STRING$ DAY TO SECOND$,		window_priority         => {WINDOW PRIORITY.STRING}$$,		comments                => {COMMENTS.STRING}$);${|=OBJECT - ENABLE}$END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=SCHEDULE NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.50]
enabled=1
caption=Window (ALTER)
export=1
qType=3
oType=Window
query=-- Update window "$NAME$"BEGIN${|=ATTRIBUTE - COMMENTS}$${|=WINDOW - RESOURCE_PLAN}$${|=ATTRIBUTE - START_DATE}$${|=ATTRIBUTE - END_DATE}$${|=ATTRIBUTE - REPEAT_INTERVAL}$${|=ATTRIBUTE - SCHEDULE_NAME}$${|=WINDOW - DURATION}$${|=WINDOW - WINDOW_PRIORITY}$${|=ALTER - ENABLE}$END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.51]
enabled=1
caption=Window - duration
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'duration',		value          =>   INTERVAL $DURATION.STRING$ DAY TO SECOND);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*DURATION
pathNameCnt=0
loadedObj=

[schemaCmp.13.52]
enabled=1
caption=Window - resource_plan
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'resource_plan',		value          =>   $RESOURCE PLAN$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*RESOURCE PLAN & RESOURCE PLAN<>NULL
pathNameCnt=0
loadedObj=

[schemaCmp.13.53]
enabled=1
caption=Window - resource_plan
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'resource_plan');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*RESOURCE PLAN & RESOURCE PLAN=NULL
pathNameCnt=0
loadedObj=

[schemaCmp.13.54]
enabled=1
caption=Window - window_priority
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'window_priority',		value          =>   $WINDOW PRIORITY.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*WINDOW PRIORITY & WINDOW PRIORITY<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.55]
enabled=1
caption=Window - window_priority
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'window_priority');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*WINDOW PRIORITY & WINDOW PRIORITY=
pathNameCnt=0
loadedObj=

[schemaCmp.13.56]
enabled=1
caption=Alter - enable
export=1
qType=3
oType=
query=$|=OBJECT - ENABLE$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*ENABLED
pathNameCnt=0
loadedObj=

[schemaCmp.13.57]
enabled=1
caption=Attribute - schedule_name
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'schedule_name',		value          =>   $SCHEDULE NAME.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*SCHEDULE NAME & SCHEDULE NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.58]
enabled=1
caption=Attribute - schedule_name
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'schedule_name');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*SCHEDULE NAME & SCHEDULE NAME=
pathNameCnt=0
loadedObj=

[schemaCmp.13.59]
enabled=1
caption=Window group (DROP)
export=1
qType=3
oType=Window group
query=BEGIN	DBMS_SCHEDULER.DROP_WINDOW_GROUP (		group_name          => $NAME.STRING$,		force               => FALSE);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.60]
enabled=1
caption=Window group (CREATE)
export=1
qType=3
oType=Window group
query=BEGIN	DBMS_SCHEDULER.CREATE_WINDOW_GROUP (		group_name             => $NAME.STRING$$,		window_list            => '{, |WINDOW GROUP MEMBER=NAME}'$$,		comments               => {COMMENTS.STRING}$);${|=OBJECT - ENABLE}$END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.61]
enabled=1
caption=Window group (ALTER)
export=1
qType=3
oType=Window group
query=BEGIN	DBMS_SCHEDULER.DROP_WINDOW_GROUP (		group_name          => $NAME.STRING$,		force               => FALSE); 			DBMS_SCHEDULER.CREATE_WINDOW_GROUP (		group_name             => $NAME.STRING$$,		window_list            => '{, |WINDOW GROUP MEMBER=NAME}'$$,		comments               => {COMMENTS.STRING}$);${|=OBJECT - ENABLE}$END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.62]
enabled=1
caption=Name
export=1
qType=3
oType=
query=$NAME$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.63]
enabled=1
caption=Schedule (CREATE, Event-based)
export=1
qType=3
oType=Schedule
query=BEGIN	DBMS_SCHEDULER.CREATE_EVENT_SCHEDULE (		schedule_name          => $NAME.STRING$$,		start_date             => TO_DATE({START DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$$,		event_condition        => EVENT CONDITION.STRING$$,		queue_spec             => {QUEUE SPECIFICATION.STRING;NULL}$$,		end_date               => TO_DATE({END DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$$,		comments               => {COMMENTS.STRING}$);END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=720896
condition=EVENT CONDITION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.64]
enabled=1
caption=Program (CREATE)
export=1
qType=3
oType=Program
query=BEGIN	DBMS_SCHEDULER.CREATE_PROGRAM (		program_name             => $NAME.STRING$,		program_type             => $PROGRAM TYPE.STRING$,		program_action           => $PROGRAM ACTION.STRING$$,		number_of_arguments      => {NUMBER OF ARGUMENTS}$$,		enabled                  => {ENABLED}$$,		comments                 => {COMMENTS.STRING}$);${|=PROGRAM - DETACHED CREATE}$${\n\n|PROGRAM ARGUMENT=PROGRAM ARGUMENT DEFINE}$END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.65]
enabled=1
caption=Program (DROP)
export=1
qType=3
oType=Program
query=BEGIN	DBMS_SCHEDULER.DROP_PROGRAM (		program_name          => $NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.66]
enabled=1
caption=Program - detached create
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'detached',		value          =>   $DETACHED$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=DETACHED=TRUE
pathNameCnt=0
loadedObj=

[schemaCmp.13.67]
enabled=1
caption=Program - detached
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'detached',		value          =>   $DETACHED$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*DETACHED & DETACHED<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.68]
enabled=1
caption=Program - detached
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'detached');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*DETACHED & DETACHED=
pathNameCnt=0
loadedObj=

[schemaCmp.13.69]
enabled=1
caption=Program - program_type
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'program_type',		value          =>   $PROGRAM TYPE.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*PROGRAM TYPE & PROGRAM TYPE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.70]
enabled=1
caption=Program - program_type
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'program_type');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*PROGRAM TYPE & PROGRAM TYPE=
pathNameCnt=0
loadedObj=

[schemaCmp.13.71]
enabled=1
caption=Program - program_action
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'program_action',		value          =>   $PROGRAM ACTION.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*PROGRAM ACTION & PROGRAM ACTION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.72]
enabled=1
caption=Program - program_action
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'program_action');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*PROGRAM ACTION & PROGRAM ACTION=
pathNameCnt=0
loadedObj=

[schemaCmp.13.73]
enabled=1
caption=Attribute - number_of_arguments
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'number_of_arguments',		value          =>   $NUMBER OF ARGUMENTS$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*NUMBER OF ARGUMENTS & NUMBER OF ARGUMENTS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.74]
enabled=1
caption=Attribute - number_of_arguments
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'number_of_arguments');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*NUMBER OF ARGUMENTS & NUMBER OF ARGUMENTS=
pathNameCnt=0
loadedObj=

[schemaCmp.13.75]
enabled=1
caption=Program (ALTER)
export=1
qType=3
oType=Program
query=-- Update program "$NAME$"BEGIN${|=PROGRAM - PROGRAM_TYPE}$${|=PROGRAM - PROGRAM_ACTION}$${|=ATTRIBUTE - NUMBER_OF_ARGUMENTS}$${|=ATTRIBUTE - COMMENTS}$${|=OBJECT - ENABLE}$${|=PROGRAM - DETACHED}$END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.76]
enabled=1
caption=Program argument define
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.DEFINE_PROGRAM_ARGUMENT (		program_name            => '$NAME_LEVEL_2$',		argument_position       => $ARGUMENT POSITION$,		argument_name           => $ARGUMENT NAME.STRING;NULL$,		argument_type           => $ARGUMENT TYPE.STRING;NULL$$,		default_value           => {DEFAULT VALUE.STRING}$$,		out_argument            => {OUT ARGUMENT}$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=METADATA ATTRIBUTE=
pathNameCnt=0
loadedObj=

[schemaCmp.13.77]
enabled=1
caption=Program argument define
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.DEFINE_METADATA_ARGUMENT (		program_name            => '$NAME_LEVEL_2$',		metadata_attribute      => $METADATA ATTRIBUTE.STRING$,		argument_position       => $ARGUMENT POSITION$,		argument_name           => $ARGUMENT NAME.STRING;NULL$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=METADATA ATTRIBUTE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.78]
enabled=1
caption=Program argument (CREATE)
export=1
qType=3
oType=Program argument
query=BEGIN$|=PROGRAM ARGUMENT DEFINE$END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.79]
enabled=1
caption=Program argument (DROP)
export=1
qType=3
oType=Program argument
query=BEGIN	DBMS_SCHEDULER.DROP_PROGRAM_ARGUMENT (		program_name            => '$NAME_LEVEL_2$',		argument_position       => $ARGUMENT POSITION$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.80]
enabled=1
caption=Program argument (ALTER)
export=1
qType=3
oType=Program argument
query=BEGIN$|=PROGRAM ARGUMENT DEFINE$END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.81]
enabled=1
caption=DBMS_JOB Job (CREATE)
export=1
qType=3
oType=DBMS_JOB Job
query=DECLARE	job_no NUMBER;BEGIN	-- ALTER SESSION SET nls_date_format= ... as in $NLS ENVIRONMENT$,	SYS.KUPP$^PROC.CHANGE_USER('$JOB OWNER$'); -- must have CHANGE USER privilege to do this	DBMS_JOB.SUBMIT(job => job_no,		what => $JOB SQL.STRING$$,		next_date => TO_DATE({NEXT DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$$,		interval => {RECURRENCE INTERVAL.STRING}$);	IF ('$ENABLED$' = 'NO') THEN  		DBMS_JOB.BROKEN(job => job_no, broken => FALSE);	END IF;	COMMIT;END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.82]
enabled=1
caption=Job (CREATE)
export=1
qType=3
oType=Job
query=BEGIN	DBMS_SCHEDULER.CREATE_JOB (		job_name               => $NAME.STRING$,$|=JOB :PROGRAM_NAME$$,{|=JOB :SCHEDULE PARAMS}$$,		job_class              => {JOB CLASS NAME.STRING}$$,		enabled                => {ENABLED}$$,		auto_drop              => {AUTO DROP}$$,		comments               => {COMMENTS.STRING}$);${|=JOB :- CREDENTIAL_NAME}$${|=JOB :- DESTINATION}$${|=JOB :- INSTANCE_ID}$${|=JOB :- INSTANCE_STICKINESS}$${|=JOB :- JOB_PRIORITY}$${|=JOB :- JOB_WEIGHT}$${|=JOB :- LOGGING_LEVEL}$${|=JOB :- MAX_FAILURES}$${|=JOB :- MAX_RUN_DURATION}$${|=JOB :- MAX_RUNS}$${|=JOB :- RAISE_EVENTS}$${|=JOB :- RESTARTABLE}$${|=JOB :- SCHEDULE_LIMIT}$${|=JOB :- STOP_ON_WINDOW_CLOSE}$END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.83]
enabled=1
caption=Job :schedule params
export=1
qType=3
oType=
query=		start_date             => TO_DATE($START DATE.STRING;NULL$, 'YYYY-MM-DD HH24:MI:SS'),		event_condition        => $EVENT CONDITION.STRING;NULL$,		queue_spec             => $QUEUE SPECIFICATION.STRING;NULL$,		end_date               => TO_DATE($END DATE.STRING;NULL$, 'YYYY-MM-DD HH24:MI:SS')
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=EVENT CONDITION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.84]
enabled=1
caption=Job :schedule params
export=1
qType=3
oType=
query=		schedule_name          => $SCHEDULE NAME.STRING$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=SCHEDULE NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.85]
enabled=1
caption=Job :schedule params
export=1
qType=3
oType=
query=		start_date             => TO_DATE($START DATE.STRING;NULL$, 'YYYY-MM-DD HH24:MI:SS'),		repeat_interval        => $REPEAT INTERVAL.STRING;NULL$$,		end_date               => TO_DATE({END DATE.STRING;NULL}, 'YYYY-MM-DD HH24:MI:SS')$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=SCHEDULE NAME= & EVENT CONDITION=
pathNameCnt=0
loadedObj=

[schemaCmp.13.86]
enabled=1
caption=Job :program_name
export=1
qType=3
oType=
query=		program_name           => $PROGRAM NAME.STRING$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=PROGRAM NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.87]
enabled=1
caption=Job :job_style
export=1
qType=3
oType=
query=		job_style              => $JOB STYLE.STRING$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=PROGRAM NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.88]
enabled=1
caption=Job :program_name
export=1
qType=3
oType=
query=		job_type               => $JOB TYPE.STRING$,		job_action             => $JOB ACTION.STRING$$,		number_of_arguments    => {NUMBER OF ARGUMENTS}$
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=PROGRAM NAME=
pathNameCnt=0
loadedObj=

[schemaCmp.13.89]
enabled=1
caption=Job (DROP)
export=1
qType=3
oType=Job
query=BEGIN	DBMS_SCHEDULER.DROP_JOB (		job_name          => $NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.90]
enabled=1
caption=Job :- credential_name
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'credential_name',		value          =>   $CREDENTIAL NAME.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=CREDENTIAL NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.91]
enabled=1
caption=Job :- destination
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'destination',		value          =>   $DESTINATION.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=DESTINATION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.92]
enabled=1
caption=Job :- instance_stickiness
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'instance_stickiness',		value          =>   $INSTANCE STICKINESS$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=INSTANCE STICKINESS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.93]
enabled=1
caption=Job :- job_priority
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'job_priority',		value          =>   $JOB PRIORITY$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=JOB PRIORITY<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.94]
enabled=1
caption=Job :- job_weight
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'job_weight',		value          =>   $JOB WEIGHT$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=JOB WEIGHT<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.95]
enabled=1
caption=Job :- logging_level
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'logging_level',		value          =>   DBMS_SCHEDULER.LOGGING_$LOGGING LEVEL$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=LOGGING LEVEL<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.96]
enabled=1
caption=Job :- max_failures
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'max_failures',		value          =>   $MAX FAILURES$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=MAX FAILURES<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.97]
enabled=1
caption=Job :- max_run_duration
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'max_run_duration',		value          =>   INTERVAL $MAX RUN DURATION.STRING$ DAY TO SECOND);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=MAX RUN DURATION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.98]
enabled=1
caption=Job :- max_runs
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'max_runs',		value          =>   $MAX RUNS$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=MAX RUNS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.99]
enabled=1
caption=Job :- instance_id
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'instance_id',		value          =>   $INSTANCE ID$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=INSTANCE ID<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.100]
enabled=1
caption=Job :- raise_events
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'raise_events',		value          =>   $RAISE EVENTS.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=RAISE EVENTS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.101]
enabled=1
caption=Job :- restartable
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'restartable',		value          =>   $RESTARTABLE$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=RESTARTABLE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.102]
enabled=1
caption=Job :- schedule_limit
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'schedule_limit',		value          =>   INTERVAL $SCHEDULE LIMIT.STRING$ DAY TO SECOND);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=SCHEDULE LIMIT<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.103]
enabled=1
caption=Job :- stop_on_window_close
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'stop_on_window_close',		value          =>   $STOP ON WINDOW CLOSE$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=STOP ON WINDOW CLOSE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.104]
enabled=1
caption=Job (ALTER)
export=1
qType=3
oType=Job
query=-- Update job "$NAME$"BEGIN${|=ATTRIBUTE - COMMENTS}$${|=ATTRIBUTE - START_DATE}$${|=ATTRIBUTE - END_DATE}$${|=ATTRIBUTE - REPEAT_INTERVAL}$${|=ATTRIBUTE - EVENT_SPEC}$${|=ATTRIBUTE - SCHEDULE_NAME}$${|=ATTRIBUTE - LOGGING_LEVEL}$${|=JOB - AUTO_DROP}$${|=JOB - CREDENTIAL_NAME}$${|=JOB - DESTINATION}$${|=JOB - INSTANCE_ID}$${|=JOB - INSTANCE_STICKINESS}$${|=JOB - JOB_ACTION}$${|=JOB - JOB_CLASS}$${|=JOB - JOB_PRIORITY}$${|=JOB - JOB_TYPE}$${|=JOB - JOB_WEIGHT}$${|=JOB - MAX_FAILURES}$${|=JOB - MAX_RUN_DURATION}$${|=JOB - MAX_RUNS}$${|=ATTRIBUTE - NUMBER_OF_ARGUMENTS}$${|=JOB - PROGRAM_NAME}$${|=JOB - RAISE_EVENTS}$${|=JOB - RESTARTABLE}$${|=JOB - SCHEDULE_LIMIT}$${|=JOB - STOP_ON_WINDOW_CLOSE}$${|=ALTER - ENABLE}$END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.105]
enabled=1
caption=Job - job_type
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'job_type',		value          =>   $JOB TYPE.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB TYPE & JOB TYPE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.106]
enabled=1
caption=Job - job_type
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'job_type');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB TYPE & JOB TYPE=
pathNameCnt=0
loadedObj=

[schemaCmp.13.107]
enabled=1
caption=Job - auto_drop
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'auto_drop');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*AUTO DROP & AUTO DROP=
pathNameCnt=0
loadedObj=

[schemaCmp.13.108]
enabled=1
caption=Job - auto_drop
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'auto_drop',		value          =>   $AUTO DROP$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*AUTO DROP & AUTO DROP<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.109]
enabled=1
caption=Job - credential_name
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'credential_name',		value          =>   $CREDENTIAL NAME.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=*CREDENTIAL NAME & CREDENTIAL NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.110]
enabled=1
caption=Job - credential_name
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'credential_name');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=*CREDENTIAL NAME & CREDENTIAL NAME=
pathNameCnt=0
loadedObj=

[schemaCmp.13.111]
enabled=1
caption=Job - destination
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'destination',		value          =>   $DESTINATION.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*DESTINATION & DESTINATION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.112]
enabled=1
caption=Job - destination
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'destination');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*DESTINATION & DESTINATION=
pathNameCnt=0
loadedObj=

[schemaCmp.13.113]
enabled=1
caption=Job - instance_id
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'instance_id',		value          =>   $INSTANCE ID$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=*INSTANCE ID & INSTANCE ID<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.114]
enabled=1
caption=Job - instance_id
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'instance_id');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=720896
condition=*INSTANCE ID & INSTANCE ID=
pathNameCnt=0
loadedObj=

[schemaCmp.13.115]
enabled=1
caption=Job - instance_stickiness
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'instance_stickiness',		value          =>   $INSTANCE STICKINESS$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*INSTANCE STICKINESS & INSTANCE STICKINESS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.116]
enabled=1
caption=Job - instance_stickiness
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'instance_stickiness');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*INSTANCE STICKINESS & INSTANCE STICKINESS=
pathNameCnt=0
loadedObj=

[schemaCmp.13.117]
enabled=1
caption=Job - job_action
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'job_action',		value          =>   $JOB ACTION.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB ACTION & JOB ACTION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.118]
enabled=1
caption=Job - job_action
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'job_action');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB ACTION & JOB ACTION=
pathNameCnt=0
loadedObj=

[schemaCmp.13.119]
enabled=1
caption=Job - job_class
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'job_class',		value          =>   $JOB CLASS.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB CLASS & JOB CLASS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.120]
enabled=1
caption=Job - job_class
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'job_class');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB CLASS & JOB CLASS=
pathNameCnt=0
loadedObj=

[schemaCmp.13.121]
enabled=1
caption=Job - job_priority
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'job_priority',		value          =>   $JOB PRIORITY$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB PRIORITY & JOB PRIORITY<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.122]
enabled=1
caption=Job - job_priority
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'job_priority');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB PRIORITY & JOB PRIORITY=
pathNameCnt=0
loadedObj=

[schemaCmp.13.123]
enabled=1
caption=Job - job_weight
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'job_weight',		value          =>   $JOB WEIGHT$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB WEIGHT & JOB WEIGHT<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.124]
enabled=1
caption=Job - job_weight
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'job_weight');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*JOB WEIGHT & JOB WEIGHT=
pathNameCnt=0
loadedObj=

[schemaCmp.13.125]
enabled=1
caption=Job - max_failures
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'max_failures',		value          =>   $MAX FAILURES$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*MAX FAILURES & MAX FAILURES<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.126]
enabled=1
caption=Job - max_failures
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'max_failures');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*MAX FAILURES & MAX FAILURES=
pathNameCnt=0
loadedObj=

[schemaCmp.13.127]
enabled=1
caption=Job - max_run_duration
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'max_run_duration',		value          =>   INTERVAL $MAX RUN DURATION.STRING$ DAY TO SECOND);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*MAX RUN DURATION & MAX RUN DURATION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.128]
enabled=1
caption=Job - max_run_duration
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'max_run_duration');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*MAX RUN DURATION & MAX RUN DURATION=
pathNameCnt=0
loadedObj=

[schemaCmp.13.129]
enabled=1
caption=Job - max_runs
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'max_runs',		value          =>   $MAX RUNS$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*MAX RUNS & MAX RUNS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.130]
enabled=1
caption=Job - max_runs
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'max_runs');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*MAX RUNS & MAX RUNS=
pathNameCnt=0
loadedObj=

[schemaCmp.13.131]
enabled=1
caption=Job - program_name
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'program_name');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*PROGRAM NAME & PROGRAM NAME=
pathNameCnt=0
loadedObj=

[schemaCmp.13.132]
enabled=1
caption=Job - program_name
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'program_name',		value          =>   $PROGRAM NAME.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*PROGRAM NAME & PROGRAM NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.133]
enabled=1
caption=Job - raise_events
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'raise_events',		value          =>   $RAISE EVENTS.STRING$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*RAISE EVENTS & RAISE EVENTS<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.134]
enabled=1
caption=Job - raise_events
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'raise_events');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*RAISE EVENTS & RAISE EVENTS=
pathNameCnt=0
loadedObj=

[schemaCmp.13.135]
enabled=1
caption=Job - restartable
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'restartable',		value          =>   $RESTARTABLE$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*RESTARTABLE & RESTARTABLE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.136]
enabled=1
caption=Job - restartable
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'restartable');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*RESTARTABLE & RESTARTABLE=
pathNameCnt=0
loadedObj=

[schemaCmp.13.137]
enabled=1
caption=Job - schedule_limit
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'schedule_limit',		value          =>   INTERVAL $SCHEDULE LIMIT.STRING$ DAY TO SECOND);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*SCHEDULE LIMIT & SCHEDULE LIMIT<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.138]
enabled=1
caption=Job - schedule_limit
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'schedule_limit');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*SCHEDULE LIMIT & SCHEDULE LIMIT=
pathNameCnt=0
loadedObj=

[schemaCmp.13.139]
enabled=1
caption=Job - stop_on_window_close
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'stop_on_window_close',		value          =>   $STOP ON WINDOW CLOSE$);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*STOP ON WINDOW CLOSE & STOP ON WINDOW CLOSE<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.140]
enabled=1
caption=Job - stop_on_window_close
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'stop_on_window_close');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=0
condition=*STOP ON WINDOW CLOSE & STOP ON WINDOW CLOSE=
pathNameCnt=0
loadedObj=

[schemaCmp.13.141]
enabled=1
caption=Chain (CREATE)
export=1
qType=3
oType=Chain
query=BEGIN	DBMS_SCHEDULER.CREATE_CHAIN (		chain_name              => $NAME.STRING$$,		rule_set_name           => {RULE SET NAME.STRING}$$,		evaluation_interval     => INTERVAL {EVALUATION INTERVAL.STRING} DAY TO SECOND$$,		comments                => {COMMENTS.STRING}$);${|=OBJECT - ENABLE}$END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.142]
enabled=1
caption=Chain (DROP)
export=1
qType=3
oType=Chain
query=BEGIN	DBMS_SCHEDULER.DROP_CHAIN (		chain_name          => $NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.143]
enabled=1
caption=Chain (ALTER)
export=1
qType=3
oType=Window
query=-- Update chain "$NAME$"BEGIN${|=ATTRIBUTE - COMMENTS}$${|=CHAIN - EVALUATION_INTERVAL}$${|=ALTER - ENABLE}$END;
linkByVal=0
hasValue=0
templType=ALTER
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.144]
enabled=1
caption=Chain - evaluation_interval
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE (		name           =>   $NAME.STRING$,		attribute      =>   'evaluation_interval',		value          =>   INTERVAL $EVALUATION INTERVAL.STRING$ DAY TO SECOND);
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=*EVALUATION INTERVAL & EVALUATION INTERVAL<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.145]
enabled=1
caption=Chain - evaluation_interval
export=1
qType=3
oType=
query=	DBMS_SCHEDULER.SET_ATTRIBUTE_NULL (		name           =>   $NAME.STRING$,		attribute      =>   'evaluation_interval');
linkByVal=0
hasValue=0
templType=
hidden=0
noCompare=0
minVer=655362
condition=*EVALUATION INTERVAL & EVALUATION INTERVAL=
pathNameCnt=0
loadedObj=

[schemaCmp.13.146]
enabled=1
caption=Chain rule (CREATE)
export=1
qType=3
oType=Chain rule
query=BEGIN	DBMS_SCHEDULER.DEFINE_CHAIN_RULE (		chain_name              => '$NAME_LEVEL_2$',		condition               => $CONDITION.STRING$,		action                  => $ACTION.STRING$$,		rule_name               => {NAME.STRING}$$,		comments                => {COMMENTS.STRING}$);END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.147]
enabled=1
caption=Chain rule (DROP)
export=1
qType=3
oType=Chain rule
query=BEGIN	DBMS_SCHEDULER.DROP_CHAIN_RULE (		chain_name              => '$NAME_LEVEL_2$',		rule_name               => $NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.148]
enabled=1
caption=Chain step (CREATE)
export=1
qType=3
oType=Chain step
query=BEGIN	DBMS_SCHEDULER.DEFINE_CHAIN_STEP (		chain_name              => '$NAME_LEVEL_2$',		step_name               => $NAME.STRING$,		program_name            => $PROGRAM NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.149]
enabled=1
caption=Chain step (CREATE)
export=1
qType=3
oType=Chain step
query=BEGIN	DBMS_SCHEDULER.DEFINE_CHAIN_EVENT_STEP (		chain_name              => '$NAME_LEVEL_2$',		step_name               => $NAME.STRING$,		event_schedule_name     => $SCHEDULE NAME.STRING$$,		timeout                 => INTERVAL {TIMEOUT.STRING} DAY TO SECOND$);END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655362
condition=SCHEDULE NAME<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.150]
enabled=1
caption=Chain step (CREATE)
export=1
qType=3
oType=Chain step
query=BEGIN	DBMS_SCHEDULER.DEFINE_CHAIN_EVENT_STEP (		chain_name              => '$NAME_LEVEL_2$',		step_name               => $NAME.STRING$,		event_condition         => $EVENT CONDITION.STRING$$,		queue_spec              => {QUEUE SPECIFICATION.STRING;NULL}$$,		timeout                 => INTERVAL {TIMEOUT.STRING} DAY TO SECOND$);END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=655362
condition=EVENT CONDITION<>
pathNameCnt=0
loadedObj=

[schemaCmp.13.151]
enabled=1
caption=Chain step (DROP)
export=1
qType=3
oType=Chain step
query=BEGIN	DBMS_SCHEDULER.DROP_CHAIN_STE (		chain_name              => '$NAME_LEVEL_2$',		step_name               => $NAME.STRING$);END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=655362
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.152]
enabled=1
caption=DBMS_JOB Job (DROP)
export=1
qType=3
oType=DBMS_JOB Job
query=BEGIN	DBMS_JOB.REMOVE(job => $JOBID$); 	COMMIT;END;
linkByVal=0
hasValue=0
templType=DROP
hidden=0
noCompare=0
minVer=0
condition=
pathNameCnt=0
loadedObj=

[schemaCmp.13.153]
enabled=1
caption=Schedule (CREATE)
export=1
qType=3
oType=Schedule
query=BEGIN	DBMS_SCHEDULER.CREATE_SCHEDULE (		schedule_name          => $NAME.STRING$$,		start_date             => TO_DATE({START DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$,		repeat_interval        => $REPEAT INTERVAL.STRING;NULL$$,		end_date               => TO_DATE({END DATE.STRING}, 'YYYY-MM-DD HH24:MI:SS')$$,		comments               => {COMMENTS.STRING}$);END;
linkByVal=0
hasValue=0
templType=CREATE
hidden=0
noCompare=0
minVer=589824
condition=
pathNameCnt=0
loadedObj=

